Функция СформироватьBadDebtReport(ПараметрыДанных, КоллекцияОтборов) Экспорт
	
	ОтчетНаПериод = Отчеты.BadDebtsБазовый.Создать();
	СКД = ОтчетНаПериод.СхемаКомпоновкиДанных;
	ИмяВарианта = "Основной";
	АктивизироватьВариантОтчета(СКД, ИмяВарианта);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	ОтчетНаПериод.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	ИнициализироватьПараметрыДанных(ОтчетНаПериод.КомпоновщикНастроек, ПараметрыДанных);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиДляКомпоновкиМакета = ОтчетНаПериод.КомпоновщикНастроек.ПолучитьНастройки();
	
	ЭлементНайден = Ложь;
	
	Для Каждого ЭлементОтбора Из КоллекцияОтборов Цикл
		
		Для каждого Элемент Из НастройкиДляКомпоновкиМакета.Отбор.Элементы Цикл
		
			Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение Тогда
			
				Элемент.ВидСравнения = ЭлементОтбора.ВидСравнения;
				Элемент.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
				Элемент.Использование = Истина;
				ЭлементНайден = Истина;
			
			КонецЕсли; 
		
		КонецЦикла;
		
		Если ЭлементНайден = Ложь Тогда
		
			НовыйЭлементОтбора = НастройкиДляКомпоновкиМакета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
			НовыйЭлементОтбора.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			НовыйЭлементОтбора.Использование = Истина;
		
		Иначе
			
			ЭлементНайден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиДляКомпоновкиМакета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//Удаление строки итогов
	ТЗ.Удалить(0);
	
	Возврат ТЗ;
	
КонецФункции

Процедура АктивизироватьВариантОтчета(СКД, ИмяВарианта)
	
	Если Не ЗначениеЗаполнено(ИмяВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	Вариант = СКД.ВариантыНастроек.Найти(ИмяВарианта);
	
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыДляУдаления = Новый Массив;
	
	Для каждого ТекВариант Из СКД.ВариантыНастроек Цикл
		Если ТекВариант.Имя <> ИмяВарианта Тогда
			ВариантыДляУдаления.Добавить(ТекВариант);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекВариант Из ВариантыДляУдаления Цикл
		СКД.ВариантыНастроек.Удалить(ТекВариант);
	КонецЦикла;
	
КонецПроцедуры


Процедура ИнициализироватьПараметрыДанных(КомпоновщикНастроек, ПараметрыДанных)
	
	Если ПараметрыДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекПараметр Из ПараметрыДанных Цикл
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ТекПараметр.Ключ);
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ТекПараметр.Значение;
			Параметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
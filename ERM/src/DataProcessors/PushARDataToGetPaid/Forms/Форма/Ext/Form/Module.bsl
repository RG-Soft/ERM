
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Если Не ПустаяСтрока(КаталогВыгрузки) Тогда
		ДиалогВыбора.Каталог = КаталогВыгрузки;
	КонецЕсли;
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогВыгрузки = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере()
	
	//ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	//СоздатьКаталог(ИмяКаталога);
	//ПутьКФайлу = ИмяКаталога + "\DSS.txt";
	////ФайлДанных.Записать(ПутьКФайлу);
	//ТД = Новый ТекстовыйДокумент;
	//ТД.Записать(ПутьКФайлу);
	//
	//ПутьСхемы = ИмяКаталога+"\schema.ini";
	//ФайлСхемы = Новый ТекстовыйДокумент;
	////ФайлСхемы.ДобавитьСтроку("["+ "DSS.txt" +"]" + Символы.ПС + "DecimalSymbol=.");
	//ФайлСхемы.УстановитьТекст(Обработки.PushARDataToGetPaid.ПолучитьМакет("Schema").ПолучитьТекст());
	//ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	//
	//Connection = Новый COMОбъект("ADODB.Connection");
	//
	//Попытка
	//	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;""";
	//	Connection.Open(СтрокаПодключения);
	//Исключение
	//	Попытка
	//		СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1""";
	//		Connection.Open(СтрокаПодключения);
	//	Исключение
	//		ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
	//	КонецПопытки;		
	//КонецПопытки;
	//
	//Command = Новый COMОбъект("ADODB.Command");
	//Command.ActiveConnection = Connection;
	//Command.CommandType = 1;
	//
	//// Запрос с параметрами
	//Command.CommandText = "
	//	|PARAMETERS @Test1 char(10), @Test2 char(30), @Test3 char(20), @Test4 date, @Test5 double; INSERT INTO [DSS] VALUES (@Test1, @Test2, @Test3, @Test4, @Test5)";
	//	
	//// Создадим коллекцию параметров
	//Параметр = Command.CreateParameter("@Test1", 129, 1, 10);
	//Command.Parameters.Append(Параметр);
	//Параметр = Command.CreateParameter("@Test2", 129, 1, 30);
	//Command.Parameters.Append(Параметр);
	//Параметр = Command.CreateParameter("@Test3", 129, 1, 20);
	//Command.Parameters.Append(Параметр);
	//Параметр = Command.CreateParameter("@Test4", 133, 1, 8);
	//Command.Parameters.Append(Параметр);
	//Параметр = Command.CreateParameter("@Test5", 5, 1, 20);
	//Command.Parameters.Append(Параметр);
	//
	//// Заполняем таблицу данными выборки
	////Заполняем параметры значениями выборки
	//Command.Parameters("@Test1").Value = "vt11";
	//Command.Parameters("@Test2").Value = "vt12";
	//Command.Parameters("@Test3").Value = "vt13";
	//Command.Parameters("@Test4").Value = ТекущаяДата();
	//Command.Parameters("@Test5").Value = 111111111111111111111111111111234567891234.123456789123456;
	//Command.Execute();
	//
	//Command.Parameters("@Test1").Value = "vt21";
	//Command.Parameters("@Test2").Value = "vt22";
	//Command.Parameters("@Test3").Value = "vt23";
	//Command.Parameters("@Test4").Value = ТекущаяДата();
	//Command.Parameters("@Test4").Value = ТекущаяДата();
	//Command.Parameters("@Test5").Value = 911111111111111111111111111111234567891234.923456789123456;
	//Command.Execute();

	//// Закрываем соединение
	//Command = Неопределено;
	//Connection.Close();
	//Connection = Неопределено;

	ВыгрузитьARCUST();
	ВыгрузитьARMAST();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьARCUST()
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьARMAST()
	
	ОписаниеСтруктурыARMAST = ПолучитьОписаниеСтруктурыПриемника("ARMAST");
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\ARMAST.txt";
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.УстановитьТекст(ПолучитьТекстФайлаСхемы("ARMAST", ОписаниеСтруктурыARMAST));
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=No;IMEX=0;Readonly=False""";
		Connection.CursorLocation = 3;
		Connection.Mode = 3;
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=No;IMEX=0;Readonly=False""";
			Connection.Mode = 3;
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	// создадим таблицу
	Connection.Execute(ПолучитьТекстКомандыСозданияТаблицы("ARMAST", ОписаниеСтруктурыARMAST));
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	
	Command.CommandText = ПолучитьТекстКомандыЗапроса("ARMAST", ОписаниеСтруктурыARMAST);
	СоздатьКоллекциюПараметровКоманды(Command, ОписаниеСтруктурыARMAST);
	
	ТаблицаДанныхARMAST = ПолучитьТаблицуДанныхARMAST();
	КоллекцияКолонокРезультата = ТаблицаДанныхARMAST.Колонки;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхARMAST Цикл
		
		Для каждого ТекКолонка Из КоллекцияКолонокРезультата Цикл
			
			ТекЗначение = СтрокаТаблицы[ТекКолонка.Имя];
			Command.Parameters("@" + ТекКолонка.Имя).Value = ?(ТипЗнч(ТекЗначение) = Тип("Строка"), СокрЛП(ТекЗначение), ТекЗначение);
			
		КонецЦикла;
		
		Command.Execute();
		
	КонецЦикла;
	
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), УникальныйИдентификатор);
	
	// Закрываем соединение
	Command = Неопределено;
	Connection.Close();
	Connection = Неопределено;
	
	УдалитьФайлы(ИмяКаталога);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДанныхARMAST()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	BilledARОстатки.Client.Код КАК CUSTNO,
	|	BilledARОстатки.Invoice.Номер КАК INVNO,
	|	BilledARОстатки.AmountОстаток КАК BALANCE,
	|	BilledARОстатки.Invoice.Amount КАК INVAMT,
	|	""I"" КАК ARSTAT,
	|	BilledARОстатки.Invoice.Amount КАК TRANORIG,
	|	BilledARОстатки.AmountОстаток КАК TRANBAL,
	|	BilledARОстатки.Invoice.Amount КАК LOCORIG,
	|	BilledARОстатки.AmountОстаток КАК LOCBAL,
	|	BilledARОстатки.Source,
	|	BilledARОстатки.Client,
	|	BilledARОстатки.Invoice,
	|	BilledARОстатки.Company,
	|	BilledARОстатки.Currency
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.BilledAR.Остатки КАК BilledARОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	UnallocatedCashОстатки.Client.Код,
	|	UnallocatedCashОстатки.CashBatch.Номер,
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.CashBatch.Amount,
	|	""I"",
	|	UnallocatedCashОстатки.CashBatch.Amount,
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.CashBatch.Amount,
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.Source,
	|	UnallocatedCashОстатки.Client,
	|	UnallocatedCashОстатки.CashBatch,
	|	UnallocatedCashОстатки.Company,
	|	UnallocatedCashОстатки.Currency
	|ИЗ
	|	РегистрНакопления.UnallocatedCash.Остатки(, ) КАК UnallocatedCashОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ОбъектПриемника,
	|	МАКСИМУМ(НастройкаСинхронизацииОбъектовСВнешнимиСистемами.Период) КАК Период,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипСоответствия
	|ПОМЕСТИТЬ ВТ_ИдентификаторыКлиентовМаксимальныеДаты
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипСоответствия = ВТ_Остатки.Source
	|			И (НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client))
	|			И НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ОбъектПриемника = ВТ_Остатки.Client
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ОбъектПриемника,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипСоответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИдентификаторыКлиентовМаксимальныеДаты.ОбъектПриемника,
	|	ВТ_ИдентификаторыКлиентовМаксимальныеДаты.ТипСоответствия,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.Идентификатор
	|ПОМЕСТИТЬ ВТ_ИдентификаторыКлиентов
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыКлиентовМаксимальныеДаты КАК ВТ_ИдентификаторыКлиентовМаксимальныеДаты
	|		ПО НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипСоответствия = ВТ_ИдентификаторыКлиентовМаксимальныеДаты.ТипСоответствия
	|			И НастройкаСинхронизацииОбъектовСВнешнимиСистемами.Период = ВТ_ИдентификаторыКлиентовМаксимальныеДаты.Период
	|			И НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ОбъектПриемника = ВТ_ИдентификаторыКлиентовМаксимальныеДаты.ОбъектПриемника
	|			И (НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутренниеКурсыВалютСрезПоследних.Валюта,
	|	ВнутренниеКурсыВалютСрезПоследних.Курс,
	|	ВнутренниеКурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ ВТ_ВнутренниеКурсыВалют
	|ИЗ
	|	РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(
	|			,
	|			Валюта В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_Остатки.Currency
	|				ИЗ
	|					ВТ_Остатки КАК ВТ_Остатки)) КАК ВнутренниеКурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|			ТОГДА ВТ_Остатки.CUSTNO + ""-101""
	|		ИНАЧЕ ВТ_Остатки.CUSTNO
	|	КОНЕЦ КАК CUSTNO,
	|	ВТ_Остатки.INVNO,
	|	ВТ_Остатки.Company.Код КАК CompanyCode,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Currency = &ВалютаUSD
	|			ТОГДА ВТ_Остатки.BALANCE
	|		ИНАЧЕ ВТ_Остатки.BALANCE / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность
	|	КОНЕЦ КАК BALANCE,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Currency = &ВалютаUSD
	|			ТОГДА ВТ_Остатки.INVAMT
	|		ИНАЧЕ ВТ_Остатки.INVAMT / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность
	|	КОНЕЦ КАК INVAMT,
	|	ВТ_Остатки.ARSTAT,
	|	ВТ_Остатки.TRANORIG,
	|	ВТ_Остатки.TRANBAL,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Остатки.Currency = &ВалютаUSD
	|						ТОГДА ВТ_Остатки.INVAMT
	|					ИНАЧЕ ВТ_Остатки.INVAMT / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_Остатки.Currency = &ВалютаРубли
	|					ТОГДА ВТ_Остатки.INVAMT
	|				ИНАЧЕ ВТ_Остатки.INVAMT / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность * &КурсОтносительноРубля / &КратностьОтносительноРубля
	|			КОНЕЦ
	|	КОНЕЦ КАК LOCORIG,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Остатки.Currency = &ВалютаUSD
	|						ТОГДА ВТ_Остатки.BALANCE
	|					ИНАЧЕ ВТ_Остатки.BALANCE / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_Остатки.Currency = &ВалютаРубли
	|					ТОГДА ВТ_Остатки.BALANCE
	|				ИНАЧЕ ВТ_Остатки.BALANCE / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность * &КурсОтносительноРубля / &КратностьОтносительноРубля
	|			КОНЕЦ
	|	КОНЕЦ КАК LOCBAL
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыКлиентов КАК ВТ_ИдентификаторыКлиентов
	|		ПО ВТ_Остатки.Client = ВТ_ИдентификаторыКлиентов.ОбъектПриемника
	|			И ВТ_Остатки.Source = ВТ_ИдентификаторыКлиентов.ТипСоответствия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнутренниеКурсыВалют КАК ВТ_ВнутренниеКурсыВалют
	|		ПО ВТ_Остатки.Currency = ВТ_ВнутренниеКурсыВалют.Валюта";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура СоздатьКоллекциюПараметровКоманды(Command, Знач ОписаниеСтруктурыПриемника)
	
	Для каждого ЭлементСтруктурыПриемника Из ОписаниеСтруктурыПриемника Цикл
		Параметр = Command.CreateParameter("@" + ЭлементСтруктурыПриемника.ИмяПоля, ЭлементСтруктурыПриемника.ТипПараметраЗапросаЧисло, 1, ЭлементСтруктурыПриемника.Ширина);
		Если ЭлементСтруктурыПриемника.Разрядность <> 0 Тогда
			Параметр.Precision = ЭлементСтруктурыПриемника.Разрядность;
		КонецЕсли;
		// определим значение по-умолчанию
		Параметр.Value = ПолучитьЗначениеТипаПоУмолчанию(ЭлементСтруктурыПриемника.Тип);
		Command.Parameters.Append(Параметр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтруктурыПриемника(ИмяПриемникаДанных)
	
	ОписаниеСтруктурыПриемника = Новый ТаблицаЗначений;
	ОписаниеСтруктурыПриемника.Колонки.Добавить("ИмяПоля");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("Тип");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("Ширина");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("Разрядность");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("ТипПараметраЗапроса");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("ТипПараметраЗапросаЧисло");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("ТипПоляСхемы");
	
	Макет = Обработки.PushARDataToGetPaid.ПолучитьМакет(ИмяПриемникаДанных);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	Для ТекНомерСтроки = 2 По ВысотаТаблицы Цикл
		
		ИмяПоля = Макет.Область(ТекНомерСтроки, 1).Текст;
		ТипПоля = Макет.Область(ТекНомерСтроки, 2).Текст;
		ШиринаПоля = Число(Макет.Область(ТекНомерСтроки, 3).Текст);
		РазрядностьПоля = Число(Макет.Область(ТекНомерСтроки, 4).Текст);
		
		НоваяСтрокаОписания = ОписаниеСтруктурыПриемника.Добавить();
		НоваяСтрокаОписания.ИмяПоля = ИмяПоля;
		НоваяСтрокаОписания.Тип = ТипПоля;
		НоваяСтрокаОписания.Ширина = ШиринаПоля;
		НоваяСтрокаОписания.Разрядность = РазрядностьПоля;
		НоваяСтрокаОписания.ТипПараметраЗапроса = ПолучитьТипПараметраЗапроса(ТипПоля);
		НоваяСтрокаОписания.ТипПараметраЗапросаЧисло = ПолучитьТипПараметраЗапросаЧисло(ТипПоля);
		НоваяСтрокаОписания.ТипПоляСхемы = ПолучитьТипПоляСхемы(ТипПоля);
		
	КонецЦикла;
	
	Возврат ОписаниеСтруктурыПриемника;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстФайлаСхемы(Знач ИмяПриемникаДанных, Знач ОписаниеСтруктурыПриемника)
	
	ТекстФайлаСхемы = "[" + ИмяПриемникаДанных + ".txt]" + Символы.ПС;
	
	// настройки формата
	ТекстФайлаСхемы = ТекстФайлаСхемы + "Format=FixedLength" + Символы.ПС;
	ТекстФайлаСхемы = ТекстФайлаСхемы + "DecimalSymbol=." + Символы.ПС;
	ТекстФайлаСхемы = ТекстФайлаСхемы + "DateTimeFormat=""MM/DD/YY""" + Символы.ПС;
	
	// колонки
	ТекНомерКолонки = 1;
	Для каждого ЭлементСтруктурыПриемника Из ОписаниеСтруктурыПриемника Цикл
		
		ТекстФайлаСхемы = ТекстФайлаСхемы + "Col" + Строка(ТекНомерКолонки) 
			+ "=" + ЭлементСтруктурыПриемника.ИмяПоля + " " 
			+ ЭлементСтруктурыПриемника.ТипПоляСхемы + " Width "
			+ Строка(ЭлементСтруктурыПриемника.Ширина) + Символы.ПС;
			
		ТекНомерКолонки = ТекНомерКолонки + 1;
		
	КонецЦикла;
	
	Возврат ТекстФайлаСхемы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстКомандыЗапроса(Знач ИмяПриемникаДанных, Знач ОписаниеСтруктурыПриемника)
	
	ТекстКомандыЧасть1 = "PARAMETERS ";
	ТекстКомандыЧасть2 = "INSERT INTO [" + ИмяПриемникаДанных + "] VALUES (";
	
	Для каждого ЭлементСтруктурыПриемника Из ОписаниеСтруктурыПриемника Цикл
		
		ТекстКомандыЧасть1 = ТекстКомандыЧасть1 + "@" + ЭлементСтруктурыПриемника.ИмяПоля + " "
			+ ЭлементСтруктурыПриемника.ТипПараметраЗапроса + ?(ЭлементСтруктурыПриемника.Тип = "C", "("
			+ ЭлементСтруктурыПриемника.Ширина + ")", "") + ", ";
		
		ТекстКомандыЧасть2 = ТекстКомандыЧасть2 + "@" + ЭлементСтруктурыПриемника.ИмяПоля + ", ";
		
	КонецЦикла;
	
	ТекстКомандыЧасть1 = Лев(ТекстКомандыЧасть1, СтрДлина(ТекстКомандыЧасть1) - 2);
	ТекстКомандыЧасть2 = Лев(ТекстКомандыЧасть2, СтрДлина(ТекстКомандыЧасть2) - 2) + ")";
	
	Возврат ТекстКомандыЧасть1 + "; " + ТекстКомандыЧасть2;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстКомандыСозданияТаблицы(Знач ИмяПриемникаДанных, Знач ОписаниеСтруктурыПриемника)
	
	ТекстКоманды = "CREATE TABLE [" + ИмяПриемникаДанных + ".txt] (";
	
	Для каждого ЭлементСтруктурыПриемника Из ОписаниеСтруктурыПриемника Цикл
		
		ТекстКоманды = ТекстКоманды + ЭлементСтруктурыПриемника.ИмяПоля + " "
			+ ЭлементСтруктурыПриемника.ТипПараметраЗапроса + ?(ЭлементСтруктурыПриемника.Тип = "C", "("
			+ ЭлементСтруктурыПриемника.Ширина + ")", "") + ", ";
		
	КонецЦикла;
	
	ТекстКоманды = Лев(ТекстКоманды, СтрДлина(ТекстКоманды) - 2) + ")";
	
	Возврат ТекстКоманды;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипПараметраЗапросаЧисло(ТипПоля)
	
	// TODO RGS AGorlenko 24.08.2016: переделать как вариант с кэшированием
	
	Если ТипПоля = "C" Тогда
		Возврат 129;
	ИначеЕсли ТипПоля = "D" Тогда
		Возврат 133;
	ИначеЕсли ТипПоля = "N" Тогда
		Возврат 5;
	Иначе
		ВызватьИсключение "Unknown type " + ТипПоля;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипПараметраЗапроса(ТипПоля)
	
	// TODO RGS AGorlenko 24.08.2016: переделать как вариант с кэшированием
	
	Если ТипПоля = "C" Тогда
		Возврат "char";
	ИначеЕсли ТипПоля = "D" Тогда
		Возврат "date";
	ИначеЕсли ТипПоля = "N" Тогда
		Возврат "double";
	Иначе
		ВызватьИсключение "Unknown type " + ТипПоля;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеТипаПоУмолчанию(ТипПоля)
	
	// TODO RGS AGorlenko 24.08.2016: переделать как вариант с кэшированием
	
	Если ТипПоля = "C" Тогда
		Возврат "";
	ИначеЕсли ТипПоля = "D" Тогда
		Возврат '00010101';
	ИначеЕсли ТипПоля = "N" Тогда
		Возврат 0;
	Иначе
		ВызватьИсключение "Unknown type " + ТипПоля;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипПоляСхемы(ТипПоля)
	
	// TODO RGS AGorlenko 24.08.2016: переделать как вариант с кэшированием
	
	Если ТипПоля = "C" Тогда
		Возврат "Text";
	ИначеЕсли ТипПоля = "D" Тогда
		Возврат "Date";
	ИначеЕсли ТипПоля = "N" Тогда
		Возврат "Double";
	Иначе
		ВызватьИсключение "Unknown type " + ТипПоля;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	ВыгрузитьДанныеНаСервере();
	
	ДД = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	ДД.Записать(КаталогВыгрузки + "/ARMAST.txt");
	
КонецПроцедуры

&НаСервере
Процедура Команда1НаСервере()
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\DSS.txt";
	//ФайлДанных.Записать(ПутьКФайлу);
	//ТД = Новый ТекстовыйДокумент;
	//ТД.УстановитьТекст("тест");
	//ТД.Записать(ПутьКФайлу);
	//ТД = Неопределено;
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	////ФайлСхемы.ДобавитьСтроку("["+ "DSS.txt" +"]" + Символы.ПС + "DecimalSymbol=.");
	ФайлСхемы.УстановитьТекст(Обработки.PushARDataToGetPaid.ПолучитьМакет("Schema").ПолучитьТекст());
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=No;IMEX=0;Readonly=False""";
		Connection.CursorLocation = 3;
		Connection.Mode = 3;
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=No;IMEX=0;Readonly=False""";
			Connection.Mode = 3;
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;		
	КонецПопытки;
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	
	//Command.CommandText = "CREATE TABLE DSS1 (Test1 char(10), Test2 char(30), Test3 char(20), Test4 date, Test5 double)";
	//Command.CommandText = "DROP TABLE [DSS1]";
	//Command.Execute();
	
	Connection.Execute("CREATE TABLE [DSS.txt] (Test1 char(10), Test2 char(30), Test3 char(20), Test4 date, Test5 double)");
	//Command.Execute();
	
	// Запрос с параметрами
	Command.CommandText = "PARAMETERS @Test1 char(10), @Test2 char(30), @Test3 char(20), @Test4 date, @Test5 double; INSERT INTO [DSS] VALUES (@Test1, @Test2, @Test3, @Test4, @Test5)";
		
	// Создадим коллекцию параметров
	Параметр = Command.CreateParameter("@Test1", 129, 1, 10);
	Command.Parameters.Append(Параметр);
	Параметр = Command.CreateParameter("@Test2", 129, 1, 30);
	Command.Parameters.Append(Параметр);
	Параметр = Command.CreateParameter("@Test3", 129, 1, 20);
	Command.Parameters.Append(Параметр);
	Параметр = Command.CreateParameter("@Test4", 133, 1, 8);
	Command.Parameters.Append(Параметр);
	Параметр = Command.CreateParameter("@Test5", 5, 1, 20);
	Command.Parameters.Append(Параметр);
	
	// Заполняем таблицу данными выборки
	//Заполняем параметры значениями выборки
	Command.Parameters("@Test1").Value = "vt11";
	Command.Parameters("@Test2").Value = "vt12";
	Command.Parameters("@Test3").Value = "vt13";
	Command.Parameters("@Test4").Value = ТекущаяДата();
	Command.Parameters("@Test5").Value = 111111111111111111111111111111234567891234.123456789123456;
	Command.Execute();
	
	//Command.Parameters("@Test1").Value = "vt21";
	//Command.Parameters("@Test2").Value = "vt22";
	//Command.Parameters("@Test3").Value = "vt23";
	//Command.Parameters("@Test4").Value = ТекущаяДата();
	//Command.Parameters("@Test4").Value = ТекущаяДата();
	//Command.Parameters("@Test5").Value = 911111111111111111111111111111234567891234.923456789123456;
	//Command.Execute();

	Command.CommandText = "DELETE FROM [DSS.txt] WHERE Test1 = """"";
	Command.Execute();
	
	// Закрываем соединение
	Command = Неопределено;
	Connection.Close();
	Connection = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	Команда1НаСервере();
КонецПроцедуры


&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Если Не ПустаяСтрока(КаталогВыгрузки) Тогда
		ДиалогВыбора.Каталог = КаталогВыгрузки;
	КонецЕсли;
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогВыгрузки = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере()
	
	ВыгрузитьARCUST();
	ВыгрузитьARMAST();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьARCUST()
	
	ОписаниеСтруктурыARCUST = ПолучитьОписаниеСтруктурыПриемника("ARCUST");
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\ARCUST.txt";
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.УстановитьТекст(ПолучитьТекстФайлаСхемы("ARCUST", ОписаниеСтруктурыARCUST, ФорматФайла));
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=No;IMEX=0;Readonly=False""";
		Connection.CursorLocation = 3;
		Connection.Mode = 3;
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=No;IMEX=0;Readonly=False""";
			Connection.Mode = 3;
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	// создадим таблицу
	Connection.Execute(ПолучитьТекстКомандыСозданияТаблицы("ARCUST", ОписаниеСтруктурыARCUST));
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	
	Command.CommandText = ПолучитьТекстКомандыЗапроса("ARCUST", ОписаниеСтруктурыARCUST);
	СоздатьКоллекциюПараметровКоманды(Command, ОписаниеСтруктурыARCUST);
	
	ТаблицаДанныхARCUST = ПолучитьТаблицуДанныхARCUST();
	КоллекцияКолонокРезультата = ТаблицаДанныхARCUST.Колонки;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхARCUST Цикл
		
		Для каждого ТекКолонка Из КоллекцияКолонокРезультата Цикл
			
			ТекЗначение = СтрокаТаблицы[ТекКолонка.Имя];
			Command.Parameters("@" + ТекКолонка.Имя).Value = ?(ТипЗнч(ТекЗначение) = Тип("Строка"), СокрЛП(ТекЗначение), ТекЗначение);
			
		КонецЦикла;
		
		Command.Execute();
		
	КонецЦикла;
	
	АдресФайлаВХранилищеARCUST = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), УникальныйИдентификатор);
	
	// Закрываем соединение
	Command = Неопределено;
	Connection.Close();
	Connection = Неопределено;
	
	УдалитьФайлы(ИмяКаталога);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьARMAST()
	
	ОписаниеСтруктурыARMAST = ПолучитьОписаниеСтруктурыПриемника("ARMAST");
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\ARMAST.txt";
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.УстановитьТекст(ПолучитьТекстФайлаСхемы("ARMAST", ОписаниеСтруктурыARMAST, ФорматФайла));
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=No;IMEX=0;Readonly=False""";
		Connection.CursorLocation = 3;
		Connection.Mode = 3;
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=No;IMEX=0;Readonly=False""";
			Connection.Mode = 3;
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	// создадим таблицу
	Connection.Execute(ПолучитьТекстКомандыСозданияТаблицы("ARMAST", ОписаниеСтруктурыARMAST));
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	
	Command.CommandText = ПолучитьТекстКомандыЗапроса("ARMAST", ОписаниеСтруктурыARMAST);
	СоздатьКоллекциюПараметровКоманды(Command, ОписаниеСтруктурыARMAST);
	
	ТаблицаДанныхARMAST = ПолучитьТаблицуДанныхARMAST();
	КоллекцияКолонокРезультата = ТаблицаДанныхARMAST.Колонки;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхARMAST Цикл
		
		Для каждого ТекКолонка Из КоллекцияКолонокРезультата Цикл
			
			ТекЗначение = СтрокаТаблицы[ТекКолонка.Имя];
			Command.Parameters("@" + ТекКолонка.Имя).Value = ?(ТипЗнч(ТекЗначение) = Тип("Строка"), СокрЛП(ТекЗначение), ТекЗначение);
			
		КонецЦикла;
		
		Command.Execute();
		
	КонецЦикла;
	
	АдресФайлаВХранилищеARMAST = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), УникальныйИдентификатор);
	
	// Закрываем соединение
	Command = Неопределено;
	Connection.Close();
	Connection = Неопределено;
	
	УдалитьФайлы(ИмяКаталога);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДанныхARCUST()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнутренниеКурсыВалютСрезПоследних.Валюта,
	|	ВнутренниеКурсыВалютСрезПоследних.Курс,
	|	ВнутренниеКурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ ВТ_ВнутренниеКурсыВалют
	|ИЗ
	|	РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(, ) КАК ВнутренниеКурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	BilledARОстатки.Source,
	|	BilledARОстатки.Client,
	|	BilledARОстатки.Currency КАК Currency,
	|	СУММА(ВЫБОР
	|			КОГДА BilledARОстатки.Currency = &ВалютаUSD
	|				ТОГДА BilledARОстатки.AmountОстаток
	|			ИНАЧЕ ВЫРАЗИТЬ(BilledARОстатки.AmountОстаток / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК BALANCE,
	|	BilledARОстатки.Company.Код,
	|	BilledARОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode КАК CountryCode,
	|	BilledARОстатки.Invoice.ClientID КАК ClientID,
	|	BilledARОстатки.Invoice
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.BilledAR.Остатки(
	|			,
	|			Source В (&Sources)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.NonTrade)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)) КАК BilledARОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнутренниеКурсыВалют КАК ВТ_ВнутренниеКурсыВалют
	|		ПО BilledARОстатки.Currency = ВТ_ВнутренниеКурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	BilledARОстатки.Source,
	|	BilledARОстатки.Client,
	|	BilledARОстатки.Currency,
	|	BilledARОстатки.Company.Код,
	|	BilledARОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode,
	|	BilledARОстатки.Invoice.ClientID,
	|	BilledARОстатки.Invoice
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	UnbilledARОстатки.Source,
	|	UnbilledARОстатки.Client,
	|	UnbilledARОстатки.Currency,
	|	СУММА(ВЫБОР
	|			КОГДА UnbilledARОстатки.Currency = &ВалютаUSD
	|				ТОГДА UnbilledARОстатки.AmountОстаток
	|			ИНАЧЕ ВЫРАЗИТЬ(UnbilledARОстатки.AmountОстаток / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	UnbilledARОстатки.Company.Код,
	|	UnbilledARОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode,
	|	UnbilledARОстатки.SalesOrder.ClientID,
	|	UnbilledARОстатки.SalesOrder
	|ИЗ
	|	РегистрНакопления.UnbilledAR.Остатки(
	|			,
	|			Source В (&Sources)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.NonTrade)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)) КАК UnbilledARОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнутренниеКурсыВалют КАК ВТ_ВнутренниеКурсыВалют
	|		ПО UnbilledARОстатки.Currency = ВТ_ВнутренниеКурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	UnbilledARОстатки.Source,
	|	UnbilledARОстатки.Client,
	|	UnbilledARОстатки.Currency,
	|	UnbilledARОстатки.Company.Код,
	|	UnbilledARОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode,
	|	UnbilledARОстатки.SalesOrder.ClientID,
	|	UnbilledARОстатки.SalesOrder
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	UnallocatedCashОстатки.Source,
	|	UnallocatedCashОстатки.Client,
	|	UnallocatedCashОстатки.Currency,
	|	СУММА(ВЫБОР
	|			КОГДА UnallocatedCashОстатки.Currency = &ВалютаUSD
	|				ТОГДА UnallocatedCashОстатки.AmountОстаток
	|			ИНАЧЕ ВЫРАЗИТЬ(UnallocatedCashОстатки.AmountОстаток / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	UnallocatedCashОстатки.Company.Код,
	|	UnallocatedCashОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode,
	|	UnallocatedCashОстатки.CashBatch.ClientID,
	|	UnallocatedCashОстатки.CashBatch
	|ИЗ
	|	РегистрНакопления.UnallocatedCash.Остатки(
	|			,
	|			Source В (&Sources)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.NonTrade)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)) КАК UnallocatedCashОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнутренниеКурсыВалют КАК ВТ_ВнутренниеКурсыВалют
	|		ПО UnallocatedCashОстатки.Currency = ВТ_ВнутренниеКурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	UnallocatedCashОстатки.Source,
	|	UnallocatedCashОстатки.Client,
	|	UnallocatedCashОстатки.Currency,
	|	UnallocatedCashОстатки.Company.Код,
	|	UnallocatedCashОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode,
	|	UnallocatedCashОстатки.CashBatch.ClientID,
	|	UnallocatedCashОстатки.CashBatch
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТипыСоответствий.Ссылка,
	|	ИерархияКонтрагентовСрезПоследних.ГоловнойКонтрагент,
	|	"""",
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	РегистрСведений.ИерархияКонтрагентов.СрезПоследних КАК ИерархияКонтрагентовСрезПоследних,
	|	Перечисление.ТипыСоответствий КАК ТипыСоответствий
	|ГДЕ
	|	ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.ClientID ЕСТЬ NULL 
	|			ТОГДА """"
	|		КОГДА ВТ_Остатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|			ТОГДА ВТ_Остатки.ClientID + ""-101""
	|		ИНАЧЕ ВТ_Остатки.ClientID
	|	КОНЕЦ КАК CUSTNO,
	|	ВТ_Остатки.Client.CRMID КАК PARENT,
	|	ВТ_Остатки.Client.Наименование КАК COMPANY,
	|	ВТ_Остатки.Client.CreditLimit КАК CRD_LIMIT,
	|	ВТ_Остатки.CompanyКод,
	|	ВТ_Остатки.CountryCode,
	|	СУММА(ВТ_Остатки.BALANCE) КАК BALANCE,
	|	""RC13"" КАК TERR
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_Остатки.Client
	|					ИЗ
	|						ВТ_Остатки КАК ВТ_Остатки)) КАК ИерархияКонтрагентовСрезПоследних
	|		ПО ВТ_Остатки.Client = ИерархияКонтрагентовСрезПоследних.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнутренниеКурсыВалют КАК ВТ_ВнутренниеКурсыВалют
	|		ПО ВТ_Остатки.Currency = ВТ_ВнутренниеКурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Client.CRMID,
	|	ВТ_Остатки.Client.Наименование,
	|	ВТ_Остатки.Client.CreditLimit,
	|	ВТ_Остатки.CompanyКод,
	|	ВТ_Остатки.CountryCode,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.ClientID ЕСТЬ NULL 
	|			ТОГДА """"
	|		КОГДА ВТ_Остатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|			ТОГДА ВТ_Остатки.ClientID + ""-101""
	|		ИНАЧЕ ВТ_Остатки.ClientID
	|	КОНЕЦ";
	
	Sources = Новый Массив;
	//Sources.Добавить(Перечисления.ТипыСоответствий.Lawson);
	//Sources.Добавить(Перечисления.ТипыСоответствий.OracleMI);
	Sources.Добавить(Перечисления.ТипыСоответствий.HOBs);
	Запрос.УстановитьПараметр("Sources", Sources);
	Запрос.УстановитьПараметр("ВалютаUSD", Константы.rgsВалютаUSD.Получить());
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.CUSTNO) Тогда
			СтрокаТаблицы.CUSTNO = СтрокаТаблицы.CUSTNO + "-" + СтрокаТаблицы.CountryCode + "-" + Строка(СтрокаТаблицы.CompanyКод);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Удалить("CompanyКод");
	ТаблицаДанных.Колонки.Удалить("CountryCode");
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДанныхARMAST()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	BilledARОстатки.Client.Код КАК CUSTNO,
	|	BilledARОстатки.Invoice.DocNumber КАК INVNO,
	|	BilledARОстатки.AmountОстаток КАК BALANCE,
	|	BilledARОстатки.Invoice.Amount КАК INVAMT,
	|	""I"" КАК ARSTAT,
	|	BilledARОстатки.Invoice.Amount КАК TRANORIG,
	|	BilledARОстатки.AmountОстаток КАК TRANBAL,
	|	BilledARОстатки.Invoice.Amount КАК LOCORIG,
	|	BilledARОстатки.AmountОстаток КАК LOCBAL,
	|	BilledARОстатки.Source,
	|	BilledARОстатки.Client,
	|	BilledARОстатки.Invoice,
	|	BilledARОстатки.Company,
	|	BilledARОстатки.Currency,
	|	BilledARОстатки.Invoice.Дата КАК INVDTE,
	|	BilledARОстатки.Invoice.Currency.Наименование КАК TRANCURR,
	|	BilledARОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode КАК CountryCode,
	|	BilledARОстатки.Invoice.ClientID КАК ClientID
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.BilledAR.Остатки(
	|			,
	|			Source В (&Sources)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.NonTrade)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)) КАК BilledARОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	UnallocatedCashОстатки.Client.Код,
	|	UnallocatedCashОстатки.CashBatch.PaymentNumber,
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.CashBatch.Amount,
	|	ВЫБОР
	|		КОГДА UnallocatedCashОстатки.CashBatch.Prepayment
	|			ТОГДА ""O""
	|		ИНАЧЕ ""U""
	|	КОНЕЦ,
	|	UnallocatedCashОстатки.CashBatch.Amount,
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.CashBatch.Amount,
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.Source,
	|	UnallocatedCashОстатки.Client,
	|	UnallocatedCashОстатки.CashBatch,
	|	UnallocatedCashОстатки.Company,
	|	UnallocatedCashОстатки.Currency,
	|	UnallocatedCashОстатки.CashBatch.Дата,
	|	UnallocatedCashОстатки.CashBatch.Currency.Наименование,
	|	UnallocatedCashОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode,
	|	UnallocatedCashОстатки.CashBatch.ClientID
	|ИЗ
	|	РегистрНакопления.UnallocatedCash.Остатки(
	|			,
	|			Source В (&Sources)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.NonTrade)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)) КАК UnallocatedCashОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	UnbilledARОстатки.Client.Код,
	|	UnbilledARОстатки.SalesOrder.Номер,
	|	UnbilledARОстатки.AmountОстаток,
	|	UnbilledARОстатки.SalesOrder.Amount,
	|	""O"",
	|	UnbilledARОстатки.SalesOrder.Amount,
	|	UnbilledARОстатки.AmountОстаток,
	|	UnbilledARОстатки.SalesOrder.Amount,
	|	UnbilledARОстатки.AmountОстаток,
	|	UnbilledARОстатки.Source,
	|	UnbilledARОстатки.Client,
	|	UnbilledARОстатки.SalesOrder,
	|	UnbilledARОстатки.Company,
	|	UnbilledARОстатки.Currency,
	|	UnbilledARОстатки.SalesOrder.Дата,
	|	UnbilledARОстатки.SalesOrder.Currency.Наименование,
	|	UnbilledARОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель.CountryCode,
	|	UnbilledARОстатки.SalesOrder.ClientID
	|ИЗ
	|	РегистрНакопления.UnbilledAR.Остатки(
	|			,
	|			Source В (&Sources)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.NonTrade)
	|				И Client <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)) КАК UnbilledARОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутренниеКурсыВалютСрезПоследних.Валюта,
	|	ВнутренниеКурсыВалютСрезПоследних.Курс,
	|	ВнутренниеКурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ ВТ_ВнутренниеКурсыВалют
	|ИЗ
	|	РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(
	|			,
	|			Валюта В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_Остатки.Currency
	|				ИЗ
	|					ВТ_Остатки КАК ВТ_Остатки)) КАК ВнутренниеКурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.ClientID ЕСТЬ NULL 
	|				ИЛИ ВТ_Остатки.ClientID = """"
	|			ТОГДА """"
	|		КОГДА ВТ_Остатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|			ТОГДА ВТ_Остатки.ClientID + ""-101""
	|		ИНАЧЕ ВТ_Остатки.ClientID
	|	КОНЕЦ КАК CUSTNO,
	|	ВТ_Остатки.INVNO,
	|	ВТ_Остатки.Company.Код КАК CompanyCode,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Currency = &ВалютаUSD
	|			ТОГДА ВТ_Остатки.BALANCE
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_Остатки.BALANCE / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК BALANCE,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Currency = &ВалютаUSD
	|			ТОГДА ВТ_Остатки.INVAMT
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_Остатки.INVAMT / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК INVAMT,
	|	ВТ_Остатки.ARSTAT,
	|	ВТ_Остатки.TRANORIG,
	|	ВТ_Остатки.TRANBAL,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Остатки.Currency = &ВалютаUSD
	|						ТОГДА ВТ_Остатки.INVAMT
	|					ИНАЧЕ ВЫРАЗИТЬ(ВТ_Остатки.INVAMT / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_Остатки.Currency = &ВалютаРубли
	|					ТОГДА ВТ_Остатки.INVAMT
	|				ИНАЧЕ ВЫРАЗИТЬ(ВТ_Остатки.INVAMT / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность * &КурсОтносительноРубля / &КратностьОтносительноРубля КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ КАК LOCORIG,
	|	ВЫБОР
	|		КОГДА ВТ_Остатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Остатки.Currency = &ВалютаUSD
	|						ТОГДА ВТ_Остатки.BALANCE
	|					ИНАЧЕ ВЫРАЗИТЬ(ВТ_Остатки.BALANCE / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_Остатки.Currency = &ВалютаРубли
	|					ТОГДА ВТ_Остатки.BALANCE
	|				ИНАЧЕ ВЫРАЗИТЬ(ВТ_Остатки.BALANCE / ВТ_ВнутренниеКурсыВалют.Курс * ВТ_ВнутренниеКурсыВалют.Кратность * &КурсОтносительноРубля / &КратностьОтносительноРубля КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ КАК LOCBAL,
	|	ВТ_Остатки.Source,
	|	ВТ_Остатки.INVDTE,
	|	ВТ_Остатки.TRANCURR,
	|	ВТ_Остатки.CountryCode
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнутренниеКурсыВалют КАК ВТ_ВнутренниеКурсыВалют
	|		ПО ВТ_Остатки.Currency = ВТ_ВнутренниеКурсыВалют.Валюта";
	
	Sources = Новый Массив;
	//Sources.Добавить(Перечисления.ТипыСоответствий.Lawson);
	//Sources.Добавить(Перечисления.ТипыСоответствий.OracleMI);
	Sources.Добавить(Перечисления.ТипыСоответствий.HOBs);
	Запрос.УстановитьПараметр("Sources", Sources);
	
	Запрос.УстановитьПараметр("ВалютаUSD", Константы.rgsВалютаUSD.Получить());
	Рубли = Константы.rgsВалютаРуб.Получить();
	Запрос.УстановитьПараметр("ВалютаРубли", Рубли);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьВнутреннийКурсВалюты(Рубли, ТекущаяДата());
	Запрос.УстановитьПараметр("КурсОтносительноРубля", СтруктураКурса.Курс);
	Запрос.УстановитьПараметр("КратностьОтносительноРубля", СтруктураКурса.Кратность);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.Source = Перечисления.ТипыСоответствий.Lawson И СтрокаТаблицы.ARSTAT = "I" Тогда
			СтрокаТаблицы.INVNO = "I-" + СтрокаТаблицы.INVNO + "-" + Строка(СтрокаТаблицы.CompanyCode);
		ИначеЕсли СтрокаТаблицы.Source = Перечисления.ТипыСоответствий.HOBs И СтрокаТаблицы.ARSTAT = "O" Тогда
			СтрокаТаблицы.INVNO = "O-" + СтрокаТаблицы.INVNO;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.CUSTNO) Тогда
			СтрокаТаблицы.CUSTNO = СтрокаТаблицы.CUSTNO + "-" + СтрокаТаблицы.CountryCode + "-" + Строка(СтрокаТаблицы.CompanyCode);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Удалить("CompanyCode");
	ТаблицаДанных.Колонки.Удалить("Source");
	ТаблицаДанных.Колонки.Удалить("CountryCode");
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Процедура СоздатьКоллекциюПараметровКоманды(Command, Знач ОписаниеСтруктурыПриемника)
	
	Для каждого ЭлементСтруктурыПриемника Из ОписаниеСтруктурыПриемника Цикл
		Параметр = Command.CreateParameter("@" + ЭлементСтруктурыПриемника.ИмяПоля, ЭлементСтруктурыПриемника.ТипПараметраЗапросаЧисло, 1, ЭлементСтруктурыПриемника.Ширина);
		Если ЭлементСтруктурыПриемника.Разрядность <> 0 Тогда
			Параметр.Precision = ЭлементСтруктурыПриемника.Разрядность;
		КонецЕсли;
		// определим значение по-умолчанию
		Параметр.Value = ПолучитьЗначениеТипаПоУмолчанию(ЭлементСтруктурыПриемника.Тип);
		Command.Parameters.Append(Параметр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтруктурыПриемника(ИмяПриемникаДанных)
	
	ОписаниеСтруктурыПриемника = Новый ТаблицаЗначений;
	ОписаниеСтруктурыПриемника.Колонки.Добавить("ИмяПоля");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("Тип");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("Ширина");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("Разрядность");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("ТипПараметраЗапроса");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("ТипПараметраЗапросаЧисло");
	ОписаниеСтруктурыПриемника.Колонки.Добавить("ТипПоляСхемы");
	
	Макет = Обработки.PushARDataToGetPaid.ПолучитьМакет(ИмяПриемникаДанных);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	Для ТекНомерСтроки = 2 По ВысотаТаблицы Цикл
		
		ИмяПоля = Макет.Область(ТекНомерСтроки, 1).Текст;
		ТипПоля = Макет.Область(ТекНомерСтроки, 2).Текст;
		ШиринаПоля = Число(Макет.Область(ТекНомерСтроки, 3).Текст);
		РазрядностьПоля = Число(Макет.Область(ТекНомерСтроки, 4).Текст);
		
		НоваяСтрокаОписания = ОписаниеСтруктурыПриемника.Добавить();
		НоваяСтрокаОписания.ИмяПоля = ИмяПоля;
		НоваяСтрокаОписания.Тип = ТипПоля;
		НоваяСтрокаОписания.Ширина = ШиринаПоля;
		НоваяСтрокаОписания.Разрядность = РазрядностьПоля;
		НоваяСтрокаОписания.ТипПараметраЗапроса = ПолучитьТипПараметраЗапроса(ТипПоля, ШиринаПоля, РазрядностьПоля);
		НоваяСтрокаОписания.ТипПараметраЗапросаЧисло = ПолучитьТипПараметраЗапросаЧисло(ТипПоля, РазрядностьПоля);
		НоваяСтрокаОписания.ТипПоляСхемы = ПолучитьТипПоляСхемы(ТипПоля, РазрядностьПоля);
		
	КонецЦикла;
	
	Возврат ОписаниеСтруктурыПриемника;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстФайлаСхемы(Знач ИмяПриемникаДанных, Знач ОписаниеСтруктурыПриемника, Знач ФорматФайла)
	
	ТекстФайлаСхемы = "[" + ИмяПриемникаДанных + ".txt]" + Символы.ПС;
	
	// настройки формата
	ТекстФайлаСхемы = ТекстФайлаСхемы + "Format=" + ФорматФайла + Символы.ПС;
	//ТекстФайлаСхемы = ТекстФайлаСхемы + "Format=TabDelimited" + Символы.ПС;
	ТекстФайлаСхемы = ТекстФайлаСхемы + "DecimalSymbol=." + Символы.ПС;
	ТекстФайлаСхемы = ТекстФайлаСхемы + "DateTimeFormat=""MM/DD/YY""" + Символы.ПС;
	
	// колонки
	ТекНомерКолонки = 1;
	Для каждого ЭлементСтруктурыПриемника Из ОписаниеСтруктурыПриемника Цикл
		
		ТекстФайлаСхемы = ТекстФайлаСхемы + "Col" + Строка(ТекНомерКолонки) 
			+ "=" + ЭлементСтруктурыПриемника.ИмяПоля + " " 
			+ ЭлементСтруктурыПриемника.ТипПоляСхемы + " Width "
			+ Строка(ЭлементСтруктурыПриемника.Ширина) + Символы.ПС;
			
		ТекНомерКолонки = ТекНомерКолонки + 1;
		
	КонецЦикла;
	
	Возврат ТекстФайлаСхемы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстКомандыЗапроса(Знач ИмяПриемникаДанных, Знач ОписаниеСтруктурыПриемника)
	
	ТекстКомандыЧасть1 = "PARAMETERS ";
	ТекстКомандыЧасть2 = "INSERT INTO [" + ИмяПриемникаДанных + "] VALUES (";
	
	Для каждого ЭлементСтруктурыПриемника Из ОписаниеСтруктурыПриемника Цикл
		
		ТекстКомандыЧасть1 = ТекстКомандыЧасть1 + "@" + ЭлементСтруктурыПриемника.ИмяПоля + " "
			+ ЭлементСтруктурыПриемника.ТипПараметраЗапроса + ?(ЭлементСтруктурыПриемника.ТипПараметраЗапроса = "char", "("
			+ ЭлементСтруктурыПриемника.Ширина + ")", "") + ", ";
		
		ТекстКомандыЧасть2 = ТекстКомандыЧасть2 + "@" + ЭлементСтруктурыПриемника.ИмяПоля + ", ";
		
	КонецЦикла;
	
	ТекстКомандыЧасть1 = Лев(ТекстКомандыЧасть1, СтрДлина(ТекстКомандыЧасть1) - 2);
	ТекстКомандыЧасть2 = Лев(ТекстКомандыЧасть2, СтрДлина(ТекстКомандыЧасть2) - 2) + ")";
	
	Возврат ТекстКомандыЧасть1 + "; " + ТекстКомандыЧасть2;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстКомандыСозданияТаблицы(Знач ИмяПриемникаДанных, Знач ОписаниеСтруктурыПриемника)
	
	ТекстКоманды = "CREATE TABLE [" + ИмяПриемникаДанных + ".txt] (";
	
	Для каждого ЭлементСтруктурыПриемника Из ОписаниеСтруктурыПриемника Цикл
		
		ТекстКоманды = ТекстКоманды + ЭлементСтруктурыПриемника.ИмяПоля + " "
			+ ЭлементСтруктурыПриемника.ТипПараметраЗапроса + ?(ЭлементСтруктурыПриемника.ТипПараметраЗапроса = "char", "("
			+ ЭлементСтруктурыПриемника.Ширина + ")", "") + ", ";
		
	КонецЦикла;
	
	ТекстКоманды = Лев(ТекстКоманды, СтрДлина(ТекстКоманды) - 2) + ")";
	
	Возврат ТекстКоманды;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипПараметраЗапросаЧисло(ТипПоля, РазрядностьПоля)
	
	// TODO RGS AGorlenko 24.08.2016: переделать как вариант с кэшированием
	
	Если ТипПоля = "C" Тогда
		Возврат 129;
	ИначеЕсли ТипПоля = "D" Тогда
		Возврат 133;
	ИначеЕсли ТипПоля = "N" И РазрядностьПоля > 0 Тогда
		Возврат 5;
	ИначеЕсли ТипПоля = "N" И РазрядностьПоля = 0 Тогда
		Возврат 20; // bigint
	Иначе
		ВызватьИсключение "Unknown type " + ТипПоля;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипПараметраЗапроса(ТипПоля, ШиринаПоля, РазрядностьПоля)
	
	// TODO RGS AGorlenko 24.08.2016: переделать как вариант с кэшированием
	
	Если ТипПоля = "C" И ШиринаПоля <= 255 Тогда
		Возврат "char";
	ИначеЕсли ТипПоля = "C" И ШиринаПоля > 255 Тогда
		Возврат "longchar";
	ИначеЕсли ТипПоля = "D" Тогда
		Возврат "date";
	ИначеЕсли ТипПоля = "N" И РазрядностьПоля > 0 Тогда
		Возврат "double";
	ИначеЕсли ТипПоля = "N" И РазрядностьПоля = 0 Тогда
		Возврат "integer";
	Иначе
		ВызватьИсключение "Unknown type " + ТипПоля;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеТипаПоУмолчанию(ТипПоля)
	
	// TODO RGS AGorlenko 24.08.2016: переделать как вариант с кэшированием
	
	Если ТипПоля = "C" Тогда
		Возврат "";
	ИначеЕсли ТипПоля = "D" Тогда
		Возврат '00010101';
	ИначеЕсли ТипПоля = "N" Тогда
		Возврат 0;
	Иначе
		ВызватьИсключение "Unknown type " + ТипПоля;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипПоляСхемы(ТипПоля, РазрядностьПоля)
	
	// TODO RGS AGorlenko 24.08.2016: переделать как вариант с кэшированием
	
	Если ТипПоля = "C" Тогда
		Возврат "Text";
	ИначеЕсли ТипПоля = "D" Тогда
		Возврат "Date";
	ИначеЕсли ТипПоля = "N" И РазрядностьПоля > 0 Тогда
		Возврат "Double";
	ИначеЕсли ТипПоля = "N" И РазрядностьПоля = 0 Тогда
		Возврат "Long";
	Иначе
		ВызватьИсключение "Unknown type " + ТипПоля;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	ВыгрузитьДанныеНаСервере();
	
	ДД = ПолучитьИзВременногоХранилища(АдресФайлаВХранилищеARCUST);
	ДД.Записать(КаталогВыгрузки + "/ARCUST.txt");
	
	ДД = ПолучитьИзВременногоХранилища(АдресФайлаВХранилищеARMAST);
	ДД.Записать(КаталогВыгрузки + "/ARMAST.txt");
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(КаталогВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФорматФайла = "FixedLength";
	
КонецПроцедуры

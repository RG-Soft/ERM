
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресВХранилище = "";
	ВыбранноеИмяФайла = "";
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект);
	
	НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресВХранилище,,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(Результат, АдресВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		
		Объект.ИмяФайла = Файл.Имя;
		АдресФайлаВХранилище = АдресВХранилище;
		Модифицированность = Истина;
		
		ЗаполнитьСписокЛистовЭкселя(Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЛистовЭкселя(ЗаполнитьЛист = Ложь)
	
	СписокЛистов = Новый Массив;
	
	Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
		ФайлЭксель = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	Иначе
		ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
		ФайлЭксель = ОбъектДляСервера.ИсточникДанных.Получить();
	КонецЕсли;
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsb");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если СписокЛистов.Количество() > 0 И ЗаполнитьЛист Тогда
		
		ЛистФайла = СписокЛистов[0];
		
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	ЗаполнитьСтруктуруФайлаПоУмолчанию();
	
	ТаблицаКоллизий.Очистить();
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	ДД = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsb");
	ДД.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;IMEX=1;MAXSCANROWS=0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;IMEX=1;MAXSCANROWS=0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибки);
			ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	sqlString = "select * from [" + ЛистФайла + "]";
	rs.Open(sqlString);
	
	СоответствиеКолонок = Новый Соответствие;
	Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
		СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
	КонецЦикла;
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	rs.MoveFirst();
	
	ВеличинаСдвига = ПерваяСтрокаДанных - 1 - ?(ИменаКолонокВПервойСтроке, 1, 1);
	Если ВеличинаСдвига <> 0 Тогда
		rs.Move(ВеличинаСдвига);
	КонецЕсли;
	
	ТекНомерСтроки = ПерваяСтрокаДанных;
	
	ТипСтрока = Тип("Строка");
	ТипЧисло = Тип("Число");
	
	Пока Не rs.EOF
		Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
		
		Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
			
			Попытка
				ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
			Исключение
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресВХранилище);
				Возврат;
			КонецПопытки;
				
			Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
			ИначеЕсли ТипЗнч(СтрокаДанных[ЭлементСоответствия.Ключ]) =  ТипЗнч("Строка")Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = Формат(ТекЗначение, "ЧРГ=; ЧН=0; ЧГ=0");
			Иначе
				СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
		rs.MoveNext();
		ТекНомерСтроки = ТекНомерСтроки + 1;
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	УдалитьФайлы(ПутьКФайлу);
	
	ТаблицаДанных.Колонки.Добавить("StrCompany",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ТаблицаДанных.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	НомерСтроки = 1;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтрокаТаблицы.StrCompany = Строка(Формат(СтрокаТаблицы.OU,"ЧРГ=; ЧГ="));
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	
	Результат = ВыполнитьПроверкуНастроекСинхронизации(ТаблицаДанных);
	
	Если Результат Тогда
		СформироватьПроводкиDSS(ТаблицаДанных);
	КонецЕсли;
	
	
КонецПроцедуры

Функция ВыполнитьПроверкуНастроекСинхронизации(ТаблицаДанных)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.SOURCE_SYSTEM,
	|	ТаблицаИсходныхДанных.OU,
	|	ТаблицаИсходныхДанных.GL_SOURCE,
	|	ТаблицаИсходныхДанных.CURRENCY_CODE,
	|	ТаблицаИсходныхДанных.EXCHANGE_RATE,
	|	ТаблицаИсходныхДанных.GL_ACCOUNT,
	|	ТаблицаИсходныхДанных.CUSTOMER_NUMBER,
	|	ТаблицаИсходныхДанных.CUSTOMER_NAME,
	|	ТаблицаИсходныхДанных.ENTERED,
	|	ТаблицаИсходныхДанных.ACCOUNTED,
	|	ТаблицаИсходныхДанных.DOC_TYPE,
	|	ТаблицаИсходныхДанных.DOC_NUMBER,
	|	ТаблицаИсходныхДанных.DOC_ID,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 17, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 22, 3) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 26, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК Account,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 10, 6) КАК Location
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных
	|	"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	врТЗТаблицаДанных.CURRENCY_CODE КАК Идентификатор
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО врТЗТаблицаДанных.CURRENCY_CODE = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И НЕ врТЗТаблицаДанных.CURRENCY_CODE = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Oracle.ПустаяСсылка),
		|	врТЗТаблицаДанных.Account
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО врТЗТаблицаДанных.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	врТЗТаблицаДанных.OU
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И врТЗТаблицаДанных.OU = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	врТЗТаблицаДанных.OU <> 0
		|	И Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	врТЗТаблицаДанных.SubSubSegment
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И врТЗТаблицаДанных.SubSubSegment = Сегменты.Код
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	врТЗТаблицаДанных.Location
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Location = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	Сегменты.Код,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО Сегменты.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (ПОДСТРОКА(врТЗТаблицаДанных.GL_ACCOUNT, 6, 3) = Сегменты.Код)
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО ПодразделенияОрганизаций.MgmtCountryCode = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО врТЗТаблицаДанных.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Oracle.Ссылка,
		|	Oracle.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО врТЗТаблицаДанных.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО OracleSourceData.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	//Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = ТипВнешнейСистемы;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.БазовыйЭлемент.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = ТипВнешнейСистемы;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = ТипВнешнейСистемы;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = ТипВнешнейСистемы;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции

&НаСервере
Процедура СформироватьПроводкиDSS(ТаблицаДанных)
	
	Если ТипВнешнейСистемы = Перечисления.ТипыСоответствий.OracleMI Тогда
		СформироватьПроводкиDSSMI(ТаблицаДанных);
	Иначе 
		СформироватьПроводкиDSSSmith(ТаблицаДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПроводкиDSSMI(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.SOURCE_SYSTEM,
	|	ТаблицаИсходныхДанных.OU,
	|	ТаблицаИсходныхДанных.GL_SOURCE,
	|	ТаблицаИсходныхДанных.CURRENCY_CODE,
	|	ТаблицаИсходныхДанных.EXCHANGE_RATE,
	|	ТаблицаИсходныхДанных.GL_ACCOUNT,
	|	ТаблицаИсходныхДанных.CUSTOMER_NUMBER,
	|	ТаблицаИсходныхДанных.CUSTOMER_NAME,
	|	ТаблицаИсходныхДанных.ENTERED,
	|	ТаблицаИсходныхДанных.ACCOUNTED,
	|	ВЫБОР
	|		КОГДА ТаблицаИсходныхДанных.DOC_TYPE = ""Invoice""
	|			ТОГДА ""INV""
	|		КОГДА ТаблицаИсходныхДанных.DOC_TYPE = ""Receipt""
	|			ТОГДА ""CASH""
	|		ИНАЧЕ ТаблицаИсходныхДанных.DOC_TYPE
	|	КОНЕЦ КАК DOC_TYPE,
	|	ТаблицаИсходныхДанных.DOC_NUMBER,
	|	ТаблицаИсходныхДанных.DOC_ID,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 17, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 22, 3) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 26, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК Account,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 10, 6) КАК Location,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 10, 6) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК AU
	|ПОМЕСТИТЬ ВТ_ДанныеФайла
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&ТекущийПериод,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CUSTOMER_NUMBER
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CURRENCY_CODE
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Invoice.DocID,
		|	Invoice.Ссылка
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Invoice КАК Invoice
		|		ПО ВТ_ДанныеФайла.DOC_ID = Invoice.DocID
		|			И (НЕ Invoice.ПометкаУдаления)
		|ГДЕ
		|	Invoice.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CashBatch.DocID,
		|	CashBatch.Ссылка
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CashBatch КАК CashBatch
		|		ПО ВТ_ДанныеФайла.DOC_ID = CashBatch.DocID
		|			И (НЕ CashBatch.ПометкаУдаления)
		|ГДЕ
		|	CashBatch.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиSalesOrders.ArInvoice КАК Номер,
		|	КлючиSalesOrders.Company,
		|	КлючиSalesOrders.SalesOrder КАК Ссылка
		|ИЗ
		|	РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrders
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиSalesOrders.ArInvoice = ВТ_ДанныеФайла.DOC_NUMBER
		|			И (КлючиSalesOrders.Source = &ТипВнешнейСистемы)
		|			И КлючиSalesOrders.Company.Код = ВТ_ДанныеФайла.OU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Source,
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиBatchAllocation.Source,
		|	КлючиBatchAllocation.Company,
		|	КлючиBatchAllocation.Client,
		|	КлючиBatchAllocation.Location,
		|	КлючиBatchAllocation.SubSubSegment,
		|	КлючиBatchAllocation.Account,
		|	КлючиBatchAllocation.Currency,
		|	КлючиBatchAllocation.BatchAllocation
		|ИЗ
		|	РегистрСведений.КлючиBatchAllocation КАК КлючиBatchAllocation
		|ГДЕ
		|	КлючиBatchAllocation.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.GL_SOURCE КАК GlSourceType,
		|	Организации.Ссылка КАК Company,
		|	Oracle.Ссылка КАК Account,
		|	ПодразделенияОрганизаций.Ссылка КАК Location,
		|	Сегменты.Ссылка КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_ДанныеФайла.EXCHANGE_RATE КАК ExchangeRate,
		|	ВТ_ДанныеФайла.GL_ACCOUNT КАК GL_Account,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)) КАК AU,
		|	ВТ_ДанныеФайла.AU КАК КодAU,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""JV""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.GLNoName)
		|		ИНАЧЕ ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника
		|	КОНЕЦ КАК Client,
		|	ВТ_ДанныеФайла.ENTERED КАК Amount,
		|	ВТ_ДанныеФайла.ACCOUNTED КАК BaseAmount,
		|	ВТ_ДанныеФайла.DOC_TYPE КАК DocType,
		|	ВТ_ДанныеФайла.DOC_NUMBER КАК SONum,
		|	ВТ_ДанныеФайла.DOC_ID КАК DocID,
		|	ВТ_ДанныеФайла.CUSTOMER_NUMBER КАК CustomerNumber,
		|	ВТ_ДанныеФайла.DOC_NUMBER КАК DocNumber,
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""CASH""
		|			ТОГДА ""CCURR_UNAPP""
		|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""Accrual""
		|			ТОГДА ""A""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК TransType
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_ДанныеФайла.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_ДанныеФайла.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО ВТ_ДанныеФайла.SubSubSegment = Сегменты.Код
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.CURRENCY_CODE = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.CUSTOMER_NUMBER = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|			И (КостЦентры.Source = &ТипВнешнейСистемы)";
	
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.УстановитьПараметр("ТекущийПериод", ТекущаяДата()+3600);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", ТипВнешнейСистемы);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	
	КэшSalesOrders = РезультатЗапроса[4].Выгрузить();
	КэшSalesOrders.Индексы.Добавить("Номер");
	
	КэшРучныхКоррерктировок = РезультатЗапроса[5].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Location, SubSubSegment, Account, Currency");
	
	КэшИнвойсов = РезультатЗапроса[2].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("DocID");
	
	КэшCashBatch = РезультатЗапроса[3].Выгрузить();
	КэшCashBatch.Индексы.Добавить("DocID");
	
	КэшBatchAllocation = РезультатЗапроса[6].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	ТаблицаДаты = РезультатЗапроса[7].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	КэшAU = Новый Соответствие;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[8].Выбрать();
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	ЗапросНомера = Новый Запрос;
	ЗапросНомера.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ТранзакцияOracle.Номер) КАК Номер
		|ИЗ
		|	Документ.ТранзакцияOracle КАК ТранзакцияOracle
		|ГДЕ
		|	ТранзакцияOracle.Source = &Source
		|	И НЕ ТранзакцияOracle.Номер ПОДОБНО ""%#%""";
	
	ЗапросНомера.УстановитьПараметр("Source", ТипВнешнейСистемы);
	
	РезультатЗапросаНомера = ЗапросНомера.Выполнить();
	
	ВыборкаДетальныеЗаписиНомера = РезультатЗапросаНомера.Выбрать();
	
	ВыборкаДетальныеЗаписиНомера.Следующий();
	
	МаксНомер = ВыборкаДетальныеЗаписиНомера.Номер;
	НомерЧислом = Число(Прав(МаксНомер,СтрДлина(МаксНомер)-3)) + 1;
	НомерДокумента = Формат(НомерЧислом, "ЧЦ=20; ЧН=; ЧВН=; ЧГ=0");
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.OracleMI);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Транзакция) Тогда
		//	//TODO временно перезаполняем
		//	Продолжить;
		//	//ТранзакцияOracleОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
		//Иначе
			ТранзакцияOracleОбъект = Документы.ТранзакцияOracle.СоздатьДокумент();
		//КонецЕсли;
		
		//Если ВыборкаДетальныеЗаписи.GlDate < ДатаНачалаЗагрузки Тогда
		//	
		//	ТекОшибка = "Can't load data earlier than the start date for " + ВыборкаДетальныеЗаписи.ID_ORIG;
		//	Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
		//		ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
		//	КонецЕсли;
		//	Отказ = Истина;
		//	Продолжить;
		//	
		//КонецЕсли;
		
		ЗаполнитьТранзакцию(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, ТипВнешнейСистемы, Отказ, ТекстСообщенияОбОшибках, НомерДокумента, КэшAU);
		
		ТранзакцияOracleОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		ТекДок = ТранзакцияOracleОбъект.Ссылка.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
		НомерЧислом = НомерЧислом + 1;
		НомерДокумента = Формат(НомерЧислом, "ЧЦ=20; ЧН=; ЧВН=; ЧГ=0");
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПроводкиDSSSmith(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.SOURCE_SYSTEM,
	|	ТаблицаИсходныхДанных.OU,
	|	ТаблицаИсходныхДанных.GL_SOURCE,
	|	ТаблицаИсходныхДанных.CURRENCY_CODE,
	|	ТаблицаИсходныхДанных.EXCHANGE_RATE,
	|	ТаблицаИсходныхДанных.GL_ACCOUNT,
	|	ТаблицаИсходныхДанных.CUSTOMER_NUMBER,
	|	ТаблицаИсходныхДанных.CUSTOMER_NAME,
	|	ТаблицаИсходныхДанных.ENTERED,
	|	ТаблицаИсходныхДанных.ACCOUNTED,
	|	ВЫБОР
	|		КОГДА ТаблицаИсходныхДанных.DOC_TYPE = ""Invoice""
	|			ТОГДА ""Sales Invoices""
	|		КОГДА ТаблицаИсходныхДанных.DOC_TYPE = ""Receipt""
	|			ТОГДА ""Trade Receipts""
	|		ИНАЧЕ ТаблицаИсходныхДанных.DOC_TYPE
	|	КОНЕЦ КАК DOC_TYPE,
	|	ТаблицаИсходныхДанных.DOC_NUMBER,
	|	ТаблицаИсходныхДанных.DOC_NUMBER + ""."" + ТаблицаИсходныхДанных.CUSTOMER_NUMBER + ""."" + ТаблицаИсходныхДанных.StrCompany КАК DOC_ID,
	//|	ТаблицаИсходныхДанных.DOC_ID,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 17, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 22, 3) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 26, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК Account,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 10, 6) КАК Location,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 10, 6) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК AU
	|ПОМЕСТИТЬ ВТ_ДанныеФайла
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&ТекущийПериод,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CUSTOMER_NUMBER
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CURRENCY_CODE
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SalesOrder.DocID,
		|	SalesOrder.Ссылка КАК SalesOrder
		|ИЗ
		|	Документ.SalesOrder КАК SalesOrder
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО SalesOrder.DocID = ВТ_ДанныеФайла.DOC_ID
		|			И (SalesOrder.Source = &ТипВнешнейСистемы)
		|			И (НЕ SalesOrder.ПометкаУдаления)
		|ГДЕ
		|	SalesOrder.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Source,
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Invoice.DocID,
		|	Invoice.Ссылка КАК Invoice
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Invoice.DocID = ВТ_ДанныеФайла.DOC_ID
		|			И (Invoice.Source = &ТипВнешнейСистемы)
		|			И (НЕ Invoice.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Memo.DocID,
		|	Memo.Ссылка КАК Мемо
		|ИЗ
		|	Документ.Memo КАК Memo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Memo.DocID = ВТ_ДанныеФайла.DOC_ID
		|			И (Memo.Source = &ТипВнешнейСистемы)
		|			И (НЕ Memo.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CashBatch.DocID,
		|	CashBatch.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО CashBatch.DocID = ВТ_ДанныеФайла.DOC_ID
		|			И (НЕ CashBatch.ПометкаУдаления)
		|			И (CashBatch.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиBatchAllocation.Source,
		|	КлючиBatchAllocation.Company,
		|	КлючиBatchAllocation.Client,
		|	КлючиBatchAllocation.Location,
		|	КлючиBatchAllocation.SubSubSegment,
		|	КлючиBatchAllocation.Account,
		|	КлючиBatchAllocation.Currency,
		|	КлючиBatchAllocation.BatchAllocation
		|ИЗ
		|	РегистрСведений.КлючиBatchAllocation КАК КлючиBatchAllocation
		|ГДЕ
		|	КлючиBatchAllocation.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.GL_SOURCE КАК GlSourceType,
		|	Организации.Ссылка КАК Company,
		|	Oracle.Ссылка КАК Account,
		|	ПодразделенияОрганизаций.Ссылка КАК Location,
		|	Сегменты.Ссылка КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_ДанныеФайла.EXCHANGE_RATE КАК ExchangeRate,
		|	ВТ_ДанныеФайла.GL_ACCOUNT КАК GL_Account,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)) КАК AU,
		|	ВТ_ДанныеФайла.AU КАК КодAU,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""JV""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.GLNoName)
		|		ИНАЧЕ ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника
		|	КОНЕЦ КАК Client,
		|	ВТ_ДанныеФайла.ENTERED КАК Amount,
		|	ВТ_ДанныеФайла.ACCOUNTED КАК BaseAmount,
		|	ВТ_ДанныеФайла.DOC_TYPE КАК DocType,
		|	ВТ_ДанныеФайла.DOC_NUMBER КАК SONum,
		|	ВТ_ДанныеФайла.DOC_ID КАК DocID,
		|	ВТ_ДанныеФайла.CUSTOMER_NUMBER КАК CustomerNumber,
		|	ВТ_ДанныеФайла.DOC_NUMBER КАК DocNumber,
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""CASH""
		|			ТОГДА ""CCURR_UNAPP""
		|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""Accrual""
		|			ТОГДА ""A""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК TransType
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_ДанныеФайла.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_ДанныеФайла.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО ВТ_ДанныеФайла.SubSubSegment = Сегменты.Код
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.CURRENCY_CODE = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.CUSTOMER_NUMBER = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|			И (КостЦентры.Source = &ТипВнешнейСистемы)";
	
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.УстановитьПараметр("ТекущийПериод", ТекущаяДата()+3600);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", ТипВнешнейСистемы);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	ВыборкаКэшSalesOrders = РезультатЗапроса[2].Выбрать();
	КэшSalesOrders = Новый ТаблицаЗначений;
	КэшSalesOrders.Колонки.Добавить("DocID", Новый ОписаниеТипов("Строка"));
	КэшSalesOrders.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.SalesOrder"));
	КэшSalesOrders.Индексы.Добавить("DocID");
	
	Пока ВыборкаКэшSalesOrders.Следующий() Цикл
		СтрокаКэша = КэшSalesOrders.Добавить();
		СтрокаКэша.DocID = СокрЛП(ВыборкаКэшSalesOrders.DocID);
		СтрокаКэша.Ссылка = ВыборкаКэшSalesOrders.SalesOrder;
	КонецЦикла;
	
	КэшРучныхКоррерктировок = РезультатЗапроса[3].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Location, SubSubSegment, Account, Currency");
	
	КэшИнвойсов = РезультатЗапроса[4].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("DocID");
	
	КэшМемо = РезультатЗапроса[5].Выгрузить();
	КэшМемо.Индексы.Добавить("DocID");
		
	КэшCashBatch = РезультатЗапроса[6].Выгрузить();
	КэшCashBatch.Индексы.Добавить("DocID");
	
	КэшBatchAllocation = РезультатЗапроса[7].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	ТаблицаДаты = РезультатЗапроса[8].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	КэшAU = Новый Соответствие;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[9].Выбрать();
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.OracleSmith);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		ТранзакцияOracleОбъект = Документы.ТранзакцияOracle.СоздатьДокумент();
		
		ЗаполнитьТранзакцию(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, ТипВнешнейСистемы, Отказ, ТекстСообщенияОбОшибках, ,КэшAU);
		
		ТранзакцияOracleОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъектыSmith(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшМемо, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		ТекДок = ТранзакцияOracleОбъект.Ссылка.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	//// { RGS TAlmazova 14.07.2016 18:55:05 - добавление статуса
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	//ДокументЗагрузки.Записать();
	//// } RGS TAlmazova 14.07.2016 18:55:12 - добавление статуса
	//
	//НЗ.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТранзакцию(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, Source, Отказ, ТекстСообщенияОбОшибках, НомерДокумента = Ложь, КэшAU)
	
	ЗаполнитьЗначенияСвойств(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
	
	Если Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		ТранзакцияOracleОбъект.Номер = "MI-"+ НомерДокумента;
	КонецЕсли;
	ТранзакцияOracleОбъект.Дата = Период;
	ТранзакцияOracleОбъект.Source = Source;
	
	ТранзакцияOracleОбъект.GlSourceType = ПолучитьGlSourceType(ДанныеДляЗаполнения);
	//
	ПреобразованиеСокрЛП(ТранзакцияOracleОбъект);
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаполнения.AU) Тогда
		
		Если КэшAU[ДанныеДляЗаполнения.КодAU] = Неопределено Тогда
			
			НовыйКостЦентр = Справочники.КостЦентры.СоздатьЭлемент();
			НовыйКостЦентр.Source = Source;
			НовыйКостЦентр.Код = ДанныеДляЗаполнения.КодAU;
			НовыйКостЦентр.Наименование = ДанныеДляЗаполнения.КодAU;
			НовыйКостЦентр.Сегмент = ДанныеДляЗаполнения.SubSubSegment;
			НовыйКостЦентр.ПодразделениеОрганизации = ДанныеДляЗаполнения.Location;
			НовыйКостЦентр.ОбменДанными.Загрузка = Истина;
			НовыйКостЦентр.Записать();
			
			КэшAU.Вставить(ДанныеДляЗаполнения.КодAU, НовыйКостЦентр.Ссылка);
			
		КонецЕсли;
		
		AU = КэшAU[ДанныеДляЗаполнения.КодAU];
		
	Иначе
		
		AU = ДанныеДляЗаполнения.AU;
		
	КонецЕсли;
	
	ТранзакцияOracleОбъект.AU = AU;
	//
	Если НЕ ЗначениеЗаполнено(ТранзакцияOracleОбъект.Client) Тогда
		// { RGS TAlmazova 03.10.2016 14:44:33 - поиск по OracleGlSourceType
		//Если ТранзакцияOracleОбъект.DocType = "JV" 
		Если ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.JV  
		// } RGS TAlmazova 03.10.2016 14:44:47 - поиск по OracleGlSourceType
			ИЛИ ТранзакцияOracleОбъект.DocType = "CASH" И ТранзакцияOracleОбъект.TransType = "TRADE_UNID" Тогда
			ТранзакцияOracleОбъект.Client = Справочники.Контрагенты.GLNoName;
		ИначеЕсли ДанныеДляЗаполнения.CustomerNumber = "" Тогда
			ТранзакцияOracleОбъект.Client = Справочники.Контрагенты.Undefined;
		Иначе
			//ВызватьИсключение "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to find client " + ДанныеДляЗаполнения.CustomerNumber,,,, Отказ);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьGlSourceType(ДанныеДляЗаполнения)
	
	Если ДанныеДляЗаполнения.GlSourceType = "SO Accrual" Тогда
		Возврат Перечисления.OracleGlSourceType.SOAccrual;
	ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "SAM Accrual" Тогда
		Возврат Перечисления.OracleGlSourceType.SAMAccrual;
	ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "Receivables" Тогда
		Возврат Перечисления.OracleGlSourceType.Receivables;
	КонецЕсли;
	
	Возврат Перечисления.OracleGlSourceType.JV;
	
КонецФункции

&НаСервере
Процедура ПреобразованиеСокрЛП(ТранзакцияOracleОбъект)
	
	//ТранзакцияOracleОбъект.Contract = СокрЛП(ТранзакцияOracleОбъект.Contract);
	ТранзакцияOracleОбъект.DocType = СокрЛП(ТранзакцияOracleОбъект.DocType);
	//ТранзакцияOracleОбъект.TransType = СокрЛП(ТранзакцияOracleОбъект.TransType);
	ТранзакцияOracleОбъект.SONum = СокрЛП(ТранзакцияOracleОбъект.SONum);
	//ТранзакцияOracleОбъект.CreatedBy = СокрЛП(ТранзакцияOracleОбъект.CreatedBy);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСвязанныеОбъекты(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Location, SubSubSegment, Account, Currency");
	СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	СтруктураПоискаSO = Новый Структура("Номер, Company");
	
	Если ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.SAMAccrual ИЛИ ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.SOAccrual Тогда
	
		СтруктураПоискаSO.Номер = ДанныеДляЗаполнения.SONum;
		СтруктураПоискаSO.Company = ДанныеДляЗаполнения.Company;
		СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSO);
		
		Если СтрокиSalesOrder.Количество() = 0 Тогда

			Если ТранзакцияOracleОбъект.TransType = "A" Тогда
				
				ТекSalesOrder = СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшSalesOrders.Добавить();
				НоваяСтрокаКэша.Номер = ДанныеДляЗаполнения.SONum;
				НоваяСтрокаКэша.Company = ДанныеДляЗаполнения.Company;
				НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
				
			Иначе
				
				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Sales Order for transaction " + ТранзакцияOracleОбъект.Номер;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, Документы.SalesOrder.ПустаяСсылка());
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекSalesOrder = СтрокиSalesOrder[0].Ссылка;
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
		
		КонецЕсли;
		
	ИначеЕсли ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.Receivables Тогда
		Если ТранзакцияOracleОбъект.DocType = "DEP" ИЛИ ТранзакцияOracleОбъект.DocType = "GUAR"
			ИЛИ ТранзакцияOracleОбъект.DocType = "INV" ИЛИ ТранзакцияOracleОбъект.DocType = "PMT"
			ИЛИ ТранзакцияOracleОбъект.DocType = "CB" Тогда
		
			//СтрокаИнвойса = КэшИнвойсов.Найти(?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2), "ArInvoice");
			//
			//Если СтрокаИнвойса = Неопределено Тогда

			//	ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект);
			//	НоваяСтрокаКэша = КэшИнвойсов.Добавить();
			//	НоваяСтрокаКэша.ArInvoice = ?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2);
			//	НоваяСтрокаКэша.Invoice = ТекИнвойс;
			//	
			//Иначе
			//	
			//	ТекИнвойс = СтрокаИнвойса.Invoice;
			//	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			//
			//КонецЕсли;
			// TODO RGS AGorlenko 21.07.2016: переделать поиск
			ТекИнвойс = ПолучитьИнвойсПриСоздании(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source);
			
			Если Не ЗначениеЗаполнено(ТекИнвойс) Тогда
				ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
			Иначе
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			КонецЕсли;
			
			// если указан номер SO, надо прописать связку
			Если НЕ ПустаяСтрока(ТранзакцияOracleОбъект.SONum) Тогда
				
				СтруктураПоискаSO.Номер = ТранзакцияOracleОбъект.SONum;
				СтруктураПоискаSO.Company = ТранзакцияOracleОбъект.Company;
				СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSO);
				
				Если СтрокиSalesOrder.Количество() > 0 Тогда
					
					ТекSalesOrder = СтрокиSalesOrder[0].Ссылка;
					ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
				
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "DM" ИЛИ ТранзакцияOracleОбъект.DocType = "CM" Тогда
			
			Если ТранзакцияOracleОбъект.TransType = "CM_REC" ИЛИ ТранзакцияOracleОбъект.TransType = "DM_REC" Тогда
				//ТекМемо = Документы.Memo.НайтиПоНомеру(ТранзакцияOracleОбъект.DocNumber);
				ТекМемо = ПолучитьMemo(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
				Если Не ЗначениеЗаполнено(ТекМемо) Тогда
					ТекМемо = СоздатьМемо(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				Иначе
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
				КонецЕсли;
			Иначе
				ТекИнвойс = ПолучитьИнвойсПриСоздании(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source);
				Если ЗначениеЗаполнено(ТекИнвойс) Тогда
					ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				Иначе
					ТекМемо = ПолучитьMemo(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
					// } RGS TAlmazova 13.10.2016 16:40:10 - 
					Если ЗначениеЗаполнено(ТекМемо) Тогда
						ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
					Иначе
						Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
							ТекОшибка = "Failed to find Invoice for transaction " + ТранзакцияOracleОбъект.Номер;
							Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
								ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
							КонецЕсли;
							Отказ = Истина;
						Иначе
							ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
							ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "CASH" Тогда
			
			//СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.DocNumber, "PaymentNumber");
			//
			//Если СтрокаCashBatch = Неопределено Тогда

			//	ТекCashBatch = СоздатьCashBatch(ТранзакцияOracleОбъект);
			//	НоваяСтрокаКэша = КэшCashBatch.Добавить();
			//	НоваяСтрокаКэша.PaymentNumber = ДанныеДляЗаполнения.DocNumber;
			//	НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
			//	
			//Иначе
			//	
			//	ТекCashBatch = СтрокаCashBatch.Ссылка;
			//	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			//
			//КонецЕсли;
			// TODO RGS AGorlenko 21.07.2016: переделать поиск
			ТекCashBatch = ПолучитьCashBatch(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source, Ложь);
			
			Если Не ЗначениеЗаполнено(ТекCashBatch) Тогда
				ТекCashBatch = СоздатьCashBatch(ТранзакцияOracleОбъект, ТранзакцияOracleОбъект.TransType = "TRADE_ACC", ДанныеДляЗаполнения);
			Иначе
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			КонецЕсли;
			
			Если ТранзакцияOracleОбъект.TransType = "CCURR_REC" ИЛИ ТранзакцияOracleОбъект.TransType = "TRADE_REC" Тогда
				
				// Batch allocation
				СтруктураПоискаBatch.Source = ТранзакцияOracleОбъект.Source;
				СтруктураПоискаBatch.Company = ТранзакцияOracleОбъект.Company;
				СтруктураПоискаBatch.Client = ТранзакцияOracleОбъект.Client;
				СтруктураПоискаBatch.Location = ТранзакцияOracleОбъект.Location;
				СтруктураПоискаBatch.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
				СтруктураПоискаBatch.Account = ТранзакцияOracleОбъект.Account;
				СтруктураПоискаBatch.Currency = ТранзакцияOracleОбъект.Currency;
				
				СтрокиBatchAllocation = КэшBatchAllocation.НайтиСтроки(СтруктураПоискаBatch);
				Если СтрокиBatchAllocation.Количество() = 0 Тогда
					ТекBatchAllocation = СоздатьBatchAllocation(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
					НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
					НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
					НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
					НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
					НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
					НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
					НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
					НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
					НоваяСтрокаКэша.BatchAllocation = ТекBatchAllocation;
				Иначе
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, СтрокиBatchAllocation[0].BatchAllocation);
				КонецЕсли;
				
				//ДокументРасчетов = ПолучитьДокументРасчетов(ТранзакцияOracleОбъект.DocNumber2);
				ДокументРасчетов = ПолучитьИнвойс(ТранзакцияOracleОбъект.LineID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
				Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.Invoice") Тогда
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокументРасчетов);
				Иначе
					//НайденаОшибка = Истина;
					Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
						ТекОшибка = "Failed to find Invoice for transaction " + ТранзакцияOracleОбъект.Номер;
						Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
							ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
						КонецЕсли;
						Отказ = Истина;
					Иначе
						ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
						ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураПоискаРучнойКорректировки.Source = ТранзакцияOracleОбъект.Source;
		СтруктураПоискаРучнойКорректировки.Company = ТранзакцияOracleОбъект.Company;
		//СтруктураПоискаРучнойКорректировки.Client = ТранзакцияOracleОбъект.Client;
		СтруктураПоискаРучнойКорректировки.Location = ТранзакцияOracleОбъект.Location;
		СтруктураПоискаРучнойКорректировки.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
		СтруктураПоискаРучнойКорректировки.Account = ТранзакцияOracleОбъект.Account;
		СтруктураПоискаРучнойКорректировки.Currency = ТранзакцияOracleОбъект.Currency;
		
		СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
		Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
			ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект);
			НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
			НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
			НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
			//НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
			НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
			НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
			НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
			НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
			НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
		КонецЕсли;
	// } RGS TAlmazova 03.10.2016 14:58:21 - изменение порядка условий
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
	
КонецФункции

&НаСервере
Функция СформироватьСвязанныеОбъектыSmith(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшМемо, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Location, SubSubSegment, Account, Currency");
	СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	Если ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.SAMAccrual ИЛИ ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.SOAccrual Тогда
	
		СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
		
		Если СтрокаSalesOrder = Неопределено Тогда

			Если ТранзакцияOracleОбъект.TransType = "A" Тогда
				
				ТекSalesOrder = СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшSalesOrders.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
				НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
				
			Иначе
				
				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Sales Order for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
						+ ", source = " + ДанныеДляЗаполнения.GlSourceType
						+ ", category = " + ДанныеДляЗаполнения.DocType
						+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
						+ ", je_name = " + ДанныеДляЗаполнения.je_name
						+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, Документы.SalesOrder.ПустаяСсылка());
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекSalesOrder = СтрокаSalesOrder.Ссылка;
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
		
		КонецЕсли;
		
	ИначеЕсли ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.Receivables Тогда
		
		Если ТранзакцияOracleОбъект.DocType = "Sales Invoices" Тогда
		
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшИнвойсов.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
				НоваяСтрокаКэша.Invoice = ТекИнвойс;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Invoice;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			
			КонецЕсли;
			
			//Если есть СО, то нужно прописать связку
			СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаSalesOrder <> Неопределено Тогда
				
				ТекSalesOrder = СтрокаSalesOrder.Ссылка;
				ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
			
			КонецЕсли;
			
			
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "Credit Memos" Тогда
			
			СтрокаМемо = КэшМемо.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаМемо = Неопределено Тогда

				ТекМемо = СоздатьМемо(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшМемо.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
				НоваяСтрокаКэша.Мемо = ТекМемо;
				
			Иначе
				
				ТекМемо = СтрокаМемо.Мемо;
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			
			КонецЕсли;
				
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "Credit Memo Applications" Тогда
			
			СтрокаМемо = КэшМемо.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаМемо = Неопределено Тогда

				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Memo for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
						+ ", source = " + ДанныеДляЗаполнения.GlSourceType
						+ ", category = " + ДанныеДляЗаполнения.DocType
						+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
						+ ", je_name = " + ДанныеДляЗаполнения.je_name
						+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, Документы.Memo.ПустаяСсылка());
				КонецЕсли;
				
			Иначе
				
				ТекМемо = СтрокаМемо.Мемо;
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			
			КонецЕсли;
			
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.LineID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Invoice for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
						+ ", source = " + ДанныеДляЗаполнения.GlSourceType
						+ ", category = " + ДанныеДляЗаполнения.DocType
						+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
						+ ", je_name = " + ДанныеДляЗаполнения.je_name
						+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, Документы.Memo.ПустаяСсылка());
				КонецЕсли;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Invoice;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				
				//Если есть СО, то нужно прописать связку
				СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
				
				Если СтрокаSalesOrder <> Неопределено Тогда
					
					ТекSalesOrder = СтрокаSalesOrder.Ссылка;
					ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
				
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "Trade Receipts" ИЛИ ТранзакцияOracleОбъект.DocType = "Cross Currency" Тогда
			
			СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаCashBatch = Неопределено Тогда

				ТекCashBatch = СоздатьCashBatch(ТранзакцияOracleОбъект, Ложь, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
				НоваяСтрокаКэша.CashBatch = ТекCashBatch;
				
			Иначе
				
				ТекCashBatch = СтрокаCashBatch.CashBatch;
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			
			КонецЕсли;
			
			// Batch allocation
			СтруктураПоискаBatch.Source = ТранзакцияOracleОбъект.Source;
			СтруктураПоискаBatch.Company = ТранзакцияOracleОбъект.Company;
			СтруктураПоискаBatch.Client = ТранзакцияOracleОбъект.Client;
			СтруктураПоискаBatch.Location = ТранзакцияOracleОбъект.Location;
			СтруктураПоискаBatch.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
			СтруктураПоискаBatch.Account = ТранзакцияOracleОбъект.Account;
			СтруктураПоискаBatch.Currency = ТранзакцияOracleОбъект.Currency;
			
			СтрокиBatchAllocation = КэшBatchAllocation.НайтиСтроки(СтруктураПоискаBatch);
			Если СтрокиBatchAllocation.Количество() = 0 Тогда
				ТекBatchAllocation = СоздатьBatchAllocation(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
				НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
				НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
				НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
				НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
				НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
				НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
				НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
				НоваяСтрокаКэша.BatchAllocation = ТекBatchAllocation;
			Иначе
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, СтрокиBatchAllocation[0].BatchAllocation);
			КонецЕсли;
			
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.LineID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to Invoice for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
						+ ", source = " + ДанныеДляЗаполнения.GlSourceType
						+ ", category = " + ДанныеДляЗаполнения.DocType
						+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
						+ ", je_name = " + ДанныеДляЗаполнения.je_name
						+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, Документы.Memo.ПустаяСсылка());
				КонецЕсли;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Invoice;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				
				//Если есть СО, то нужно прописать связку
				СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
				
				Если СтрокаSalesOrder <> Неопределено Тогда
					
					ТекSalesOrder = СтрокаSalesOrder.Ссылка;
					ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
				
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураПоискаРучнойКорректировки.Source = ТранзакцияOracleОбъект.Source;
		СтруктураПоискаРучнойКорректировки.Company = ТранзакцияOracleОбъект.Company;
		СтруктураПоискаРучнойКорректировки.Location = ТранзакцияOracleОбъект.Location;
		СтруктураПоискаРучнойКорректировки.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
		СтруктураПоискаРучнойКорректировки.Account = ТранзакцияOracleОбъект.Account;
		СтруктураПоискаРучнойКорректировки.Currency = ТранзакцияOracleОбъект.Currency;
		
		СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
		Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
			ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект);
			НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
			НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
			НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
			НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
			НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
			НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
			НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
			НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
КонецФункции

&НаСервере
Процедура ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект)
	
	ТранзакцияOracleОбъект1 = ТранзакцияOracleОбъект.Ссылка.ПолучитьОбъект();
	ТранзакцияOracleОбъект1.Amount = 0;
	ТранзакцияOracleОбъект1.BaseAmount = 0;
	ТранзакцияOracleОбъект1.ОбменДанными.Загрузка = Истина;
	ТранзакцияOracleОбъект1.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнвойс(DocID, DocNumber, Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.DocID = &DocID
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.DocNumber = &DocNumber
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.Source = &Source";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("DocNumber", DocNumber);
	Запрос.УстановитьПараметр("Source", Source);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если МассивРезультатов[0].Пустой() Тогда
		Если МассивРезультатов[1].Пустой() Тогда
			Возврат Неопределено;
		Иначе
			ВыборкаДетальныеЗаписи = МассивРезультатов[1].Выбрать();
			
		КонецЕсли;
	Иначе
		ВыборкаДетальныеЗаписи = МассивРезультатов[0].Выбрать();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Функция ПолучитьMemo(DocID, DocNumber, Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Memo.Ссылка
		|ИЗ
		|	Документ.Memo КАК Memo
		|ГДЕ
		|	Memo.DocID = &DocID
		|	И НЕ Memo.ПометкаУдаления
		|	И Memo.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Memo.Ссылка
		|ИЗ
		|	Документ.Memo КАК Memo
		|ГДЕ
		|	Memo.Номер = &DocNumber
		|	И НЕ Memo.ПометкаУдаления
		|	И Memo.Source = &Source";
	
	Запрос.УстановитьПараметр("DocNumber", DocNumber);
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если МассивРезультатов[0].Пустой() Тогда
		Если МассивРезультатов[1].Пустой() Тогда
			Возврат Неопределено;
		Иначе
			ВыборкаДетальныеЗаписи = МассивРезультатов[1].Выбрать();
		КонецЕсли;
	Иначе
		ВыборкаДетальныеЗаписи = МассивРезультатов[0].Выбрать();
	КонецЕсли;
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьCashBatch(DocID, Source, Prepayment)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CashBatch.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|ГДЕ
		|	CashBatch.DocID = &DocID
		|	И НЕ CashBatch.ПометкаУдаления
		|	И CashBatch.Source = &Source
		|	И CashBatch.Prepayment = &Prepayment";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	Запрос.УстановитьПараметр("Prepayment", Prepayment);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

&НаСервере
Процедура ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, ТипОбъекта, СвязанныйОбъект)
	
	НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	НЗ.Отбор.ПроводкаDSS.Установить(ТранзакцияOracleОбъект.Ссылка);
	НЗ.Отбор.ТипСвязанногоОбъекта.Установить(ТипОбъекта);
	НоваяЗапись = НЗ.Добавить();
	НоваяЗапись.ПроводкаDSS = ТранзакцияOracleОбъект.Ссылка;
	НоваяЗапись.ТипСвязанногоОбъекта = ТипОбъекта;
	НоваяЗапись.СвязанныйОбъект = СвязанныйОбъект;
	НЗ.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Функция СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения)
	ДокОбъект = Документы.SalesOrder.СоздатьДокумент();
	Если ТранзакцияOracleОбъект.Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		ДокОбъект.Номер = ТранзакцияOracleОбъект.SONum;
		ДокОбъект.ArInvoice = ТранзакцияOracleОбъект.SONum;
		ДокОбъект.Дата = Период;
	Иначе
		ДокОбъект.Номер = ТранзакцияOracleОбъект.DocNumber;
		ДокОбъект.Дата = Период;
		ДокОбъект.DocID = ДанныеДляЗаполнения.DocID;
	КонецЕсли;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	 
	// { RGS TAlmazova 17.02.2017 17:43:35 - добавление статуса Unbilled для новых СО
	Если ТранзакцияOracleОбъект.Source = Перечисления.ТипыСоответствий.OracleSmith Тогда
		
		ДатаДокумента = Период;
		AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
		
		НЗ = РегистрыСведений.SalesOrdersComments.СоздатьНаборЗаписей();
		НЗ.Очистить();
		
		НачатьТранзакцию();
		
		Проблема = Документы.SalesOrderProblem.СоздатьДокумент();
		Проблема.Дата = ДатаДокумента;
		Проблема.SalesOrder = ДокОбъект.Ссылка;
		Проблема.User = AutoUser;
		Проблема.Billed = Перечисления.SalesOrderBilledStatus.Unbilled;
		Проблема.Записать();
		
		НЗ.Очистить();
		НЗ.Отбор.SalesOrder.Установить(ДокОбъект.Ссылка);
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.Период = ДатаДокумента;
		ЗаписьНабора.SalesOrder = ДокОбъект.Ссылка;
		ЗаписьНабора.Problem = Проблема.Ссылка;
		
		НЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	// } RGS TAlmazova 17.02.2017 17:43:51 - добавление статуса Unbilled для новых СО
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = Период;
	РучнаяКорректировкаОбъект.Source = ТранзакцияOracleОбъект.Source;
	РучнаяКорректировкаОбъект.Company = ТранзакцияOracleОбъект.Company;
	//РучнаяКорректировкаОбъект.Client = ТранзакцияOracleОбъект.Client;
	РучнаяКорректировкаОбъект.Location = ТранзакцияOracleОбъект.Location;
	РучнаяКорректировкаОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	РучнаяКорректировкаОбъект.Account = ТранзакцияOracleОбъект.Account;
	РучнаяКорректировкаОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	РучнаяКорректировкаОбъект.Записать();
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, РучнаяКорректировкаОбъект.Ссылка);
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Номер = Формат(ТранзакцияOracleОбъект.DocID, "ЧГ=0");
	// { RGS TAlmazova 10.08.2016 12:22:48 - запись только DocNumber
	//ДокОбъект.DocNumber = ?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2);
	ДокОбъект.DocNumber = ТранзакцияOracleОбъект.DocNumber;
	// } RGS TAlmazova 10.08.2016 12:23:03 - запись только DocNumber
	ДокОбъект.Дата = Период;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияOracleОбъект.DocID;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ДозаполнитьИнвойсИзПроводки(Инвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения)
	
	РеквизитыИнвойса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инвойс, "Source,Company,DocID,Дата,Client,Location,SubSubSegment,Account,Currency,OriginalAnalytics,ClientID,DocNumber");
	
	// { RGS TAlmazova 20.12.2016 1:30:26 - дозаполнение компании в регистре FiscalPayments
	Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) Тогда
		НаборЗаписей = РегистрыСведений.FiscalPayments.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Invoice.Установить(Инвойс);
		НаборЗаписей.Прочитать();
		Для Каждого Запись из НаборЗаписей Цикл
			Если Запись.Company = Справочники.Организации.ПустаяСсылка() Тогда
				Запись.Company = ТранзакцияOracleОбъект.Company;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	// } RGS TAlmazova 20.12.2016 1:30:27 - дозаполнение компании в регистре FiscalPayments
	
	Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Source) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocID) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Дата) ИЛИ 
		НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Client) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Location) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.SubSubSegment) ИЛИ 
		НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Account) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Currency) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.OriginalAnalytics)
		ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocNumber) ИЛИ РеквизитыИнвойса.DocNumber = "#undefined#" Тогда
		ИнвойсОбъект = Инвойс.ПолучитьОбъект();
		Для каждого Реквизит из РеквизитыИнвойса Цикл
			Если Реквизит.Ключ <> "OriginalAnalytics" И Реквизит.Ключ <> "Дата" И Реквизит.Ключ <> "ClientID" И Реквизит.Ключ <> "DocNumber" Тогда
				Если НЕ ЗначениеЗаполнено(Реквизит.Значение) Тогда
					ИнвойсОбъект[Реквизит.Ключ] = ТранзакцияOracleОбъект[Реквизит.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.OriginalAnalytics) Тогда
			ИнвойсОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Дата) Тогда
			ИнвойсОбъект.Дата = ТранзакцияOracleОбъект.InvDate;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) Тогда
			ИнвойсОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocNumber) ИЛИ РеквизитыИнвойса.DocNumber = "#undefined#" Тогда
			ИнвойсОбъект.DocNumber = ДанныеДляЗаполнения.DocNumber;
		КонецЕсли;
		ИнвойсОбъект.ОбменДанными.Загрузка = Истина;
		ИнвойсОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьSalesOrder(SalesOrder, Invoice)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(SalesOrder, "Invoice") = Invoice Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = SalesOrder.ПолучитьОбъект();
	ДокОбъект.Invoice = Invoice;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

&НаСервере
Функция СоздатьCashBatch(ТранзакцияOracleОбъект, Prepayment = Ложь, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	ДокОбъект.PaymentNumber = ТранзакцияOracleОбъект.DocNumber;
	ДокОбъект.Дата = Период;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияOracleОбъект.DocID;
	ДокОбъект.Prepayment = Prepayment;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьBatchAllocation(ТранзакцияOracleОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.BatchAllocation.СоздатьДокумент();
	ДокОбъект.Дата = Период;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьДокументРасчетов(НомерТранзакции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСвязанныеДокументы.СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранзакцияOracle КАК ТранзакцияOracle
		|		ПО DSSСвязанныеДокументы.ПроводкаDSS = ТранзакцияOracle.Ссылка
		|			И (ТранзакцияOracle.DocNumber = &DocNumber)
		|			И (НЕ ТранзакцияOracle.ПометкаУдаления)
		|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice))";
	
	Запрос.УстановитьПараметр("DocNumber", НомерТранзакции);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.СвязанныйОбъект;
	
КонецФункции

&НаСервере
Функция СоздатьМемо(ТранзакцияOracleОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.Memo.СоздатьДокумент();
	ДокОбъект.Номер = ТранзакцияOracleОбъект.DocNumber;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Дата = Период;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьИнвойсПриСоздании(DocID, Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.DocID = &DocID
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.Source = &Source";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Результат = Ложь;
	
	Если Объект.ИмяФайла <> "" И ПерваяСтрокаДанных <> 0 И
		 ЛистФайла <> "" И ТипВнешнейСистемы <> ПредопределенноеЗначение("Перечисление.ТипыСоответствий.ПустаяСсылка") И
		 Период <> '00010101' Тогда
		
		ПрочитатьФайлНаСервере(Результат);
		
	КонецЕсли;
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'Oracle first balances loaded'");
	ИначеЕсли ТаблицаКоллизий.Количество() <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Oracle first balances are not loaded, add the missing data and download it again'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Oracle first balances are not loaded, incorrect file format or parameters'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	// SOURCE_SYSTEM
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SOURCE_SYSTEM";
	СтрокаТЗ.ИмяКолонки = "SOURCE_SYSTEM";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// OU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OU";
	СтрокаТЗ.ИмяКолонки = "OU";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// Journal
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GL_SOURCE";
	СтрокаТЗ.ИмяКолонки = "GL_SOURCE";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	//
	// CURRENCY_CODE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CURRENCY_CODE";
	СтрокаТЗ.ИмяКолонки = "CURRENCY_CODE";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// EXCHANGE_RATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EXCHANGE_RATE";
	СтрокаТЗ.ИмяКолонки = "EXCHANGE_RATE";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// GL_ACCOUNT
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GL_ACCOUNT";
	СтрокаТЗ.ИмяКолонки = "GL_ACCOUNT";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// CUSTOMER_NUMBER
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CUSTOMER_NUMBER";
	СтрокаТЗ.ИмяКолонки = "CUSTOMER_NUMBER";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// CUSTOMER_NAME
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CUSTOMER_NAME";
	СтрокаТЗ.ИмяКолонки = "CUSTOMER_NAME";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// ENTERED
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ENTERED";
	СтрокаТЗ.ИмяКолонки = "ENTERED";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// ACCOUNTED
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ACCOUNTED";
	СтрокаТЗ.ИмяКолонки = "ACCOUNTED";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// DOC_TYPE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_TYPE";
	СтрокаТЗ.ИмяКолонки = "DOC_TYPE";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// DOC_NUMBER
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_NUMBER";
	СтрокаТЗ.ИмяКолонки = "DOC_NUMBER";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// DOC_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_ID";
	СтрокаТЗ.ИмяКолонки = "DOC_ID";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИменаКолонокВПервойСтроке = Истина;
	ПерваяСтрокаДанных = 2;
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля,ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

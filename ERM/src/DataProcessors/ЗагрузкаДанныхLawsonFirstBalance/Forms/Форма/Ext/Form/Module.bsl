
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла	= Истина;
	ДиалогОткрытияФайла.Заголовок = "Select a file to loading";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайла = ВыбранныеФайлы[0];
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), УникальныйИдентификатор);


КонецПроцедуры


&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	ТаблицаКоллизий.Очистить();
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	ДД = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ИмяФайла = ПолучитьИмяВременногоФайла("csv");
	ДД.Записать(ИмяФайла);
	Разделитель = "\";
	Строки = СтрЗаменить(ИмяФайла, Разделитель, Символы.ПС);
	Путь = "";
	ТолькоИмяФайла = СтрПолучитьСтроку(Строки, СтрЧислоСтрок(Строки));
	Для Индекс = 1 По СтрЧислоСтрок(Строки)-1 Цикл
		Путь = Путь + СтрПолучитьСтроку(Строки, Индекс) + "\";
	КонецЦикла;
	ИмяКаталога = Лев(Путь, СтрДлина(Путь)-1);
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ ТолькоИмяФайла +"]" + Символы.ПС + "DecimalSymbol=.");
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	

	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;		
	КонецПопытки;
	
	
	rs = Новый COMObject("ADODB.RecordSet");
	
	Стр_SQL = "Select * FROM " + ТолькоИмяФайла;
	rs.Open(Стр_SQL, Connection);
	
	СоответствиеКолонок = Новый Соответствие;
	Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
		СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
	КонецЦикла;
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	rs.MoveFirst();
	
	Пока rs.EOF() = 0 Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		
		Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
			
			Попытка
				ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
			Исключение
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресВХранилище);
				Возврат;
			КонецПопытки;
				
			Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
			ИначеЕсли ТипЗнч(СтрокаДанных[ЭлементСоответствия.Ключ]) =  ТипЗнч("Строка")Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = Формат(ТекЗначение, "ЧРГ=; ЧН=0; ЧГ=0");
				Если ЭлементСоответствия.Значение = "AcctUnit" Тогда 
					Пока СтрДлина(СтрокаДанных[ЭлементСоответствия.Ключ])<7 Цикл
						СтрокаДанных[ЭлементСоответствия.Ключ] = "0" + СтрокаДанных[ЭлементСоответствия.Ключ];
					КонецЦикла;
				КонецЕсли;
			Иначе
				СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
		rs.MoveNext();
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КостЦентры.Код как AccountUnit
		|ИЗ
		|	Справочник.КостЦентры КАК КостЦентры
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.GeoMarket.Родитель = &GeoMarket";
	
	Запрос.УстановитьПараметр("GeoMarket", GeoMarket);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаКодовAccountUnit = РезультатЗапроса.Выгрузить();
	
	МассивAccountUnit = ТаблицаКодовAccountUnit.ВыгрузитьКолонку("AccountUnit");
	
	ТаблицаДанных.Колонки.Добавить("ARBatchNbr",Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	ТаблицаДанных.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	НомерСтроки = 1;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		Если СтрокаТаблицы.TransType = "P" Тогда
			СтрокаТаблицы.ARBatchNbr = Число(СтрокаТаблицы.Invoice);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = ПроверитьКорректностьДанных(ТаблицаДанных, МассивAccountUnit);
	
	Если Результат Тогда
		СоздатьЗаписиРегистра(ТаблицаДанных, МассивAccountUnit);
	КонецЕсли;
	
	
	//УдалитьФайлы(ИмяКаталога);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Результат = Ложь;
	
	Если Объект.ИмяФайла <> "" И GeoMarket <> ПредопределенноеЗначение("Справочник.GeoMarkets.ПустаяСсылка") И Период <> '00010101' Тогда
		
		ПрочитатьФайлНаСервере(Результат);
		
	КонецЕсли;
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'Lawson first balances loaded'");
	ИначеЕсли ТаблицаКоллизий.Количество() <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Lawson first balances are not loaded, add the missing data and download it again'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Lawson first balances are not loaded, incorrect file format or parameters'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	СтрокаТЗ.ТипКолонки = ТипЧисло;

	
	// Location
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Location";
	СтрокаТЗ.ИмяКолонки = "Location";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// TransType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransType";
	СтрокаТЗ.ИмяКолонки = "TransType";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// AcctUnit
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AcctUnit";
	СтрокаТЗ.ИмяКолонки = "AcctUnit";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	////
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	//// Customer
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Customer";
	СтрокаТЗ.ИмяКолонки = "Customer";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// TransDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransDate";
	СтрокаТЗ.ИмяКолонки = "TransDate";
	СтрокаТЗ.ТипКолонки = ТипСтрока;

	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// RemAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "RemAmount";
	СтрокаТЗ.ИмяКолонки = "RemAmount";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// BaseCurEquiv
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseCurEquiv";
	СтрокаТЗ.ИмяКолонки = "BaseCurEquiv";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// Mgmtctry
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Mgmtctry";
	СтрокаТЗ.ИмяКолонки = "Mgmtctry";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// CurrencyCd
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrigCurrency";
	СтрокаТЗ.ИмяКолонки = "OrigCurrency";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// Subsubseg
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Subsubseg";
	СтрокаТЗ.ИмяКолонки = "Subsubseg";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСтруктуруФайлаПоУмолчанию();
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля,ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Функция ПроверитьКорректностьДанных(ТаблицаДанных, МассивAccountUnit)
	Результат = Ложь;
	ПериодНач = НачалоМесяца(Период);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.AcctUnit КАК AccountUnit,
	|	ТаблицаИсходныхДанных.OrigCurrency КАК CurrencyCode,
	|	ТаблицаИсходныхДанных.Account,
	|	ТаблицаИсходныхДанных.Company,
	|	ТаблицаИсходныхДанных.Customer,
	|	ТаблицаИсходныхДанных.TransDate,
	|	ТаблицаИсходныхДанных.SubSubSeg,
	|	ТаблицаИсходныхДанных.Mgmtctry,
	|	ТаблицаИсходныхДанных.Location
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных
	|ГДЕ
	|	((ВЫРАЗИТЬ(ТаблицаИсходныхДанных.Account / 1000 - 0.5 КАК ЧИСЛО(15, 0))) = 120
	|			ИЛИ (ВЫРАЗИТЬ(ТаблицаИсходныхДанных.Account / 1000 - 0.5 КАК ЧИСЛО(15, 0))) = 209)
	|	И ТаблицаИсходныхДанных.AcctUnit В(&AcctUnit)"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("AcctUnit", МассивAccountUnit);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	врТЗТаблицаДанных.CurrencyCode КАК Идентификатор
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО врТЗТаблицаДанных.CurrencyCode = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И НЕ врТЗТаблицаДанных.CurrencyCode = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	врТЗТаблицаДанных.Account
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО врТЗТаблицаДанных.Account = Lawson.КодЧислом
		|			И (НЕ Lawson.ПометкаУдаления)
		|ГДЕ
		|	врТЗТаблицаДанных.Account <> 0
		|	И Lawson.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	врТЗТаблицаДанных.Company
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Company = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	врТЗТаблицаДанных.Company <> 0
		|	И Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	врТЗТаблицаДанных.SubSubSeg
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И врТЗТаблицаДанных.SubSubSeg = Сегменты.Код
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	врТЗТаблицаДанных.Location
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Location = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	врТЗТаблицаДанных.AccountUnit
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AccountUnit = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL 
		//|;
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Client"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client),
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	врТЗТаблицаДанных.Customer
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				,
		|				ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|					И ТипСоответствия = &ТипВнешнейСистемы) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|		ПО врТЗТаблицаДанных.Customer = НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО врТЗТаблицаДанных.AccountUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket,
		|	ЕСТЬNULL(HFM_Locations1.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоMgmtctry
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations1
		|		ПО врТЗТаблицаДанных.Mgmtctry = HFM_Locations1.Код
		|			И (НЕ HFM_Locations1.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО врТЗТаблицаДанных.AccountUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО врТЗТаблицаДанных.Account = Lawson.КодЧислом
		|			И (НЕ Lawson.ПометкаУдаления)
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО врТЗТаблицаДанных.Company = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)"
		;
	
	Запрос.УстановитьПараметр("Период", ПериодНач);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.Lawson);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
			ТекОбъект.Записать();
			
		ИначеЕсли НЕ ВыборкаЛокаций.LocationПоMgmtctry.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоMgmtctry;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура СоздатьЗаписиРегистра(ТаблицаДанных, МассивAccountUnit)
	
	ПериодНач = НачалоМесяца(Период);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.НомерСтроки,
	|	ТаблицаИсходныхДанных.AcctUnit КАК AccountUnit,
	|	ТаблицаИсходныхДанных.OrigCurrency КАК Currency,
	|	ТаблицаИсходныхДанных.Account КАК AccountCode,
	|	ТаблицаИсходныхДанных.Company,
	|	ТаблицаИсходныхДанных.SubSubSeg,
	|	ТаблицаИсходныхДанных.Mgmtctry,
	|	ТаблицаИсходныхДанных.TransType,
	|	ТаблицаИсходныхДанных.TransDate,
	|	ТаблицаИсходныхДанных.Invoice,
	|	ТаблицаИсходныхДанных.ARBatchNbr,
	|	ТаблицаИсходныхДанных.Customer КАК CustomerNumber,
	|	ТаблицаИсходныхДанных.RemAmount,
	|	ТаблицаИсходныхДанных.Location,
	|	ТаблицаИсходныхДанных.BaseCurEquiv
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных
	|ГДЕ
	|	((ВЫРАЗИТЬ(ТаблицаИсходныхДанных.Account / 1000 - 0.5 КАК ЧИСЛО(15, 0))) = 120
	|			ИЛИ (ВЫРАЗИТЬ(ТаблицаИсходныхДанных.Account / 1000 - 0.5 КАК ЧИСЛО(15, 0))) = 209)
	|	И ТаблицаИсходныхДанных.AcctUnit В(&AcctUnit)"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("AcctUnit", МассивAccountUnit);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	|			&Период,
	|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
	|				И Идентификатор В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						врТЗТаблицаДанных.CustomerNumber
	|					ИЗ
	|						врТЗТаблицаДанных КАК врТЗТаблицаДанных)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	|			&Период,
	|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
	|				И Идентификатор В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						врТЗТаблицаДанных.Currency
	|					ИЗ
	|						врТЗТаблицаДанных КАК врТЗТаблицаДанных)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врТЗТаблицаДанных.Invoice КАК ArInvoice,
	|	Организации.Ссылка КАК Company
	|ПОМЕСТИТЬ ВТ_КлючиПоискаInvoiceSalesOrders
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО врТЗТаблицаДанных.Company = Организации.Код
	|			И (НЕ Организации.ПометкаУдаления)
	|			И (Организации.Source = &Source)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ArInvoice,
	|	Company
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
	|	КлючиИнвойсов.Company,
	|	КлючиИнвойсов.Invoice
	|ИЗ
	|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
	|		ПО КлючиИнвойсов.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice
	|			И КлючиИнвойсов.Company = ВТ_КлючиПоискаInvoiceSalesOrders.Company
	|ГДЕ
	|	КлючиИнвойсов.Source = &Source
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлючиИнвойсов.ArInvoice,
	|	КлючиИнвойсов.Company,
	|	КлючиИнвойсов.Invoice
	|ИЗ
	|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
	|		ПО (КлючиИнвойсов.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice + ""B"")
	|			И КлючиИнвойсов.Company = ВТ_КлючиПоискаInvoiceSalesOrders.Company
	|ГДЕ
	|	КлючиИнвойсов.Source = &Source
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТЗТаблицаДанных.ARBatchNbr,
	|	врТЗТаблицаДанных.TransType,
	|	CashBatch.Company,
	|	CashBatch.Prepayment,
	|	CashBatch.Ссылка КАК CashBatch
	|ИЗ
	|	Документ.CashBatch КАК CashBatch
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ПО (CashBatch.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
	|			И CashBatch.DocID = врТЗТаблицаДанных.ARBatchNbr
	|			И (НЕ CashBatch.ПометкаУдаления)
	|			И (врТЗТаблицаДанных.TransType = ""P"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КостЦентры.ПодразделениеОрганизации.GeoMarket КАК GeoMarket
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	|		ПО врТЗТаблицаДанных.AccountUnit = КостЦентры.Код
	|			И (НЕ КостЦентры.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	КостЦентры.ПодразделениеОрганизации.GeoMarket
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТЗТаблицаДанных.НомерСтроки,
	|	врТЗТаблицаДанных.RemAmount КАК RemAmount,
	|	врТЗТаблицаДанных.BaseCurEquiv КАК BaseCurEquiv,
	|	врТЗТаблицаДанных.TransType,
	|	врТЗТаблицаДанных.TransDate,
	|	врТЗТаблицаДанных.Invoice,
	|	врТЗТаблицаДанных.ARBatchNbr,
	|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
	|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
	|	Организации.Ссылка КАК Company,
	|	Lawson.Ссылка КАК Account,
	|	КостЦентры.Ссылка КАК AU,
	|	КостЦентры.Сегмент КАК SubSubSegment,
	|	КостЦентры.ПодразделениеОрганизации КАК Location,
	|	КостЦентры.ПодразделениеОрганизации.GeoMarket КАК GeoMarket
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
	|		ПО врТЗТаблицаДанных.CustomerNumber = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
	|		ПО врТЗТаблицаДанных.Currency = ВТ_СоответствиеCurrency.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО врТЗТаблицаДанных.Company = Организации.Код
	|			И (НЕ Организации.ПометкаУдаления)
	|			И (Организации.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
	|		ПО врТЗТаблицаДанных.AccountCode = Lawson.КодЧислом
	|			И (НЕ Lawson.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	|		ПО врТЗТаблицаДанных.AccountUnit = КостЦентры.Код
	|			И (НЕ КостЦентры.ПометкаУдаления)
	|ГДЕ
	|	Организации.Source = &Source";
	
	Запрос.УстановитьПараметр("Период", ПериодНач);
	Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.Lawson);
	
	//РезультатЗапроса = Запрос.Выполнить();
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшИнвойсов = РезультатЗапроса[3].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice, Company");
	
	КэшCashBatch = РезультатЗапроса[4].Выгрузить();
	КэшCashBatch.Индексы.Добавить("ARBatchNbr, Company, Prepayment");
	
	КэшГеоМаркеты = РезультатЗапроса[5].Выгрузить();
	
	МассивГеоМаркетов = КэшГеоМаркеты.ВыгрузитьКолонку("GeoMarket");
	
	ВыборкаДанные = РезультатЗапроса[6].Выбрать();
	
	ЗапросНомерТранзакции = Новый Запрос;
	ЗапросНомерТранзакции.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПроводкаDSS.Номер) КАК Номер
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Номер < 1000000000";
	
	РезультатЗапросаНомерТранзакции = ЗапросНомерТранзакции.Выполнить();
	
	ВыборкаДетальныеЗаписиНомерТранзакции = РезультатЗапросаНомерТранзакции.Выбрать();
	
	ВыборкаДетальныеЗаписиНомерТранзакции.Следующий();
	
	НомерПроводки = ВыборкаДетальныеЗаписиНомерТранзакции.Номер + 1;
	
	СтруктураПоискаInvoice = Новый Структура("ArInvoice, Company");
	СтруктураПоискаBatch = Новый Структура("ARBatchNbr, Company, Prepayment");
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.Lawson);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДанные.Следующий() Цикл
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДанные) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		ПроводкаDSSОбъект = Документы.ПроводкаDSS.СоздатьДокумент();
		//ПроводкаDSSОбъект.GUID = Строка(Новый УникальныйИдентификатор());
		
		ПроводкаDSSОбъект.Номер = НомерПроводки; 
		ПроводкаDSSОбъект.Дата = Период;
		ПроводкаDSSОбъект.Документ = ПроводкаDSSОбъект.Ссылка;
		
		ПроводкаDSSОбъект.AccountingPeriod = Период;
		Если НЕ Строка(ВыборкаДанные.TransDate) = Строка(Дата(1,1,1)) Тогда
			ПроводкаDSSОбъект.DateLawson = ПреобразоватьВДату(ВыборкаДанные.TransDate, "TransDate");
		КонецЕсли;
		ПроводкаDSSОбъект.AccountLawson = ВыборкаДанные.Account;
		
		ПроводкаDSSОбъект.Company = ВыборкаДанные.Company;
		ПроводкаDSSОбъект.Location = ВыборкаДанные.Location;
		Если ВыборкаДанные.TransType = "I" или ВыборкаДанные.TransType = "C" или ВыборкаДанные.TransType = "M" Тогда
			ПроводкаDSSОбъект.System = "BL";
			ПроводкаDSSОбъект.SourceCode = "DM";
		ИначеЕсли ВыборкаДанные.TransType = "P" Тогда
			ПроводкаDSSОбъект.System = "AR";
			ПроводкаDSSОбъект.SourceCode = "RP";
			ПроводкаDSSОбъект.ArBatchNbr = ВыборкаДанные.ARBatchNbr;
		КонецЕсли;			
		ПроводкаDSSОбъект.CustomerNumber = ВыборкаДанные.Client.Код;
		ПроводкаDSSОбъект.CustomerName = ВыборкаДанные.Client.Наименование;
		ПроводкаDSSОбъект.SubSubSegment =  ВыборкаДанные.SubSubSegment;
		ПроводкаDSSОбъект.Currency = ВыборкаДанные.Currency;
		ПроводкаDSSОбъект.TranAmount = ВыборкаДанные.RemAmount;
		ПроводкаDSSОбъект.AU = ВыборкаДанные.AU;
		ПроводкаDSSОбъект.BaseAmount = ВыборкаДанные.BaseCurEquiv;
		ПроводкаDSSОбъект.ArInvoice = ВыборкаДанные.Invoice;
		ПроводкаDSSОбъект.КонтрагентLawson = ВыборкаДанные.Client;
		ПроводкаDSSОбъект.Reference = ВыборкаДанные.Invoice;
		ПроводкаDSSОбъект.Description = ВыборкаДанные.Client.Код;
		
		ПроводкаDSSОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если ВыборкаДанные.TransType = "I" ИЛИ ВыборкаДанные.TransType = "C" ИЛИ ВыборкаДанные.TransType = "M" Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаInvoice, ПроводкаDSSОбъект);
			СтрокиИнвойса = КэшИнвойсов.НайтиСтроки(СтруктураПоискаInvoice);
			
			Если СтрокиИнвойса.Количество() = 0 Тогда
				ТекИнвойс = СоздатьИнвойс(ПроводкаDSSОбъект, Истина);
				НоваяСтрокаКэша = КэшИнвойсов.Добавить();
				НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
				НоваяСтрокаКэша.Invoice = ТекИнвойс;
			Иначе
				ТекИнвойс = СтрокиИнвойса[0].Invoice;
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			КонецЕсли;
		ИначеЕсли ВыборкаДанные.TransType = "P" Тогда
			СтруктураПоискаBatch.ARBatchNbr = ПроводкаDSSОбъект.ArBatchNbr;
			СтруктураПоискаBatch.Company    = ПроводкаDSSОбъект.Company;
			СтруктураПоискаBatch.Prepayment = ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.AdvancesFromCustomers;
			СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
			Если СтрокиCashBatch.Количество() = 0 Тогда
				ТекCashBatch = СоздатьCashBatch(ПроводкаDSSОбъект, СтруктураПоискаBatch.Prepayment);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.ArBatchNbr = ПроводкаDSSОбъект.ArBatchNbr;
				НоваяСтрокаКэша.Prepayment = СтруктураПоискаBatch.Prepayment;
				НоваяСтрокаКэша.CashBatch = ТекCashBatch;
			Иначе
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, СтрокиCashBatch[0].CashBatch);
			КонецЕсли;
		Иначе
			ТекОшибка = "Incorrect trans type in " + ВыборкаДанные.НомерСтроки + " string!";
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		КонецЕсли;			
		
		НомерПроводки = НомерПроводки + 1;
		
		
		ТекДок = ПроводкаDSSОбъект.Ссылка.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;

	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	
КонецПроцедуры

Функция СоздатьCashBatch(ПроводкаDSSОбъект, Prepayment)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	//ДокОбъект.Номер = ПроводкаDSSОбъект.ArBatchNbr;
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	ДокОбъект.DocID = ПроводкаDSSОбъект.ARBatchNbr;
	ДокОбъект.PaymentNumber = ПроводкаDSSОбъект.ArInvoice;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.ClientID = ПроводкаDSSОбъект.CustomerNumber;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Prepayment = Prepayment;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции


Функция СоздатьИнвойс(ПроводкаDSSОбъект, ПолноеЗаполнение = Ложь)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Номер = ПроводкаDSSОбъект.ArInvoice;
	// { RGS TAlmazova 28.07.2016 17:12:21 - заполнение даты из проводки
	//ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Дата = ПроводкаDSSОбъект.DateLawson;
	ДокОбъект.DocNumber = ДокОбъект.Номер;
	// } RGS TAlmazova 28.07.2016 17:12:27 - заполнение даты из проводки
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	ДокОбъект.ClientID = ПроводкаDSSОбъект.CustomerNumber;
	Если ПолноеЗаполнение Тогда
		ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
		ДокОбъект.Amount = ПроводкаDSSОбъект.TranAmount;
	КонецЕсли;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции


Процедура ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, ТипОбъекта, СвязанныйОбъект)
	
	НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	НЗ.Отбор.ТипСвязанногоОбъекта.Установить(ТипОбъекта);
	НоваяЗапись = НЗ.Добавить();
	НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	НоваяЗапись.ТипСвязанногоОбъекта = ТипОбъекта;
	НоваяЗапись.СвязанныйОбъект = СвязанныйОбъект;
	НЗ.Записать(Истина);
	
КонецПроцедуры

Функция ПреобразоватьВДату(Знач Строчка, Знач ВидДаты)
	
	Если ТипЗнч(Строчка) = Тип("Строка") Тогда
		СтрокаДляОбработки = СокрЛП(Строчка);
		Если СтрДлина(СтрокаДляОбработки) = 7 ИЛИ СтрДлина(СтрокаДляОбработки) = 9 Тогда
			СтрокаДляОбработки = "0" + СтрокаДляОбработки;
		КонецЕсли;
		
		День = Лев(СтрокаДляОбработки, 2);
		Месяц = Сред(СтрокаДляОбработки, 3, 2);
		Год = Прав(СтрокаДляОбработки, 2);
		Если СтрНайти(Месяц, "/") ИЛИ СтрНайти(Месяц, ".") ИЛИ СтрНайти(Месяц, ",") Тогда
			Месяц = Сред(СтрокаДляОбработки, 4, 2);
		КонецЕсли;
		
		Если СтрДлина(СтрокаДляОбработки) = 10 ИЛИ СтрДлина(СтрокаДляОбработки) = 18 Тогда
			Год = Сред(СтрокаДляОбработки, 7, 4);
		Иначе	
			Год = Прав(СтрокаДляОбработки, 2);
			Попытка
				Если Число(Год) > 50 Тогда
					Год = "19" + Год;
				Иначе
					Год = "20" + Год;
				КонецЕсли;
			Исключение
				Возврат Дата(1,1,1);
			КонецПопытки;
		КонецЕсли; 
		
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Дата") Тогда
		Возврат Строчка;
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Число") Тогда 
		День = Цел(Строчка/10000);
		Месяц = Цел((Строчка - День*10000)/100);
		Год = Строчка - День*10000 - Месяц * 100;
		Попытка
			Если Число(Год) > 50 Тогда
				Год = 1900 + Год;
			Иначе
				Год = 2000 + Год;
			КонецЕсли;
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	Иначе		
		Возврат Дата(1,1,1);
	КонецЕсли;	
	Попытка 
		Возврат Дата(Год, Месяц, День);
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
	
КонецФункции



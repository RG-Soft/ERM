
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = "Excel (*.xlsx)";
	ДиалогОткрытияФайла.Заголовок = "Select a file to loading";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайла = ВыбранныеФайлы[0];
		АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), УникальныйИдентификатор);
		АдресФайлаВХранилище = АдресВХранилище;
		ЗаполнитьСписокЛистовЭкселя(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокЛистовЭкселя(ЗаполнитьЛист = Ложь)
	
	СписокЛистов = Новый Массив;
	
	ФайлЭксель = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если ЗаполнитьЛист Тогда
		
		//Если СписокЛистов.Количество() = 1 Тогда
		//	ЛистФайла = СписокЛистов[0];
		//ИначеЕсли СписокЛистов.Количество() > 1 Тогда
		//	Для каждого Лист Из СписокЛистов Цикл
		//		Если СтрНайти(Лист,"XR294") > 0 Тогда
		//			ЛистФайла = Лист;
		//		КонецЕсли;
		//	КонецЦикла;
		//Конецесли;
		ЛистФайла = СписокЛистов[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	Если Объект.ИмяФайла = "" Тогда
		Сообщить("The file is not selected");
	ИначеЕсли Период = Дата(1,1,1) Тогда
		Сообщить("Specify the period downloaded Payments");
	Иначе
		
		ТаблицаКоллизий.Очистить();
		
		ДанныеДляЗаполнения = Новый Структура();
		ТекстОшибки = "";
		
		ДД = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
		ДД.Записать(ПутьКФайлу);
		
		Connection = Новый COMОбъект("ADODB.Connection");
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
		
		Попытка
			Connection.Open(СтрокаПодключения);
		Исключение
			Попытка
				СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
				Connection.Open(СтрокаПодключения);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибки);
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
		КонецПопытки;
		
		rs = Новый COMObject("ADODB.RecordSet");
		rs.ActiveConnection = Connection;
		sqlString = "select * from [" + ЛистФайла + "]";
		rs.Open(sqlString);
		
		СоответствиеКолонок = Новый Соответствие;
		Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
			СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
		КонецЦикла;
		
		ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
		
		rs.MoveFirst();
		
		ВеличинаСдвига = ПерваяСтрокаДанных - 1 - ?(ИменаКолонокВПервойСтроке, 1, 1);
		Если ВеличинаСдвига <> 0 Тогда
			rs.Move(ВеличинаСдвига);
		КонецЕсли;
		
		ТекНомерСтроки = ПерваяСтрокаДанных;
		
		ТипСтрока = Тип("Строка");
		ТипЧисло = Тип("Число");
		
		Пока Не rs.EOF Цикл
			
			СтрокаДанных = ТаблицаДанных.Добавить();
			СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
			
			Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
				
				Попытка
					ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
				Исключение
					ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
					ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресВХранилище);
					Возврат;
				КонецПопытки;
					
				Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
				ИначеЕсли ТипЗнч(СтрокаДанных[ЭлементСоответствия.Ключ]) =  ТипЗнч("Строка")Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = Формат(ТекЗначение, "ЧРГ=; ЧН=0; ЧГ=0");
				Иначе
					СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
			rs.MoveNext();
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		КонецЦикла;
		
		rs.Close();
		Connection.Close();
		УдалитьФайлы(ПутьКФайлу);
		
		Для каждого СтрокаТаблицы из ТаблицаДанных Цикл
			Если СтрокаТаблицы.AU_Type = "Lawson" Тогда
				Пока СтрДлина(СтрокаТаблицы.AU) < 7 Цикл
					СтрокаТаблицы.AU = "0" + СтрокаТаблицы.AU;
				КонецЦикла;;
			Иначе
				Пока СтрДлина(СтрокаТаблицы.AU) < 10 Цикл
					СтрокаТаблицы.AU = "0" + СтрокаТаблицы.AU;
				КонецЦикла;;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаДанных Из ТаблицаДанных Цикл
			Если СтрокаДанных.Customer <> "" Тогда
				Пока СтрДлина(СтрокаДанных.Customer) < 10 Цикл
					 СтрокаДанных.Customer = "0" + СтрокаДанных.Customer;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Результат = ПроверитьКорректностьДанных(ТаблицаДанных);
		
		Если Результат Тогда
			СоздатьЗаписиРегистра(ТаблицаДанных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Результат = Ложь;
	
	ПрочитатьФайлНаСервере(Результат);
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'Payments loaded'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Payments are not loaded, add the missing data and download it again'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;

	// TransType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransType";
	СтрокаТЗ.ИмяКолонки = "TransType";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Customer
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Customer";
	СтрокаТЗ.ИмяКолонки = "Customer";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	//// CustomerNumber
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "CustomerNumber";
	//СтрокаТЗ.ИмяКолонки = "CustomerNumber";
	//СтрокаТЗ.ТипКолонки = ТипСтрока;
	//СтрокаТЗ.Обязательная = Истина;
	
	// TransDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransDate";
	СтрокаТЗ.ИмяКолонки = "TransDate";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;

	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	ТекМассивТипов = Новый Массив;
	ТекМассивТипов.Добавить(Тип("Строка"));
	//ТекМассивТипов.Добавить(Тип("Число"));
	СтрокаТЗ.ТипКолонки = Новый ОписаниеТипов(ТекМассивТипов, , Новый КвалификаторыСтроки(100));
	СтрокаТЗ.Обязательная = Истина;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	//// AmountUSD
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "AmountUSD";
	//СтрокаТЗ.ИмяКолонки = "AmountUSD";
	//СтрокаТЗ.ТипКолонки = ТипЧисло;
	//СтрокаТЗ.Обязательная = Истина;
	
	// AmountRUB
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrigAmount";
	СтрокаТЗ.ИмяКолонки = "OrigAmount";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// AU_Type
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU_Type";
	СтрокаТЗ.ИмяКолонки = "AU_Type";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// AU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU";
	СтрокаТЗ.ИмяКолонки = "AU";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСтруктуруФайлаПоУмолчанию();
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля, ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Функция ПроверитьКорректностьДанных(ТаблицаДанных)
	
	Результат = Ложь;
	ПериодКонец = КонецМесяца(Период);
	
	//определение источников для загрузки
	
	Если Source = Перечисления.ТипыСоответствий.Radius Тогда
		SourceAccount = Перечисления.ТипыСоответствий.OracleSmith;
	ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
		SourceAccount = Перечисления.ТипыСоответствий.Lawson;
	КонецЕсли;
	
	SourceCustomer = Перечисления.ТипыСоответствий.HOBs;
	
	Если SourceAccount = Перечисления.ТипыСоответствий.Lawson Тогда
		ТаблицаДанных.Колонки.Добавить("AccountCode", Новый ОписаниеТипов("Число"));
		Для каждого СтрокаДанных из ТаблицаДанных Цикл
			СтрокаДанных.AccountCode = Число(СтрокаДанных.Account);
		КонецЦикла;
	Иначе
		ТаблицаДанных.Колонки.Добавить("AccountCode", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(17)));
		Для каждого СтрокаДанных из ТаблицаДанных Цикл
			СтрокаДанных.AccountCode = СтрокаДанных.Account;
		КонецЦикла;
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	НастройкаИсточниковЗагрузкиВыручки.SourceCustomer,
	//	|	НастройкаИсточниковЗагрузкиВыручки.SourceAccount
	//	|ИЗ
	//	|	РегистрСведений.НастройкаИсточниковЗагрузкиВыручки КАК НастройкаИсточниковЗагрузкиВыручки
	//	|ГДЕ
	//	|	НастройкаИсточниковЗагрузкиВыручки.Source = &Source";
	//
	//Запрос.УстановитьПараметр("Source", Source);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
	//	Сообщить("Не задана настройка источников для загрузки выручки для данного источника!");
	//Иначе
	//	ВыборкаДетальныеЗаписи.Следующий();
	//	SourceCustomer = ВыборкаДетальныеЗаписи.SourceCustomer;
	//	SourceAccount = ВыборкаДетальныеЗаписи.SourceAccount;
	//	

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.Currency КАК Currency,
	|	ТаблицаИсходныхДанных.AccountCode,
	|	ТаблицаИсходныхДанных.Company,
	|	ТаблицаИсходныхДанных.AU_Type,
	|	ТаблицаИсходныхДанных.AU,
	|	ТаблицаИсходныхДанных.Customer
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных";
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	врТЗТаблицаДанных.Currency КАК Идентификатор
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО врТЗТаблицаДанных.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|	И НЕ врТЗТаблицаДанных.Currency = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	врТЗТаблицаДанных.AccountCode
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК ПланСчетов
		|		ПО врТЗТаблицаДанных.AccountCode = ПланСчетов.КодЧислом
		|			И (НЕ ПланСчетов.ПометкаУдаления)
		|ГДЕ
		|	врТЗТаблицаДанных.AccountCode <> 0
		|	И ПланСчетов.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	врТЗТаблицаДанных.Company
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Company = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	врТЗТаблицаДанных.Company <> 0
		|	И Организации.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	врТЗТаблицаДанных.AU
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|			И (КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL
		|	И врТЗТаблицаДанных.AU_Type = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	врТЗТаблицаДанных.AU
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|			И (КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL
		|	И врТЗТаблицаДанных.AU_Type = ""Oracle Smith""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Client"",
		|	&SourceCustomer,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client),
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	врТЗТаблицаДанных.Customer
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				,
		|				ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|					И ТипСоответствия = &SourceCustomer) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|		ПО врТЗТаблицаДанных.Customer = НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|ГДЕ
		|	НЕ КостЦентры.Ссылка ЕСТЬ NULL
		|	И врТЗТаблицаДанных.AU_Type = ""Lawson""
		|	И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|	И КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент,
		|	ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка),
		|	КостЦентры.Сегмент.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|ГДЕ
		|	НЕ КостЦентры.Ссылка ЕСТЬ NULL
		|	И врТЗТаблицаДанных.AU_Type = ""Oracle Smith""
		|	И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith)
		|	И КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации КАК Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка) КАК БазовыйЭлемент,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|ГДЕ
		|	НЕ КостЦентры.Ссылка ЕСТЬ NULL
		|	И врТЗТаблицаДанных.AU_Type = ""Lawson""
		|	И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|	И КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка),
		|	КостЦентры.ПодразделениеОрганизации.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|ГДЕ
		|	НЕ КостЦентры.Ссылка ЕСТЬ NULL
		|	И врТЗТаблицаДанных.AU_Type = ""Oracle Smith""
		|	И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith)
		|	И КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланСчетов.Ссылка,
		|	ПланСчетов.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК ПланСчетов
		|		ПО врТЗТаблицаДанных.AccountCode = ПланСчетов.КодЧислом
		|			И (НЕ ПланСчетов.ПометкаУдаления)
		|ГДЕ
		|	ПланСчетов.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО врТЗТаблицаДанных.Company = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)"
		;
	
	Запрос.УстановитьПараметр("Период", ПериодКонец);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", Source);
	Запрос.УстановитьПараметр("SourceCustomer", SourceCustomer);
	
	Если SourceAccount = Перечисления.ТипыСоответствий.OracleMI ИЛИ SourceAccount = Перечисления.ТипыСоответствий.OracleSmith Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПланСчетов.Lawson", "ПланСчетов.Oracle");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодЧислом", "Код");
		
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Source;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если ВыборкаЛокаций.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Source;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = SourceAccount;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Source;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура СоздатьЗаписиРегистра(ТаблицаДанных)
	
	УстановитьПривилегированныйРежим(Истина);

	ПериодКонец = КонецМесяца(Период);
	
	СтруктураПоискаInvoice = Новый Структура("ArInvoice, Company");
	
	СторнироватьДвиженияТекущегоМесяца();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.Currency КАК Currency,
	|	ТаблицаИсходныхДанных.AccountCode,
	|	ТаблицаИсходныхДанных.Company,
	|	ТаблицаИсходныхДанных.Invoice,
	|	ТаблицаИсходныхДанных.AU_Type,
	|	ТаблицаИсходныхДанных.TransType,
	|	ТаблицаИсходныхДанных.AU,
	|	ТаблицаИсходныхДанных.Customer,
	|	ТаблицаИсходныхДанных.OrigAmount,
	|	ТаблицаИсходныхДанных.TransDate
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных";
	
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника КАК ОбъектПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	|			,
	|			ТипСоответствия = &SourceCustomer
	|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
	|				И Идентификатор В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ДанныеФайла.Customer
	|					ИЗ
	|						врТЗТаблицаДанных КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника КАК ОбъектПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	|			&Период,
	|			ТипСоответствия = &Source
	|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
	|				И Идентификатор В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ДанныеФайла.Currency
	|					ИЗ
	|						врТЗТаблицаДанных КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
	|	КлючиИнвойсов.Company КАК Company,
	|	КлючиИнвойсов.Invoice КАК Invoice
	|ИЗ
	|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
	|ГДЕ
	|	КлючиИнвойсов.Source = &Source
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Source КАК Source,
	|	СУММА(врТЗТаблицаДанных.OrigAmount) КАК Amount,
	|	врТЗТаблицаДанных.Customer КАК ClientID,
	|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
	|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
	|	Организации.Ссылка КАК Company,
	|	ПланСчетов.Ссылка КАК Account,
	|	КостЦентры.Ссылка КАК AU,
	|	врТЗТаблицаДанных.Invoice КАК Invoice,
	|	врТЗТаблицаДанных.TransType КАК TransType,
	|	врТЗТаблицаДанных.TransDate КАК TransDate,
	|	Организации.DefaultLegalEntity КАК LegalEntity
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
	|		ПО врТЗТаблицаДанных.Customer = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
	|		ПО врТЗТаблицаДанных.Currency = ВТ_СоответствиеCurrency.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО врТЗТаблицаДанных.Company = Организации.Код
	|			И (Организации.Source = &Source)
	|			И (НЕ Организации.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК ПланСчетов
	|		ПО врТЗТаблицаДанных.AccountCode = ПланСчетов.КодЧислом
	|			И (НЕ ПланСчетов.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	|			И врТЗТаблицаДанных.AU = КостЦентры.Код
	|			И (КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
	|ГДЕ
	|	врТЗТаблицаДанных.AU_Type = ""Lawson""
	|
	|СГРУППИРОВАТЬ ПО
	|	врТЗТаблицаДанных.Customer,
	|	врТЗТаблицаДанных.Invoice,
	|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
	|	ВТ_СоответствиеCurrency.ОбъектПриемника,
	|	Организации.Ссылка,
	|	ПланСчетов.Ссылка,
	|	КостЦентры.Ссылка,
	|	врТЗТаблицаДанных.TransDate,
	|	врТЗТаблицаДанных.TransType,
	|	Организации.DefaultLegalEntity
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Source,
	|	СУММА(врТЗТаблицаДанных.OrigAmount),
	|	врТЗТаблицаДанных.Customer,
	|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
	|	ВТ_СоответствиеCurrency.ОбъектПриемника,
	|	Организации.Ссылка,
	|	ПланСчетов.Ссылка,
	|	КостЦентры.Ссылка,
	|	врТЗТаблицаДанных.Invoice,
	|	врТЗТаблицаДанных.TransType,
	|	врТЗТаблицаДанных.TransDate,
	|	Организации.DefaultLegalEntity
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
	|		ПО врТЗТаблицаДанных.Customer = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
	|		ПО врТЗТаблицаДанных.Currency = ВТ_СоответствиеCurrency.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО врТЗТаблицаДанных.Company = Организации.Код
	|			И (Организации.Source = &Source)
	|			И (НЕ Организации.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК ПланСчетов
	|		ПО врТЗТаблицаДанных.AccountCode = ПланСчетов.КодЧислом
	|			И (НЕ ПланСчетов.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	|			И врТЗТаблицаДанных.AU = КостЦентры.Код
	|			И (КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	|ГДЕ
	|	врТЗТаблицаДанных.AU_Type = ""Oracle Smith""
	|
	|СГРУППИРОВАТЬ ПО
	|	врТЗТаблицаДанных.Invoice,
	|	КостЦентры.Ссылка,
	|	врТЗТаблицаДанных.Customer,
	|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
	|	ВТ_СоответствиеCurrency.ОбъектПриемника,
	|	Организации.Ссылка,
	|	ПланСчетов.Ссылка,
	|	врТЗТаблицаДанных.TransDate,
	|	врТЗТаблицаДанных.TransType,
	|	Организации.DefaultLegalEntity"
	;
	
	Запрос.УстановитьПараметр("Период", ПериодКонец);
	Запрос.УстановитьПараметр("Source", Source);
	Запрос.УстановитьПараметр("SourceCustomer", SourceCustomer);
	
	Если SourceAccount = Перечисления.ТипыСоответствий.OracleMI ИЛИ SourceAccount = Перечисления.ТипыСоответствий.OracleSmith Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПланСчетов.Lawson", "ПланСчетов.Oracle");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодЧислом", "Код");
		
	КонецЕсли;
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшИнвойсов = РезультатЗапроса[2].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice, Company");
	
	ВыборкаДанные = РезультатЗапроса[3].Выбрать();
	
	НачатьТранзакцию();
	
	Док = Документы.КорректировкаРегистров.СоздатьДокумент();
	Док.ДополнительныеСвойства.Вставить("РазрешитьСозданиеДокументаБезРеверса", Истина);
	Док.Дата = ПериодКонец;
	Док.ТипКорректировки = Перечисления.ТипыКорректировкиРегистров.PaymentsLoading;
	Если Source = Перечисления.ТипыСоответствий.Radius Тогда
		Док.Комментарий = "Payments по Radius";
	ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
		Док.Комментарий = "Payments по Geofit";
	//ИначеЕсли Source = Перечисления.ТипыСоответствий.MFG Тогда
	//	Док.Комментарий = "Выручка по MFG";
	КонецЕсли;
	Док.Ответственный = Пользователи.ТекущийПользователь();
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Source);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДанные.Следующий() Цикл
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДанные, ВыборкаДанные.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		Если ВыборкаДанные.Client.Предопределенный Тогда
			ClientID = "";
		Иначе
			ClientID = ВыборкаДанные.ClientID;
		КонецЕсли;
		
		Если Месяц(ВыборкаДанные.TransDate) <> Месяц(Период) Тогда
			
			ВызватьИсключение "Период не соответствует данным в файле!";
		КонецЕсли;
		
		Если ВыборкаДанные.TransType = "I" Тогда
			
			Если Source = Перечисления.ТипыСоответствий.Radius Тогда
				НомерИнвойса =  "RD-" + ВыборкаДанные.Invoice + ";" + ClientID + ";" + Формат(Год(ВыборкаДанные.TransDate),"ЧГ=");
			ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
				НомерИнвойса =  "GF-" + ВыборкаДанные.Invoice + ";" + ClientID + ";" + Формат(Год(ВыборкаДанные.TransDate),"ЧГ=");
			КонецЕсли;
			
			СтруктураПоискаInvoice.ArInvoice = НомерИнвойса;
			СтруктураПоискаInvoice.Company = ВыборкаДанные.Company;
			СтрокиКэша = КэшИнвойсов.НайтиСтроки(СтруктураПоискаInvoice);
			Если СтрокиКэша.Количество() = 0 Тогда
				ТекИнвойс = СоздатьИнвойс(ВыборкаДанные, ClientID, НомерИнвойса);
				СтрокаКэша = КэшИнвойсов.Добавить();
				СтрокаКэша.ArInvoice = НомерИнвойса;
				СтрокаКэша.Company = ВыборкаДанные.Company;
				СтрокаКэша.Invoice = ТекИнвойс;
			Иначе
				ТекИнвойс = СтрокиКэша[0].Invoice;
			КонецЕсли;
			
			Движение = Док.Движения.Payments.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаДанные);
			Движение.Период = ВыборкаДанные.TransDate;
			Движение.Invoice = ТекИнвойс;
			Движение.ClientID =  ClientID;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Док.Движения.Payments.Количество() > 0 Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "Payments";
		
		Док.Движения.Payments.Записывать = Истина;
		
	КонецЕсли;
		
	Док.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция СоздатьИнвойс(ДанныеДляЗаполнения, ClientID, НомерИнвойса)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокОбъект,ДанныеДляЗаполнения);
	ДокОбъект.Номер = НомерИнвойса;
	ДокОбъект.Дата = ДанныеДляЗаполнения.TransDate;
	ДокОбъект.DocNumber = ДанныеДляЗаполнения.Invoice;
	ДокОбъект.Amount = ДанныеДляЗаполнения.Amount;
	ДокОбъект.ClientID = ClientID;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура СторнироватьДвиженияТекущегоМесяца()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	PaymentsОбороты.Source КАК Source,
		|	PaymentsОбороты.Company КАК Company,
		|	PaymentsОбороты.Client КАК Client,
		|	PaymentsОбороты.ClientID КАК ClientID,
		|	PaymentsОбороты.AU КАК AU,
		|	PaymentsОбороты.Account КАК Account,
		|	PaymentsОбороты.Currency КАК Currency,
		|	PaymentsОбороты.LegalEntity КАК LegalEntity,
		|	-PaymentsОбороты.AmountОборот КАК Amount,
		//|	-PaymentsОбороты.BaseAmountОборот КАК BaseAmount,
		|	&КонецПериода КАК Период
		//|	PaymentsОбороты.Document КАК Document
		|ИЗ
		|	РегистрНакопления.Payments.Обороты(&НачалоПериода, &КонецПериода, , Source = &Source) КАК PaymentsОбороты";
	
	Запрос.Параметры.Вставить("НачалоПериода",НачалоМесяца(Период));
	Запрос.Параметры.Вставить("КонецПериода",КонецМесяца(Период));
	Запрос.Параметры.Вставить("Source", Source);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ_ДвиженияТекущегоМесяца = РезультатЗапроса.Выгрузить();
	
	Если ТЗ_ДвиженияТекущегоМесяца.Количество() > 0 Тогда
		ДокОбъект = Документы.КорректировкаРегистров.СоздатьДокумент();
		ДокОбъект.ДополнительныеСвойства.Вставить("РазрешитьСозданиеДокументаБезРеверса", Истина);
		ДокОбъект.Дата = КонецМесяца(Период);
		ДокОбъект.ТипКорректировки = Перечисления.ТипыКорректировкиРегистров.PaymentsLoading;
		Если Source = Перечисления.ТипыСоответствий.Radius Тогда
			ДокОбъект.Комментарий = "Списание текущих оплат по Radius";
		ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
			ДокОбъект.Комментарий = "Списание текущих оплат по Geofit";
		//ИначеЕсли Source = Перечисления.ТипыСоответствий.MFG Тогда
		//	ДокОбъект.Комментарий = "Списание текущей выручки по MFG";
		КонецЕсли;
		ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
		СтрокаТаблицыРегистров = ДокОбъект.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "Payments";
		ДокОбъект.Движения.Payments.Загрузить(ТЗ_ДвиженияТекущегоМесяца);
		ДокОбъект.Движения.Payments.Записывать = Истина;
		ДокОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура _ПометитьНаУдалениеКорректировкиТекущегоМесяца()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРегистров.Ссылка
		|ИЗ
		|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
		|ГДЕ
		|	НЕ КорректировкаРегистров.ПометкаУдаления
		|	И КорректировкаРегистров.Комментарий = ""Оплаты по Radius""
		|	И КорректировкаРегистров.Дата = &Период";
	
	Запрос.Параметры.Вставить("Период",КонецМесяца(Период));
	
	//Если Source = Перечисления.ТипыСоответствий.MFG Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Radius", "MFG");
	//ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
	Если Source = Перечисления.ТипыСоответствий.Geofit Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Radius", "Geofit");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокОбъект.ДополнительныеСвойства.Вставить("РазрешитьСозданиеДокументаБезРеверса", Истина);
		ДокОбъект.УстановитьПометкуУдаления(Истина);
		ДокОбъект.Записать();
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = РезультатВыбора.НачалоПериода;
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Период = Дата(1,1,1) Тогда	
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
	Иначе
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Период), КонецМесяца(Период));
	КонецЕсли;	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтаФорма.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

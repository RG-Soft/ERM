&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСтруктуруФайлаПоУмолчанию();
	
	ДокументЗагрузки = Параметры.ДокументЗагрузки;
	ИмяФайла = Параметры.ИмяФайла;
	
	ЗаполнитьСписокЛистовЭкселя();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	// Credit Approver
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreditApprover";
	СтрокаТЗ.ИмяКолонки = "Credit Approver";
	СтрокаТЗ.НомерКолонки = 1;
	
	// Credit Assessment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreditAssessment";
	СтрокаТЗ.ИмяКолонки = "Credit Assessment";
	СтрокаТЗ.НомерКолонки = 2;
	
	// CreditLimit
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreditLimit";
	СтрокаТЗ.ИмяКолонки = "Credit limit";
	СтрокаТЗ.НомерКолонки = 3;
	
	// CreditRating
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreditRating";
	СтрокаТЗ.ИмяКолонки = "Credit rating";
	СтрокаТЗ.НомерКолонки = 4;
	
	// Engagement readiness
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EngagementReadiness";
	СтрокаТЗ.ИмяКолонки = "Engagement readiness";
	СтрокаТЗ.НомерКолонки = 5;
	
	// SAP Integration id
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SAPIntegrationId";
	СтрокаТЗ.ИмяКолонки = "SAP Integration id";
	СтрокаТЗ.НомерКолонки = 6;
	
	// SAP Sync Flag
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SAPSyncFlag";
	СтрокаТЗ.ИмяКолонки = "SAP Sync Flag";
	СтрокаТЗ.НомерКолонки = 7;
	
	// SIS Relationships
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SISRelationships";
	СтрокаТЗ.ИмяКолонки = "SIS Relationships";
	СтрокаТЗ.НомерКолонки = 8;
	
	// SIS Revenues
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SISRevenues";
	СтрокаТЗ.ИмяКолонки = "SIS Revenues";
	СтрокаТЗ.НомерКолонки = 9;
	
	// SISScope
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SISScope";
	СтрокаТЗ.ИмяКолонки = "SIS Scope";
	СтрокаТЗ.НомерКолонки = 10;
	
	// Sub Credit Rating
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubCreditRating";
	СтрокаТЗ.ИмяКолонки = "Sub Credit Rating";
	СтрокаТЗ.НомерКолонки = 11;
	
	// Available Offline
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AvailableOffline";
	СтрокаТЗ.ИмяКолонки = "Available Offline";
	СтрокаТЗ.НомерКолонки = 12;
	
	// Billing Flag
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BillingFlag";
	СтрокаТЗ.ИмяКолонки = "Billing Flag";
	СтрокаТЗ.НомерКолонки = 12;
	
	// TCC Controlled
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TCCControlled";
	СтрокаТЗ.ИмяКолонки = "TCC Controlled";
	СтрокаТЗ.НомерКолонки = 13;
	
	// BusinessSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BusinessSegment";
	СтрокаТЗ.ИмяКолонки = "Business Segment";
	СтрокаТЗ.НомерКолонки = 14;
	
	// HQ
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "HQ";
	СтрокаТЗ.ИмяКолонки = "HQ";
	СтрокаТЗ.НомерКолонки = 15;
	
	// Id
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Id";
	СтрокаТЗ.ИмяКолонки = "Id";
	СтрокаТЗ.НомерКолонки = 16;
	
	// Customer Number
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerNumber";
	СтрокаТЗ.ИмяКолонки = "Customer Number";
	СтрокаТЗ.НомерКолонки = 17;
	
	// Reference
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Reference";
	СтрокаТЗ.ИмяКолонки = "Reference";
	СтрокаТЗ.НомерКолонки = 18;
	
	// Stage
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Stage";
	СтрокаТЗ.ИмяКолонки = "Stage";
	СтрокаТЗ.НомерКолонки = 19;
	
	// Has Attachment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "HasAttachment";
	СтрокаТЗ.ИмяКолонки = "Has Attachment";
	СтрокаТЗ.НомерКолонки = 20;
	
	// Corporate Alias
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CorporateAlias";
	СтрокаТЗ.ИмяКолонки = "Corporate Alias";
	СтрокаТЗ.НомерКолонки = 21;
	
	// Category
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Category";
	СтрокаТЗ.ИмяКолонки = "Category";
	СтрокаТЗ.НомерКолонки = 22;
	
	// Region
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Region";
	СтрокаТЗ.ИмяКолонки = "Region";
	СтрокаТЗ.НомерКолонки = 23;
	
	// Main Fax
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "MainFax";
	СтрокаТЗ.ИмяКолонки = "Main Fax";
	СтрокаТЗ.НомерКолонки = 24;
	
	// New
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "New";
	СтрокаТЗ.ИмяКолонки = "New";
	СтрокаТЗ.НомерКолонки = 25;
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.НомерКолонки = 26;
	
	// Site
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Site";
	СтрокаТЗ.ИмяКолонки = "Site";
	СтрокаТЗ.НомерКолонки = 27;
	
	// Account Team
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AccountTeam";
	СтрокаТЗ.ИмяКолонки = "Account Team";
	СтрокаТЗ.НомерКолонки = 28;
	
	// Main Phone
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "MainPhone";
	СтрокаТЗ.ИмяКолонки = "Main Phone";
	СтрокаТЗ.НомерКолонки = 29;
	
	// Street Address
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "StreetAddress";
	СтрокаТЗ.ИмяКолонки = "Street Address";
	СтрокаТЗ.НомерКолонки = 30;
	
	// City
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "City";
	СтрокаТЗ.ИмяКолонки = "City";
	СтрокаТЗ.НомерКолонки = 31;
	
	// Country
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Country";
	СтрокаТЗ.ИмяКолонки = "Country";
	СтрокаТЗ.НомерКолонки = 32;
	
	// Postal Code
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PostalCode";
	СтрокаТЗ.ИмяКолонки = "Postal Code";
	СтрокаТЗ.НомерКолонки = 33;
	
	// Region1
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Region1";
	СтрокаТЗ.ИмяКолонки = "Region";
	СтрокаТЗ.НомерКолонки = 34;
	
	// County1
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "County1";
	СтрокаТЗ.ИмяКолонки = "County";
	СтрокаТЗ.НомерКолонки = 35;
	
	// Address Line 2
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AddressLine2";
	СтрокаТЗ.ИмяКолонки = "Address Line 2";
	СтрокаТЗ.НомерКолонки = 36;
	
	// Parent Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ParentAccount";
	СтрокаТЗ.ИмяКолонки = "Parent Account";
	СтрокаТЗ.НомерКолонки = 37;
	
	// Primary Account Rep
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PrimaryAccountRep";
	СтрокаТЗ.ИмяКолонки = "Primary Account Rep";
	СтрокаТЗ.НомерКолонки = 38;
	
	// Area of Operation
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AreaOfOperation";
	СтрокаТЗ.ИмяКолонки = "Area of Operation";
	СтрокаТЗ.НомерКолонки = 39;
	
	// Parent Account Site
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ParentAccountSite";
	СтрокаТЗ.ИмяКолонки = "Parent Account Site";
	СтрокаТЗ.НомерКолонки = 40;
	
	// Account Type
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AccountType";
	СтрокаТЗ.ИмяКолонки = "Account Type";
	СтрокаТЗ.НомерКолонки = 41;
	
	// Alias
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Alias";
	СтрокаТЗ.ИмяКолонки = "Alias";
	СтрокаТЗ.НомерКолонки = 42;
	
	// Home Page
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "HomePage";
	СтрокаТЗ.ИмяКолонки = "Home Page";
	СтрокаТЗ.НомерКолонки = 43;
	
	// Organization
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Organization";
	СтрокаТЗ.ИмяКолонки = "Organization";
	СтрокаТЗ.НомерКолонки = 44;
	
	// Account Legal Name
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AccountLegalName";
	СтрокаТЗ.ИмяКолонки = "Account Legal Name";
	СтрокаТЗ.НомерКолонки = 45;
	
	// Lawson Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LawsonCompany";
	СтрокаТЗ.ИмяКолонки = "Lawson Company";
	СтрокаТЗ.НомерКолонки = 46;
	
	// Lawson Synch Flag
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LawsonSynchFlag";
	СтрокаТЗ.ИмяКолонки = "Lawson Synch Flag";
	СтрокаТЗ.НомерКолонки = 47;
	
	// Integration Id
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "IntegrationId";
	СтрокаТЗ.ИмяКолонки = "Integration Id";
	СтрокаТЗ.НомерКолонки = 48;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЛистовЭкселя()
	
	СписокЛистов = Новый Массив;
	
	ФайлЭксель = ДокументЗагрузки.ИсточникДанных.Получить();
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если СписокЛистов.Количество() > 0 Тогда
		ЛистФайла = СписокЛистов[0];
	Конецесли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьФайлНаСервере()
	
	ТаблицаДанных.Очистить();
	
	//////////////
	
	СтруктураПараметров = Новый Структура("ПутьКФайлу, ЛистФайла, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	СтруктураПараметров.Вставить("СтруктураКолонок", РеквизитФормыВЗначение("СтруктураКолонок"));
	СтруктураПараметров.Вставить("ТаблицаДанных", РеквизитФормыВЗначение("ТаблицаДанных"));
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ЗагрузкаCRMAccountsExtract.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Загрузка данных CRM Accounts extract'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Обработки.ЗагрузкаCRMAccountsExtract.ЗагрузитьДанныеИзФайла", 
			СтруктураПараметров, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	
	Результат = ЗагрузитьФайлНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОшибкаЗаполнения") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураДанных.ОшибкаЗаполнения);
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ТаблицаДанных") Тогда
		//ТаблицаДанных.Загрузить(СтруктураДанных.ТаблицаДанных);
		АдресТаблицыДанныхВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных.ТаблицаДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьПодготовленныеДанные();
				//УправлениеФормой(ЭтаФорма);
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				Закрыть(АдресТаблицыДанныхВХранилище);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;	
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

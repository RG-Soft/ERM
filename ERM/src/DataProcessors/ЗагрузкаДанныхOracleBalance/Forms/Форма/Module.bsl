
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла	= Истина;
	ДиалогОткрытияФайла.Заголовок = "Select a file to loading";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайла = ВыбранныеФайлы[0];
		АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), УникальныйИдентификатор);
		АдресФайлаВХранилище = АдресВХранилище;
		ЗаполнитьСписокЛистовЭкселя(Истина);
	КонецЕсли;
	

КонецПроцедуры

Процедура ЗаполнитьСписокЛистовЭкселя(ЗаполнитьЛист = Ложь)
	
	СписокЛистов = Новый Массив;
	
	ФайлЭксель = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsb");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если СписокЛистов.Количество() > 0 И ЗаполнитьЛист Тогда
		Для каждого Лист Из СписокЛистов Цикл
			Если СтрНайти(Лист,"SQL") > 0 Тогда
				ЛистФайла = Лист;
			КонецЕсли;
		КонецЦикла;
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	Если Объект.ИмяФайла = "" Тогда
		Сообщить("The file is not selected");
	ИначеЕсли ТипВнешнейСистемы = Перечисления.ТипыСоответствий.ПустаяСсылка() Тогда
		Сообщить("The source is not selected");
	ИначеЕсли Период = Дата(1,1,1) Тогда
		Сообщить("Specify the period downloaded balances");
	Иначе
		
		ЗаполнитьСтруктуруФайлаПоУмолчанию();
		
		ТаблицаКоллизий.Очистить();
		
		ДанныеДляЗаполнения = Новый Структура();
		ТекстОшибки = "";
		
		ДД = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsb");
		ДД.Записать(ПутьКФайлу);
		
		//Если ТипВнешнейСистемы = Перечисления.ТипыСоответствий.OracleMI Тогда
		//	УдалитьШапкуФайла(СокрЛП(ПутьКФайлу), ЛистФайла);
		//КонецЕсли;
		
		Connection = Новый COMОбъект("ADODB.Connection");
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
		
		Попытка
			Connection.Open(СтрокаПодключения);
		Исключение
			Попытка
				СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
				Connection.Open(СтрокаПодключения);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибки);
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
		КонецПопытки;
		
		rs = Новый COMObject("ADODB.RecordSet");
		rs.ActiveConnection = Connection;
		sqlString = "select * from [" + ЛистФайла + "]";
		rs.Open(sqlString);
		
		СоответствиеКолонок = Новый Соответствие;
		Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
			СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
		КонецЦикла;
		
		ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
		
		//КолонкиИсключения = Новый Массив;
		
		//// проверим формат файла
		//Если Не ИменаКолонокВПервойСтроке Тогда
		//	// тогда поищем строку с именами колонок, она должна быть до первой строки данных
		//	// будем ориентироваться по первой же колонке, если там не найдем, то проблема уже есть
		//	СтруктураКолонкиДляПроверки = СтруктураКолонок[0];
		//	ТекНомерСтроки = 1;
		//	Пока rs.Fields(СтруктураКолонкиДляПроверки.ИмяКолонки) = Неопределено
		//		И ТекНомерСтроки < ПерваяСтрокаДанных Цикл
		//		ТекНомерСтроки = ТекНомерСтроки + 1;
		//		rs.MoveNext();
		//	КонецЦикла;
		//КонецЕсли;
		
		//Для каждого СтруктураКолонкиДляПроверки Из СтруктураКолонок Цикл
		//	Попытка
		//		ТекЗначение = rs.Fields(СтруктураКолонкиДляПроверки.ИмяКолонки);
		//	Исключение
		//		Если СтруктураКолонкиДляПроверки.Обязательная Тогда
		//			ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", "Invalid input file format. Please see file settings.");
		//			ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
		//			Возврат;
		//		Иначе
		//			КолонкиИсключения.Добавить(СтруктураКолонкиДляПроверки.ИмяКолонки);
		//		КонецЕсли;
		//	КонецПопытки;
		//КонецЦикла;
		
		rs.MoveFirst();
		
		ВеличинаСдвига = ПерваяСтрокаДанных - 1 - ?(ИменаКолонокВПервойСтроке, 1, 1);
		Если ВеличинаСдвига <> 0 Тогда
			rs.Move(ВеличинаСдвига);
		КонецЕсли;
		
		ТекНомерСтроки = ПерваяСтрокаДанных;
		
		ТипСтрока = Тип("Строка");
		ТипЧисло = Тип("Число");
		
		Пока Не rs.EOF
			Цикл
			
			СтрокаДанных = ТаблицаДанных.Добавить();
			СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
			
			Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
				
				Попытка
					ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
				Исключение
					ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
					ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресВХранилище);
					Возврат;
				КонецПопытки;
					
				Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
				ИначеЕсли ТипЗнч(СтрокаДанных[ЭлементСоответствия.Ключ]) =  ТипЗнч("Строка")Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = Формат(ТекЗначение, "ЧРГ=; ЧН=0; ЧГ=0");
				Иначе
					СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
			rs.MoveNext();
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		КонецЦикла;
		
		rs.Close();
		Connection.Close();
		УдалитьФайлы(ПутьКФайлу);
		
		Результат = ВыполнитьПроверкуНастроекСинхронизации(ТаблицаДанных);
		
		Если Результат Тогда
			ЗаписатьВРегистр(ТаблицаДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьШапкуФайла(ПутьКФайлу, ЛистФайла)
	
	ЭкземплярExcel = Новый COMОбъект("Excel.Application");
	Книга = ЭкземплярExcel.Application.Workbooks.Open(ПутьКФайлу);
	
	ИмяЛиста = ЛистФайла;
	Если Прав(ИмяЛиста, 1) = "$" Тогда
		ИмяЛиста = Лев(ИмяЛиста, СтрДлина(ИмяЛиста) - 1);
	КонецЕсли;
	
	Лист = ЭкземплярExcel.Worksheets(ИмяЛиста);
	
	// в качестве ориентиров будем использовать колонки SOURCE_SYSTEM, GL_ACCOUNT, ID_ORIG
	НомерСтрокиЗаголовка = 1;
	
	Для ТекНомерСтроки = 1 По 100 Цикл
		
		НайденаSourceSystem = Ложь;
		НайденаGlAccount = Ложь;
		НайденаIdOrig = Ложь;
		
		Для ТекНомерСтолбца = 1 По 100 Цикл
			
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "SOURCE_SYSTEM" Тогда
				НайденаSourceSystem = Истина;
			КонецЕсли;
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "GL_ACCOUNT" Тогда
				НайденаGlAccount = Истина;
			КонецЕсли;
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "DOC_ID" Тогда
				НайденаDOCID = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденаSourceSystem И НайденаGlAccount И НайденаDOCID Тогда
			НомерСтрокиЗаголовка = ТекНомерСтроки;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерСтрокиЗаголовка > 1 Тогда
		
		СтрокиДляУдаления = Лист.Rows("1:" + Строка(НомерСтрокиЗаголовка - 1));
		СтрокиДляУдаления.Delete();
		//Книга.SaveAs(ПутьКФайлу);
		Книга.Save();
		
	КонецЕсли;
	
	ЭкземплярExcel.Quit();
	ЭкземплярExcel = Неопределено;
	
КонецПроцедуры

Процедура ЗаписатьВРегистр(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.SOURCE_SYSTEM,
	|	ТаблицаИсходныхДанных.OU,
	|	ТаблицаИсходныхДанных.GL_SOURCE,
	|	ТаблицаИсходныхДанных.CURRENCY_CODE,
	|	ТаблицаИсходныхДанных.EXCHANGE_RATE,
	|	ТаблицаИсходныхДанных.GL_ACCOUNT,
	|	ТаблицаИсходныхДанных.CUSTOMER_NUMBER,
	|	ТаблицаИсходныхДанных.CUSTOMER_NAME,
	|	ТаблицаИсходныхДанных.ENTERED,
	|	ТаблицаИсходныхДанных.ACCOUNTED,
	|	ВЫБОР
	|		КОГДА ТаблицаИсходныхДанных.DOC_TYPE = ""Invoice""
	|			ТОГДА ""INV""
	|		КОГДА ТаблицаИсходныхДанных.DOC_TYPE = ""Receipt""
	|			ТОГДА ""CASH""
	|		ИНАЧЕ ТаблицаИсходныхДанных.DOC_TYPE
	|	КОНЕЦ КАК DOC_TYPE,
	|	ТаблицаИсходныхДанных.DOC_NUMBER,
	|	ТаблицаИсходныхДанных.DOC_ID,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 17, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 22, 3) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 26, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК Account,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 10, 6) КАК Location,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 10, 6) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК AU
	|ПОМЕСТИТЬ ВТ_ДанныеФайла
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&ТекущаяДата,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CUSTOMER_NUMBER
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CURRENCY_CODE
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SalesOrder.Номер,
		|	SalesOrder.Ссылка
		|ИЗ
		|	Документ.SalesOrder КАК SalesOrder
		|ГДЕ
		|	SalesOrder.Source = &ТипВнешнейСистемы
		|	И НЕ SalesOrder.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Source,
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Client,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.AU,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиИнвойсов.ArInvoice,
		|	КлючиИнвойсов.Invoice
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.DOC_NUMBER
		|			И (КлючиИнвойсов.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CashBatch.PaymentNumber,
		|	CashBatch.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО CashBatch.PaymentNumber = ВТ_ДанныеФайла.DOC_NUMBER
		|			И (НЕ CashBatch.ПометкаУдаления)
		|			И (CashBatch.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиBatchAllocation.Source,
		|	КлючиBatchAllocation.Company,
		|	КлючиBatchAllocation.Client,
		|	КлючиBatchAllocation.Location,
		|	КлючиBatchAllocation.AU,
		|	КлючиBatchAllocation.Account,
		|	КлючиBatchAllocation.Currency,
		|	КлючиBatchAllocation.BatchAllocation
		|ИЗ
		|	РегистрСведений.КлючиBatchAllocation КАК КлючиBatchAllocation
		|ГДЕ
		|	КлючиBatchAllocation.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Company,
		|	Oracle.Ссылка КАК Account,
		|	ПодразделенияОрганизаций.Ссылка КАК Location,
		|	Сегменты.Ссылка КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_ДанныеФайла.EXCHANGE_RATE КАК ExchangeRate,
		|	ВТ_ДанныеФайла.GL_ACCOUNT КАК GL_Account,
		//|	ВЫБОР
		//|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""JV""
		//|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|		ИНАЧЕ ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника
		//|	КОНЕЦ КАК Client,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	СУММА(ВТ_ДанныеФайла.ENTERED) КАК Amount,
		|	СУММА(ВТ_ДанныеФайла.ACCOUNTED) КАК BaseAmount,
		|	ВТ_ДанныеФайла.DOC_TYPE КАК DocType,
		|	ВТ_ДанныеФайла.DOC_ID КАК DocID,
		|	ВТ_ДанныеФайла.CUSTOMER_NUMBER КАК CustomerNumber,
		|	ВТ_ДанныеФайла.DOC_NUMBER КАК DocNumber,
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)) КАК AU,
		|	ВТ_ДанныеФайла.AU КАК КодAU
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_ДанныеФайла.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_ДанныеФайла.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО ВТ_ДанныеФайла.SubSubSegment = Сегменты.Код
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.CURRENCY_CODE = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|			И (КостЦентры.Source = &ТипВнешнейСистемы)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.CUSTOMER_NUMBER = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|
		|СГРУППИРОВАТЬ ПО
		|	Oracle.Ссылка,
		|	Организации.Ссылка,
		|	ВТ_ДанныеФайла.DOC_TYPE,
		|	ВТ_ДанныеФайла.EXCHANGE_RATE,
		|	ВТ_ДанныеФайла.GL_ACCOUNT,
		|	ВТ_ДанныеФайла.DOC_ID,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника,
		|	ПодразделенияОрганизаций.Ссылка,
		|	ВТ_ДанныеФайла.DOC_NUMBER,
		|	Сегменты.Ссылка,
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)),
		|	ВТ_ДанныеФайла.AU,
		//|	ВЫБОР
		//|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""JV""
		//|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|		ИНАЧЕ ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника
		//|	КОНЕЦ,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
		|	ВТ_ДанныеФайла.CUSTOMER_NUMBER";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", ТипВнешнейСистемы);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	
	ВыборкаКэшSalesOrders = РезультатЗапроса[2].Выбрать();
	КэшSalesOrders = Новый ТаблицаЗначений;
	КэшSalesOrders.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	КэшSalesOrders.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.SalesOrder"));
	КэшSalesOrders.Индексы.Добавить("Номер");
	
	Пока ВыборкаКэшSalesOrders.Следующий() Цикл
		СтрокаКэша = КэшSalesOrders.Добавить();
		СтрокаКэша.Номер = СокрЛП(ВыборкаКэшSalesOrders.Номер);
		СтрокаКэша.Ссылка = ВыборкаКэшSalesOrders.Ссылка;
	КонецЦикла;
	
	КэшРучныхКоррерктировок = РезультатЗапроса[3].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Client, Location, AU, Account, Currency");
	//КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Location, SubSubSegment, Account, Currency");
	
	КэшИнвойсов = РезультатЗапроса[4].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice");
	
	КэшCashBatch = РезультатЗапроса[5].Выгрузить();
	КэшCashBatch.Индексы.Добавить("PaymentNumber");
	
	КэшBatchAllocation = РезультатЗапроса[6].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("Source, Company, Client, Location, AU, Account, Currency");
	
	ТаблицаДаты = РезультатЗапроса[7].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[8].Выбрать();
	
	КэшAU = Новый Соответствие;
	
	//НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	//НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Client, Location, AU, Account, Currency");
	СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, AU, Account, Currency");
	
	ARBalance = РегистрыСведений.ARBalance;
	НаборЗаписей = ARBalance.СоздатьНаборЗаписей();
	
	ТаблицаОстатков = НаборЗаписей.ВыгрузитьКолонки();
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(ТипВнешнейСистемы);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		//Если Даты = Неопределено Тогда
		//	ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
		//	Отказ = Истина;
		//	ВызватьИсключение ТекОшибка;
		//ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
		//	ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
		//	Отказ = Истина;
		//	ВызватьИсключение ТекОшибка;
		//Иначе
		//	ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
		//	ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		//КонецЕсли;
		
			//НаборЗаписей = ARBalance.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Период.Установить(Период);
			//НаборЗаписей.Отбор.Location.Установить(ВыборкаДетальныеЗаписи.Location);
			//НаборЗаписей.Отбор.Client.Установить(ВыборкаДетальныеЗаписи.Client);
			//НаборЗаписей.Отбор.Company.Установить(ВыборкаДетальныеЗаписи.Company);
			//НаборЗаписей.Отбор.Source.Установить(ТипВнешнейСистемы);
			//НаборЗаписей.Отбор.SubSubSegment.Установить(ВыборкаДетальныеЗаписи.SubSubSegment);
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		TransType = "";
		Если ВыборкаДетальныеЗаписи.DocType = "INV" Тогда
			//Инвойс = КэшИнвойсов.Найти(ВыборкаДетальныеЗаписи.DocNumber, "ArInvoice");
			Инвойс = ПолучитьИнвойс(ВыборкаДетальныеЗаписи.DocID, ТипВнешнейСистемы);
			Если Инвойс = Неопределено Тогда
				ПолеИнвойс =  ВыборкаДетальныеЗаписи.DocID;
			Иначе
				ПолеИнвойс = Инвойс;
			КонецЕсли;
			TransType = "I";
		ИначеЕсли  ВыборкаДетальныеЗаписи.DocType = "CASH" Тогда
			CashBatch = ПолучитьCashBatch(ВыборкаДетальныеЗаписи.DocID,ТипВнешнейСистемы, Ложь);
			//СтрокаCashBatch = КэшCashBatch.Найти(ВыборкаДетальныеЗаписи.DocNumber, "PaymentNumber");
			Если CashBatch = Неопределено Тогда
				ПолеИнвойс =  ВыборкаДетальныеЗаписи.DocID;
			Иначе
				ПолеИнвойс = CashBatch;
			КонецЕсли;
			TransType = "P";
		ИначеЕсли  ВыборкаДетальныеЗаписи.DocType = "JV" Тогда
			СтруктураПоискаРучнойКорректировки.Source = ТипВнешнейСистемы;
			СтруктураПоискаРучнойКорректировки.Company = ВыборкаДетальныеЗаписи.Company;
			СтруктураПоискаРучнойКорректировки.Client = ВыборкаДетальныеЗаписи.Client;
			СтруктураПоискаРучнойКорректировки.Location = ВыборкаДетальныеЗаписи.Location;
			//СтруктураПоискаРучнойКорректировки.SubSubSegment = ВыборкаДетальныеЗаписи.SubSubSegment;
			СтруктураПоискаРучнойКорректировки.Account = ВыборкаДетальныеЗаписи.Account;
			СтруктураПоискаРучнойКорректировки.Currency = ВыборкаДетальныеЗаписи.Currency;
			
			СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
			Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
				ПолеИнвойс =  СоздатьРучнуюКорректировку(ВыборкаДетальныеЗаписи);
				СтрокаКэша = КэшРучныхКоррерктировок.Добавить();
				СтрокаКэша.Source = ТипВнешнейСистемы;
				СтрокаКэша.Company = ВыборкаДетальныеЗаписи.Company;
				СтрокаКэша.Client = ВыборкаДетальныеЗаписи.Client;
				СтрокаКэша.Location = ВыборкаДетальныеЗаписи.Location;
				//СтрокаКэша.SubSubSegment = ВыборкаДетальныеЗаписи.SubSubSegment;
				СтрокаКэша.Account = ВыборкаДетальныеЗаписи.Account;
				СтрокаКэша.Currency = ВыборкаДетальныеЗаписи.Currency;
				СтрокаКэша.РучнаяКорректировка = ПолеИнвойс;
			Иначе
				ПолеИнвойс = СтрокиРучнойКорректировки[0].РучнаяКорректировка;
			КонецЕсли;
			TransType = "JV";
		ИначеЕсли  ВыборкаДетальныеЗаписи.DocType = "Accrual" Тогда
			
			СтрокаSalesOrder = КэшSalesOrders.Найти(ВыборкаДетальныеЗаписи.DocNumber, "Номер");
			
			Если СтрокаSalesOrder = Неопределено Тогда
				ПолеИнвойс =  ВыборкаДетальныеЗаписи.DocNumber;
			Иначе
				ПолеИнвойс = СтрокаSalesOrder.Ссылка;
			КонецЕсли;
			TransType = "A";
		Иначе
			ПолеИнвойс =  ВыборкаДетальныеЗаписи.DocNumber;
		КонецЕсли;
		
		//НаборЗаписей.Отбор.Invoice.Установить(ПолеИнвойс);
		//НаборЗаписей.Отбор.Account.Установить(ВыборкаДетальныеЗаписи.Account);
		//НаборЗаписей.Отбор.Currency.Установить(ВыборкаДетальныеЗаписи.Currency);
		//НаборЗаписей.Отбор.AU.Установить(ВыборкаДетальныеЗаписи.AU);
		//НаборЗаписей.Прочитать();
		
		СтрокаОстатка = ТаблицаОстатков.Добавить();
		СтрокаОстатка.Период = Период;
		СтрокаОстатка.Location = ВыборкаДетальныеЗаписи.Location;
		//Если TransType <> "JV" Тогда
			СтрокаОстатка.Client = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Client), ВыборкаДетальныеЗаписи.Client, Справочники.Контрагенты.Undefined);
		//КонецЕсли;
		СтрокаОстатка.Company = ВыборкаДетальныеЗаписи.Company;
		СтрокаОстатка.Source = ТипВнешнейСистемы;
		//СтрокаОстатка.SubSubSegment = ВыборкаДетальныеЗаписи.SubSubSegment;
		СтрокаОстатка.TransType = TransType;
		СтрокаОстатка.Invoice = ПолеИнвойс;
		СтрокаОстатка.Account = ВыборкаДетальныеЗаписи.Account;
		СтрокаОстатка.Currency = ВыборкаДетальныеЗаписи.Currency;
		//НоваяЗапись.AU = ВыборкаДетальныеЗаписи.AU;
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.AU) Тогда
			
			Если КэшAU[ВыборкаДетальныеЗаписи.КодAU] = Неопределено Тогда
				
				НовыйКостЦентр = Справочники.КостЦентры.СоздатьЭлемент();
				НовыйКостЦентр.Source = ТипВнешнейСистемы;
				НовыйКостЦентр.Код = ВыборкаДетальныеЗаписи.КодAU;
				НовыйКостЦентр.Наименование = ВыборкаДетальныеЗаписи.КодAU;
				НовыйКостЦентр.Сегмент = ВыборкаДетальныеЗаписи.SubSubSegment;
				НовыйКостЦентр.ПодразделениеОрганизации = ВыборкаДетальныеЗаписи.Location;
				НовыйКостЦентр.ОбменДанными.Загрузка = Истина;
				НовыйКостЦентр.Записать();
				
				КэшAU.Вставить(ВыборкаДетальныеЗаписи.КодAU, НовыйКостЦентр.Ссылка);
				
			КонецЕсли;
			
			СтрокаОстатка.AU = КэшAU[ВыборкаДетальныеЗаписи.КодAU];
			
		Иначе
			
			СтрокаОстатка.AU = ВыборкаДетальныеЗаписи.AU;
			
		КонецЕсли;
		СтрокаОстатка.Amount = ВыборкаДетальныеЗаписи.Amount;
		
		//НаборЗаписей.Записать();

	КонецЦикла;
	
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Source.Установить(ТипВнешнейСистемы);
	
	ТаблицаОстатков.Свернуть("Период, Client, Company, Source, Location, TransType, Invoice, Account, Currency, AU", "Amount");
	НаборЗаписей.Загрузить(ТаблицаОстатков);
	НаборЗаписей.Записать(Истина);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция СоздатьРучнуюКорректировку(ВыборкаДетальныеЗаписи)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = Период;
	РучнаяКорректировкаОбъект.Source = ТипВнешнейСистемы;
	РучнаяКорректировкаОбъект.Company = ВыборкаДетальныеЗаписи.Company;
	РучнаяКорректировкаОбъект.Client = ВыборкаДетальныеЗаписи.Client;
	РучнаяКорректировкаОбъект.Location = ВыборкаДетальныеЗаписи.Location;
	РучнаяКорректировкаОбъект.SubSubSegment = ВыборкаДетальныеЗаписи.SubSubSegment;
	РучнаяКорректировкаОбъект.Account = ВыборкаДетальныеЗаписи.Account;
	РучнаяКорректировкаОбъект.Currency = ВыборкаДетальныеЗаписи.Currency;
	РучнаяКорректировкаОбъект.Записать();
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьИнвойс(DocID, Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.DocID = &DocID
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.Source = &Source";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьCashBatch(DocID, Source, Prepayment)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CashBatch.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|ГДЕ
		|	CashBatch.DocID = &DocID
		|	И НЕ CashBatch.ПометкаУдаления
		|	И CashBatch.Source = &Source
		//|	И CashBatch.Prepayment = &Prepayment
		|";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	//Запрос.УстановитьПараметр("Prepayment", Prepayment);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Функция ВыполнитьПроверкуНастроекСинхронизации(ТаблицаДанных)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.SOURCE_SYSTEM,
	|	ТаблицаИсходныхДанных.OU,
	|	ТаблицаИсходныхДанных.GL_SOURCE,
	//|	ТаблицаИсходныхДанных.GL_DATE,
	|	ТаблицаИсходныхДанных.CURRENCY_CODE,
	|	ТаблицаИсходныхДанных.EXCHANGE_RATE,
	|	ТаблицаИсходныхДанных.GL_ACCOUNT,
	//|	ТаблицаИсходныхДанных.CUSTOMER_ID,
	|	ТаблицаИсходныхДанных.CUSTOMER_NUMBER,
	|	ТаблицаИсходныхДанных.CUSTOMER_NAME,
	//|	ТаблицаИсходныхДанных.CONTRACT_NAME,
	|	ТаблицаИсходныхДанных.ENTERED,
	|	ТаблицаИсходныхДанных.ACCOUNTED,
	|	ТаблицаИсходныхДанных.DOC_TYPE,
	//|	ТаблицаИсходныхДанных.DESCRIPTION,
	|	ТаблицаИсходныхДанных.DOC_NUMBER,
	//|	ТаблицаИсходныхДанных.DOC_NUMBER_2,
	//|	ТаблицаИсходныхДанных.TRANS_TYPE,
	//|	ТаблицаИсходныхДанных.INV_DATE,
	//|	ТаблицаИсходныхДанных.LINE_TYPE,
	//|	ТаблицаИсходныхДанных.SALESPERSON,
	//|	ТаблицаИсходныхДанных.DUE_DATE,
	//|	ТаблицаИсходныхДанных.TAX_RATE,
	//|	ТаблицаИсходныхДанных.ORIGINAL_TRX_NUMBER,
	//|	ТаблицаИсходныхДанных.PO_NUMBER,
	//|	ТаблицаИсходныхДанных.SO_NUM,
	//|	ТаблицаИсходныхДанных.SO_DATE,
	//|	ТаблицаИсходныхДанных.SHIP_DATE_ACTUAL,
	//|	ТаблицаИсходныхДанных.ITEM_NO,
	//|	ТаблицаИсходныхДанных.ITEM_DESC,
	//|	ТаблицаИсходныхДанных.PRICE_UNIT,
	//|	ТаблицаИсходныхДанных.SHIPPED_QUANTITY,
	//|	ТаблицаИсходныхДанных.RECEIPT_AMOUNT,
	//|	ТаблицаИсходныхДанных.CREATION_DATE,
	//|	ТаблицаИсходныхДанных.CREATED_BY,
	//|	ТаблицаИсходныхДанных.BILL_SITE_NAME,
	//|	ТаблицаИсходныхДанных.BILL_SITE_ID,
	//|	ТаблицаИсходныхДанных.SHIP_SITE_NAME,
	//|	ТаблицаИсходныхДанных.SHIP_SITE_ID,
	|	ТаблицаИсходныхДанных.DOC_ID,
	//|	ТаблицаИсходныхДанных.LINE_ID,
	//|	ТаблицаИсходныхДанных.DOC_TRANS_ID,
	//|	ТаблицаИсходныхДанных.ID_ORIG,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 17, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 22, 3) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 26, 4) + ""."" + ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК Account,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
	|	ПОДСТРОКА(ТаблицаИсходныхДанных.GL_ACCOUNT, 10, 6) КАК Location
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных
	|	"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	врТЗТаблицаДанных.CURRENCY_CODE КАК Идентификатор
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО врТЗТаблицаДанных.CURRENCY_CODE = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И НЕ врТЗТаблицаДанных.CURRENCY_CODE = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account (Oracle)"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Oracle.ПустаяСсылка),
		|	врТЗТаблицаДанных.Account
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО врТЗТаблицаДанных.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	врТЗТаблицаДанных.OU
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И врТЗТаблицаДанных.OU = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	врТЗТаблицаДанных.OU <> 0
		|	И Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	врТЗТаблицаДанных.SubSubSegment
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И врТЗТаблицаДанных.SubSubSegment = Сегменты.Код
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	врТЗТаблицаДанных.Location
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Location = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	Сегменты.Код,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО Сегменты.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (ПОДСТРОКА(врТЗТаблицаДанных.GL_ACCOUNT, 6, 3) = Сегменты.Код)
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО ПодразделенияОрганизаций.MgmtCountryCode = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО врТЗТаблицаДанных.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Oracle.Ссылка,
		|	Oracle.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО врТЗТаблицаДанных.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО OracleSourceData.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	//Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = ТипВнешнейСистемы;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.БазовыйЭлемент.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = ТипВнешнейСистемы;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = ТипВнешнейСистемы;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = ТипВнешнейСистемы;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	Результат = Ложь;
	
	ПрочитатьФайлНаСервере(Результат);
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'Balances loaded'");
	ИначеЕсли ТаблицаКоллизий.Количество() <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Balances are not loaded, add the missing data and download it again'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Balances are not loaded, incorrect file format'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	//ПерваяСтрокаДанных = 2;
	//ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	// SOURCE_SYSTEM
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SOURCE_SYSTEM";
	СтрокаТЗ.ИмяКолонки = "SOURCE_SYSTEM";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// OU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OU";
	СтрокаТЗ.ИмяКолонки = "OU";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// Journal
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GL_SOURCE";
	СтрокаТЗ.ИмяКолонки = "GL_SOURCE";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	//
	// CURRENCY_CODE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CURRENCY_CODE";
	СтрокаТЗ.ИмяКолонки = "CURRENCY_CODE";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// EXCHANGE_RATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EXCHANGE_RATE";
	СтрокаТЗ.ИмяКолонки = "EXCHANGE_RATE";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// GL_ACCOUNT
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GL_ACCOUNT";
	СтрокаТЗ.ИмяКолонки = "GL_ACCOUNT";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// CUSTOMER_NUMBER
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CUSTOMER_NUMBER";
	СтрокаТЗ.ИмяКолонки = "CUSTOMER_NUMBER";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// CUSTOMER_NAME
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CUSTOMER_NAME";
	СтрокаТЗ.ИмяКолонки = "CUSTOMER_NAME";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// ENTERED
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ENTERED";
	СтрокаТЗ.ИмяКолонки = "ENTERED";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// ACCOUNTED
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ACCOUNTED";
	СтрокаТЗ.ИмяКолонки = "ACCOUNTED";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
	// DOC_TYPE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_TYPE";
	СтрокаТЗ.ИмяКолонки = "DOC_TYPE";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// DOC_NUMBER
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_NUMBER";
	СтрокаТЗ.ИмяКолонки = "DOC_NUMBER";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// DOC_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_ID";
	СтрокаТЗ.ИмяКолонки = "DOC_ID";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИменаКолонокВПервойСтроке = Истина;
	ПерваяСтрокаДанных = 2
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля,ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Период = Дата(1,1,1) Тогда	
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
	Иначе
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Период), КонецМесяца(Период));
	КонецЕсли;	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтаФорма.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = РезультатВыбора.НачалоПериода;
КонецПроцедуры

Перем обОтладкаВнешнегоЗапроса Экспорт; //флаг того, что запросник открыт для отладки внешнего запроса
Перем обТекущийЗапрос Экспорт; //текущий запрос
Перем обИмяВременногоФайла Экспорт; //имя файла для временного сохранения запросов
Перем обПредставлениеВременногоФайла Экспорт; //имя файла для временного сохранения запросов
Перем обРежимВнешнейОбработки Экспорт;//запросник открыт в режиме внешней обработки

Процедура обПоказатьЗначение(СодержимоеЯчейки,ИмяДанных) Экспорт

	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда
		обПоказатьТаблицуЗначений(СодержимоеЯчейки);
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("РезультатЗапроса") Тогда
		обПоказатьТаблицуЗначений(СодержимоеЯчейки.Выгрузить(ОбходРезультатаЗапроса.Прямой));
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("МоментВремени") Тогда
		#Если Клиент Тогда
			Предупреждение(СокрЛП(СодержимоеЯчейки.Дата)+ " ; " +СокрЛП(СодержимоеЯчейки.Ссылка),,"Момент времени:");
		#КонецЕсли
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("ХранилищеЗначения") Тогда
		Значение = СодержимоеЯчейки.Получить();
		Если Значение <> Неопределено Тогда
			Форма = ПолучитьФорму("ФормаОтображенияДанных");
			Форма.Данные = Значение;
			Форма.ДанныеИмя = ИмяДанных;
			Форма.Открыть();
		КонецЕсли;
	Иначе
		#Если Клиент Тогда
			ОткрытьЗначение(СодержимоеЯчейки);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры //обПоказатьЗначение

//показывает содержимое таблицы значений в отдельной форме
//при модальном открытии возвращает таблицу значений из формы
Функция обПоказатьТаблицуЗначений(ТЗначений, Модально = Ложь) Экспорт

	ФормаПоказа = ПолучитьФорму("ТаблицаЗначений");
	ФормаПоказа.ТаблицаЗначений = ТЗначений;
	
	Если Модально Тогда
		ТЗВозврата = ФормаПоказа.ОткрытьМодально();
		Возврат ТЗВозврата;
	Иначе	
		ФормаПоказа.Открыть();
	КонецЕсли; 

КонецФункции//обПоказатьТаблицуЗначений

//удаляет из текста запроса всю шнягу которая там при переносе из модуля 
//(палки, кавычки, точки с запятой)
Функция обПропылесоситьТекстЗапроса(ИсходныйТекст) Экспорт
	
    ИсходныйТекст = СокрЛП(ИсходныйТекст);
	
	//вертипалки
    ОбработанныйТекст	=	СтрЗаменить(ИсходныйТекст,"|","");
	
	//открывающая кавычка
	Пока Лев(ОбработанныйТекст,1) = Символ(34) Цикл
		ОбработанныйТекст = Сред(ОбработанныйТекст,2);
		//закрывающая кавычка удаляется только если была открывающая
		//иначе может быть глюк со строковым выражением в запросе
		Пока Прав(ОбработанныйТекст,1) = Символ(34) Цикл
			ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
		КонецЦикла; 
	КонецЦикла; 
	//закрывающая точка с запятой
	Если Прав(ОбработанныйТекст,1) = ";" Тогда
	    ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
	КонецЕсли; 
	
	//двойные кавычки надо заменить на одинарные
	//Строка2Кавычки = Символ(34) + Символ(34);
	//Строка1Кавычка = Символ(34);
	
    //ОбработанныйТекст	=	СтрЗаменить(ОбработанныйТекст,Строка2Кавычки,Строка1Кавычка);
	
	Возврат ОбработанныйТекст;

КонецФункции //обПропылесоситьТекстЗапроса
 
//загружает внешний запрос в строку дерева запросов
//
Функция обПолучитьВнешнийЗапрос(СтрокаДереваЗапросов) Экспорт

	СтрокаДереваЗапросов.ТекстЗапроса = обТекущийЗапрос.Текст;
	
	Для каждого ПараметрЗапроса Из обТекущийЗапрос.Параметры Цикл
		
		НовПараметр = СтрокаДереваЗапросов.ПараметрыЗапроса.Добавить();
		НовПараметр.ИмяПараметра = ПараметрЗапроса.Ключ;
		НовПараметр.ЭтоВыражение = Ложь;
		
		Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
			//массив преобразуем в список, чтобы можно было смотреть/править интерактивно
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ПараметрЗапроса.Значение);
			НовПараметр.ЗначениеПараметра = Список;
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("МоментВремени") Тогда	
			
			НовПараметр.МоментВремениДата = ПараметрЗапроса.Значение.Дата;
			НовПараметр.МоментВремениСсылка = ПараметрЗапроса.Значение.Ссылка;	
			
			НовПараметр.ЗначениеПараметра = "Момент времени: " + СокрЛП(НовПараметр.МоментВремениСсылка) + ", дата: " + СокрЛП(НовПараметр.МоментВремениДата);
			
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Граница") Тогда	
			
			НовПараметр.ГраницаЗначение = ПараметрЗапроса.Значение.Значение;
			НовПараметр.ГраницаВид = ПараметрЗапроса.Значение.ВидГраницы;	
			
			НовПараметр.ЗначениеПараметра = "Граница: "+ СокрЛП(НовПараметр.ГраницаЗначение) + ",  " + СокрЛП(НовПараметр.ГраницаВид);
			
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("ТаблицаЗначений") Тогда	
			
			НовПараметр.ЗначениеПараметра = "<ТаблицаЗначений> : " + СокрЛП(ПараметрЗапроса.Значение.Количество()) + " стр.";
			НовПараметр.ТаблицаЗначений = ПараметрЗапроса.Значение;	

		Иначе
			НовПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение;	
		КонецЕсли;//  
		
	КонецЦикла; 
	
	СтрокаДереваЗапросов.Запрос = "Отладка";
	СтрокаДереваЗапросов.СпособВыгрузки = 1;
	СтрокаДереваЗапросов.СпособВыборки = 1;     
	СтрокаДереваЗапросов.ОбходитьИерархическиеВыборкиРекурсивно = Истина;     

КонецФункции //обПолучитьВнешнийЗапрос
 
//оформление строки результата запроса
//
Процедура обОформитьСтрокуТаблицыРезультата(ОформлениеСтроки) Экспорт

	Для каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
		Если Ячейка.Значение = NULL Тогда
			Ячейка.Текст = "<NULL>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли Ячейка.Значение = Неопределено Тогда	
			Ячейка.Текст = "<Неопределено>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("МоментВремени") Тогда	
			Ячейка.Текст = "<МоментВремени>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("РезультатЗапроса") Тогда	
			Ячейка.Текст = "<РезультатЗапроса>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			Тогда
			Если Ячейка.Значение.Пустая() Тогда	    
				Ячейка.Текст = "<пустая ссылка " + ТипЗнч(Ячейка.Значение) + ">";
				Ячейка.ЦветТекста = WebЦвета.Серый;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры //обОформитьСтрокуТаблицыРезультата
 
//загружает внешний запрос в строку дерева запросов для отладки и открывает форму Запросника
//
Функция Отладить(Запрос, Знач Модально = Ложь) Экспорт
    	
	обТекущийЗапрос = Запрос;
	обОтладкаВнешнегоЗапроса = Истина;
	
	Если Модально Тогда
		ПолучитьФорму("Форма").ОткрытьМодально();	
	Иначе	
		ПолучитьФорму("Форма").Открыть();	
	КонецЕсли; 

КонецФункции //Отладить

//возвращает массив имен временных таблиц, формирующихся в запросе по тексту запроса
//
Функция обПолучитьВременныеТаблицыИзТекстаЗапроса(ТекстДляОбработки) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ПакетЗапросов = Новый Массив;
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.IgnoreCase = Истина;
	RegExp.Global = Истина; 
	RegExp.MultiLine = Истина;
	
	RegExp.Pattern = "[^""]//.*$";
	ТекстДляОбработки = RegExp.Replace(ТекстДляОбработки, "");
	
	RegExp.MultiLine = False;
	//RegExp.Pattern = "(ВЫБРАТЬ)[^;]*";
	RegExp.Pattern = "((ВЫБРАТЬ)[^;]*|(УНИЧТОЖИТЬ)[^;]*)";
	MC = RegExp.Execute(ТекстДляОбработки);
	Для Каждого M Из MC Цикл
		ПакетЗапросов.Добавить(M.Value);
	КонецЦикла;
	
	RegExp.Pattern = "((ПОМЕСТИТЬ)\s+[^;\s]*)";
	
	НомерЗапроса = 1;
	
	ВремяВыполнения = 0; //общее время выполнения запроса
	
	Для Каждого ТекЗапрос Из ПакетЗапросов Цикл
		
		ЭтоВременная = Ложь;
		MC = RegExp.Execute(ТекЗапрос);
		Для Каждого M Из MC Цикл
			ИмяТаблицы = СокрЛП(Сред(СокрЛП(M.Value),11));
			ЭтоВременная = Истина;
			Прервать;
		КонецЦикла;
		
		Если ЭтоВременная Тогда
			
			МассивВозврата.Добавить(ИмяТаблицы);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции //обПолучитьВременныеТаблицыИзТекстаЗапроса

//вывод сообщения на клиенте
//
Процедура обСообщитьПользователюНаКлиенте(ТекстСообщения) Экспорт

	#Если Клиент Тогда
		Сообщить(ТекстСообщения);		
	#КонецЕсли

КонецПроцедуры //обСообщитьПользователюНаКлиенте
 

обРежимВнешнейОбработки = Не Метаданные.Обработки.Содержит(Метаданные());

обИмяВременногоФайла = КаталогВременныхФайлов() + "query_temp.sel";
обПредставлениеВременногоФайла =  "Из кэша (" + обИмяВременногоФайла + ")";
обОтладкаВнешнегоЗапроса = Ложь;
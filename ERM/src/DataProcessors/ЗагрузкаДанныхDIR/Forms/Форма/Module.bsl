&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = "Excel (*.xlsx)";
	ДиалогОткрытияФайла.Заголовок = "Select a file to loading";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайла = ВыбранныеФайлы[0];
		АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), УникальныйИдентификатор);
		АдресФайлаВХранилище = АдресВХранилище;
		ЗаполнитьСписокЛистовЭкселя(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокЛистовЭкселя(ЗаполнитьЛист = Ложь)
	
	СписокЛистов = Новый Массив;
	
	ФайлЭксель = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если ЗаполнитьЛист Тогда
		
		ЛистФайла = СписокЛистов[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	Если Объект.ИмяФайла = "" Тогда
		Сообщить("The file is not selected");
	ИначеЕсли Период = Дата(1,1,1) Тогда
		Сообщить("Specify the period downloaded DIR");
	Иначе
		
		ТаблицаКоллизий.Очистить();
		
		ДанныеДляЗаполнения = Новый Структура();
		ТекстОшибки = "";
		
		ДД = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
		ДД.Записать(ПутьКФайлу);
		
		Connection = Новый COMОбъект("ADODB.Connection");
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
		
		Попытка
			Connection.Open(СтрокаПодключения);
		Исключение
			Попытка
				СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
				Connection.Open(СтрокаПодключения);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибки);
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
		КонецПопытки;
		
		rs = Новый COMObject("ADODB.RecordSet");
		rs.ActiveConnection = Connection;
		sqlString = "select * from [" + ЛистФайла + "]";
		rs.Open(sqlString);
		
		СоответствиеКолонок = Новый Соответствие;
		Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
			СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
		КонецЦикла;
		
		ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
		
		rs.MoveFirst();
		
		ВеличинаСдвига = ПерваяСтрокаДанных - 1 - ?(ИменаКолонокВПервойСтроке, 1, 1);
		Если ВеличинаСдвига <> 0 Тогда
			rs.Move(ВеличинаСдвига);
		КонецЕсли;
		
		ТекНомерСтроки = ПерваяСтрокаДанных;
		
		ТипСтрока = Тип("Строка");
		ТипЧисло = Тип("Число");
		
		Пока Не rs.EOF Цикл
			
			СтрокаДанных = ТаблицаДанных.Добавить();
			СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
			
			Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
				
				Попытка
					ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
				Исключение
					ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
					ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресВХранилище);
					Возврат;
				КонецПопытки;
					
				Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
				ИначеЕсли ТипЗнч(СтрокаДанных[ЭлементСоответствия.Ключ]) =  ТипЗнч("Строка")Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = Формат(ТекЗначение, "ЧРГ=; ЧН=0; ЧГ=0");
				Иначе
					СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
			rs.MoveNext();
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		КонецЦикла;
		
		rs.Close();
		Connection.Close();
		УдалитьФайлы(ПутьКФайлу);
		
		Результат = ПроверитьКорректностьДанных(ТаблицаДанных);
		
		Если Результат Тогда
			СоздатьЗаписиРегистра(ТаблицаДанных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Результат = Ложь;
	
	ПрочитатьФайлНаСервере(Результат);
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'File loaded'");
	Иначе
		ТекстСообщения = НСтр("ru = 'File are not loaded, add the missing data and download it again'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;

	// ERP Customer Code
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerNumber";
	СтрокаТЗ.ИмяКолонки = "ERP Customer Code";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Curr";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Agreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Agreement";
	СтрокаТЗ.ИмяКолонки = "Agreement";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Job Start Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "JobStartDate";
	СтрокаТЗ.ИмяКолонки = "Job Start Date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	//
	//  Job End Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "JobEndDate";
	СтрокаТЗ.ИмяКолонки = "Job End Date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;

	// FTLSubmissionDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FTLSubmissionDate";
	СтрокаТЗ.ИмяКолонки = "FTL Submission Date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	//Invoice Date (Fiscal)
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceDate";
	СтрокаТЗ.ИмяКолонки = "Invoice Date (Fiscal)";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// FTLSubmissionDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderCreationDate";
	СтрокаТЗ.ИмяКолонки = "Order Creation Date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// Order Approval Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderApprovalDate";
	СтрокаТЗ.ИмяКолонки = "Order Approval Date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// Order First Submission Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderFirstSubmissionDate";
	СтрокаТЗ.ИмяКолонки = "Order First Submission Date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// Invoice Flag Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceFlagDate";
	СтрокаТЗ.ИмяКолонки = "Invoice Flag Date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// KS submission date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "KS_SubmissionDate";
	СтрокаТЗ.ИмяКолонки = "KS submission date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// KS reception date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "KS_ReceptionDate";
	СтрокаТЗ.ИмяКолонки = "KS reception date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// Month of invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "MonthOfInvoice";
	СтрокаТЗ.ИмяКолонки = "Month of invoice";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// Trigger
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Trigger";
	СтрокаТЗ.ИмяКолонки = "Trigger";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Trigger date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TriggerDate";
	СтрокаТЗ.ИмяКолонки = "Trigger date";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// PT days from
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PT_DaysFrom";
	СтрокаТЗ.ИмяКолонки = "PT days from";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// PT days to
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PT_DaysTo";
	СтрокаТЗ.ИмяКолонки = "PT days to";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// FirstDateOfPayment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FirstDateOfPayment";
	СтрокаТЗ.ИмяКолонки = "First date of payment (fact)";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;
	
	// AmountRUB
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Amount";
	СтрокаТЗ.ИмяКолонки = "TranAmount  (incl#VAT)";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// Responsible AR
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Responsible";
	СтрокаТЗ.ИмяКолонки = "Responsible AR";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	

	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСтруктуруФайлаПоУмолчанию();
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля, ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Функция ПроверитьКорректностьДанных(ТаблицаДанных)
	
	Результат = Ложь;
	ПериодКонец = КонецМесяца(Период);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.Currency КАК Currency,
	|	ТаблицаИсходныхДанных.Company,
	|	ТаблицаИсходныхДанных.CustomerNumber
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных";
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	врТЗТаблицаДанных.Currency КАК Идентификатор
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО врТЗТаблицаДанных.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|	И НЕ врТЗТаблицаДанных.Currency = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	врТЗТаблицаДанных.Company
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Company = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	врТЗТаблицаДанных.Company <> 0
		|	И Организации.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Client"",
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client),
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	врТЗТаблицаДанных.CustomerNumber
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				,
		|				ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|					И ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|		ПО врТЗТаблицаДанных.CustomerNumber = НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор ЕСТЬ NULL
		|	И врТЗТаблицаДанных.CustomerNumber <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.Код КАК Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО врТЗТаблицаДанных.Company = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)"
		;
	
	Запрос.УстановитьПараметр("Период", ПериодКонец);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", Source);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Source;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

&НаСервере
Процедура СоздатьЗаписиРегистра(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("InvoiceNo", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	
	Если Source = Перечисления.ТипыСоответствий.Radius Тогда
		
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			СтрокаТЗ.InvoiceNo = ?(ЗначениеЗаполнено(СтрокаТЗ.Invoice), "RD-" + СтрокаТЗ.Invoice, "RD-#empty#") + ";" + СтрокаТЗ.CustomerNumber + ";" + Формат(Год(СтрокаТЗ.MonthOfInvoice), "ЧГ=");
		КонецЦикла;
		
	ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
		
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			СтрокаТЗ.InvoiceNo = ?(ЗначениеЗаполнено(СтрокаТЗ.Invoice), "GF-" + СтрокаТЗ.Invoice, "GF-#empty#") + ";" + СтрокаТЗ.CustomerNumber + ";" + Формат(Год(СтрокаТЗ.MonthOfInvoice), "ЧГ=");
		КонецЦикла;
		
	ИначеЕсли Source = Перечисления.ТипыСоответствий.MFG Тогда
		
		//TODO Узнать у Вани аналитику для MFG!!!!!!!!!!!!!!
		//
		//Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		//	СтрокаТЗ.InvoiceNo = ?(ЗначениеЗаполнено(СтрокаТЗ.Invoice), "MF-" + СтрокаТЗ.Invoice, "MF-#empty#") + ";" + СтрокаТЗ.CustomerNumber + ";" + Формат(Год(СтрокаТЗ.MonthOfInvoice), "ЧГ=");
		//КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	ПериодКонец = КонецМесяца(Период);
	
	НачатьТранзакцию();
	
	ПометитьНаУдалениеКорректировкиТекущегоМесяца();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.Company,
	|	ТаблицаИсходныхДанных.CustomerNumber,
	|	ТаблицаИсходныхДанных.Invoice,
	|	ТаблицаИсходныхДанных.InvoiceNo,
	|	ТаблицаИсходныхДанных.InvoiceDate,
	|	ТаблицаИсходныхДанных.Currency,
	|	ТаблицаИсходныхДанных.Agreement,
	|	ТаблицаИсходныхДанных.JobStartDate,
	|	ТаблицаИсходныхДанных.JobEndDate,
	|	ТаблицаИсходныхДанных.FTLSubmissionDate,
	|	ТаблицаИсходныхДанных.OrderCreationDate,
	|	ТаблицаИсходныхДанных.OrderApprovalDate,
	|	ТаблицаИсходныхДанных.OrderFirstSubmissionDate,
	|	ТаблицаИсходныхДанных.InvoiceFlagDate,
	|	ТаблицаИсходныхДанных.KS_SubmissionDate,
	|	ТаблицаИсходныхДанных.KS_ReceptionDate,
	|	ТаблицаИсходныхДанных.MonthOfInvoice,
	|	ТаблицаИсходныхДанных.Trigger,
	|	ТаблицаИсходныхДанных.TriggerDate,
	|	ТаблицаИсходныхДанных.PT_DaysFrom,
	|	ТаблицаИсходныхДанных.PT_DaysTo,
	|	ТаблицаИсходныхДанных.FirstDateOfPayment,
	|	ТаблицаИсходныхДанных.Amount,
	|	ТаблицаИсходныхДанных.Responsible
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных";
	
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника КАК ОбъектПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	|			,
	|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
	|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
	|				И Идентификатор В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ДанныеФайла.CustomerNumber
	|					ИЗ
	|						врТЗТаблицаДанных КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника КАК ОбъектПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	|			&Период,
	|			ТипСоответствия = &Source
	|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
	|				И Идентификатор В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ДанныеФайла.Currency
	|					ИЗ
	|						врТЗТаблицаДанных КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
	|	КлючиИнвойсов.Company КАК Company,
	|	КлючиИнвойсов.Invoice КАК Invoice
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
	|		ПО врТЗТаблицаДанных.InvoiceNo = КлючиИнвойсов.ArInvoice
	|			И врТЗТаблицаДанных.Company = КлючиИнвойсов.Company.Код
	|			И (КлючиИнвойсов.Source = &Source)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Source КАК Source,
	|	врТЗТаблицаДанных.Invoice КАК Invoice,
	|	врТЗТаблицаДанных.InvoiceNo КАК InvoiceNo,
	|	врТЗТаблицаДанных.InvoiceDate,
	|	врТЗТаблицаДанных.Agreement КАК Agreement,
	|	врТЗТаблицаДанных.JobStartDate КАК JobStartDate,
	|	врТЗТаблицаДанных.JobEndDate КАК JobEndDate,
	|	врТЗТаблицаДанных.FTLSubmissionDate КАК FTLSubmissionDate,
	|	врТЗТаблицаДанных.OrderCreationDate КАК OrderCreationDate,
	|	врТЗТаблицаДанных.OrderApprovalDate КАК OrderApprovalDate,
	|	врТЗТаблицаДанных.OrderFirstSubmissionDate КАК OrderFirstSubmissionDate,
	|	врТЗТаблицаДанных.InvoiceFlagDate КАК InvoiceFlagDate,
	|	врТЗТаблицаДанных.KS_SubmissionDate КАК KS_SubmissionDate,
	|	врТЗТаблицаДанных.KS_ReceptionDate КАК KS_ReceptionDate,
	|	врТЗТаблицаДанных.MonthOfInvoice КАК MonthOfInvoice,
	|	врТЗТаблицаДанных.Trigger КАК Trigger,
	|	врТЗТаблицаДанных.TriggerDate КАК TriggerDate,
	|	врТЗТаблицаДанных.PT_DaysFrom КАК PT_DaysFrom,
	|	врТЗТаблицаДанных.PT_DaysTo КАК PT_DaysTo,
	|	врТЗТаблицаДанных.FirstDateOfPayment КАК FirstDateOfPayment,
	|	врТЗТаблицаДанных.Responsible КАК Responsible,
	|	врТЗТаблицаДанных.Amount КАК Amount,
	|	врТЗТаблицаДанных.CustomerNumber КАК CustomerNumber,
	|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
	|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
	|	Организации.Ссылка КАК Company,
	|	Организации.DefaultLegalEntity КАК LegalEntity
	|ПОМЕСТИТЬ ВТ_Итоговая
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
	|		ПО врТЗТаблицаДанных.CustomerNumber = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
	|		ПО врТЗТаблицаДанных.Currency = ВТ_СоответствиеCurrency.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО врТЗТаблицаДанных.Company = Организации.Код
	|			И (Организации.Source = &Source)
	|			И (НЕ Организации.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоговая.Source КАК Source,
	|	ВТ_Итоговая.Invoice КАК Invoice,
	|	ВТ_Итоговая.InvoiceNo КАК InvoiceNo,
	|	ВТ_Итоговая.InvoiceDate КАК InvoiceDate,
	|	ВТ_Итоговая.Agreement КАК Agreement,
	|	ВТ_Итоговая.JobStartDate КАК JobStartDate,
	|	ВТ_Итоговая.JobEndDate КАК JobEndDate,
	|	ВТ_Итоговая.FTLSubmissionDate КАК FTLSubmissionDate,
	|	ВТ_Итоговая.OrderCreationDate КАК OrderCreationDate,
	|	ВТ_Итоговая.OrderApprovalDate КАК OrderApprovalDate,
	|	ВТ_Итоговая.OrderFirstSubmissionDate КАК OrderFirstSubmissionDate,
	|	ВТ_Итоговая.InvoiceFlagDate КАК InvoiceFlagDate,
	|	ВТ_Итоговая.KS_SubmissionDate КАК ДатаОтправкиКС,
	|	ВТ_Итоговая.KS_ReceptionDate КАК ДатаВозвратаКС,
	|	ВТ_Итоговая.MonthOfInvoice КАК MonthOfInvoice,
	|	ВТ_Итоговая.Trigger КАК Trigger,
	|	ВТ_Итоговая.TriggerDate КАК TriggerDate,
	|	ВТ_Итоговая.PT_DaysFrom КАК PT_DaysFrom,
	|	ВТ_Итоговая.PT_DaysTo КАК PT_DaysTo,
	|	ВТ_Итоговая.FirstDateOfPayment КАК FirstDateOfPayment,
	|	ВТ_Итоговая.Responsible КАК Responsible,
	|	ВТ_Итоговая.Amount КАК Amount,
	|	ВЫБОР
	|		КОГДА ВнутренниеКурсыВалютСрезПоследних.Курс ЕСТЬ NULL
	|				ИЛИ ВнутренниеКурсыВалютСрезПоследних.Курс = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Итоговая.Amount / ВнутренниеКурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК BaseAmount,
	|	ВТ_Итоговая.CustomerNumber КАК CustomerNumber,
	|	ВТ_Итоговая.Client КАК Client,
	|	ВТ_Итоговая.Currency КАК Currency,
	|	ВТ_Итоговая.Company КАК Company,
	|	&Account КАК Account,
	|	&AU КАК AU,
	|	ВТ_Итоговая.LegalEntity КАК LegalEntity,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(ВТ_Итоговая.MonthOfInvoice) = МЕСЯЦ(&Период)
	|				И ГОД(ВТ_Итоговая.MonthOfInvoice) = ГОД(&Период)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписыватьВInvoicedDebts,
	|	ДОБАВИТЬКДАТЕ(ВТ_Итоговая.TriggerDate, ДЕНЬ, ВТ_Итоговая.PT_DaysFrom) КАК DateFrom,
	|	ДОБАВИТЬКДАТЕ(ВТ_Итоговая.TriggerDate, ДЕНЬ, ВТ_Итоговая.PT_DaysTo) КАК DateTo,
	|	ВЫБОР
	|		КОГДА ДОБАВИТЬКДАТЕ(ВТ_Итоговая.TriggerDate, ДЕНЬ, ВТ_Итоговая.PT_DaysFrom) < &Период
	|			ТОГДА ВЫБОР
	|					КОГДА ВнутренниеКурсыВалютСрезПоследних.Курс ЕСТЬ NULL
	|							ИЛИ ВнутренниеКурсыВалютСрезПоследних.Курс = 0
	|						ТОГДА 0
	|					ИНАЧЕ ВТ_Итоговая.Amount / ВнутренниеКурсыВалютСрезПоследних.Курс
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК DueDateFrom,
	|	ВЫБОР
	|		КОГДА ДОБАВИТЬКДАТЕ(ВТ_Итоговая.TriggerDate, ДЕНЬ, ВТ_Итоговая.PT_DaysTo) < &Период
	|			ТОГДА ВЫБОР
	|					КОГДА ВнутренниеКурсыВалютСрезПоследних.Курс ЕСТЬ NULL
	|							ИЛИ ВнутренниеКурсыВалютСрезПоследних.Курс = 0
	|						ТОГДА 0
	|					ИНАЧЕ ВТ_Итоговая.Amount / ВнутренниеКурсыВалютСрезПоследних.Курс
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК DueDateTo
	|ИЗ
	|	ВТ_Итоговая КАК ВТ_Итоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&Период, ) КАК ВнутренниеКурсыВалютСрезПоследних
	|		ПО ВТ_Итоговая.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта"
	;
	
	Запрос.УстановитьПараметр("Период", ПериодКонец);
	Запрос.УстановитьПараметр("Source", Source);
	
	Если Source = Перечисления.ТипыСоответствий.Radius Тогда
		
		Запрос.УстановитьПараметр("Account", rgsНастройкаКонфигурации.ЗначениеНастройки("DIR_RadiusAccount"));
		Запрос.УстановитьПараметр("AU", rgsНастройкаКонфигурации.ЗначениеНастройки("RadiusAU"));
		
	ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
		
		Запрос.УстановитьПараметр("Account", rgsНастройкаКонфигурации.ЗначениеНастройки("DIR_GeofitAccount"));
		Запрос.УстановитьПараметр("AU", rgsНастройкаКонфигурации.ЗначениеНастройки("DIR_GeofitAU"));
		
	ИначеЕсли Source = Перечисления.ТипыСоответствий.MFG Тогда
		
		//TODO Узнать у Вани аналитику для MFG!!!!!!!!!!!!!!
		//Запрос.УстановитьПараметр("Account", rgsНастройкаКонфигурации.ЗначениеНастройки("DIR_MFGAccount"));
		//Запрос.УстановитьПараметр("AU", rgsНастройкаКонфигурации.ЗначениеНастройки("DIR_MFGAU");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КэшИнвойсов = РезультатЗапроса[2].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice, Company");
	
	ВыборкаДанные = РезультатЗапроса[4].Выбрать();
	
	Док = Документы.КорректировкаРегистров.СоздатьДокумент();
	Док.ДополнительныеСвойства.Вставить("РазрешитьСозданиеДокументаБезРеверса", Истина);
	Док.Дата = ПериодКонец;
	Если Source = Перечисления.ТипыСоответствий.Radius Тогда
		Док.Комментарий = "DIR по Radius";
	ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
		Док.Комментарий = "DIR по Geofit";
	ИначеЕсли Source = Перечисления.ТипыСоответствий.MFG Тогда
		Док.Комментарий = "DIR по MFG";
	КонецЕсли;
	Док.Ответственный = Пользователи.ТекущийПользователь();
	
	СтруктураПоискаInvoice = Новый Структура("ArInvoice, Company");
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Source);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДанные.Следующий() Цикл
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДанные, ВыборкаДанные.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		СтруктураПоискаInvoice.ArInvoice = ВыборкаДанные.InvoiceNo;
		СтруктураПоискаInvoice.Company = ВыборкаДанные.Company;
		СтрокиКэша = КэшИнвойсов.НайтиСтроки(СтруктураПоискаInvoice);
		Если СтрокиКэша.Количество() = 0 Тогда
			ТекИнвойс = СоздатьИнвойс(ВыборкаДанные);
			СтрокаКэша = КэшИнвойсов.Добавить();
			//СтрокаКэша.ArInvoice = "RD-" + ВыборкаДанные.Invoice;
			СтрокаКэша.ArInvoice = ВыборкаДанные.InvoiceNo;
			СтрокаКэша.Company = ВыборкаДанные.Company;
			СтрокаКэша.Invoice = ТекИнвойс;
		Иначе
			ТекИнвойс = СтрокиКэша[0].Invoice;
		КонецЕсли;
		
		ИнвойсОбъект = ТекИнвойс.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ИнвойсОбъект, ВыборкаДанные, "Responsible,ДатаВозвратаКС,ДатаОтправкиКС,TriggerDate,DueDateFrom,DueDateTo");
		Если ИнвойсОбъект.Модифицированность() Тогда
			ИнвойсОбъект.Записать();
		КонецЕсли;
		ЗаполнитьДатыDIR(ТекИнвойс, ВыборкаДанные);
		
		Если ВыборкаДанные.ЗаписыватьВInvoicedDebts Тогда 
			Движение = Док.Движения.InvoicedDebts.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаДанные);
			Движение.Invoice = ТекИнвойс;
			Движение.Период = Док.Дата;
		КонецЕсли;
			
	КонецЦикла;
	
	Если Док.Движения.InvoicedDebts.Количество() > 0 Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "InvoicedDebts";
		
		Док.Движения.InvoicedDebts.Записывать = Истина;
		
	КонецЕсли;
		
	Док.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыDIR(Инвойс, ВыборкаДанные)
	
	Даты = Новый Соответствие();
	Даты.Вставить("JobStartDate", ВыборкаДанные.JobStartDate);
	Даты.Вставить("JobEndDate", ВыборкаДанные.JobEndDate);
	Даты.Вставить("FTLSubmissionDate", ВыборкаДанные.FTLSubmissionDate);
	Даты.Вставить("CreationDate", ВыборкаДанные.OrderCreationDate);
	Даты.Вставить("ApprovalDate", ВыборкаДанные.OrderApprovalDate);
	Даты.Вставить("FirstSubmissionDate", ВыборкаДанные.OrderFirstSubmissionDate);
	Даты.Вставить("InvoiceFlagDate", ВыборкаДанные.InvoiceFlagDate);
	РегистрыСведений.DIR.ЗаписатьДаты(Инвойс, Даты);
	
КонецПроцедуры

&НаСервере
Функция СоздатьИнвойс(ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Radius;
	ДокОбъект.Company = ДанныеДляЗаполнения.Company;
	//ДокОбъект.Номер = "RD-" + ДанныеДляЗаполнения.Invoice;
	ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNo;
	ДокОбъект.Дата = ДанныеДляЗаполнения.InvoiceDate;
	ДокОбъект.DocNumber = ДанныеДляЗаполнения.Invoice;
	ДокОбъект.Client = ДанныеДляЗаполнения.Client;
	//ДокОбъект.Location = ДанныеДляЗаполнения.Location;
	//ДокОбъект.SubSubSegment = ДанныеДляЗаполнения.SubSubSegment;
	ДокОбъект.Account = ДанныеДляЗаполнения.Account;
	ДокОбъект.AU = ДанныеДляЗаполнения.AU;
	ДокОбъект.Currency = ДанныеДляЗаполнения.Currency;
	ДокОбъект.Amount = ДанныеДляЗаполнения.Amount;
	ДокОбъект.Agreement = ДанныеДляЗаполнения.Agreement;
	ДокОбъект.Responsible = ДанныеДляЗаполнения.Responsible;
	//ДокОбъект.Amount = ПроводкаDSSОбъект.TranAmount;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляЗаполнения.Client, "Предопределенный") Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПометитьНаУдалениеКорректировкиТекущегоМесяца()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРегистров.Ссылка
		|ИЗ
		|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
		|ГДЕ
		|	НЕ КорректировкаРегистров.ПометкаУдаления
		|	И КорректировкаРегистров.Комментарий = ""DIR по Radius""
		|	И КорректировкаРегистров.Дата = &Период";
	
	Запрос.Параметры.Вставить("Период",КонецМесяца(Период));
	
	Если Source = Перечисления.ТипыСоответствий.MFG Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Radius", "MFG");
	ИначеЕсли Source = Перечисления.ТипыСоответствий.Geofit Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Radius", "Geofit");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокОбъект.ДополнительныеСвойства.Вставить("РазрешитьСозданиеДокументаБезРеверса", Истина);
		ДокОбъект.УстановитьПометкуУдаления(Истина);
		ДокОбъект.Записать();
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Период = Дата(1,1,1) Тогда
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
	Иначе
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Период), КонецМесяца(Период));
	КонецЕсли;	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтаФорма.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = РезультатВыбора.НачалоПериода;
	
КонецПроцедуры


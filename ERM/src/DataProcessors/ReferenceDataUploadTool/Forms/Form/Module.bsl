&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСтруктуруФайлаПоУмолчанию();

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = "Excel (*.xlsx)";
	ДиалогОткрытияФайла.Заголовок = "Select a file to loading";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайла = ВыбранныеФайлы[0];
		АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), УникальныйИдентификатор);
		АдресФайлаВХранилище = АдресВХранилище;
		ЗаполнитьСписокЛистовЭкселя(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокЛистовЭкселя(ЗаполнитьЛист = Ложь)
	
	СписокЛистов = Новый Массив;
	
	ФайлЭксель = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если ЗаполнитьЛист Тогда
		
		ЛистФайла = СписокЛистов[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Результат = Ложь;
	
	ПрочитатьФайлНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	Если Объект.ИмяФайла = "" Тогда
		Сообщить("The file is not selected");
	Иначе
		
		ТаблицаОшибок.Очистить();
		
		ДанныеДляЗаполнения = Новый Структура();
		ТекстОшибки = "";
		
		ДД = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
		ДД.Записать(ПутьКФайлу);
		
		Connection = Новый COMОбъект("ADODB.Connection");
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;MAXSCANROWS=0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
		
		Попытка
			Connection.Open(СтрокаПодключения);
		Исключение
			Попытка
				СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;MAXSCANROWS=0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
				Connection.Open(СтрокаПодключения);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибки);
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
		КонецПопытки;
		
		rs = Новый COMObject("ADODB.RecordSet");
		rs.ActiveConnection = Connection;
		sqlString = "select * from [" + ЛистФайла + "]";
		rs.Open(sqlString);
		
		СоответствиеКолонок = Новый Соответствие;
		Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
			СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
		КонецЦикла;
		
		ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
		
		rs.MoveFirst();
		
		ВеличинаСдвига = ПерваяСтрокаДанных - 1 - ?(ИменаКолонокВПервойСтроке, 1, 1);
		Если ВеличинаСдвига <> 0 Тогда
			rs.Move(ВеличинаСдвига);
		КонецЕсли;
		
		ТекНомерСтроки = ПерваяСтрокаДанных;
		
		ТипСтрока = Тип("Строка");
		ТипЧисло = Тип("Число");
		
		Пока Не rs.EOF Цикл
			
			СтрокаДанных = ТаблицаДанных.Добавить();
			СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
			
			Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
				
				Попытка
					ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
				Исключение
					ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
					ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресВХранилище);
					Возврат;
				КонецПопытки;
					
				Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
				ИначеЕсли ТипЗнч(СтрокаДанных[ЭлементСоответствия.Ключ]) =  ТипЗнч("Строка")Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = Формат(ТекЗначение, "ЧРГ=; ЧН=0; ЧГ=0");
				Иначе
					СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
			rs.MoveNext();
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		КонецЦикла;
		
		rs.Close();
		Connection.Close();
		УдалитьФайлы(ПутьКФайлу);
		
		ТаблицаДанных = ИзменитьСтроковыеДанныеИсточникаНаСсылочные(ТаблицаДанных); 
		
		Результат = ПроверитьКорректностьДанных(ТаблицаДанных);
		
		Если Результат Тогда
			ЗаполнитьДанныеСоглашения(ТаблицаДанных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля, ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПроверитьКорректностьДанных(ТаблицаДанных)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.LegalEntity КАК LegalEntity,
	|	ТаблицаИсходныхДанных.Источник КАК Source,
	|	ТаблицаИсходныхДанных.TransType КАК TransType,
	|	ТаблицаИсходныхДанных.InvoiceNo КАК InvoiceNo,
	|	ТаблицаИсходныхДанных.Agreement КАК Agreement,
	|	ТаблицаИсходныхДанных.Trigger КАК Trigger,
	|	ТаблицаИсходныхДанных.Company КАК Company,
	|	ТаблицаИсходныхДанных.Client КАК Client,
	|	ТаблицаИсходныхДанных.CRMId КАК CRMId,
	|	ТаблицаИсходныхДанных.PTFrom КАК PTFrom,
	|	ТаблицаИсходныхДанных.PTTo КАК PTTo
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных";
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.LegalEntity КАК LegalEntity,
	               |	ВложенныйЗапрос.Source КАК Source,
	               |	ВложенныйЗапрос.InvoiceNo КАК InvoiceNo,
	               |	ВложенныйЗапрос.Agreement КАК Agreement,
	               |	ВложенныйЗапрос.Trigger КАК Trigger,
	               |	ВложенныйЗапрос.Company КАК Company,
	               |	ВложенныйЗапрос.Client КАК Client,
	               |	ВложенныйЗапрос.PTFrom КАК PTFrom,
	               |	ВложенныйЗапрос.PTTo КАК PTTo,
	               |	ВложенныйЗапрос.TransType КАК TransType,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ТипОшибки = 1
	               |			ТОГДА ""Agreement, trigger type, PT From or PT To not filled""
	               |		КОГДА ВложенныйЗапрос.ТипОшибки = 2
	               |			ТОГДА ""Invoice not found""
	               |		КОГДА ВложенныйЗапрос.ТипОшибки = 3
	               |			ТОГДА ""Trigger type not found""
	               |		КОГДА ВложенныйЗапрос.ТипОшибки = 4
	               |			ТОГДА ""Contract data from Invoice differs from file""
	               |	КОНЕЦ КАК ProblemType
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		врТЗТаблицаДанных.LegalEntity КАК LegalEntity,
	               |		врТЗТаблицаДанных.Source КАК Source,
	               |		врТЗТаблицаДанных.InvoiceNo КАК InvoiceNo,
	               |		врТЗТаблицаДанных.Agreement КАК Agreement,
	               |		врТЗТаблицаДанных.Trigger КАК Trigger,
	               |		врТЗТаблицаДанных.Company КАК Company,
	               |		врТЗТаблицаДанных.Client КАК Client,
	               |		врТЗТаблицаДанных.TransType КАК TransType,
	               |		врТЗТаблицаДанных.PTFrom КАК PTFrom,
	               |		врТЗТаблицаДанных.PTTo КАК PTTo,
	               |		1 КАК ТипОшибки
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |	ГДЕ
	               |		(врТЗТаблицаДанных.Agreement = """"
	               |				ИЛИ врТЗТаблицаДанных.Trigger = """"
	               |				ИЛИ врТЗТаблицаДанных.PTFrom = 0
	               |				ИЛИ врТЗТаблицаДанных.PTTo = 0)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Source,
	               |		врТЗТаблицаДанных.InvoiceNo,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.TransType,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.PTTo,
	               |		2
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Invoice КАК Invoice
	               |			ПО врТЗТаблицаДанных.InvoiceNo = Invoice.FiscalInvoiceNo
	               |				И врТЗТаблицаДанных.Source = Invoice.Source
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Invoice КАК Invoice1
	               |			ПО врТЗТаблицаДанных.InvoiceNo = Invoice1.DocNumber
	               |				И врТЗТаблицаДанных.Source = Invoice1.Source
	               |	ГДЕ
	               |		врТЗТаблицаДанных.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	               |		И врТЗТаблицаДанных.TransType = ""I""
	               |		И Invoice.FiscalInvoiceNo ЕСТЬ NULL
	               |		И Invoice1.DocNumber ЕСТЬ NULL
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Source,
	               |		врТЗТаблицаДанных.InvoiceNo,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.TransType,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.PTTo,
	               |		2
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Invoice КАК Invoices
	               |			ПО врТЗТаблицаДанных.InvoiceNo = Invoices.DocNumber
	               |				И врТЗТаблицаДанных.Source = Invoices.Source
	               |	ГДЕ
	               |		врТЗТаблицаДанных.Source <> ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	               |		И врТЗТаблицаДанных.TransType = ""I""
	               |		И Invoices.Номер ЕСТЬ NULL
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Source,
	               |		врТЗТаблицаДанных.InvoiceNo,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.TransType,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.PTTo,
	               |		2
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Memo КАК Memo
	               |			ПО врТЗТаблицаДанных.InvoiceNo = Memo.Номер
	               |				И врТЗТаблицаДанных.Source = Memo.Source
	               |	ГДЕ
	               |		врТЗТаблицаДанных.TransType = ""Memo""
	               |		И Memo.Номер ЕСТЬ NULL
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Source,
	               |		врТЗТаблицаДанных.InvoiceNo,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.TransType,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.PTTo,
	               |		3
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |	ГДЕ
	               |		НЕ врТЗТаблицаДанных.Trigger В
	               |					(ВЫБРАТЬ
	               |						TriggerTypes.Наименование
	               |					ИЗ
	               |						Справочник.TriggerTypes КАК TriggerTypes
	               |					ГДЕ
	               |						TriggerTypes.Предопределенный)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Source,
	               |		врТЗТаблицаДанных.InvoiceNo,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.TransType,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.PTTo,
	               |		4
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Invoice КАК Invoice
	               |			ПО врТЗТаблицаДанных.InvoiceNo = Invoice.FiscalInvoiceNo
	               |				И (Invoice.Contract.Наименование = врТЗТаблицаДанных.Agreement)
	               |				И врТЗТаблицаДанных.Company = Invoice.Contract.Организация.Наименование
	               |				И врТЗТаблицаДанных.CRMId = Invoice.Contract.Владелец.CRMID
	               |				И (врТЗТаблицаДанных.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	               |				И врТЗТаблицаДанных.Source = Invoice.Source
	               |				И (врТЗТаблицаДанных.Trigger <> Invoice.Contract.Trigger.Наименование
	               |					ИЛИ врТЗТаблицаДанных.PTFrom <> Invoice.Contract.PTDaysFrom
	               |					ИЛИ врТЗТаблицаДанных.PTTo <> Invoice.Contract.СрокОплаты)
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Invoice КАК Invoice1
	               |			ПО врТЗТаблицаДанных.InvoiceNo = Invoice1.DocNumber
	               |				И (Invoice1.Contract.Наименование = врТЗТаблицаДанных.Agreement)
	               |				И врТЗТаблицаДанных.Company = Invoice1.Contract.Организация.Наименование
	               |				И врТЗТаблицаДанных.CRMId = Invoice1.Contract.Владелец.CRMID
	               |				И (врТЗТаблицаДанных.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	               |				И врТЗТаблицаДанных.Source = Invoice1.Source
	               |				И (врТЗТаблицаДанных.Trigger <> Invoice1.Contract.Trigger.Наименование
	               |					ИЛИ врТЗТаблицаДанных.PTFrom <> Invoice1.Contract.PTDaysFrom
	               |					ИЛИ врТЗТаблицаДанных.PTTo <> Invoice1.Contract.СрокОплаты)
	               |	ГДЕ
	               |		врТЗТаблицаДанных.TransType = ""I""
	               |		И Invoice.Contract.ContractID = """"
	               |		И Invoice1.Contract.ContractID = """"
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Source,
	               |		врТЗТаблицаДанных.InvoiceNo,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.TransType,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.PTTo,
	               |		4
	               |	ИЗ
	               |		Документ.Invoice КАК Invoices
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ПО Invoices.DocNumber = врТЗТаблицаДанных.InvoiceNo
	               |				И Invoices.Contract.Наименование = врТЗТаблицаДанных.Agreement
	               |				И (врТЗТаблицаДанных.Company = Invoices.Contract.Организация.Наименование)
	               |				И (врТЗТаблицаДанных.CRMId = Invoices.Contract.Владелец.CRMID)
	               |				И (врТЗТаблицаДанных.Source = Invoices.Source)
	               |				И (врТЗТаблицаДанных.Source <> ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	               |				И (врТЗТаблицаДанных.Trigger <> Invoices.Contract.Trigger.Наименование
	               |					ИЛИ врТЗТаблицаДанных.PTFrom <> Invoices.Contract.PTDaysFrom
	               |					ИЛИ врТЗТаблицаДанных.PTTo <> Invoices.Contract.СрокОплаты)
	               |	ГДЕ
	               |		врТЗТаблицаДанных.TransType = ""I""
	               |		И Invoices.Contract.ContractID = """"
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Source,
	               |		врТЗТаблицаДанных.InvoiceNo,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.TransType,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.PTTo,
	               |		4
	               |	ИЗ
	               |		Документ.Memo КАК Memos
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ПО Memos.Номер = врТЗТаблицаДанных.InvoiceNo
	               |				И Memos.Contract.Наименование = врТЗТаблицаДанных.Agreement
	               |				И (врТЗТаблицаДанных.Company = Memos.Contract.Организация.Наименование)
	               |				И (врТЗТаблицаДанных.CRMId = Memos.Contract.Владелец.CRMID)
	               |				И (врТЗТаблицаДанных.Source = Memos.Source)
	               |				И (врТЗТаблицаДанных.Trigger <> Memos.Contract.Trigger.Наименование
	               |					ИЛИ врТЗТаблицаДанных.PTFrom <> Memos.Contract.PTDaysFrom
	               |					ИЛИ врТЗТаблицаДанных.PTTo <> Memos.Contract.СрокОплаты)
	               |	ГДЕ
	               |		врТЗТаблицаДанных.TransType = ""Memo""
	               |		И Memos.Contract.ContractID = """") КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.InvoiceNo,
	               |	ВложенныйЗапрос.Source,
	               |	ВложенныйЗапрос.LegalEntity,
	               |	ВложенныйЗапрос.TransType,
	               |	ВложенныйЗапрос.Agreement,
	               |	ВложенныйЗапрос.Trigger,
	               |	ВложенныйЗапрос.Company,
	               |	ВложенныйЗапрос.Client,
	               |	ВложенныйЗапрос.PTFrom,
	               |	ВложенныйЗапрос.PTTo,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ТипОшибки = 1
	               |			ТОГДА ""Agreement, trigger type, PT From or PT To not filled""
	               |		КОГДА ВложенныйЗапрос.ТипОшибки = 2
	               |			ТОГДА ""Invoice not found""
	               |		КОГДА ВложенныйЗапрос.ТипОшибки = 3
	               |			ТОГДА ""Trigger type not found""
	               |		КОГДА ВложенныйЗапрос.ТипОшибки = 4
	               |			ТОГДА ""Contract data from Invoice differs from file""
	               |	КОНЕЦ"; 	
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		
		ТЗ = РезультатЗапроса.Выгрузить();
		ТаблицаОшибок.Загрузить(ТЗ);
		
		МассивЗначенийКолонкиProblemType = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТЗ.ВыгрузитьКолонку("ProblemType"));
		
		Результат = ?(МассивЗначенийКолонкиProblemType.Найти("Contract data from Invoice differs from file") <> Неопределено И МассивЗначенийКолонкиProblemType.Количество() = 1, Истина, Ложь);
		
	Иначе
		
		Результат = Истина;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	
	// LegalEntity
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalEntity";
	СтрокаТЗ.ИмяКолонки = "Legal entity";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;

	// TransType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransType";
	СтрокаТЗ.ИмяКолонки = "Trans type";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Source
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Source";
	СтрокаТЗ.ИмяКолонки = "Source";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Agreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Agreement";
	СтрокаТЗ.ИмяКолонки = "Agreement";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Trigger
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Trigger";
	СтрокаТЗ.ИмяКолонки = "Trigger";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Client";
	СтрокаТЗ.ИмяКолонки = "Client";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	//PTFrom 
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PTFrom";
	СтрокаТЗ.ИмяКолонки = "PT From";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;

	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceNo";
	СтрокаТЗ.ИмяКолонки = "Invoice No";
	ТекМассивТипов = Новый Массив;
	ТекМассивТипов.Добавить(Тип("Строка"));
	//ТекМассивТипов.Добавить(Тип("Число"));
	СтрокаТЗ.ТипКолонки = Новый ОписаниеТипов(ТекМассивТипов, , Новый КвалификаторыСтроки(100));
	СтрокаТЗ.Обязательная = Истина;
	
	// PTTo
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PTTo";
	СтрокаТЗ.ИмяКолонки = "PT To";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	//CRM ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CRMId";
	СтрокаТЗ.ИмяКолонки = "CRM ID";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСтроковыеДанныеИсточникаНаСсылочные(ТаблицаДанных)
	
	Если ТаблицаДанных.Колонки.Найти("Источник") = Неопределено Тогда
		
		ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСоответствий"));
		
		Для Каждого Строка Из ТаблицаДанных Цикл
			Если Строка.Source = "Lawson" Тогда
				Строка.Источник = Перечисления.ТипыСоответствий.Lawson;
			ИначеЕсли Строка.Source = "Oracle (MI)" Тогда
				Строка.Источник = Перечисления.ТипыСоответствий.OracleMI;
			ИначеЕсли Строка.Source = "Oracle (Smith)" Тогда
				Строка.Источник = Перечисления.ТипыСоответствий.OracleSmith;
			ИначеЕсли Строка.Source = "HOBs" Тогда
				Строка.Источник = Перечисления.ТипыСоответствий.HOBs;
			ИначеЕсли Строка.Source = "Radius" Тогда
				Строка.Источник = Перечисления.ТипыСоответствий.Radius;
			ИначеЕсли Строка.Source = "Geofit" Тогда
				Строка.Источник = Перечисления.ТипыСоответствий.Geofit;
			ИначеЕсли Строка.Source = "MFG" Тогда
				Строка.Источник = Перечисления.ТипыСоответствий.MFG;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСоглашения(ТаблицаДанных)
	
	КэшСозданныхКонтрактов = Новый ТаблицаЗначений;
	КэшСозданныхКонтрактов.Колонки.Добавить("Agreement", Новый ОписаниеТипов("Строка"));
	КэшСозданныхКонтрактов.Колонки.Добавить("Client", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КэшСозданныхКонтрактов.Колонки.Добавить("Company", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КэшСозданныхКонтрактов.Колонки.Добавить("СсылкаНаКонтракт", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.LegalEntity КАК LegalEntity,
	|	ТаблицаИсходныхДанных.Источник КАК Source,
	|	ТаблицаИсходныхДанных.TransType КАК TransType,
	|	ТаблицаИсходныхДанных.InvoiceNo КАК InvoiceNo,
	|	ТаблицаИсходныхДанных.Agreement КАК Agreement,
	|	ТаблицаИсходныхДанных.Trigger КАК Trigger,
	|	ТаблицаИсходныхДанных.Company КАК Company,
	|	ТаблицаИсходныхДанных.Client КАК Client,
	|	ТаблицаИсходныхДанных.CRMId КАК CRMId,
	|	ТаблицаИсходныхДанных.Currency КАК Currency,
	|	ТаблицаИсходныхДанных.PTFrom КАК PTFrom,
	|	ТаблицаИсходныхДанных.PTTo КАК PTTo
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных";
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.СсылкаНаДок КАК СсылкаНаДок,
	               |	ВложенныйЗапрос.Соглашение КАК Соглашение,
	               |	ВложенныйЗапрос.PTFrom КАК PTFrom,
	               |	ВложенныйЗапрос.LegalEntity КАК LegalEntity,
	               |	ВложенныйЗапрос.Company КАК Company,
	               |	ВложенныйЗапрос.Client КАК Client,
	               |	ВложенныйЗапрос.CRMId КАК CRMId,
	               |	ВложенныйЗапрос.Currency КАК Currency,
	               |	ВложенныйЗапрос.PTTo КАК PTTo,
	               |	ВложенныйЗапрос.Trigger КАК Trigger,
	               |	ВложенныйЗапрос.Source КАК Source,
	               |	Контрагенты.Ссылка КАК Контрагент,
	               |	Организации.Ссылка КАК Организация,
	               |	Валюты.Ссылка КАК Валюта
	               |ПОМЕСТИТЬ ВременнаяТаблица
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА НЕ ДокументInvoice.Ссылка ЕСТЬ NULL
	               |				ТОГДА ДокументInvoice.Ссылка
	               |			КОГДА НЕ ДокументInvoice.DocNumber ЕСТЬ NULL
	               |				ТОГДА ДокументInvoice1.Ссылка
	               |		КОНЕЦ КАК СсылкаНаДок,
	               |		врТЗТаблицаДанных.Agreement КАК Соглашение,
	               |		врТЗТаблицаДанных.PTFrom КАК PTFrom,
	               |		врТЗТаблицаДанных.LegalEntity КАК LegalEntity,
	               |		врТЗТаблицаДанных.Company КАК Company,
	               |		врТЗТаблицаДанных.Client КАК Client,
	               |		врТЗТаблицаДанных.CRMId КАК CRMId,
	               |		врТЗТаблицаДанных.Currency КАК Currency,
	               |		врТЗТаблицаДанных.PTTo КАК PTTo,
	               |		врТЗТаблицаДанных.Trigger КАК Trigger,
	               |		врТЗТаблицаДанных.Source КАК Source
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Invoice КАК ДокументInvoice
	               |			ПО врТЗТаблицаДанных.InvoiceNo = ДокументInvoice.FiscalInvoiceNo
	               |				И врТЗТаблицаДанных.Source = ДокументInvoice.Source
	               |				И (ДокументInvoice.Contract = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |				И (врТЗТаблицаДанных.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Invoice КАК ДокументInvoice1
	               |			ПО врТЗТаблицаДанных.InvoiceNo = ДокументInvoice1.DocNumber
	               |				И врТЗТаблицаДанных.Source = ДокументInvoice1.Source
	               |				И (ДокументInvoice.Contract = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |				И (врТЗТаблицаДанных.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	               |	ГДЕ
	               |		врТЗТаблицаДанных.TransType = ""I""
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		Invoices.Ссылка,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.CRMId,
	               |		врТЗТаблицаДанных.Currency,
	               |		врТЗТаблицаДанных.PTTo,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Source
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Invoice КАК Invoices
	               |			ПО (Invoices.DocNumber = врТЗТаблицаДанных.InvoiceNo)
	               |				И (Invoices.Contract = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |				И (врТЗТаблицаДанных.Source <> ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	               |				И врТЗТаблицаДанных.Source = Invoices.Source
	               |	ГДЕ
	               |		врТЗТаблицаДанных.TransType = ""I""
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		Memos.Ссылка,
	               |		врТЗТаблицаДанных.Agreement,
	               |		врТЗТаблицаДанных.PTFrom,
	               |		врТЗТаблицаДанных.LegalEntity,
	               |		врТЗТаблицаДанных.Company,
	               |		врТЗТаблицаДанных.Client,
	               |		врТЗТаблицаДанных.CRMId,
	               |		врТЗТаблицаДанных.Currency,
	               |		врТЗТаблицаДанных.PTTo,
	               |		врТЗТаблицаДанных.Trigger,
	               |		врТЗТаблицаДанных.Source
	               |	ИЗ
	               |		врТЗТаблицаДанных КАК врТЗТаблицаДанных
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Memo КАК Memos
	               |			ПО (Memos.Номер = врТЗТаблицаДанных.InvoiceNo)
	               |				И (Memos.Contract = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |				И врТЗТаблицаДанных.Source = Memos.Source
	               |	ГДЕ
	               |		врТЗТаблицаДанных.TransType = ""Memo"") КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ВложенныйЗапрос.CRMId = Контрагенты.CRMID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	               |		ПО ВложенныйЗапрос.Company = Организации.Наименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	               |		ПО ВложенныйЗапрос.Currency = Валюты.Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВременнаяТаблица.СсылкаНаДок КАК СсылкаНаДок,
	               |	ВременнаяТаблица.Соглашение КАК Соглашение,
	               |	ВременнаяТаблица.PTFrom КАК PTFrom,
	               |	ВременнаяТаблица.LegalEntity КАК LegalEntity,
	               |	ВременнаяТаблица.Company КАК Company,
	               |	ВременнаяТаблица.Client КАК Client,
	               |	ВременнаяТаблица.CRMId КАК CRMId,
	               |	ВременнаяТаблица.Currency КАК Currency,
	               |	ВременнаяТаблица.PTTo КАК PTTo,
	               |	ВременнаяТаблица.Trigger КАК Trigger,
	               |	ВременнаяТаблица.Контрагент КАК Контрагент,
	               |	ВременнаяТаблица.Source КАК Source,
	               |	ВременнаяТаблица.Организация КАК Организация,
	               |	ВременнаяТаблица.Валюта КАК Валюта,
	               |	Контракты.Ссылка КАК КонтрактДляЗаписи,
	               |	TriggerTypes.Ссылка КАК TriggerСсылка
	               |ИЗ
	               |	ВременнаяТаблица КАК ВременнаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Контракты
	               |		ПО ВременнаяТаблица.Соглашение = Контракты.Наименование
	               |			И ВременнаяТаблица.Организация = Контракты.Организация
	               |			И ВременнаяТаблица.Контрагент = Контракты.Владелец
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.TriggerTypes КАК TriggerTypes
	               |		ПО ВременнаяТаблица.Trigger = TriggerTypes.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
	
		Сообщить("No changes made during upload.");
	
	Иначе
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			СтруктураПоиска = Новый Структура("Agreement, Client, Company", ВыборкаДетальныеЗаписи.Соглашение, ВыборкаДетальныеЗаписи.Контрагент, ВыборкаДетальныеЗаписи.Организация);	
			НайденныеСтроки = КэшСозданныхКонтрактов.НайтиСтроки(СтруктураПоиска);
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КонтрактДляЗаписи) Тогда
				
				Контракт = ВыборкаДетальныеЗаписи.КонтрактДляЗаписи;
			
			Иначе 
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					Контракт = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					Контракт.Наименование = ВыборкаДетальныеЗаписи.Соглашение;
					Контракт.crmContractName = ВыборкаДетальныеЗаписи.Соглашение;
					Контракт.Trigger = ВыборкаДетальныеЗаписи.TriggerСсылка;
					Контракт.Комментарий = "Создан автоматически загрузкой справочных данных по инвойсам";
					Контракт.PTDaysFrom = ВыборкаДетальныеЗаписи.PTFrom;
					Контракт.СрокОплаты = ВыборкаДетальныеЗаписи.PTTo;
					Контракт.УстановленСрокОплаты = Истина;
					Контракт.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
					Контракт.Организация = ВыборкаДетальныеЗаписи.Организация;
					Контракт.Владелец = ВыборкаДетальныеЗаписи.Контрагент;
					Контракт.ВалютаВзаиморасчетов = ВыборкаДетальныеЗаписи.Валюта;
					Контракт.Записать();
					
					НоваяЗаписьКэша = КэшСозданныхКонтрактов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьКэша, СтруктураПоиска);
					НоваяЗаписьКэша.СсылкаНаКонтракт = Контракт.Ссылка;
					
				Иначе
					
					Контракт = НайденныеСтроки[0].СсылкаНаКонтракт;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДокОбъект = ВыборкаДетальныеЗаписи.СсылкаНаДок.ПолучитьОбъект();
			ДокОбъект.Contract = Контракт.Ссылка;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
		Сообщить("Upload completed.");
		
	КонецЕсли;
	
КонецПроцедуры
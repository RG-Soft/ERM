
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресВХранилище = "";
	ВыбранноеИмяФайла = "";
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект);
	
	НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресВХранилище,,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(Результат, АдресВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		
		Объект.ИмяФайла = Файл.Имя;
		АдресФайлаВХранилище = АдресВХранилище;
		Модифицированность = Истина;
		
		ЗаполнитьСписокЛистовЭкселя(Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЛистовЭкселя(ЗаполнитьЛист = Ложь)
	
	СписокЛистов = Новый Массив;
	
	Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
		ФайлЭксель = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	Иначе
		ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
		ФайлЭксель = ОбъектДляСервера.ИсточникДанных.Получить();
	КонецЕсли;
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(Истина, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(Истина, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если СписокЛистов.Количество() > 0 И ЗаполнитьЛист Тогда
		// { RGS PMatkov 25.12.2015 15:50:08 - 
		//ЛистФайла = СписокЛистов[0];
		Объект.ЛистФайла = СписокЛистов[0];
		// } RGS PMatkov 25.12.2015 15:50:09 - 
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	
	Если Объект.ИмяФайла = "" Тогда
		Сообщить("The file is not selected");
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.ПустаяСсылка() Тогда
		Сообщить("The Transaction Type is not selected");
	ИначеЕсли Период = Дата(1,1,1) Тогда
		Сообщить("Specify the period downloaded balances");
	Иначе
		
		ЗаполнитьСтруктуруФайлаПоУмолчанию();
		
		ТаблицаКоллизий.Очистить();
		
		ДанныеДляЗаполнения = Новый Структура();
		ТекстОшибки = "";
		
		ДД = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
		ДД.Записать(ИмяФайла);
		
		ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
		
		СтруктураПараметров = Новый Структура("ИменаКолонокВПервойСтроке, ЛистФайла, СтруктураКолонок, ПерваяСтрокаДанных, ПоследняяСтрокаДанных", Истина, Объект.ЛистФайла, СтруктураКолонок, 2, 0);
		
		rgsЗагрузкаИзExcel.ВыгрузитьЭксельВТаблицуДанных(ИмяФайла, ТаблицаДанных, ДанныеДляЗаполнения, АдресХранилища, СтруктураПараметров);
		
		Для каждого СтрокаДанных Из ТаблицаДанных Цикл
			Если (Найти(СтрокаДанных.CompanyDesc, "ТОЭ ЗГП") > 0 ИЛИ Найти(СтрокаДанных.CompanyDesc, "ТОЭЗГП") > 0) И ПустаяСтрока(СтрокаДанных.AU) Тогда
				СтрокаДанных.AU = "0669533";
				СтрокаДанных.AUType = "Lawson";
			КонецЕсли;
		КонецЦикла;
		
		Результат = ВыполнитьПроверкуНастроекСинхронизации(ТаблицаДанных);
		
		Если Результат Тогда
			СформироватьПроводкиDSS(ТаблицаДанных);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ВыполнитьПроверкуНастроекСинхронизации(ТаблицаДанных)
	
	Если ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		Результат = ВыполнитьПроверкуНастроекСинхронизацииAccruals(ТаблицаДанных);
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		Результат = ВыполнитьПроверкуНастроекСинхронизацииJV(ТаблицаДанных);
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		Результат = ВыполнитьПроверкуНастроекСинхронизацииReceivables(ТаблицаДанных);
	Иначе
		Результат = Ложь;
		ВызватьИсключение "Unknown type of transactions!";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуНастроекСинхронизацииReceivables(ТаблицаДанных)
	
	Результат = Ложь;
	//ПериодНач = НачалоМесяца(Период);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.Account,
	|	ТаблицаИсходныхДанных.Client,
	|	ТаблицаИсходныхДанных.INN,
	|	ТаблицаИсходныхДанных.CompanyCode,
	|	ТаблицаИсходныхДанных.CompanyDesc,
	|	ТаблицаИсходныхДанных.Currency,
	|	ТаблицаИсходныхДанных.LocationCode,
	|	ТаблицаИсходныхДанных.LocationDesc,
	|	ТаблицаИсходныхДанных.Amount,
	|	ТаблицаИсходныхДанных.BaseAmount,
	|	ТаблицаИсходныхДанных.AU,
	|	ТаблицаИсходныхДанных.AUType,
	|	ТаблицаИсходныхДанных.SubSubSegment,
	|	ТаблицаИсходныхДанных.Invoice,
	|	ТаблицаИсходныхДанных.InvoiceDate,
	|	ТаблицаИсходныхДанных.InvoiceNumber,
	|	ТаблицаИсходныхДанных.InvoiceCurrency,
	|	ТаблицаИсходныхДанных.InvoiceAmount,
	|	ТаблицаИсходныхДанных.InvoiceBilled,
	//|	ТаблицаИсходныхДанных.InvoicePassedForApproval,
	//|	ТаблицаИсходныхДанных.InvoicePassedForPayment,
	//|	ТаблицаИсходныхДанных.InvoicePassedForApprovalDate,
	//|	ТаблицаИсходныхДанных.InvoicePassedForPaymentDate,
	//|	ТаблицаИсходныхДанных.ExpectedDateOfPayment,
	|	ТаблицаИсходныхДанных.InvoiceAgreementCode,
	|	ТаблицаИсходныхДанных.InvoiceAgreement,
	|	ТаблицаИсходныхДанных.LegalEntity,
	//|	ТаблицаИсходныхДанных.Reverse,
	//|	ТаблицаИсходныхДанных.DocumentID,
	|	ТаблицаИсходныхДанных.InvoiceID
	//|	ТаблицаИсходныхДанных.TrID
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных
	|	"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
//	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	Значение(Перечисление.ТипыСоответствий.HOBs) КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	врТЗТаблицаДанных.Currency КАК Идентификатор
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = Значение(Перечисление.ТипыСоответствий.HOBs)
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО врТЗТаблицаДанных.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Specify the 1C object"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
		|	врТЗТаблицаДанных.InvoiceCurrency
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = Значение(Перечисление.ТипыСоответствий.HOBs)
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО врТЗТаблицаДанных.InvoiceCurrency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И врТЗТаблицаДанных.InvoiceCurrency <> """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	врТЗТаблицаДанных.Account
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Account = Lawson.Код
		|ГДЕ
		|	Lawson.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	врТЗТаблицаДанных.CompanyCode
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|			И врТЗТаблицаДанных.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
		|	И врТЗТаблицаДанных.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	врТЗТаблицаДанных.AU
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(врТЗТаблицаДанных.AU, 8, 3) = Сегменты.Код)
		|			И (врТЗТаблицаДанных.AUType <> ""Lawson"")
		|			И (врТЗТаблицаДанных.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ врТЗТаблицаДанных.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	врТЗТаблицаДанных.AUType <> ""Lawson""
		|	И Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И врТЗТаблицаДанных.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	врТЗТаблицаДанных.AU
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(врТЗТаблицаДанных.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (врТЗТаблицаДанных.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ врТЗТаблицаДанных.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	врТЗТаблицаДанных.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	врТЗТаблицаДанных.AU
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|			И (врТЗТаблицаДанных.AUType = ""Lawson"")
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL 
		|	И врТЗТаблицаДанных.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Legal entity"",
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.LegalEntity),
		|	ЗНАЧЕНИЕ(Справочник.LegalEntiites.ПустаяСсылка),
		|	врТЗТаблицаДанных.LegalEntity
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО врТЗТаблицаДанных.LegalEntity = LegalEntiites.Код
		|			И (НЕ LegalEntiites.ПометкаУдаления)
		|			И (LegalEntiites.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|ГДЕ
		|	LegalEntiites.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|	И врТЗТаблицаДанных.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
		|	Сегменты.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО (НЕ HFM_Technology.ПометкаУдаления)
		|				И Сегменты.Код = HFM_Technology.Код
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(врТЗТаблицаДанных.AU, 8, 3) = Сегменты.Код)
		|			И (врТЗТаблицаДанных.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ врТЗТаблицаДанных.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	врТЗТаблицаДанных.AUType <> ""Lawson""
		|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|	И врТЗТаблицаДанных.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО (НЕ HFM_Locations.ПометкаУдаления)
		|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(врТЗТаблицаДанных.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (врТЗТаблицаДанных.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ врТЗТаблицаДанных.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	врТЗТаблицаДанных.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Account = Lawson.Код
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|			И врТЗТаблицаДанных.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	//Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", Период);
	//Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуНастроекСинхронизацииAccruals(ТаблицаДанных)
	
	Результат = Ложь;
	//ДанныеДляЗаполнения = Новый Структура();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	HOBAccrualsSourceData.TrDate,
	//	|	HOBAccrualsSourceData.TrNumber,
	//	|	HOBAccrualsSourceData.Document,
	//	|	HOBAccrualsSourceData.DocumentType,
	//	|	HOBAccrualsSourceData.Account,
	//	|	HOBAccrualsSourceData.Client,
	//	|	HOBAccrualsSourceData.INN,
	//	|	HOBAccrualsSourceData.SalesOrderAgreementCode,
	//	|	HOBAccrualsSourceData.SalesOrderAgreement,
	//	|	HOBAccrualsSourceData.SalesOrder,
	//	|	HOBAccrualsSourceData.SalesOrderNumber,
	//	|	HOBAccrualsSourceData.CompanyCode,
	//	|	HOBAccrualsSourceData.CompanyDesc,
	//	|	HOBAccrualsSourceData.Currency,
	//	|	HOBAccrualsSourceData.LocationCode,
	//	|	HOBAccrualsSourceData.LocationDesc,
	//	|	HOBAccrualsSourceData.Amount,
	//	|	HOBAccrualsSourceData.BaseAmount,
	//	|	HOBAccrualsSourceData.JobEndDate,
	//	|	HOBAccrualsSourceData.SalesOrderAmount,
	//	|	HOBAccrualsSourceData.ERPStatus,
	//	|	HOBAccrualsSourceData.SalesOrderCurrency,
	//	|	HOBAccrualsSourceData.SalesOrderExchangeRate,
	//	|	HOBAccrualsSourceData.SalesOrderApprovalDate,
	//	|	HOBAccrualsSourceData.SalesOrderApprovedBy,
	//	|	HOBAccrualsSourceData.AU,
	//	|	HOBAccrualsSourceData.AUType,
	//	|	HOBAccrualsSourceData.SubSubSegment,
	//	|	HOBAccrualsSourceData.SalesOrderDate,
	//	|	HOBAccrualsSourceData.Invoice,
	//	|	HOBAccrualsSourceData.InvoiceDate,
	//	|	HOBAccrualsSourceData.InvoiceNumber,
	//	|	HOBAccrualsSourceData.InvoiceCurrency,
	//	|	HOBAccrualsSourceData.InvoiceAmount,
	//	|	HOBAccrualsSourceData.InvoiceBilled,
	//	|	HOBAccrualsSourceData.InvoicePassedForApproval,
	//	|	HOBAccrualsSourceData.InvoicePassedForPayment,
	//	|	HOBAccrualsSourceData.InvoicePassedForApprovalDate,
	//	|	HOBAccrualsSourceData.InvoicePassedForPaymentDate,
	//	|	HOBAccrualsSourceData.ExpectedDateOfPayment,
	//	|	HOBAccrualsSourceData.InvoiceAgreementCode,
	//	|	HOBAccrualsSourceData.InvoiceAgreement,
	//	|	HOBAccrualsSourceData.Reverse,
	//	|	HOBAccrualsSourceData.DocumentID,
	//	|	HOBAccrualsSourceData.SalesOrderID,
	//	|	HOBAccrualsSourceData.InvoiceID,
	//	|	HOBAccrualsSourceData.TrID
	//	|ПОМЕСТИТЬ ВТ_HOBAccrualsSourceData
	//	|ИЗ
	//	|	РегистрСведений.HOBAccrualsSourceData КАК HOBAccrualsSourceData
	//	|ГДЕ
	//	|	HOBAccrualsSourceData.ДокументЗагрузки = &ДокументЗагрузки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ КАК КоллизияОтработана,
	//	|	""Specify the 1C object"" КАК Описание,
	//	|	&ТипВнешнейСистемы КАК ТипСоответствия,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
	//	|	ВТ_HOBAccrualsSourceData.Currency КАК Идентификатор
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	//	|				&Период,
	//	|				ТипСоответствия = &ТипВнешнейСистемы
	//	|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
	//	|		ПО ВТ_HOBAccrualsSourceData.Currency = НастройкаСинхронизацииCurrency.Идентификатор
	//	|ГДЕ
	//	|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Specify the 1C object"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
	//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.SalesOrderCurrency
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	//	|				&Период,
	//	|				ТипСоответствия = &ТипВнешнейСистемы
	//	|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
	//	|		ПО ВТ_HOBAccrualsSourceData.SalesOrderCurrency = НастройкаСинхронизацииCurrency.Идентификатор
	//	|ГДЕ
	//	|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
	//	|	И ВТ_HOBAccrualsSourceData.SalesOrderCurrency <> """"
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Specify the 1C object"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
	//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.InvoiceCurrency
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	//	|				&Период,
	//	|				ТипСоответствия = &ТипВнешнейСистемы
	//	|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
	//	|		ПО ВТ_HOBAccrualsSourceData.InvoiceCurrency = НастройкаСинхронизацииCurrency.Идентификатор
	//	|ГДЕ
	//	|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
	//	|	И ВТ_HOBAccrualsSourceData.InvoiceCurrency <> """"
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Account"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
	//	|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.Account
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
	//	|		ПО (НЕ Lawson.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.Account = Lawson.Код
	//	|ГДЕ
	//	|	Lawson.Ссылка ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Company"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
	//	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.CompanyCode
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	//	|		ПО (НЕ Организации.ПометкаУдаления)
	//	|			И (Организации.Source = &ТипВнешнейСистемы)
	//	|			И ВТ_HOBAccrualsSourceData.CompanyCode = Организации.Код
	//	|ГДЕ
	//	|	Организации.Ссылка ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Sub-Sub-Segment by AU"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
	//	|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
	//	|	КостЦентры.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Sub-Sub-Segment by AU"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
	//	|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.AU
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
	//	|		ПО (НЕ Сегменты.ПометкаУдаления)
	//	|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 8, 3) = Сегменты.Код)
	//	|			И (ВТ_HOBAccrualsSourceData.AUType <> ""Lawson"")
	//	|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
	//	|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	//	|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
	//	|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	//	|ГДЕ
	//	|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
	//	|	И Сегменты.Ссылка ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Location by AU"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
	//	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	//	|	КостЦентры.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Location by AU"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
	//	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.AU
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	//	|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
	//	|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
	//	|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
	//	|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	//	|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
	//	|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	//	|ГДЕ
	//	|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
	//	|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Accounting Unit"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
	//	|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.AU
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.Ссылка ЕСТЬ NULL 
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	КостЦентры.Сегмент КАК Ссылка,
	//	|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
	//	|	КостЦентры.Сегмент.Код КАК Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
	//	|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
	//	|				И (НЕ HFM_Technology.ПометкаУдаления)
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	Сегменты.Ссылка,
	//	|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
	//	|	Сегменты.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
	//	|			ПО (НЕ HFM_Technology.ПометкаУдаления)
	//	|				И Сегменты.Код = HFM_Technology.Код
	//	|		ПО (НЕ Сегменты.ПометкаУдаления)
	//	|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 8, 3) = Сегменты.Код)
	//	|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
	//	|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	//	|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
	//	|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	//	|ГДЕ
	//	|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
	//	|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
	//	|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
	//	|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
	//	|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
	//	|				И (НЕ HFM_Locations.ПометкаУдаления)
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ПодразделенияОрганизаций.Ссылка,
	//	|	ПодразделенияОрганизаций.Код,
	//	|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
	//	|			ПО (НЕ HFM_Locations.ПометкаУдаления)
	//	|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
	//	|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
	//	|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
	//	|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
	//	|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	//	|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
	//	|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	//	|ГДЕ
	//	|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
	//	|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	Lawson.Ссылка,
	//	|	Lawson.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
	//	|		ПО (НЕ Lawson.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.Account = Lawson.Код
	//	|ГДЕ
	//	|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	Организации.Ссылка,
	//	|	Организации.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	//	|		ПО (НЕ Организации.ПометкаУдаления)
	//	|			И (Организации.Source = &ТипВнешнейСистемы)
	//	|			И ВТ_HOBAccrualsSourceData.CompanyCode = Организации.Код
	//	|ГДЕ
	//	|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	//
	//Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	//Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	//Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	//МассивРезультатов = Запрос.ВыполнитьПакет();
	//
	//ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	//
	//ВыборкаСегментов = МассивРезультатов[2].Выбрать();
	//
	//Пока ВыборкаСегментов.Следующий() Цикл
	//	
	//	Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
	//		
	//		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
	//		СтрокаКоллизии.КоллизияОтработана = Ложь;
	//		СтрокаКоллизии.Описание = "Not specified base element";
	//		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
	//		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
	//		СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
	//		СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
	//		
	//	Иначе
	//		
	//		ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
	//		ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
	//		ТекОбъект.Записать();
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//// локации
	//ВыборкаЛокаций = МассивРезультатов[3].Выбрать();
	//
	//Пока ВыборкаЛокаций.Следующий() Цикл
	//	
	//	Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
	//		
	//		ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
	//		ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
	//		ТекОбъект.Записать();
	//		
	//	Иначе
	//		
	//		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
	//		СтрокаКоллизии.КоллизияОтработана = Ложь;
	//		СтрокаКоллизии.Описание = "Not specified base element";
	//		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
	//		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
	//		СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
	//		СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//// счета
	//ВыборкаСчетов = МассивРезультатов[4].Выбрать();
	//
	//Пока ВыборкаСчетов.Следующий() Цикл
	//	
	//	СтрокаКоллизии = ТаблицаКоллизий.Добавить();
	//	СтрокаКоллизии.КоллизияОтработана = Ложь;
	//	СтрокаКоллизии.Описание = "Not specified base element";
	//	СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
	//	СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
	//	СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
	//	СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
	//	
	//КонецЦикла;
	//
	//// организации
	//ВыборкаКомпаний = МассивРезультатов[5].Выбрать();
	//
	//Пока ВыборкаКомпаний.Следующий() Цикл
	//	
	//	СтрокаКоллизии = ТаблицаКоллизий.Добавить();
	//	СтрокаКоллизии.КоллизияОтработана = Ложь;
	//	СтрокаКоллизии.Описание = "Not specified base element";
	//	СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
	//	СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
	//	СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
	//	СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
	//	
	//КонецЦикла;
	//
	//ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	//
	//ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	//
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуНастроекСинхронизацииJV(ТаблицаДанных)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBJVSourceData.Account,
		|	HOBJVSourceData.Client,
		|	HOBJVSourceData.INN,
		|	HOBJVSourceData.CompanyCode,
		|	HOBJVSourceData.CompanyDesc,
		|	HOBJVSourceData.Currency,
		|	HOBJVSourceData.LocationCode,
		|	HOBJVSourceData.LocationDesc,
		|	HOBJVSourceData.Amount,
		|	HOBJVSourceData.BaseAmount,
		|	HOBJVSourceData.AU,
		|	HOBJVSourceData.AUType,
		|	HOBJVSourceData.SubSubSegment,
		|	HOBJVSourceData.LegalEntity
		|ПОМЕСТИТЬ ВТ_HOBJVSourceData
		|ИЗ
		|	&ВнешняяТаблицаДанных КАК HOBJVSourceData
		|";
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	Значение(Перечисление.ТипыСоответствий.HOBs) КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	ВТ_HOBJVSourceData.Currency КАК Идентификатор
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = Значение(Перечисление.ТипыСоответствий.HOBs)
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_HOBJVSourceData.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.Account
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.CompanyCode
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_HOBJVSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBJVSourceData.AUType <> ""Lawson"")
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	Значение(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL 
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Legal entity"",
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.LegalEntity),
		|	ЗНАЧЕНИЕ(Справочник.LegalEntiites.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.LegalEntity
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBJVSourceData.LegalEntity = LegalEntiites.Код
		|			И (НЕ LegalEntiites.ПометкаУдаления)
		|			И (LegalEntiites.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|ГДЕ
		|	LegalEntiites.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
		|	Сегменты.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО (НЕ HFM_Technology.ПометкаУдаления)
		|				И Сегменты.Код = HFM_Technology.Код
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО (НЕ HFM_Locations.ПометкаУдаления)
		|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_HOBJVSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Период", Период);
	//Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьПроводкиDSS(ТаблицаДанных)
	
	Если ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		СформироватьПроводкиDSSAccruals(ТаблицаДанных);
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		СформироватьПроводкиDSSJV(ТаблицаДанных);
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		СформироватьПроводкиDSSReceivables(ТаблицаДанных);
	Иначе
		ВызватьИсключение "Unknown type of transactions!";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПроводкиDSSAccruals(ТаблицаДанных)
КонецПроцедуры

&НаСервере
Процедура СформироватьПроводкиDSSReceivables(ТаблицаДанных)

	ПериодНач = НачалоМесяца(Период);
	//СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency");
	//СтруктураПоискаМемо = Новый Структура("ArInvoice, Client");
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.Account,
	|	ТаблицаИсходныхДанных.Client,
	|	ТаблицаИсходныхДанных.INN,
	|	ТаблицаИсходныхДанных.CompanyCode,
	|	ТаблицаИсходныхДанных.CompanyDesc,
	|	ТаблицаИсходныхДанных.Currency,
	|	ТаблицаИсходныхДанных.LocationCode,
	|	ТаблицаИсходныхДанных.LocationDesc,
	|	ТаблицаИсходныхДанных.Amount,
	|	ТаблицаИсходныхДанных.BaseAmount,
	|	ТаблицаИсходныхДанных.AU,
	|	ТаблицаИсходныхДанных.AUType,
	|	ТаблицаИсходныхДанных.SubSubSegment,
	//|	ТаблицаИсходныхДанных.Reverse,
	//|	ТаблицаИсходныхДанных.DocumentID,
	|	ТаблицаИсходныхДанных.InvoiceID,
	//|	ТаблицаИсходныхДанных.TrID,
	|	ТаблицаИсходныхДанных.InvoiceCurrency,
	|	ТаблицаИсходныхДанных.InvoiceType,
	|	ТаблицаИсходныхДанных.Invoice,
	|	ТаблицаИсходныхДанных.InvoiceNumber,
	|	ТаблицаИсходныхДанных.InvoiceDate,
	|	ТаблицаИсходныхДанных.InvoiceAmount,
	|	ТаблицаИсходныхДанных.InvoiceAgreementCode,
	|	ТаблицаИсходныхДанных.InvoiceAgreement,
	|	ТаблицаИсходныхДанных.FiscalInvoiceNo,
	|	ТаблицаИсходныхДанных.FiscalInvoiceDate,
	|	ТаблицаИсходныхДанных.InvoiceBilled,
	//|	ТаблицаИсходныхДанных.InvoicePassedForApproval,
	//|	ТаблицаИсходныхДанных.InvoicePassedForPayment,
	//|	ТаблицаИсходныхДанных.InvoicePassedForApprovalDate,
	//|	ТаблицаИсходныхДанных.InvoicePassedForPaymentDate,
	//|	ТаблицаИсходныхДанных.ExpectedDateOfPayment,
	//|	ТаблицаИсходныхДанных.PaymentNumber,
	//|	ТаблицаИсходныхДанных.PaymentDate,
	|	ТаблицаИсходныхДанных.СтрокаФайла,
	|	ТаблицаИсходныхДанных.LegalEntity
	|ПОМЕСТИТЬ ВТ_ДанныеФайла
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных
	|	"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.INN
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Currency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.InvoiceCurrency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	INV.DocID,
		|	INV.Ссылка
		|ИЗ
		|	Документ.Invoice КАК INV
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО INV.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ INV.ПометкаУдаления)
		|			И (INV.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Cash.DocID,
		|	Cash.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК Cash
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Cash.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ Cash.ПометкаУдаления)
		|			И (Cash.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BatchAllocation.DocID,
		|	BatchAllocation.Ссылка
		|ИЗ
		|	Документ.BatchAllocation КАК BatchAllocation
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО BatchAllocation.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ BatchAllocation.ПометкаУдаления)
		|			И (BatchAllocation.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Memo.DocID,
		|	Memo.Ссылка
		|ИЗ
		|	Документ.Memo КАК Memo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Memo.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ Memo.ПометкаУдаления)
		|			И (Memo.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = Значение(Перечисление.ТипыСоответствий.HOBs)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		//|	ВТ_ДанныеФайла.TrDate КАК Period,
		|	Организации.Ссылка КАК Company,
		|	Lawson.Ссылка КАК Account,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		//|	ВТ_ДанныеФайла.DocumentID,
		//|	ВТ_ДанныеФайла.TrNumber,
		//|	ВТ_ДанныеФайла.Document КАК DocumentPresentation,
		//|	ВТ_ДанныеФайла.TrID,
		//|	ТранзакцияHOB.Ссылка КАК Транзакция,
		//|	ВТ_ДанныеФайла.Reverse,
		|	ВТ_ДанныеФайла.LocationCode КАК CREW,
		|	ВТ_ДанныеФайла.INN КАК CustomerNumber,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU КАК AUCode,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account КАК AccountCode,
		|	КостЦентры.Ссылка КАК AU,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВТ_СоответствиеCurrency1.ОбъектПриемника КАК InvoiceCurrency,
		//|	ВТ_ДанныеФайла.DocumentType,
		|	ВТ_ДанныеФайла.InvoiceType,
		|	ВТ_ДанныеФайла.InvoiceID,
		|	ВТ_ДанныеФайла.InvoiceNumber,
		|	ВТ_ДанныеФайла.InvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceAmount,
		|	ВТ_ДанныеФайла.InvoiceAgreementCode,
		|	ВТ_ДанныеФайла.InvoiceAgreement,
		|	ВТ_ДанныеФайла.FiscalInvoiceNo,
		|	ВТ_ДанныеФайла.FiscalInvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceBilled,
		//|	ВТ_ДанныеФайла.InvoicePassedForApproval,
		//|	ВТ_ДанныеФайла.InvoicePassedForPayment,
		//|	ВТ_ДанныеФайла.InvoicePassedForApprovalDate,
		//|	ВТ_ДанныеФайла.InvoicePassedForPaymentDate,
		//|	ВТ_ДанныеФайла.ExpectedDateOfPayment,
		//|	ВТ_ДанныеФайла.PaymentNumber,
		//|	ВТ_ДанныеФайла.PaymentDate,
		|	ВТ_ДанныеФайла.СтрокаФайла КАК СтрокаФайла,
		|	LegalEntiites.Ссылка КАК LegalEntity
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияHOB КАК ТранзакцияHOB
		//|		ПО (НЕ ТранзакцияHOB.ПометкаУдаления)
		//|			И ВТ_ДанныеФайла.TrID = ТранзакцияHOB.TrID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency1
		|		ПО ВТ_ДанныеФайла.InvoiceCurrency = ВТ_СоответствиеCurrency1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType = ""Lawson""
		|	И НЕ ВТ_ДанныеФайла.INN В
		|				(ВЫБРАТЬ
		|					HOBIgnoredClients.INN
		|				ИЗ
		|					РегистрСведений.HOBIgnoredClients КАК HOBIgnoredClients)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		//|	ВТ_ДанныеФайла.TrDate,
		|	Организации.Ссылка,
		|	Lawson.Ссылка,
		|	ПодразделенияОрганизаций.Ссылка,
		|	Сегменты.Ссылка,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		//|	ВТ_ДанныеФайла.DocumentID,
		//|	ВТ_ДанныеФайла.TrNumber,
		//|	ВТ_ДанныеФайла.Document,
		//|	ВТ_ДанныеФайла.TrID,
		//|	ТранзакцияHOB.Ссылка,
		//|	ВТ_ДанныеФайла.Reverse,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.INN,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account,
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель,
		|	ВТ_СоответствиеCurrency1.ОбъектПриемника,
		//|	ВТ_ДанныеФайла.DocumentType,
		|	ВТ_ДанныеФайла.InvoiceType,
		|	ВТ_ДанныеФайла.InvoiceID,
		|	ВТ_ДанныеФайла.InvoiceNumber,
		|	ВТ_ДанныеФайла.InvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceAmount,
		|	ВТ_ДанныеФайла.InvoiceAgreementCode,
		|	ВТ_ДанныеФайла.InvoiceAgreement,
		|	ВТ_ДанныеФайла.FiscalInvoiceNo,
		|	ВТ_ДанныеФайла.FiscalInvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceBilled,
		//|	ВТ_ДанныеФайла.InvoicePassedForApproval,
		//|	ВТ_ДанныеФайла.InvoicePassedForPayment,
		//|	ВТ_ДанныеФайла.InvoicePassedForApprovalDate,
		//|	ВТ_ДанныеФайла.InvoicePassedForPaymentDate,
		//|	ВТ_ДанныеФайла.ExpectedDateOfPayment,
		//|	ВТ_ДанныеФайла.PaymentNumber,
		//|	ВТ_ДанныеФайла.PaymentDate,
		|	ВТ_ДанныеФайла.СтрокаФайла,
		|	LegalEntiites.Ссылка
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияHOB КАК ТранзакцияHOB
		//|		ПО (НЕ ТранзакцияHOB.ПометкаУдаления)
		//|			И ВТ_ДанныеФайла.TrID = ТранзакцияHOB.TrID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency1
		|		ПО ВТ_ДанныеФайла.InvoiceCurrency = ВТ_СоответствиеCurrency1.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = Значение(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType <> ""Lawson""
		|	И НЕ ВТ_ДанныеФайла.INN В
		|				(ВЫБРАТЬ
		|					HOBIgnoredClients.INN
		|				ИЗ
		|					РегистрСведений.HOBIgnoredClients КАК HOBIgnoredClients)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокаФайла";
	
	Запрос.УстановитьПараметр("Период", Период);
	//Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	//Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшИнвойсов = РезультатЗапроса[2].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("DocID");
	
	КэшCashBatch = РезультатЗапроса[3].Выгрузить();
	КэшCashBatch.Индексы.Добавить("DocID");
	
	КэшBatchAllocation = РезультатЗапроса[4].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("DocID");
	
	КэшMemo = РезультатЗапроса[5].Выгрузить();
	КэшMemo.Индексы.Добавить("DocID");
	
	ТаблицаДаты = РезультатЗапроса[6].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[7].Выбрать();
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	ARBalance = РегистрыСведений.ARBalance;
	НаборЗаписей = ARBalance.СоздатьНаборЗаписей();
	
	ТаблицаОстатков = НаборЗаписей.ВыгрузитьКолонки();
	
	КэшПредставленийТипов = Новый Соответствие;
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.HOBs);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		////Если ВыборкаДанные.TransType = "P" или ВыборкаДанные.TransType = "I" или ВыборкаДанные.TransType = "C" или ВыборкаДанные.TransType = "M" Тогда
		//НаборЗаписей = ARBalance.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Период.Установить(ПериодНач);
		//НаборЗаписей.Отбор.Location.Установить(ВыборкаДетальныеЗаписи.Location);
		//НаборЗаписей.Отбор.Client.Установить(ВыборкаДетальныеЗаписи.Client);
		//НаборЗаписей.Отбор.Company.Установить(ВыборкаДетальныеЗаписи.Company);
		//НаборЗаписей.Отбор.Source.Установить(Перечисления.ТипыСоответствий.HOBs);
		//НаборЗаписей.Отбор.SubSubSegment.Установить(ВыборкаДетальныеЗаписи.SubSubSegment);
		
		TransType = "";
		
		HOBInvoiceType = ПолучитьТипДокумента(ВыборкаДетальныеЗаписи.InvoiceType, КэшПредставленийТипов);
		
		Если HOBInvoiceType = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг
			или HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаРеализации
			или HOBInvoiceType = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг
			ИЛИ HOBInvoiceType = Перечисления.HOBDocumentTypes.ПередачаОС
			ИЛИ HOBInvoiceType = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке
			или HOBInvoiceType = Перечисления.HOBDocumentTypes.ПрочиеЗатраты Тогда
			
			Инвойс = КэшИнвойсов.Найти(ВыборкаДетальныеЗаписи.InvoiceID, "DocID");
			Если Инвойс = Неопределено Тогда
				ПолеИнвойс =  ВыборкаДетальныеЗаписи.InvoiceID;
			Иначе
				ПолеИнвойс = Инвойс.Ссылка;
			КонецЕсли;
			TransType = "I";
		ИначеЕсли HOBInvoiceType = Перечисления.HOBDocumentTypes.ПлетежноеПоручениеИсходящее
			или HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаДолга Тогда
			Memo = КэшMemo.Найти(ВыборкаДетальныеЗаписи.InvoiceID, "DocID");
			Если Memo = Неопределено Тогда
				ПолеИнвойс =  ВыборкаДетальныеЗаписи.InvoiceID;
			Иначе
				ПолеИнвойс = Memo.Ссылка;
			КонецЕсли;
			TransType = "M";
		ИначеЕсли HOBInvoiceType = Перечисления.HOBDocumentTypes.ПлатежноеПоручениеВходящее Тогда
			CashBatch = КэшCashBatch.Найти(ВыборкаДетальныеЗаписи.InvoiceID, "DocID");
			Если CashBatch = Неопределено Тогда
				ПолеИнвойс =  ВыборкаДетальныеЗаписи.InvoiceID;
			Иначе
				ПолеИнвойс = CashBatch.Ссылка;
			КонецЕсли;
			TransType = "P";
		Иначе
			
			ТекОшибка = "Unexpected invoice type in string " + ВыборкаДетальныеЗаписи.СтрокаФайла ;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
			
		КонецЕсли;
		
		//НаборЗаписей.Отбор.Invoice.Установить(ПолеИнвойс);
		//НаборЗаписей.Отбор.Account.Установить(ВыборкаДетальныеЗаписи.Account);
		//НаборЗаписей.Отбор.Currency.Установить(ВыборкаДетальныеЗаписи.Currency);
		//НаборЗаписей.Отбор.AU.Установить(ВыборкаДетальныеЗаписи.AU);
		//НаборЗаписей.Прочитать();
		//
		//НоваяЗапись = НаборЗаписей.Добавить();
		//НоваяЗапись.Период = ПериодНач;
		//НоваяЗапись.Location = ВыборкаДетальныеЗаписи.Location;
		//НоваяЗапись.Client = ВыборкаДетальныеЗаписи.Client;
		//НоваяЗапись.Company = ВыборкаДетальныеЗаписи.Company;
		//НоваяЗапись.Source = Перечисления.ТипыСоответствий.HOBs;
		//НоваяЗапись.SubSubSegment = ВыборкаДетальныеЗаписи.SubSubSegment;
		//НоваяЗапись.Invoice = ПолеИнвойс;
		//НоваяЗапись.Account = ВыборкаДетальныеЗаписи.Account;
		//НоваяЗапись.Currency = ВыборкаДетальныеЗаписи.Currency;
		//НоваяЗапись.AU = ВыборкаДетальныеЗаписи.AU;
		//НоваяЗапись.Amount = ВыборкаДетальныеЗаписи.Amount;
		//
		//НаборЗаписей.Записать();
		СтрокаОстатка = ТаблицаОстатков.Добавить();
		СтрокаОстатка.Период = Период;
		СтрокаОстатка.Location = ВыборкаДетальныеЗаписи.Location;
		СтрокаОстатка.Client = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Client), ВыборкаДетальныеЗаписи.Client, Справочники.Контрагенты.Unreconciled);
		СтрокаОстатка.Company = ВыборкаДетальныеЗаписи.Company;
		СтрокаОстатка.Source = Перечисления.ТипыСоответствий.HOBs;
		СтрокаОстатка.SubSubSegment = ВыборкаДетальныеЗаписи.SubSubSegment;
		СтрокаОстатка.TransType = TransType;
		СтрокаОстатка.Invoice = ПолеИнвойс;
		СтрокаОстатка.Account = ВыборкаДетальныеЗаписи.Account;
		СтрокаОстатка.Currency = ВыборкаДетальныеЗаписи.Currency;
		СтрокаОстатка.AU = ВыборкаДетальныеЗаписи.AU;
		СтрокаОстатка.LegalEntity = ВыборкаДетальныеЗаписи.LegalEntity;
		СтрокаОстатка.Amount = ВыборкаДетальныеЗаписи.Amount;
		
	КонецЦикла;
	
	
	ТаблицаОстатков.Свернуть("Период, Client, Company, Source, Location, SubSubSegment, TransType, Invoice, Account, Currency, AU, LegalEntity", "Amount");
	
	ПараметрыОтбора = Новый Структура("TransType","I");
	Если ФильтрОрганизации Тогда
		ПараметрыОтбора.Вставить("Company",Организация);
	КонецЕсли;
	ТаблицаОстатков_I = ТаблицаОстатков.Скопировать(ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура("TransType","M");
	Если ФильтрОрганизации Тогда
		ПараметрыОтбора.Вставить("Company",Организация);
	КонецЕсли;
	ТаблицаОстатков_M = ТаблицаОстатков.Скопировать(ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура("TransType","P");
	Если ФильтрОрганизации Тогда
		ПараметрыОтбора.Вставить("Company",Организация);
	КонецЕсли;
	ТаблицаОстатков_P = ТаблицаОстатков.Скопировать(ПараметрыОтбора);
	
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Source.Установить(Перечисления.ТипыСоответствий.HOBs);
	Если ФильтрОрганизации Тогда
		НаборЗаписей.Отбор.Company.Установить(Организация);
	КонецЕсли;
	НаборЗаписей.Отбор.TransType.Установить("I");
	НаборЗаписей.Загрузить(ТаблицаОстатков_I);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Source.Установить(Перечисления.ТипыСоответствий.HOBs);
	Если ФильтрОрганизации Тогда
		НаборЗаписей.Отбор.Company.Установить(Организация);
	КонецЕсли;
	НаборЗаписей.Отбор.TransType.Установить("M");
	НаборЗаписей.Загрузить(ТаблицаОстатков_M);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Source.Установить(Перечисления.ТипыСоответствий.HOBs);
	Если ФильтрОрганизации Тогда
		НаборЗаписей.Отбор.Company.Установить(Организация);
	КонецЕсли;
	НаборЗаписей.Отбор.TransType.Установить("P");
	НаборЗаписей.Загрузить(ТаблицаОстатков_P);
	НаборЗаписей.Записать(Истина);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;

	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПроводкиDSSJV(ТаблицаДанных)
	
	ПериодНач = НачалоМесяца(Период);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBJVSourceData.Account,
		|	HOBJVSourceData.Client,
		|	HOBJVSourceData.CompanyCode,
		|	HOBJVSourceData.CompanyDesc,
		|	HOBJVSourceData.Currency,
		|	HOBJVSourceData.LocationCode,
		|	HOBJVSourceData.LocationDesc,
		|	HOBJVSourceData.Amount,
		|	HOBJVSourceData.BaseAmount,
		|	HOBJVSourceData.AU,
		|	HOBJVSourceData.AUType,
		|	HOBJVSourceData.SubSubSegment,
		|	HOBJVSourceData.LegalEntity,
		|	HOBJVSourceData.INN
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	&ВнешняяТаблицаДанных КАК HOBJVSourceData"
		;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Currency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.INN
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Client,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.AU,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Company,
		|	Lawson.Ссылка КАК Account,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.LocationCode КАК CREW,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU КАК AUCode,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account КАК AccountCode,
		|	КостЦентры.Ссылка КАК AU,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	LegalEntiites.Ссылка КАК LegalEntity
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Lawson.Ссылка,
		|	ПодразделенияОрганизаций.Ссылка,
		|	Сегменты.Ссылка,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)),
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель,
		|	LegalEntiites.Ссылка
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType <> ""Lawson""";
	
	Запрос.УстановитьПараметр("Период", Период);
	//Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшРучныхКоррерктировок = РезультатЗапроса[2].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Company, Client, Location, SubSubSegment, AU, Account, Currency");
	//КэшРучныхКоррерктировок.Индексы.Добавить("Company, Location, SubSubSegment, AU, Account, Currency");
	
	ТаблицаДаты = РезультатЗапроса[3].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[4].Выбрать();
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	ARBalance = РегистрыСведений.ARBalance;
	НаборЗаписей = ARBalance.СоздатьНаборЗаписей();
	
	ТаблицаОстатков = НаборЗаписей.ВыгрузитьКолонки();
	
	КэшПредставленийТипов = Новый Соответствие;
	
	TransType = "JV";
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Company, Client, Location, SubSubSegment, AU, Account, Currency");
	
	// { RGS AGorlenko 28.07.2017 18:05:17 - 
	КэшAU = Новый Соответствие;
	// } RGS AGorlenko 28.07.2017 18:05:21 - 
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.HOBs);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.AU) Тогда
			
			Если КэшAU[ВыборкаДетальныеЗаписи.AUCode] = Неопределено Тогда
				
				НовыйКостЦентр = Справочники.КостЦентры.СоздатьЭлемент();
				НовыйКостЦентр.Source = Перечисления.ТипыСоответствий.HOBs;
				НовыйКостЦентр.Код = ВыборкаДетальныеЗаписи.AUCode;
				НовыйКостЦентр.Наименование = ВыборкаДетальныеЗаписи.AUCode;
				НовыйКостЦентр.Сегмент = ВыборкаДетальныеЗаписи.SubSubSegment;
				НовыйКостЦентр.ПодразделениеОрганизации = ВыборкаДетальныеЗаписи.Location;
				НовыйКостЦентр.ОбменДанными.Загрузка = Истина;
				НовыйКостЦентр.Записать();
				
				КэшAU.Вставить(ВыборкаДетальныеЗаписи.AUCode, НовыйКостЦентр.Ссылка);
				
			КонецЕсли;
			
			AU = КэшAU[ВыборкаДетальныеЗаписи.AUCode];
			
		Иначе
			
			AU = ВыборкаДетальныеЗаписи.AU;
			
		КонецЕсли;
		
		СтруктураПоискаРучнойКорректировки.Company = ВыборкаДетальныеЗаписи.Company;
		СтруктураПоискаРучнойКорректировки.Client = ВыборкаДетальныеЗаписи.Client;
		СтруктураПоискаРучнойКорректировки.Location = ВыборкаДетальныеЗаписи.Location;
		СтруктураПоискаРучнойКорректировки.SubSubSegment = ВыборкаДетальныеЗаписи.SubSubSegment;
		СтруктураПоискаРучнойКорректировки.AU = AU;
		СтруктураПоискаРучнойКорректировки.Account = ВыборкаДетальныеЗаписи.Account;
		СтруктураПоискаРучнойКорректировки.Currency = ВыборкаДетальныеЗаписи.Currency;
		
		СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
		
		Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
			ПолеИнвойс = "";
		Иначе
			ПолеИнвойс = СтрокиРучнойКорректировки[0].РучнаяКорректировка;
		КонецЕсли;
		
		СтрокаОстатка = ТаблицаОстатков.Добавить();
		СтрокаОстатка.Период = Период;
		СтрокаОстатка.Location = ВыборкаДетальныеЗаписи.Location;
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Client) Тогда
			СтрокаОстатка.Client = Справочники.Контрагенты.Unreconciled;
		Иначе 
			СтрокаОстатка.Client = ВыборкаДетальныеЗаписи.Client;
		КонецЕсли;
		СтрокаОстатка.Company = ВыборкаДетальныеЗаписи.Company;
		СтрокаОстатка.Source = Перечисления.ТипыСоответствий.HOBs;
		СтрокаОстатка.SubSubSegment = ВыборкаДетальныеЗаписи.SubSubSegment;
		СтрокаОстатка.TransType = TransType;
		СтрокаОстатка.Invoice = ПолеИнвойс;
		СтрокаОстатка.Account = ВыборкаДетальныеЗаписи.Account;
		СтрокаОстатка.Currency = ВыборкаДетальныеЗаписи.Currency;
		СтрокаОстатка.AU = AU;
		СтрокаОстатка.LegalEntity = ВыборкаДетальныеЗаписи.LegalEntity;
		СтрокаОстатка.Amount = ВыборкаДетальныеЗаписи.Amount;
		
	КонецЦикла;
	
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Source.Установить(Перечисления.ТипыСоответствий.HOBs);
	НаборЗаписей.Отбор.TransType.Установить("JV");
	
	//	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// This fragment was built by the wizard.
	//// Warning! All manually made changes will be lost next time you use the wizard.
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ARBalance.Период,
	//	|	ARBalance.Client,
	//	|	ARBalance.Company,
	//	|	ARBalance.Source,
	//	|	ARBalance.Location,
	//	|	ARBalance.SubSubSegment,
	//	|	ARBalance.TransType,
	//	|	ARBalance.Invoice,
	//	|	ARBalance.Account,
	//	|	ARBalance.Currency,
	//	|	ARBalance.AU,
	//	|	ARBalance.Amount
	//	|ИЗ
	//	|	РегистрСведений.ARBalance КАК ARBalance
	//	|ГДЕ
	//	|	ARBalance.Период = &Период
	//	|	И ARBalance.Source = &Source
	//	|	И ARBalance.TransType = ""JV""";
	//
	//Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.HOBs);
	//Запрос.УстановитьПараметр("Период", НачалоМесяца(Период));
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(), ТаблицаОстатков);
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	ТаблицаОстатков.Свернуть("Период, Client, Company, Source, Location, SubSubSegment, TransType, Invoice, Account, Currency, AU, LegalEntity", "Amount");
	
	Если ФильтрОрганизации Тогда
		ПараметрыОтбора = Новый Структура("Company",Организация);
		ТаблицаОстатков_1 = ТаблицаОстатков.Скопировать(ПараметрыОтбора);
		НаборЗаписей.Отбор.Company.Установить(Организация);
	Иначе
		ТаблицаОстатков_1 = ТаблицаОстатков.Скопировать();
	КонецЕсли;
	
	
	НаборЗаписей.Загрузить(ТаблицаОстатков_1);
	НаборЗаписей.Записать(Истина);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипДокумента(ПредставлениеТипа, КэшПредставленийТипов)
	
	ТипИзКэша = КэшПредставленийТипов[ПредставлениеТипа];
	
	Если ТипИзКэша <> Неопределено Тогда
		Возврат ТипИзКэша;
	КонецЕсли;
	
	Если ПредставлениеТипа = "Операция международная" ИЛИ ПредставлениеТипа = "Операция (бухгалтерский и налоговый учет)" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.Операция;
	ИначеЕсли ПредставлениеТипа = "Сторнирование произвольного документа" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.Сторно;
	ИначеЕсли ПредставлениеТипа = "Платежное поручение входящее" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПлатежноеПоручениеВходящее;
	ИначеЕсли ПредставлениеТипа = "Акт об оказании производственных услуг" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг;
	ИначеЕсли ПредставлениеТипа = "Корректировка долга" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.КорректировкаДолга;
	ИначеЕсли ПредставлениеТипа = "Корректировка реализации" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.КорректировкаРеализации;
	ИначеЕсли ПредставлениеТипа = "Реализация товаров и услуг" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг;
	ИначеЕсли ПредставлениеТипа = "Платежное поручение исходящее" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПлетежноеПоручениеИсходящее;
	ИначеЕсли ПредставлениеТипа = "Передача ОС" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПередачаОС;
	ИначеЕсли ПредставлениеТипа = "Прочие затраты" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПрочиеЗатраты;
	ИначеЕсли ПредставлениеТипа = "Реализация услуг по переработке" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке;
	ИначеЕсли ПредставлениеТипа = "Корректировка записей регистров" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.КорректировкаЗаписейРегистров;
	ИначеЕсли ПредставлениеТипа = "Отражение зарплаты в регл учете" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ОтражениеЗарплатыВРеглУчете;
	ИначеЕсли ПредставлениеТипа = "Переоценка валютных статей (международный)" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПереоценкаВалютныхСтатей;
	КонецЕсли;
	
	КэшПредставленийТипов.Вставить(ПредставлениеТипа, ЗначениеТипа);
	
	Возврат ЗначениеТипа;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Результат = Ложь;
	ПрочитатьФайлНаСервере(Результат);
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'Balances loaded'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Balances are not loaded, add the missing data and download it again'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	Если ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		ЗаполнитьСтруктуруКолонокJVПоУмолчанию();
	//ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
	//	ЗаполнитьСтруктуруКолонокAccrualsПоУмолчанию();
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		ЗаполнитьСтруктуруКолонокReceivablesПоУмолчанию();
	КонецЕсли;
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокJVПоУмолчанию()
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 1;
	
	// Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Client";
	СтрокаТЗ.ИмяКолонки = "Client";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 2;
	
	// INN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INN";
	СтрокаТЗ.ИмяКолонки = "INN";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 3;
	
	// CompanyCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "CompanyCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 4;
	
	// CompanyDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyDesc";
	СтрокаТЗ.ИмяКолонки = "CompanyDesc";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 5;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 1;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 6;
	
	// LocationCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationCode";
	СтрокаТЗ.ИмяКолонки = "LocationCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 7;
	
	// LocationDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationDesc";
	СтрокаТЗ.ИмяКолонки = "LocationDesc";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 8;
	
	// Amount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Amount";
	СтрокаТЗ.ИмяКолонки = "Amount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 9;
	
	// BaseAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseAmount";
	СтрокаТЗ.ИмяКолонки = "BaseAmount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 10;
	
	// AU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU";
	СтрокаТЗ.ИмяКолонки = "AU";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 11;
	
	// AUType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AUType";
	СтрокаТЗ.ИмяКолонки = "AUType";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 12;
	
	// SubSubSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSubSegment";
	СтрокаТЗ.ИмяКолонки = "SubSubSegment";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 13;
	
	// LegalEntity
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalEntity";
	СтрокаТЗ.ИмяКолонки = "LegalEntity";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 14;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокReceivablesПоУмолчанию()
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	//// Period
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "TrDate";
	//СтрокаТЗ.ИмяКолонки = "Period";
	//СтрокаТЗ.Обязательная = Истина;
	//СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	//// TrNumber
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "TrNumber";
	//СтрокаТЗ.ИмяКолонки = "TrNumber";
	//СтрокаТЗ.Обязательная = Истина;
	
	//// Document
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "Document";
	//СтрокаТЗ.ИмяКолонки = "Document";
	//СтрокаТЗ.Обязательная = Истина;
	
	//// DocumentType
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "DocumentType";
	//СтрокаТЗ.ИмяКолонки = "DocumentType";
	//СтрокаТЗ.Обязательная = Истина;
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 1;
	
	// Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Client";
	СтрокаТЗ.ИмяКолонки = "Client";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 2;
	
	// INN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INN";
	СтрокаТЗ.ИмяКолонки = "INN";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 3;
	
	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 4;
	//
	// InvoiceType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceType";
	СтрокаТЗ.ИмяКолонки = "InvoiceType";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 5;
	
	// CompanyCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "CompanyCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 6;
	
	// CompanyDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyDesc";
	СтрокаТЗ.ИмяКолонки = "CompanyDesc";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 7;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 8;
	
	// LocationCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationCode";
	СтрокаТЗ.ИмяКолонки = "LocationCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 9;
	
	// LocationDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationDesc";
	СтрокаТЗ.ИмяКолонки = "LocationDesc";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 10;
	
	// Amount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Amount";
	СтрокаТЗ.ИмяКолонки = "Amount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 11;
	
	// BaseAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseAmount";
	СтрокаТЗ.ИмяКолонки = "BaseAmount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 12;
	
	// SubSubSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSubSegment";
	СтрокаТЗ.ИмяКолонки = "SubSubSegment";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 13;
	
	// InvoiceNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceNumber";
	СтрокаТЗ.ИмяКолонки = "InvoiceNumber";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 14;
	
	// InvoiceDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceDate";
	СтрокаТЗ.ИмяКолонки = "InvoiceDate";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 15;
	
	// InvoiceCurrency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceCurrency";
	СтрокаТЗ.ИмяКолонки = "InvoiceCurrency";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 16;
	
	// InvoiceAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAmount";
	СтрокаТЗ.ИмяКолонки = "InvoiceAmount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 17;
	
	// InvoiceAgreementCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAgreementCode";
	СтрокаТЗ.ИмяКолонки = "InvoiceAgreementCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 18;
	
	// InvoiceAgreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAgreement";
	СтрокаТЗ.ИмяКолонки = "InvoiceAgreement";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 19;
	
	// AU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU";
	СтрокаТЗ.ИмяКолонки = "AU";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 20;
	
	// AUType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AUType";
	СтрокаТЗ.ИмяКолонки = "AUType";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 21;
	
	// PaymentNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PaymentNumber";
	СтрокаТЗ.ИмяКолонки = "PaymentNumber";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 22;
	
	// PaymentDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PaymentDate";
	СтрокаТЗ.ИмяКолонки = "PaymentDate";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 23;
	
	// LegalEntity
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalEntity";
	СтрокаТЗ.ИмяКолонки = "LegalEntity";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 24;
	
	// FiscalInvoiceNo
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FiscalInvoiceNo";
	СтрокаТЗ.ИмяКолонки = "FiscalInvoiceNo";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 25;
	
	// FiscalInvoiceDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FiscalInvoiceDate";
	СтрокаТЗ.ИмяКолонки = "FiscalInvoiceDate";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 26;
	
	// InvoiceBilled
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceBilled";
	СтрокаТЗ.ИмяКолонки = "InvoiceBilled";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 27;
	
	//// InvoicePassedForApproval
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "InvoicePassedForApproval";
	//СтрокаТЗ.ИмяКолонки = "InvoicePassedForApproval";
	//СтрокаТЗ.Обязательная = Истина;
	
	//// InvoicePassedForPayment
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "InvoicePassedForPayment";
	//СтрокаТЗ.ИмяКолонки = "InvoicePassedForPayment";
	//СтрокаТЗ.Обязательная = Истина;
	//
	//// InvoicePassedForApprovalDate
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "InvoicePassedForApprovalDate";
	//СтрокаТЗ.ИмяКолонки = "InvoicePassedForApprovalDate";
	//СтрокаТЗ.Обязательная = Истина;
	//
	//// InvoicePassedForPaymentDate
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "InvoicePassedForPaymentDate";
	//СтрокаТЗ.ИмяКолонки = "InvoicePassedForPaymentDate";
	//СтрокаТЗ.Обязательная = Истина;
	//
	//// ExpectedDateOfPayment
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "ExpectedDateOfPayment";
	//СтрокаТЗ.ИмяКолонки = "ExpectedDateOfPayment";
	//СтрокаТЗ.Обязательная = Истина;
	
	//// PaymentNumber
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "PaymentNumber";
	//СтрокаТЗ.ИмяКолонки = "PaymentNumber";
	//СтрокаТЗ.Обязательная = Истина;
	//
	//// PaymentDate
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "PaymentDate";
	//СтрокаТЗ.ИмяКолонки = "PaymentDate";
	//СтрокаТЗ.Обязательная = Истина;
	//
	//// DocumentID
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "DocumentID";
	//СтрокаТЗ.ИмяКолонки = "DocumentID";
	//СтрокаТЗ.Обязательная = Истина;
	//
	// InvoiceID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceID";
	СтрокаТЗ.ИмяКолонки = "InvoiceID";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 28;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ЗаполнитьСтруктуруФайлаПоУмолчанию();
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля,ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Период = Дата(1,1,1) Тогда	
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
	Иначе
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Период), КонецМесяца(Период));
	КонецЕсли;	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтаФорма.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = РезультатВыбора.НачалоПериода;
КонецПроцедуры


&НаКлиенте
Процедура ФильтрОрганизацииПриИзменении(Элемент)
	Если ФильтрОрганизации Тогда
		Элементы.Организация.Доступность = Истина;
	Иначе
		Элементы.Организация.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры


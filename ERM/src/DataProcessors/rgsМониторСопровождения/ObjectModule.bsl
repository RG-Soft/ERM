
Перем КаталогДанных;
Перем ФайлСкрипта;
Перем Эксплорер;
Перем ТекстХТМЛ;

Функция Инициализация(мЭксплорер, Принудительно = Ложь) Экспорт
	Эксплорер = мЭксплорер;
	
	ДвоичныеДанные = ПолучитьМакет("TinyMCE_zip");
	КаталогДанных = КаталогВременныхФайлов() + "TinyMCE\";
	КаталогСкриптов = КаталогДанных + "tinymce\";
	ФайлАрхива = КаталогДанных + "TinyMCE.zip";
	
	ФайлКаталогСкриптов = Новый Файл(КаталогСкриптов);
	ФайлСкрипта = КаталогСкриптов + "tinyMCE\jscripts\tiny_mce\tiny_mce.js";
	Файл = Новый Файл(ФайлСкрипта);
	Если НЕ Принудительно И ФайлКаталогСкриптов.Существует() И Файл.Существует() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Файл = Новый Файл(КаталогСкриптов);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(КаталогСкриптов);
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные.Записать(ФайлАрхива);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
		Возврат Ложь;
	КонецПопытки;
	
	зип = Новый ЧтениеZipФайла(ФайлАрхива);
	зип.ИзвлечьВсе(КаталогСкриптов, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	УдалитьФайлы(ФайлАрхива);
	
	Возврат Истина;
КонецФункции

Процедура ПоказатьТекст(Текст, Редактирование = Ложь, ФайлCSS = Неопределено) Экспорт
	
	ТекстНастроек = ПолучитьМакет("TinyMCE_txt").ПолучитьТекст();
	
	Т = Новый ТекстовыйДокумент;
	Т.ДобавитьСтроку("<HTML><HEAD><meta http-equiv=""Content-Type"" content=""text/html; charset=windows-1251"" content=""no-cache"">");
	Если Редактирование И ЗначениеЗаполнено(ТекстНастроек) Тогда
		Т.ДобавитьСтроку("<script type=""text/javascript"" src=""tinyMCE/tinyMCE/jscripts/tiny_mce/tiny_mce.js""></script>");
		Т.ДобавитьСтроку(ТекстНастроек);
		Т.ДобавитьСтроку("</HEAD><BODY><FONT FACE=""Arial"" SIZE=""-1"">");
		Т.ДобавитьСтроку("<form method=""\"" action=""\"" onsubmit=""return false;"">");
		Т.ДобавитьСтроку("<textarea id=""elm1"" name=""elm1"" style=""width: 100%;height:100%"">");
	Иначе
		Т.ДобавитьСтроку("</HEAD><BODY><FONT FACE=""Arial"" SIZE=""-1"">");
	КонецЕсли;
	
	Т.ДобавитьСтроку("<p>"+Текст+"</p>" );
	
	Если Редактирование И ЗначениеЗаполнено(ТекстНастроек) Тогда
		Т.ДобавитьСтроку("</textarea>");
	КонецЕсли;
	
	Т.ДобавитьСтроку("</FONT></BODY></HTML>");
	
	Если ФайлCSS <> Неопределено Тогда
		Файл = Новый Файл(ФайлCSS);
		Если Файл.Существует() Тогда
			КопироватьФайл(ФайлCSS, КаталогДанных + "temp.css");
			
			ВремТекст = Т.ПолучитьТекст();
			ВремТекст = СтрЗаменить(ВремТекст, "[CSS]", КаталогДанных + "temp.css");
			Т.УстановитьТекст(ВремТекст);
		КонецЕсли;
	КонецЕсли;
			
	ВремФайл = КаталогДанных + "temp.html";
	Т.Записать(ВремФайл, КодировкаТекста.ANSI);
    Эксплорер.Перейти(ВремФайл);
	
КонецПроцедуры

Функция ПолучитьТекст(Параметр = 0, ЗаменятьНаПС) Экспорт
	
	Если (Параметр = 0) Тогда
		Эксплорер.Документ.parentWindow.ExecScript("tinyMCE.execCommand('mceSave')","JavaScript");
	КонецЕсли;
	
	ОбластьТекста = Эксплорер.Документ.getElementById("elm1");
	Если ОбластьТекста = Неопределено Тогда
		//Сообщить("Не найдена область текста!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ИзХТМЛВТекст(ОбластьТекста.innerText, ЗаменятьНаПС);
	
КонецФункции

Процедура ПроверитьТекст() Экспорт
    
    Эксплорер.Документ.parentWindow.ExecScript("tinyMCE.execCommand('mceSave')","JavaScript");
	Эксплорер.Документ.parentWindow.ExecScript("tinyMCE.execCommand('mceSpellCheck')","JavaScript");

КонецПроцедуры

Процедура УстановитьИПроверитьТекст() Экспорт

	JScript = "tinyMCE.execCommand('mceInsertContent',false,'" + ИзТекстаВХТМЛ(ТекстХТМЛ)+"');";
    Эксплорер.Документ.parentWindow.ExecScript(JScript,"JavaScript");
    ПроверитьТекст();

КонецПроцедуры
 
Функция ИзХТМЛВТекст(ТекстХТМЛ, ЗаменятьНаПС)
	
	//ТУДУ: Переписать на RegExp
	Если ЗаменятьНаПС Тогда
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<br>", Символы.ПС);
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<br />", Символы.ПС);
	КонецЕсли;
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.IgnoreCase = Ложь; //Игнорировать регистр   
	RegExp.Global = Истина; //Поиск всех вхождений шаблона   
	RegExp.MultiLine = Ложь; //Многострочный режим      
	RegExp.Pattern = "<[^>]*>"; //Ищем теги HTML   
	
	Возврат RegExp.Replace(ТекстХТМЛ, ""); //Заменяем все теги на пустоту	
	
КонецФункции	

Функция ИзТекстаВХТМЛ(ТекстХТМЛ)
	
	Возврат "<p>" + СтрЗаменить(ТекстХТМЛ, Символы.ПС, "<br />")+"</p>";
	
КонецФункции	

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'; en = 'The input string substitution string has an invalid format: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'; en = 'The input string substitution string has an invalid format: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////
//РГ-Софт - Андрей Тимофеев - 20140312

// Функция устанавливает признак закрытия вопроса
//
Функция ЗавершитьОбсуждениеВопросаСервер(ГУИДВопроса) Экспорт
	
	Объект = ЭтотОбъект;
	////////
	
	Попытка
		Прокси = ПолучитьПрокси();
		Прокси.Пользователь =  Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		Возврат Прокси.ЗавершитьОбсуждениеВопроса(ГУИДВопроса);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
	
КонецФункции

// Добавлено РГ-Софт Зарецкая 22.12.2014
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
    ПараметрыРегистрации.Вставить("Наименование", НСтр("ru = 'Обработка подключения к Монитору Сопровождения'; en = 'Processing connected to the monitor Maintenance'"));
    ПараметрыРегистрации.Вставить("Версия", "2.0.6.3");
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
    ПараметрыРегистрации.Вставить("Информация", НСтр("ru = 'Обработка подключения к Монитору Сопровождения.; en = 'Processing connected to the monitor Maintenance''"));

    ТаблицаКоманд = ПолучитьТаблицуКоманд();

    ДобавитьКоманду(ТаблицаКоманд,
        НСтр("ru = 'Обработка подключения к Монитору'"),
        "ОбработкаПодключенияМонитор",
        "ОткрытиеФормы",
        Истина,
        "");
  
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

    Возврат ПараметрыРегистрации;

КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Функция ПолучитьПрокси() Экспорт
	
	Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl", Пользователь, Пароль);
	Возврат Новый WSПрокси (Определение, "RemoteConnect", "RemoteConnect", "RemoteConnectSoap");
	
КонецФункции

// Копирует настройки одного пользователя ИБ другому.
// Параметры
// ПользовательИсточник - строка - имя пользователя ИБ, по которому хранятся настройки
// ПользователиПриемник - строка - имя пользователя ИБ, которому копируются настройки
// МассивНастроекДляКопирования - массив - массив строк каждая из которых - полное имя формы
//
Процедура СкопироватьНастройкиФорм(ПользователиПриемник, МассивНастроекДляКопирования, ПроектБазы, ТаблицаОтбора, ТаблицаНастроек,КлючНастроек) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанных = ПолучитьСтруктуруДанныхФорм(ПроектБазы, ТаблицаОтбора, ТаблицаНастроек);
	
	СтруктураНастроекФормы = Новый Структура;
	СтруктураНастроекОкна = Новый Структура;
	
	Для Каждого Элемент Из МассивНастроекДляКопирования Цикл
		НазваниеФормы = СтрЗаменить(Элемент, ".", "_");
		НастройкиФормы = ХранилищеСистемныхНастроек.Загрузить(Элемент + "/НастройкиФормы");
		Если ТипЗнч(НастройкиФормы) <> Тип("НастройкиФормы") Тогда
			НастройкиФормы = Неопределено;
		КонецЕсли;
		СтруктураНастроекФормы.Вставить(НазваниеФормы, НастройкиФормы);       
		
		НастройкиОкна = ХранилищеСистемныхНастроек.Загрузить(Элемент + "/НастройкиОкна");
		Если ТипЗнч(НастройкиОкна) <> Тип("НастройкиФормы") Тогда
			НастройкиОкна = Неопределено;
		КонецЕсли;
		СтруктураНастроекОкна.Вставить(НазваниеФормы, НастройкиОкна);       
	КонецЦикла;
	
	СтруктураДанных.Вставить("СтруктураНастроекФормы", СтруктураНастроекФормы);
	СтруктураДанных.Вставить("СтруктураНастроекОкна", СтруктураНастроекОкна);
	
	КлючНастройки = ?(ЗначениеЗаполнено(КлючНастроек),КлючНастроек,ПоискКлючаНастройки(ПользователиИнформационнойБазы.ТекущийПользователь().Имя));
	
	ФормаАдресат = МассивНастроекДляКопирования[0];
	
	СохранитьНастройкиДанныхФормОбработки(СтруктураДанных, ПользователиПриемник, ФормаАдресат, МассивНастроекДляКопирования, СтруктураНастроекФормы, СтруктураНастроекОкна,КлючНастройки);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура СохранитьНастройкиДанныхФормОбработки(СтруктураДанных, ПользователиПриемник, ФормаАдресат, МассивНастроекДляКопирования, СтруктураНастроекФормы, СтруктураНастроекОкна,КлючНастройки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ПользовательПриемник Из ПользователиПриемник Цикл
	    ХранилищеНастроекДанныхФорм.Сохранить(ФормаАдресат + "/НастройкиФормы",КлючНастройки, СтруктураДанных,,ПользовательПриемник);
		ХранилищеСистемныхНастроек.Сохранить(ФормаАдресат + "/НастройкиФормы",КлючНастройки, СтруктураДанных,,ПользовательПриемник);
		Для каждого ИмяФормы Из МассивНастроекДляКопирования Цикл
			ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "НастройкаФорм", СтруктураНастроекФормы[СтрЗаменить(ИмяФормы,".","_")],, ПользовательПриемник);
			ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "НастройкаОкна", СтруктураНастроекОкна[СтрЗаменить(ИмяФормы,".","_")],, ПользовательПриемник);
		КонецЦикла; 
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	  
КонецПроцедуры

Функция ПоискКлючаНастройки(ПользовательПоиска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	// { RGS Козлов К.С. 03.02.2016 17:30:34
	//Отбор.Вставить("КлючОбъекта","ВнешняяОбработка.rgsМониторСопровождения.Форма.Форма/НастройкиФормы");
	Если Найти(Строка(ЭтотОбъект),"ВнешняяОбработка") <> 0 Тогда
		ИмяФормы = "ВнешняяОбработка.rgsМониторСопровождения.Форма.Форма/НастройкиФормы";
	Иначе
		ИмяФормы = "Обработка.rgsМониторСопровождения.Форма.Форма/НастройкиФормы";
	КонецЕсли;
	Отбор.Вставить("КлючОбъекта",ИмяФормы);
	// } RGS Козлов К.С. 03.02.2016 17:30:34
	Отбор.Вставить("Пользователь",ПользовательПоиска);
	
	ВыборкаПоОтбору = ХранилищеСистемныхНастроек.Выбрать(Отбор);
	
	Пока ВыборкаПоОтбору.Следующий() Цикл
		Если ВыборкаПоОтбору.КлючНастроек <> "Настройки по умолчанию" и  ЗначениеЗаполнено(ВыборкаПоОтбору.КлючНастроек) Тогда
			Возврат ВыборкаПоОтбору.КлючНастроек;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат "Настройки по умолчанию";
	
КонецФункции

//Фёдорова 01.02.16 Добавлено сохранение пустой настройки
Процедура СохранитьНастройкиФорм(МассивНастроекДляКопирования, ПроектБазы, ТаблицаОтбора, ТаблицаНастроек,НаименованиеНастройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанных = ПолучитьСтруктуруДанныхФорм(ПроектБазы, ТаблицаОтбора,ТаблицаНастроек);
	
	СтруктураНастроекФормы = Новый Структура;
	СтруктураНастроекОкна = Новый Структура;
	
		
	Если ЗначениеЗаполнено(НаименованиеНастройки) Тогда
		КлючНастройки = НаименованиеНастройки;
	Иначе
		КлючНастройки = ПоискКлючаНастройки(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецЕсли;

	Для Каждого Элемент Из МассивНастроекДляКопирования Цикл
		НазваниеФормы = СтрЗаменить(Элемент, ".", "_");
		СтруктураНастроекФормы.Вставить(НазваниеФормы, ХранилищеСистемныхНастроек.Загрузить(Элемент + "/НастройкиФормы"));
		СтруктураНастроекОкна.Вставить(НазваниеФормы, ХранилищеСистемныхНастроек.Загрузить(Элемент + "/НастройкиОкна"));
	КонецЦикла;
	
	ФормаАдресат = МассивНастроекДляКопирования[0];
	
	СохранениеПустойНастройкиДанныхФормОбработки(СтруктураДанных, ФормаАдресат, МассивНастроекДляКопирования, СтруктураНастроекФормы, СтруктураНастроекОкна,КлючНастройки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СохранениеПустойНастройкиДанныхФормОбработки(СтруктураДанных, ФормаАдресат, МассивНастроекДляКопирования, СтруктураНастроекФормы, СтруктураНастроекОкна,КлючНастройки)
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиФормы = ХранилищеСистемныхНастроек.Загрузить(ФормаАдресат + "/НастройкиФормы",КлючНастройки,,""); 
	НастройкиФормы = ?(НастройкиФормы = Неопределено,ХранилищеСистемныхНастроек.Загрузить(ФормаАдресат + "/НастройкиОкна",КлючНастройки,,""),НастройкиФормы); 
    ХранилищеСистемныхНастроек.Сохранить(ФормаАдресат+"/НастройкиФормы",КлючНастройки,НастройкиФормы,"");
	НастройкиОкна = ХранилищеСистемныхНастроек.Загрузить(ФормаАдресат + "/НастройкиОкна",КлючНастройки,,""); 
	ХранилищеСистемныхНастроек.Сохранить(ФормаАдресат+"/НастройкиОкна",КлючНастройки,НастройкиОкна,"");
	ХранилищеНастроекДанныхФорм.Сохранить(ФормаАдресат + "/НастройкиФормы",КлючНастройки, НастройкиФормы,,"");	
	
	Для каждого ИмяФормы Из МассивНастроекДляКопирования Цикл
		НастройкиФормы = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/НастройкиФормы",КлючНастройки,,""); 
		ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы + "/НастройкиФормы", КлючНастройки, НастройкиФормы,,"");
		ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы + "/НастройкиФормы", КлючНастройки, НастройкиФормы,,"");
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьСтруктуруДанныхФорм(ПроектБазы, ТаблицаОтбора, ТаблицаНастроек)  Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("АдресБазы", АдресБазы);
	СтруктураНастроек.Вставить("ЗагружатьЗакрытыеОтмененныеВопросы", ЗагружатьЗакрытыеОтмененныеВопросы);
	СтруктураНастроек.Вставить("ВремяОбновления", ВремяОбновления);
	СтруктураНастроек.Вставить("ОбновлятьАвтоматически", ОбновлятьАвтоматически);
	СтруктураНастроек.Вставить("ОтображатьТекстВопросаСЗадержкой", ОтображатьТекстВопросаСЗадержкой);
	СтруктураНастроек.Вставить("ВремяОбновленияТекстаВопроса", ВремяОбновленияТекстаВопроса);
	СтруктураНастроек.Вставить("ТолькоМои", ТолькоМои);
	СтруктураНастроек.Вставить("ВыводитьОтбор", ВыводитьОтбор);
	СтруктураНастроек.Вставить("ОтображатьКонтакты", ОтображатьКонтакты);
	СтруктураНастроек.Вставить("ИспользоватьПомощник", ИспользоватьПомощник);
	СтруктураНастроек.Вставить("НастройкиБылиСкопированы", Истина);
	СтруктураНастроек.Вставить("ТаблицаОтбора", ТаблицаОтбора);
	
	Возврат СтруктураНастроек;
	
КонецФункции	


// Получает из представления - значение статуса вопроса.
//
// Параметры:
//  ПредставлениеСтатуса  - Строка - Значение хранящее пользвательское представление статуса вопроса.
// Возвращаемое значение:
//   Строка   -  Техническое (служебное) значение статуса вопроса. Если Статус найден не был возвращает Неопределено
//
Функция ПолучитьИзПредставленияЗначениеСтатуса(ПредставлениеСтатуса) Экспорт
	
	Если ПредставлениеСтатуса = НСтр("ru = 'Критический'; en = 'Critical'") Тогда
		Возврат "Критический";
	ИначеЕсли ПредставлениеСтатуса = НСтр("ru = 'Высокий'; en = 'High'") Тогда
		Возврат "Высокий";	
	ИначеЕсли ПредставлениеСтатуса = НСтр("ru = 'Обычный'; en = 'Normal'") Тогда
		Возврат "Обычный";
	ИначеЕсли ПредставлениеСтатуса = НСтр("ru = 'Низкий'; en = 'Low'") Тогда
		Возврат "Низкий";
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции // ПолучитьИзПредставленияЗначениеСтатуса(ПредставлениеСтатуса)
 

// Проверяет должен ли быть виден пользователю проект.
//
// Параметры:
//  <ИспользоватьПроектБазы>  - Булево - Используется проект базы.
//
//  <ПроектОдин>  - Булево - Пользователь доступен только один проект.
//
// Возвращаемое значение:
//   <Булево>   - Видимость "Проекта".
//
Функция ВидимостьПроекта(ИспользоватьПроектБазы, ПроектОдин) Экспорт

	Возврат	?(ИспользоватьПроектБазы, Ложь, НЕ ПроектОдин);

КонецФункции // ВидимостьПроекта(ИспользоватьПроектБазы, ПроектОдин)
// } RGS Лунякин Иван 26.10.2015 12:56:23

Процедура ПолучитьНастройкиФормы(Форма, КлючНастройки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Если ЗначениеЗаполнено(КлючНастройки) Тогда
		Пользователь = "";
	Иначе
		Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;	
		КлючНастройки = ПоискКлючаНастройки(Пользователь); 
	КонецЕсли;

	ИмяФормы = Форма.ИмяФормы;
	
	Если ИмяФормы <> "ВнешняяОбработка.rgsМониторСопровождения.Форма.Форма" И ИмяФормы <> "Обработка.rgsМониторСопровождения.Форма.Форма" Тогда
		ИмяФормы = ЛЕВ(ИмяФормы, СтрДлина(ИмяФормы) - 24);	
		ИмяФормы = ИмяФормы + "Форма.Форма";
	КонецЕсли;
	
	СтруктураНастроекФормы = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы + "/НастройкиФормы", КлючНастройки,,Пользователь);
	Если СтруктураНастроекФормы = Неопределено И КлючНастройки = "Настройки по умолчанию" Тогда
		СтруктураНастроекФормы = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы + "/НастройкиФормы", КлючНастройки,,"");
	КонецЕсли;
	
	СтруктураНастроекОкна = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы + "/НастройкиОкна", КлючНастройки,,Пользователь);
	Если СтруктураНастроекОкна = Неопределено И КлючНастройки = "Настройки по умолчанию" Тогда
		СтруктураНастроекОкна = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы + "/НастройкиОкна", КлючНастройки,,"");
	КонецЕсли;
	
	Форма.АдресХранилищаСтруктуры = ПоместитьВоВременноеХранилище(СтруктураНастроекФормы, Форма.УникальныйИдентификатор);
	
	Если СтруктураНастроекФормы <> Неопределено Тогда
		Если СтруктураНастроекФормы.Свойство("СтруктураНастроекФормы") Тогда
			Попытка
				НастройкаФормы = СтруктураНастроекФормы.СтруктураНастроекФормы[СтрЗаменить(Форма.ИмяФормы,".","_")];
			Исключение
				НастройкаФормы = Неопределено;
			КонецПопытки;
			Если ТипЗнч(НастройкаФормы) <> Тип("НастройкиФормы") Тогда
				НастройкаФормы = Неопределено;
			КонецЕсли;
			ХранилищеСистемныхНастроек.Сохранить(Форма.ИмяФормы + "/НастройкиФормы",,НастройкаФормы,,ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНастроекОкна <> Неопределено Тогда
		Если СтруктураНастроекОкна.Свойство("СтруктураНастроекОкна") Тогда
			Попытка
				НастройкаОкна = СтруктураНастроекОкна.СтруктураНастроекОкна[СтрЗаменить(Форма.ИмяФормы,".","_")];
			Исключение
				НастройкаОкна = Неопределено;
			КонецПопытки;
			Если ТипЗнч(НастройкаОкна) <> Тип("НастройкиФормы") Тогда
				НастройкаОкна = Неопределено;
			КонецЕсли;
			ХранилищеСистемныхНастроек.Сохранить(Форма.ИмяФормы + "/НастройкиФормы",,НастройкаОкна,,ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучатьЛогинПарольИзКонстант() 
	
	Возврат Метаданные.Константы.Найти("ргЛогинМонитора") <> Неопределено 
	И Метаданные.Константы.Найти("ргПарольМонитора") <> Неопределено;
	
КонецФункции 

Процедура СформироватьЗапросОтбора(ЗапросТаблицаВопросов,ТЗТаблицаВопросов,СтруктураОтбора,ПроектыСВыборомТем, ДеревоТемСтрокой) Экспорт
	ПроектПредопределенныхТем = "";
	Для каждого ЭлементСписка Из ПроектыСВыборомТем Цикл
		Если ЭлементСписка.Пометка Тогда
		    ПроектПредопределенныхТем = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого Колонка Из ТЗТаблицаВопросов.Колонки Цикл
		Если Колонка.Имя = "КартинкаСтатуса" Тогда
			Продолжить;
		КонецЕсли;		
		ЗапросТаблицаВопросов.Текст = ЗапросТаблицаВопросов.Текст + "," + Символы.ПС+"Таблица." + Колонка.Имя; 
	КонецЦикла;
	ЗапросТаблицаВопросов.Текст  = Сред(ЗапросТаблицаВопросов.Текст,3);
	
	СтрокаУсловия = "";
	ЭтоПервоеУсловие = Истина;
	Для каждого КлючЗначение Из СтруктураОтбора Цикл		
		Если ЭтоПервоеУсловие Тогда
		    ЭтоПервоеУсловие = Ложь;
		Иначе
			СтрокаУсловия = СтрокаУсловия + Символы.ПС + "И ";
		КонецЕсли;	
		// Числа истороически в таблице отбора в виде строки
		ЭтоЧисло = Ложь;
		Число = 0;
		Попытка
			Число = Число(КлючЗначение.Значение);
		    ЭтоЧисло = Истина;
		Исключение
		    ЭтоЧисло = Ложь;
		КонецПопытки;
		Значение = КлючЗначение.Значение;
		Если ЭтоЧисло Тогда
			Значение = Число;
		КонецЕсли;
		
		Если КлючЗначение.Ключ  = "Ссылка" Тогда
			//Отбор по группам тем или по темам
			Если ЗначениеЗаполнено(ПроектПредопределенныхТем) Тогда
			 	СтрокаУсловия = ВернутьСтрокуУсловияОтбораПоТеме(Значение,ПроектПредопределенныхТем, ДеревоТемСтрокой);	
			КонецЕсли;
		Иначе
			//Отбор по значению колонки
			СтрокаУсловия = СтрокаУсловия+"Таблица." + КлючЗначение.Ключ + ?(ТипЗнч(Значение)=Тип("Строка") ,"  ПОДОБНО ", " = ") +"&"+КлючЗначение.Ключ; 
		КонецЕсли;
		
		ЗапросТаблицаВопросов.УстановитьПараметр(КлючЗначение.Ключ, Значение);	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаУсловия) Тогда
		ЗапросТаблицаВопросов.Текст = СтрЗаменить(ЗапросТаблицаВопросов.Текст,"Таблица.Скрывать", "НЕ ("+СтрокаУсловия +") КАК Скрывать");
	Иначе
		ЗапросТаблицаВопросов.Текст = СтрЗаменить(ЗапросТаблицаВопросов.Текст,"Таблица.Скрывать", "ЛОЖЬ КАК Скрывать");

	КонецЕсли;
	
	ЗапросТаблицаВопросов.Текст = 
	"ВЫБРАТЬ " + ЗапросТаблицаВопросов.Текст + Символы.ПС+
	"ПОМЕСТИТЬ ТаблицаВТ
	|ИЗ &Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ТаблицаВТ.* 
	|ИЗ ТаблицаВТ КАК ТаблицаВТ";

	ЗапросТаблицаВопросов.УстановитьПараметр("Таблица",ТЗТаблицаВопросов);
КонецПроцедуры

Функция ВернутьСтрокуУсловияОтбораПоТеме(Тема, Проект, ДеревоТемСтрокой)
	
	СтрокаУсловия = "";
	ДеревоТем = ЗначениеИзСтрокиВнутр(ДеревоТемСтрокой);
	МассивТем = Новый Массив;
	//для тем в вопросах можно выбирать только темы последних уровней
	МассивСтрок =  ДеревоТем.Строки.НайтиСтроки(Новый Структура("ТекстТемы",Тема),Истина);
	ЗаполнитьМассивТем(МассивСтрок,МассивТем);
	
	ЭтоПервоеУсловие = Истина;
	Для каждого Тема Из МассивТем Цикл
		Если ЭтоПервоеУсловие Тогда
		    ЭтоПервоеУсловие = Ложь;
		Иначе
			СтрокаУсловия = СтрокаУсловия + Символы.ПС + "ИЛИ ";
		КонецЕсли;	
	 	СтрокаУсловия = СтрокаУсловия + "Таблица.Ссылка ПОДОБНО """ +Тема+"""";  
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(СтрокаУсловия) Тогда
		СтрокаУсловия = " ( "+СтрокаУсловия + " ) ";
	КонецЕсли;

	Возврат СтрокаУсловия;
	
КонецФункции 

Процедура ЗаполнитьМассивТем(МассивСтрок,МассивТем)
	Для каждого СтрокаТемы Из МассивСтрок  Цикл
		Если СтрокаТемы.ПоследнийЭлемент Тогда
		    МассивТем.Добавить(СтрокаТемы.ТекстТемы);
		Иначе
			ЗаполнитьМассивТем(СтрокаТемы.Строки,МассивТем);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Перенесена из формы выбора темы
Процедура СоздатьВложенныеТемы(СтрокаТЗ, СтрокаДерева, ТЗ, ДеревоЗначений);
	
	НоваяСтрокаДерева = СтрокаДерева.Строки.Добавить();
	НоваяСтрокаДерева.ТекстТемы = СтрокаТЗ.ТекстТемы;
	НоваяСтрокаДерева.УровеньВИерархии = СтрокаТЗ.УровеньВИерархии;
	
	Если ТЗ.Индекс(СтрокаТЗ) <> ТЗ.Количество() - 1 Тогда
		
		Следующаястрока = ТЗ[ТЗ.Индекс(СтрокаТЗ) + 1];
		Если Следующаястрока.УровеньВИерархии = Строка(Число(СтрокаТЗ.УровеньВИерархии) + 1) Тогда
			СоздатьВложенныеТемы(Следующаястрока, НоваяСтрокаДерева , ТЗ, ДеревоЗначений);
		ИначеЕсли Следующаястрока.УровеньВИерархии = Строка(СтрокаТЗ.УровеньВИерархии) Тогда 
			НоваяСтрокаДерева.ПоследнийЭлемент = Истина;
			СоздатьВложенныеТемы(Следующаястрока, СтрокаДерева , ТЗ, ДеревоЗначений);
		Иначе
			НоваяСтрокаДерева.ПоследнийЭлемент = Истина;
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НоваяСтрокаДерева.ПоследнийЭлемент = Истина;
		Возврат;
	
	КонецЕсли; 	
	
КонецПроцедуры
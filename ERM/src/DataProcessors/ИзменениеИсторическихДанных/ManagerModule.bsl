#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ВыполнитьИзменениеДанных(СтруктураПараметров, АдресХранилища) Экспорт
	
	ПараметрыСинхронизации = СтруктураПараметров.ПараметрыСинхронизации;
	ПараметрыСинхронизации.Колонки.Добавить("ПредставлениеИнтервала");
	
	Для каждого СтрокаПараметровСинхронизации Из ПараметрыСинхронизации Цикл
		СтрокаПараметровСинхронизации.ПредставлениеИнтервала = Строка(СтрокаПараметровСинхронизации.ДатаС) + "-" + Строка(СтрокаПараметровСинхронизации.ДатаПо);
	КонецЦикла;
	
	МассивПериодов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПараметрыСинхронизации.ВыгрузитьКолонку("ПредставлениеИнтервала"));
	
	ТаблицаДокументовДляПроведения = Новый ТаблицаЗначений;
	ТаблицаДокументовДляПроведения.Колонки.Добавить("Документ");
	
	СтруктураПоиска = Новый Структура("ПредставлениеИнтервала");
	
	Отказ = Ложь;
	ТекстОшибок = "";
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	ОбработатьПривязки(ПараметрыСинхронизации, ТекстОшибок, Отказ);
	
	Для каждого ТекПериод Из МассивПериодов Цикл
		СтруктураПоиска.ПредставлениеИнтервала = ТекПериод;
		СтрокиПоПериоду = ПараметрыСинхронизации.Скопировать(СтруктураПоиска);
		ОбработатьДанныеRevenue(СтрокиПоПериоду[0].ДатаС, СтрокиПоПериоду[0].ДатаПо, СтрокиПоПериоду, ТаблицаДокументовДляПроведения, ТекстОшибок, Отказ);
	КонецЦикла;
	
	ВыполнитьПроведениеДокументов(ТаблицаДокументовДляПроведения, ТекстОшибок, Отказ);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Результат = Новый Структура("Отказ", Отказ);
	Если Не ПустаяСтрока(ТекстОшибок) Тогда
		Результат.Вставить("ТекстОшибок", ТекстОшибок);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбработатьДанныеRevenue(НачалоПерида, КонецПериода, СтрокиПараметровСинхронизации, ТаблицаДокументовДляПроведения, ТекстОшибок, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиRevenue.Ссылка,
	|	СтрокиRevenue.Segment,
	|	СтрокиRevenue.SubSegment,
	|	СтрокиRevenue.SubSubSegment,
	|	СтрокиRevenue.Geomarket,
	|	СтрокиRevenue.SubGeomarket,
	|	СтрокиRevenue.ParentClient,
	|	СтрокиRevenue.Client,
	|	СтрокиRevenue.AccountingUnit,
	|	СтрокиRevenue.Currency,
	|	RevenueSourceData.Segment КАК SegmentID,
	|	RevenueSourceData.SubSegment КАК SubSegmentID,
	|	RevenueSourceData.SubSubSegment КАК SubSubSegmentID,
	|	RevenueSourceData.Geomarket КАК GeomarketID,
	|	RevenueSourceData.SubGeomarket КАК SubGeomarketID,
	|	RevenueSourceData.CorporateAccount КАК CorporateAccountID,
	|	RevenueSourceData.CustomerCode КАК LawsonCustomerCodeID,
	|	RevenueSourceData.Currency КАК CurrencyID,
	|	RevenueSourceData.AccountingUnit КАК AccountingUnitID,
	|	СтрокиRevenue.ЗагрузкаДанных,
	|	СтрокиRevenue.ЗагрузкаДанных.Проведен КАК ЗагрузкаДанныхПроведен,
	|	СтрокиRevenue.ЗагрузкаДанных.ТипВнешнейСистемы КАК ТипВнешнейСистемы
	|ИЗ
	|	Справочник.СтрокиRevenue КАК СтрокиRevenue
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.RevenueSourceData КАК RevenueSourceData
	|		ПО СтрокиRevenue.ЗагрузкаДанных = RevenueSourceData.ДокументЗагрузки
	|			И СтрокиRevenue.НомерСтрокиФайла = RevenueSourceData.СтрокаФайла
	|			И (НЕ СтрокиRevenue.ПометкаУдаления)
	|			И (СтрокиRevenue.ЗагрузкаДанных.Дата >= &ДатаС)
	|			И (СтрокиRevenue.ЗагрузкаДанных.Дата <= &ДатаПо)";
	
	Запрос.УстановитьПараметр("ДатаС", НачалоПерида);
	Запрос.УстановитьПараметр("ДатаПо", КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаСтрокиRevenue = РезультатЗапроса.Выгрузить();
	ТаблицаСтрокиRevenue.Колонки.Добавить("СтрокаRevenueОбъект");
	ТаблицаСтрокиRevenue.ЗаполнитьЗначения(Неопределено, "СтрокаRevenueОбъект");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.СтрокиRevenue");
	ЭлементБлокировки.ИсточникДанных = ТаблицаСтрокиRevenue;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.RevenueSourceData");
	ЭлементБлокировки.ИсточникДанных = ТаблицаСтрокиRevenue;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументЗагрузки", "ЗагрузкаДанных");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	СтруктураОтбораClient = Новый Структура("ТипВнешнейСистемы, LawsonCustomerCodeID");
	СтруктураОтбораParentClient = Новый Структура("CorporateAccountID");
	СтруктураОтбораSegment = Новый Структура("ТипВнешнейСистемы, SegmentID");
	СтруктураОтбораSubSegment = Новый Структура("ТипВнешнейСистемы, SubSegmentID");
	СтруктураОтбораSubSubSegment = Новый Структура("ТипВнешнейСистемы, SubSubSegmentID");
	СтруктураОтбораGeomarket = Новый Структура("ТипВнешнейСистемы, GeomarketID");
	СтруктураОтбораSubGeomarket = Новый Структура("ТипВнешнейСистемы, SubGeomarketID");
	СтруктураОтбораAccountingUnit = Новый Структура("ТипВнешнейСистемы, AccountingUnitID");
	СтруктураОтбораCurrency = Новый Структура("ТипВнешнейСистемы, CurrencyID");
	
	Для каждого СтрокаПараметровСинхронизации Из СтрокиПараметровСинхронизации Цикл
		
		// Clients
		Если СтрокаПараметровСинхронизации.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Client
			И СтрокаПараметровСинхронизации.ТипСоответствия <> Перечисления.ТипыСоответствий.ParentClients Тогда
			
			СтруктураОтбораClient.ТипВнешнейСистемы = СтрокаПараметровСинхронизации.ТипСоответствия;
			СтруктураОтбораClient.LawsonCustomerCodeID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораClient);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.Client <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.Client = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
		// Parent Clients
		ИначеЕсли СтрокаПараметровСинхронизации.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Client
			И СтрокаПараметровСинхронизации.ТипСоответствия = Перечисления.ТипыСоответствий.ParentClients Тогда
			
			СтруктураОтбораParentClient.CorporateAccountID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораParentClient);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.ParentClient <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.ParentClient = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
		// Segments
		ИначеЕсли СтрокаПараметровСинхронизации.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment Тогда
			
			// Segment
			СтруктураОтбораSegment.ТипВнешнейСистемы = СтрокаПараметровСинхронизации.ТипСоответствия;
			СтруктураОтбораSegment.SegmentID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораSegment);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.Segment <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.Segment = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
			// SubSegment
			СтруктураОтбораSubSegment.ТипВнешнейСистемы = СтрокаПараметровСинхронизации.ТипСоответствия;
			СтруктураОтбораSubSegment.SubSegmentID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораSubSegment);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.SubSegment <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.SubSegment = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
			// SubSubSegment
			СтруктураОтбораSubSubSegment.ТипВнешнейСистемы = СтрокаПараметровСинхронизации.ТипСоответствия;
			СтруктураОтбораSubSubSegment.SubSubSegmentID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораSubSubSegment);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.SubSubSegment <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.SubSubSegment = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
		// Geomarkets
		ИначеЕсли СтрокаПараметровСинхронизации.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Geomarket Тогда
			
			// Geomarket
			СтруктураОтбораGeomarket.ТипВнешнейСистемы = СтрокаПараметровСинхронизации.ТипСоответствия;
			СтруктураОтбораGeomarket.GeomarketID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораGeomarket);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.Geomarket <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.Geomarket = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
			// SubGeomarket
			СтруктураОтбораSubGeomarket.ТипВнешнейСистемы = СтрокаПараметровСинхронизации.ТипСоответствия;
			СтруктураОтбораSubGeomarket.SubGeomarketID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораSubGeomarket);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.SubGeomarket <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.SubGeomarket = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
		// AccountingUnit
		ИначеЕсли СтрокаПараметровСинхронизации.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.AccountingUnit Тогда
			
			СтруктураОтбораAccountingUnit.ТипВнешнейСистемы = СтрокаПараметровСинхронизации.ТипСоответствия;
			СтруктураОтбораAccountingUnit.AccountingUnitID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораAccountingUnit);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.AccountingUnit <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.AccountingUnit = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
		// Currency
		ИначеЕсли СтрокаПараметровСинхронизации.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Currency Тогда
			
			СтруктураОтбораCurrency.ТипВнешнейСистемы = СтрокаПараметровСинхронизации.ТипСоответствия;
			СтруктураОтбораCurrency.CurrencyID = СтрокаПараметровСинхронизации.Идентификатор;
			
			НайденныеСтроки = ТаблицаСтрокиRevenue.НайтиСтроки(СтруктураОтбораCurrency);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.Currency <> СтрокаПараметровСинхронизации.ПравильныйПриемник Тогда
					Если НайденнаяСтрока.СтрокаRevenueОбъект = Неопределено Тогда
						НайденнаяСтрока.СтрокаRevenueОбъект = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					НайденнаяСтрока.СтрокаRevenueОбъект.Currency = СтрокаПараметровСинхронизации.ПравильныйПриемник;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Запись изменных объектов
	Для каждого СтрокаRevenue Из ТаблицаСтрокиRevenue Цикл
		Если СтрокаRevenue.СтрокаRevenueОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			СтрокаRevenue.СтрокаRevenueОбъект.Записать();
		Исключение
			ТекстОшибок = ТекстОшибок + Строка(СтрокаRevenue.СтрокаRevenueОбъект) + ": " + ОписаниеОшибки() + Символы.ПС;
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		Если СтрокаRevenue.ЗагрузкаДанныхПроведен Тогда
			СтрокаТаблицыДокументовДляПроведения = ТаблицаДокументовДляПроведения.Добавить();
			СтрокаТаблицыДокументовДляПроведения.Документ = СтрокаRevenue.ЗагрузкаДанных;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроведениеДокументов(ТаблицаДокументовДляПроведения, ТекстОшибок, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументовДляПроведения.Свернуть("Документ");
	
	Для каждого СтрокаТаблицыДокументовДляПроведения Из ТаблицаДокументовДляПроведения Цикл
		ДокОбъект = СтрокаТаблицыДокументовДляПроведения.Документ.ПолучитьОбъект();
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибок = ТекстОшибок + Строка(ДокОбъект) + ": " + ОписаниеОшибки() + Символы.ПС;
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПривязки(ПараметрыСинхронизации, ТекстОшибок, Отказ)
	
	// блокируем привязки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ПараметрыСинхронизации;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Идентификатор", "Идентификатор");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипСоответствия", "ТипСоответствия");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъектаВнешнейСистемы", "ТипОбъектаВнешнейСистемы");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыСинхронизации.ДатаС,
	|	ПараметрыСинхронизации.ДатаПо,
	|	ПараметрыСинхронизации.Идентификатор,
	|	ПараметрыСинхронизации.ТипСоответствия,
	|	ПараметрыСинхронизации.ТипОбъектаВнешнейСистемы
	|ПОМЕСТИТЬ ВТ_ПараметрыСинхронизации
	|ИЗ
	|	&ПараметрыСинхронизации КАК ПараметрыСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.Период,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.Идентификатор,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипСоответствия,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипОбъектаВнешнейСистемы
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПараметрыСинхронизации КАК ВТ_ПараметрыСинхронизации
	|		ПО НастройкаСинхронизацииОбъектовСВнешнимиСистемами.Период >= ВТ_ПараметрыСинхронизации.ДатаС
	|			И НастройкаСинхронизацииОбъектовСВнешнимиСистемами.Период <= ВТ_ПараметрыСинхронизации.ДатаПо
	|			И НастройкаСинхронизацииОбъектовСВнешнимиСистемами.Идентификатор = ВТ_ПараметрыСинхронизации.Идентификатор
	|			И НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипСоответствия = ВТ_ПараметрыСинхронизации.ТипСоответствия
	|			И НастройкаСинхронизацииОбъектовСВнешнимиСистемами.ТипОбъектаВнешнейСистемы = ВТ_ПараметрыСинхронизации.ТипОбъектаВнешнейСистемы";
	Запрос.УстановитьПараметр("ПараметрыСинхронизации", ПараметрыСинхронизации);
	ДанныеРегистра = Запрос.Выполнить().Выгрузить();
	СтруктураПоиска = Новый Структура("Идентификатор, ТипСоответствия, ТипОбъектаВнешнейСистемы");
	
	НЗ = РегистрыСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СоздатьНаборЗаписей();
	
	Для каждого СтрокаПараметровСинхронизации Из ПараметрыСинхронизации Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПараметровСинхронизации);
		НайденныеСтроки = ДанныеРегистра.НайтиСтроки(СтруктураПоиска);
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НЗ.Очистить();
			НЗ.Отбор.Период.Установить(НайденнаяСтрока.Период);
			НЗ.Отбор.Идентификатор.Установить(НайденнаяСтрока.Идентификатор);
			НЗ.Отбор.ТипСоответствия.Установить(НайденнаяСтрока.ТипСоответствия);
			НЗ.Отбор.ТипОбъектаВнешнейСистемы.Установить(НайденнаяСтрока.ТипОбъектаВнешнейСистемы);
			Попытка
				НЗ.Записать(Истина);
			Исключение
				ТекстОшибок = ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
		КонецЦикла;
		
		НЗ.Отбор.Период.Установить(СтрокаПараметровСинхронизации.ДатаС);
		НЗ.Отбор.Идентификатор.Установить(СтрокаПараметровСинхронизации.Идентификатор);
		НЗ.Отбор.ТипСоответствия.Установить(СтрокаПараметровСинхронизации.ТипСоответствия);
		НЗ.Отбор.ТипОбъектаВнешнейСистемы.Установить(СтрокаПараметровСинхронизации.ТипОбъектаВнешнейСистемы);
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.Период = СтрокаПараметровСинхронизации.ДатаС;
		ЗаписьНабора.Идентификатор = СтрокаПараметровСинхронизации.Идентификатор;
		ЗаписьНабора.ТипСоответствия = СтрокаПараметровСинхронизации.ТипСоответствия;
		ЗаписьНабора.ТипОбъектаВнешнейСистемы = СтрокаПараметровСинхронизации.ТипОбъектаВнешнейСистемы;
		ЗаписьНабора.ОбъектПриемника = СтрокаПараметровСинхронизации.ПравильныйПриемник;
		Попытка
			НЗ.Записать(Истина);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
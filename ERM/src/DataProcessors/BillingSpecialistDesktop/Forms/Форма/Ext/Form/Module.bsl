
&НаКлиенте
Процедура AddStatus(Команда)
	
	//Если ОтмеченныеSalesOrders.Количество() > 0 Тогда
	Если Элементы.SalesOrders.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("AddStatusForSelectedSalesOrders", ЭтотОбъект),
			"Add status for all selected sales orders?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		SalesOrdersТекущиеДанные = Элементы.SalesOrders.ТекущиеДанные;
		
		Если SalesOrdersТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗначенияЗаполнения = Новый Структура("SalesOrder", SalesOrdersТекущиеДанные.SalesOrder);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("Период", ТекущаяДата());
		
		ОткрытьФорму("РегистрСведений.SalesOrdersComments.Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура AddStatusForSelectedSalesOrders(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОтмеченныеSalesOrders = Новый СписокЗначений;
		
		Для каждого ТекВыделеннаяСтрока Из Элементы.SalesOrders.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.SalesOrders.ДанныеСтроки(ТекВыделеннаяСтрока);
			
			ЭлементСписка = ОтмеченныеSalesOrders.НайтиПоЗначению(ДанныеСтроки.SalesOrder);
			Если ЭлементСписка = Неопределено Тогда
				ОтмеченныеSalesOrders.Добавить(ДанныеСтроки.SalesOrder);
			КонецЕсли;
			
		КонецЦикла;
		// { RGS TAlmazova 17.01.2017 14:43:33 - Проверка возможности добавления статусов
		//ПараметрыФормы = Новый Структура;
		//ПараметрыФормы.Вставить("СписокSalesOrders", ОтмеченныеSalesOrders);
		//
		//ОткрытьФорму("Обработка.BillingSpecialistDesktop.Форма.ФормаСтатусаSalesOrder", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ТекстСообщенияОбОшибках = "";
		ПроверитьВозможностьДобавленияСтатуса(ТекстСообщенияОбОшибках, ОтмеченныеSalesOrders);
		
		Если ТекстСообщенияОбОшибках <> "" Тогда
			Сообщить(ТекстСообщенияОбОшибках);
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокSalesOrders", ОтмеченныеSalesOrders);
			
			ОткрытьФорму("Обработка.BillingSpecialistDesktop.Форма.ФормаСтатусаSalesOrder", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		// } RGS TAlmazova 17.01.2017 14:43:43 - Проверка возможности добавления статусов
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьДобавленияСтатуса(ТекстСообщенияОбОшибках, ОтмеченныеSalesOrders)
	
	НачалоМесТекДата = НачалоМесяца(ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	SalesOrdersCommentsСрезПоследних.SalesOrder КАК SalesOrder
		|ИЗ
		|	РегистрСведений.SalesOrdersComments.СрезПоследних(, SalesOrder В (&ОтмеченныеSalesOrders)) КАК SalesOrdersCommentsСрезПоследних
		|ГДЕ
		|	(SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.Billed)
		|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.Canceled))
		|	И НЕ SalesOrdersCommentsСрезПоследних.Problem.Reason = ЗНАЧЕНИЕ(Перечисление.SalesOrderStatus.ПустаяСсылка)
		|	И НЕ SalesOrdersCommentsСрезПоследних.Problem.ExpectedDateForInvoice = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И (ВЫРАЗИТЬ(SalesOrdersCommentsСрезПоследних.Problem.Details КАК СТРОКА(1024))) <> """"
		|	И НЕ SalesOrdersCommentsСрезПоследних.Problem.EscalateTo = ЗНАЧЕНИЕ(Справочник.EscalationLevels.ПустаяСсылка)
		|	И SalesOrdersCommentsСрезПоследних.SalesOrder ССЫЛКА Документ.SalesOrder
		|	И (ВЫРАЗИТЬ(SalesOrdersCommentsСрезПоследних.Problem.ActionItem КАК СТРОКА(1024))) <> """"
		|	И SalesOrdersCommentsСрезПоследних.Период >= &НачалоМесТекДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SalesOrder.Source
		|ИЗ
		|	Документ.SalesOrder КАК SalesOrder
		|ГДЕ
		|	SalesOrder.Ссылка В(&ОтмеченныеSalesOrders)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РучнаяКорректировка.Source
		|ИЗ
		|	Документ.РучнаяКорректировка КАК РучнаяКорректировка
		|ГДЕ
		|	РучнаяКорректировка.Ссылка В(&ОтмеченныеSalesOrders)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РучнаяКорректировка.Source
		|ИЗ
		|	Документ.РучнаяКорректировка КАК РучнаяКорректировка
		|ГДЕ
		|	РучнаяКорректировка.Ссылка В(&ОтмеченныеSalesOrders)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SalesOrder.Source
		|ИЗ
		|	Документ.SalesOrder КАК SalesOrder
		|ГДЕ
		|	SalesOrder.Ссылка В(&ОтмеченныеSalesOrders)";
	
	Запрос.УстановитьПараметр("ОтмеченныеSalesOrders", ОтмеченныеSalesOrders);
	Запрос.УстановитьПараметр("НачалоМесТекДата", НачалоМесТекДата);
	
	НачатьТранзакцию();
	//ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаЗаполненных = МассивРезультатов[0].Выбрать();
	ВыборкаИсточников = МассивРезультатов[1].Выбрать();
	ВыборкаРучныеКорректировки = МассивРезультатов[2].Выбрать();
	ВыборкаСО = МассивРезультатов[3].Выбрать();
	ЗафиксироватьТранзакцию();
	
	Если ВыборкаРучныеКорректировки.Количество() > 0 И ВыборкаСО.Количество() > 0 Тогда
		ТекстСообщенияОбОшибках = "Selected Sales orders and JV";
		Возврат;
	ИначеЕсли ВыборкаИсточников.Количество() > 1 Тогда
		ТекстСообщенияОбОшибках = "Selected Sales orders or JV with different Sources";
		Возврат;
	ИначеЕсли ВыборкаЗаполненных.Количество() > 0 Тогда
		ТекстСообщенияОбОшибках = "Status should n’t be changed! Selected Order: ";
		Пока ВыборкаЗаполненных.Следующий() Цикл
			 ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ВыборкаЗаполненных.SalesOrder + " ";
		КонецЦикла;;
		ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + " is already in Billed Status!";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура PeriodПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Period) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаКомментария", КонецДня(ТекущаяДата()));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаДляСравнения", НачалоМесяца(ТекущаяДата()) - 1);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаКомментария", КонецДня(Period));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаДляСравнения", НачалоМесяца(Period) - 1);
	КонецЕсли;
	ПериодОстатков = ?(КонецМесяца(Period) = КонецДня(Period), КонецДня(Period) + 1, НачалоМесяца(Period));
	Элементы.ДекорацияРасшифровкаПериодаБаланса.Заголовок = "displayed balance at end of " + Формат(ПериодОстатков - 1, "Л=en_US; ДФ='MMMM yyyy'");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ПериодОстатков", ПериодОстатков, ЗначениеЗаполнено(Period));
	
	Если КонецДня(Period) = КонецМесяца(Period) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаКурса", КонецМесяца(КонецМесяца(Period) + 1));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаКурса", КонецМесяца(Period));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SourceПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "Source", Source, , , ЗначениеЗаполнено(Source));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Period = ТекущаяДата();
	ПериодОстатков = ?(КонецМесяца(Period) = КонецДня(Period), КонецДня(Period) + 1, НачалоМесяца(Period));
	Элементы.ДекорацияРасшифровкаПериодаБаланса.Заголовок = "displayed balance at end of " + Формат(ПериодОстатков - 1, "Л=en_US; ДФ='MMMM yyyy'");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаКомментария", КонецДня(Period));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ПериодОстатков", ПериодОстатков, ЗначениеЗаполнено(Period));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаДляСравнения", НачалоМесяца(Period) - 1);
	
	Если КонецДня(Period) = КонецМесяца(Period) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаКурса", КонецМесяца(КонецМесяца(Period) + 1));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "ДатаКурса", КонецМесяца(Period));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "МассивОтмеченныхSalesOrders", ОтмеченныеSalesOrders);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "HFMUnbilledAccount", ПланыСчетов.HFM_GL_Accounts.НайтиПоКоду("12002"));
	CurrentLDAPUser = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ПользовательLDAP");
	
КонецПроцедуры

&НаКлиенте
Процедура GeoMarketПриИзменении(Элемент)
	
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "GeoMarket", GeoMarket, ЗначениеЗаполнено(GeoMarket));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "GeoMarket", GeoMarket, , , ЗначениеЗаполнено(GeoMarket));
	
КонецПроцедуры

&НаКлиенте
Процедура ClientПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "Client", Client, , , ЗначениеЗаполнено(Client));
	
КонецПроцедуры

&НаКлиенте
Процедура CompanyПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "Company", Company, , , ЗначениеЗаполнено(Company));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для каждого ТекВыделеннаяСтрока Из Элементы.SalesOrders.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.SalesOrders.ДанныеСтроки(ТекВыделеннаяСтрока);
		
		ЭлементСписка = ОтмеченныеSalesOrders.НайтиПоЗначению(ДанныеСтроки.SalesOrder);
		Если ЭлементСписка = Неопределено Тогда
			ОтмеченныеSalesOrders.Добавить(ДанныеСтроки.SalesOrder);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "МассивОтмеченныхSalesOrders", ОтмеченныеSalesOrders.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
		
	ОтмеченныеSalesOrders.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "МассивОтмеченныхSalesOrders", ОтмеченныеSalesOrders.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура AccountПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "Account", Account, , , ЗначениеЗаполнено(Account));
	
КонецПроцедуры

&НаКлиенте
Процедура CommentПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "НетКомментария", Истина, , , NoComments);
	
КонецПроцедуры

&НаКлиенте
Процедура SalesOrdersВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	SalesOrdersТекущиеДанные = Элементы.SalesOrders.ТекущиеДанные;
	
	Если SalesOrdersТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(SalesOrdersТекущиеДанные.SalesOrder) = Тип("ДокументСсылка.SalesOrder") Тогда
		ОткрытьФорму("Документ.SalesOrder.Форма.ФормаДокумента", Новый Структура("Ключ", SalesOrdersТекущиеДанные.SalesOrder));
	Иначе
		ОткрытьФорму("Документ.РучнаяКорректировка.Форма.ФормаДокумента", Новый Структура("Ключ", SalesOrdersТекущиеДанные.SalesOrder));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SalesOrdersПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя <> "SalesOrdersПометка" Тогда
		Возврат;
	КонецЕсли;
	
	SalesOrdersТекущиеДанные = Элементы.SalesOrders.ТекущиеДанные;
	
	Если SalesOrdersТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = ОтмеченныеSalesOrders.НайтиПоЗначению(SalesOrdersТекущиеДанные.SalesOrder);
	Если ЭлементСписка = Неопределено Тогда
		ОтмеченныеSalesOrders.Добавить(SalesOrdersТекущиеДанные.SalesOrder);
	Иначе
		ОтмеченныеSalesOrders.Удалить(ЭлементСписка);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(SalesOrders, "МассивОтмеченныхSalesOrders", ОтмеченныеSalesOrders.ВыгрузитьЗначения());

КонецПроцедуры

&НаКлиенте
Процедура SegmentПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "Segment", Segment, , , ЗначениеЗаполнено(Segment));
	
КонецПроцедуры

&НаКлиенте
Процедура BilledПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "Status", Status, , , ЗначениеЗаполнено(Status));
	
КонецПроцедуры

&НаКлиенте
Процедура SubGeoMarketПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "SubGeoMarket", SubGeoMarket, , , ЗначениеЗаполнено(SubGeoMarket));
	
КонецПроцедуры

&НаКлиенте
Процедура OnlyMyItemsПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(SalesOrders, "ResponsibleAR", CurrentLDAPUser, , , OnlyMyItems);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.МножественныйВыбор = Ложь;
	//ВыборФайла.ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
	ВыборФайла.Расширение = "xlsx";
	ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ВыборФайла.Расширение);
		
	Если НЕ ВыборФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеДинамическогоСписка();
	
	ТабДокумент.Записать(ВыборФайла.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеДинамическогоСписка()
	
	Схема = Элементы.SalesOrders.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.SalesOrders.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	// { RGS AGorlenko 27.03.2017 16:07:08 - при сохранении отчета нужен последний комментарий
	ПараметрДатаКомментария = Настройки.ПараметрыДанных.Элементы.Найти("ДатаКомментария");
	Если ПараметрДатаКомментария <> Неопределено Тогда
		ПараметрДатаКомментария.Использование = Ложь;
	КонецЕсли;
	// } RGS AGorlenko 27.03.2017 16:07:55 - при сохранении отчета нужен последний комментарий
	
	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("DateComment");
	НовоеПоле.Использование = Истина;

	//НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	//НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ActionItem");
	//НовоеПоле.Использование = Истина;

	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ResponsiblesList");
	НовоеПоле.Использование = Истина;
	
	//НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	//НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ProblemDetails");
	//НовоеПоле.Заголовок = "Details";
	//НовоеПоле.Использование = Истина;
	
	МакетОформления = Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
	Если МакетОформления <> Неопределено Тогда
		МакетОформления.Значение = "Море";
		МакетОформления.Использование = Истина;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	
	ТабДокумент = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры


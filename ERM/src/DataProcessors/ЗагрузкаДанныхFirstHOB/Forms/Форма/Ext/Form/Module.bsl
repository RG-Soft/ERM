
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресВХранилище = "";
	ВыбранноеИмяФайла = "";
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект);
	
	НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресВХранилище,,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(Результат, АдресВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		
		Объект.ИмяФайла = Файл.Имя;
		АдресФайлаВХранилище = АдресВХранилище;
		Модифицированность = Истина;
		
		ЗаполнитьСписокЛистовЭкселя(Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЛистовЭкселя(ЗаполнитьЛист = Ложь)
	
	СписокЛистов = Новый Массив;
	
	Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
		ФайлЭксель = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	Иначе
		ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
		ФайлЭксель = ОбъектДляСервера.ИсточникДанных.Получить();
	КонецЕсли;
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(Истина, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(Истина, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если СписокЛистов.Количество() > 0 И ЗаполнитьЛист Тогда
		// { RGS PMatkov 25.12.2015 15:50:08 - 
		//ЛистФайла = СписокЛистов[0];
		Объект.ЛистФайла = СписокЛистов[0];
		// } RGS PMatkov 25.12.2015 15:50:09 - 
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	ЗаполнитьСтруктуруФайлаПоУмолчанию();
	
	ТаблицаКоллизий.Очистить();
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	ДД = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	ДД.Записать(ИмяФайла);
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	СтруктураПараметров = Новый Структура("ИменаКолонокВПервойСтроке, ЛистФайла, СтруктураКолонок, ПерваяСтрокаДанных, ПоследняяСтрокаДанных", Истина, Объект.ЛистФайла, СтруктураКолонок, 2, 0);
	
	rgsЗагрузкаИзExcel.ВыгрузитьЭксельВТаблицуДанных(ИмяФайла, ТаблицаДанных, ДанныеДляЗаполнения, АдресХранилища, СтруктураПараметров);
	
	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если Найти(СтрокаДанных.CompanyDesc, "НОКБ ГП") > 0  И ПустаяСтрока(СтрокаДанных.AU) Тогда
			СтрокаДанных.AU = "0669532";
			СтрокаДанных.AUType = "Lawson";
		ИначеЕсли (Найти(СтрокаДанных.CompanyDesc, "ТОЭ ЗГП") > 0 ИЛИ Найти(СтрокаДанных.CompanyDesc, "ТОЭЗГП") > 0) И ПустаяСтрока(СтрокаДанных.AU) Тогда
			СтрокаДанных.AU = "0669533";
			СтрокаДанных.AUType = "Lawson";
		КонецЕсли;
		
		Пока  СтрДлина(СтрокаДанных.AU) < 7 Цикл
			СтрокаДанных.AU = "0" + СтрокаДанных.AU;
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = ВыполнитьПроверкуНастроекСинхронизации(ТаблицаДанных);
	
	Если Результат Тогда
		СформироватьПроводкиDSS(ТаблицаДанных);
	КонецЕсли;
	
	
КонецПроцедуры

Функция ВыполнитьПроверкуНастроекСинхронизации(ТаблицаДанных)
	
	Если ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		Результат = ВыполнитьПроверкуНастроекСинхронизацииJV(ТаблицаДанных);
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		Результат = ВыполнитьПроверкуНастроекСинхронизацииReceivables(ТаблицаДанных);
	//ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
	//	Результат = _ВыполнитьПроверкуНастроекСинхронизацииAccruals(ТаблицаДанных);
	Иначе
		Результат = Ложь;
		ВызватьИсключение "Unknown type of transactions!";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуНастроекСинхронизацииReceivables(ТаблицаДанных)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	HOBReceivablesSourceData.Account,
	|	HOBReceivablesSourceData.Client,
	|	HOBReceivablesSourceData.INN,
	|	HOBReceivablesSourceData.CompanyCode,
	|	HOBReceivablesSourceData.CompanyDesc,
	|	HOBReceivablesSourceData.Currency,
	|	HOBReceivablesSourceData.LocationCode,
	|	HOBReceivablesSourceData.LocationDesc,
	|	HOBReceivablesSourceData.Amount,
	|	HOBReceivablesSourceData.BaseAmount,
	|	HOBReceivablesSourceData.AU,
	|	HOBReceivablesSourceData.AUType,
	|	HOBReceivablesSourceData.SubSubSegment,
	|	HOBReceivablesSourceData.Invoice,
	|	HOBReceivablesSourceData.InvoiceDate,
	|	HOBReceivablesSourceData.InvoiceNumber,
	|	HOBReceivablesSourceData.InvoiceCurrency,
	|	HOBReceivablesSourceData.InvoiceAmount,
	|	HOBReceivablesSourceData.InvoiceBilled,
	|	HOBReceivablesSourceData.InvoiceAgreementCode,
	|	HOBReceivablesSourceData.InvoiceAgreement,
	|	HOBReceivablesSourceData.InvoiceID,
	|	HOBReceivablesSourceData.LegalEntity
	|ПОМЕСТИТЬ HOBReceivablesSourceData
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК HOBReceivablesSourceData
	|	"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	HOBReceivablesSourceData.Currency КАК Идентификатор
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО HOBReceivablesSourceData.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Specify the 1C object"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
		|	HOBReceivablesSourceData.InvoiceCurrency
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО HOBReceivablesSourceData.InvoiceCurrency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|	И HOBReceivablesSourceData.InvoiceCurrency <> """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	HOBReceivablesSourceData.Account
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И HOBReceivablesSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	HOBReceivablesSourceData.CompanyCode
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И HOBReceivablesSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И HOBReceivablesSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
		|	И HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	HOBReceivablesSourceData.AU
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(HOBReceivablesSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (HOBReceivablesSourceData.AUType <> ""Lawson"")
		|			И (HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И Сегменты.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И HOBReceivablesSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	HOBReceivablesSourceData.AU
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(HOBReceivablesSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	HOBReceivablesSourceData.AU
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И HOBReceivablesSourceData.AU = КостЦентры.Код
		|			И (HOBReceivablesSourceData.AUType = ""Lawson"")
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL
		|	И HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Legal entity"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.LegalEntity),
		|	ЗНАЧЕНИЕ(Справочник.LegalEntiites.ПустаяСсылка),
		|	HOBReceivablesSourceData.LegalEntity
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО HOBReceivablesSourceData.LegalEntity = LegalEntiites.Код
		|			И (НЕ LegalEntiites.ПометкаУдаления)
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И (HOBReceivablesSourceData.CompanyCode = LegalEntiites.Владелец.Код)
		|ГДЕ
		|	LegalEntiites.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И HOBReceivablesSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|	И HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
		|	Сегменты.Код
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО (НЕ HFM_Technology.ПометкаУдаления)
		|				И Сегменты.Код = HFM_Technology.Код
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(HOBReceivablesSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И HOBReceivablesSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|	И HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО (НЕ HFM_Locations.ПометкаУдаления)
		|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(HOBReceivablesSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И HOBReceivablesSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И HOBReceivablesSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция _ВыполнитьПроверкуНастроекСинхронизацииAccruals(ТаблицаДанных)
	
	Результат = Ложь;
	//ДанныеДляЗаполнения = Новый Структура();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	HOBAccrualsSourceData.TrDate,
	//	|	HOBAccrualsSourceData.TrNumber,
	//	|	HOBAccrualsSourceData.Document,
	//	|	HOBAccrualsSourceData.DocumentType,
	//	|	HOBAccrualsSourceData.Account,
	//	|	HOBAccrualsSourceData.Client,
	//	|	HOBAccrualsSourceData.INN,
	//	|	HOBAccrualsSourceData.SalesOrderAgreementCode,
	//	|	HOBAccrualsSourceData.SalesOrderAgreement,
	//	|	HOBAccrualsSourceData.SalesOrder,
	//	|	HOBAccrualsSourceData.SalesOrderNumber,
	//	|	HOBAccrualsSourceData.CompanyCode,
	//	|	HOBAccrualsSourceData.CompanyDesc,
	//	|	HOBAccrualsSourceData.Currency,
	//	|	HOBAccrualsSourceData.LocationCode,
	//	|	HOBAccrualsSourceData.LocationDesc,
	//	|	HOBAccrualsSourceData.Amount,
	//	|	HOBAccrualsSourceData.BaseAmount,
	//	|	HOBAccrualsSourceData.JobEndDate,
	//	|	HOBAccrualsSourceData.SalesOrderAmount,
	//	|	HOBAccrualsSourceData.ERPStatus,
	//	|	HOBAccrualsSourceData.SalesOrderCurrency,
	//	|	HOBAccrualsSourceData.SalesOrderExchangeRate,
	//	|	HOBAccrualsSourceData.SalesOrderApprovalDate,
	//	|	HOBAccrualsSourceData.SalesOrderApprovedBy,
	//	|	HOBAccrualsSourceData.AU,
	//	|	HOBAccrualsSourceData.AUType,
	//	|	HOBAccrualsSourceData.SubSubSegment,
	//	|	HOBAccrualsSourceData.SalesOrderDate,
	//	|	HOBAccrualsSourceData.Invoice,
	//	|	HOBAccrualsSourceData.InvoiceDate,
	//	|	HOBAccrualsSourceData.InvoiceNumber,
	//	|	HOBAccrualsSourceData.InvoiceCurrency,
	//	|	HOBAccrualsSourceData.InvoiceAmount,
	//	|	HOBAccrualsSourceData.InvoiceBilled,
	//	|	HOBAccrualsSourceData.InvoicePassedForApproval,
	//	|	HOBAccrualsSourceData.InvoicePassedForPayment,
	//	|	HOBAccrualsSourceData.InvoicePassedForApprovalDate,
	//	|	HOBAccrualsSourceData.InvoicePassedForPaymentDate,
	//	|	HOBAccrualsSourceData.ExpectedDateOfPayment,
	//	|	HOBAccrualsSourceData.InvoiceAgreementCode,
	//	|	HOBAccrualsSourceData.InvoiceAgreement,
	//	|	HOBAccrualsSourceData.Reverse,
	//	|	HOBAccrualsSourceData.DocumentID,
	//	|	HOBAccrualsSourceData.SalesOrderID,
	//	|	HOBAccrualsSourceData.InvoiceID,
	//	|	HOBAccrualsSourceData.TrID
	//	|ПОМЕСТИТЬ ВТ_HOBAccrualsSourceData
	//	|ИЗ
	//	|	РегистрСведений.HOBAccrualsSourceData КАК HOBAccrualsSourceData
	//	|ГДЕ
	//	|	HOBAccrualsSourceData.ДокументЗагрузки = &ДокументЗагрузки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ КАК КоллизияОтработана,
	//	|	""Specify the 1C object"" КАК Описание,
	//	|	&ТипВнешнейСистемы КАК ТипСоответствия,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
	//	|	ВТ_HOBAccrualsSourceData.Currency КАК Идентификатор
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	//	|				&Период,
	//	|				ТипСоответствия = &ТипВнешнейСистемы
	//	|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
	//	|		ПО ВТ_HOBAccrualsSourceData.Currency = НастройкаСинхронизацииCurrency.Идентификатор
	//	|ГДЕ
	//	|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Specify the 1C object"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
	//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.SalesOrderCurrency
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	//	|				&Период,
	//	|				ТипСоответствия = &ТипВнешнейСистемы
	//	|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
	//	|		ПО ВТ_HOBAccrualsSourceData.SalesOrderCurrency = НастройкаСинхронизацииCurrency.Идентификатор
	//	|ГДЕ
	//	|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
	//	|	И ВТ_HOBAccrualsSourceData.SalesOrderCurrency <> """"
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Specify the 1C object"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
	//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.InvoiceCurrency
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	//	|				&Период,
	//	|				ТипСоответствия = &ТипВнешнейСистемы
	//	|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
	//	|		ПО ВТ_HOBAccrualsSourceData.InvoiceCurrency = НастройкаСинхронизацииCurrency.Идентификатор
	//	|ГДЕ
	//	|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
	//	|	И ВТ_HOBAccrualsSourceData.InvoiceCurrency <> """"
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Account"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
	//	|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.Account
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
	//	|		ПО (НЕ Lawson.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.Account = Lawson.Код
	//	|ГДЕ
	//	|	Lawson.Ссылка ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Company"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
	//	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.CompanyCode
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	//	|		ПО (НЕ Организации.ПометкаУдаления)
	//	|			И (Организации.Source = &ТипВнешнейСистемы)
	//	|			И ВТ_HOBAccrualsSourceData.CompanyCode = Организации.Код
	//	|ГДЕ
	//	|	Организации.Ссылка ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Sub-Sub-Segment by AU"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
	//	|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
	//	|	КостЦентры.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Sub-Sub-Segment by AU"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
	//	|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.AU
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
	//	|		ПО (НЕ Сегменты.ПометкаУдаления)
	//	|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 8, 3) = Сегменты.Код)
	//	|			И (ВТ_HOBAccrualsSourceData.AUType <> ""Lawson"")
	//	|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
	//	|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	//	|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
	//	|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	//	|ГДЕ
	//	|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
	//	|	И Сегменты.Ссылка ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Location by AU"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
	//	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	//	|	КостЦентры.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Location by AU"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
	//	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.AU
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	//	|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
	//	|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
	//	|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
	//	|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	//	|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
	//	|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	//	|ГДЕ
	//	|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
	//	|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЛОЖЬ,
	//	|	""Failed to find Accounting Unit"",
	//	|	&ТипВнешнейСистемы,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
	//	|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
	//	|	ВТ_HOBAccrualsSourceData.AU
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.Ссылка ЕСТЬ NULL 
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	КостЦентры.Сегмент КАК Ссылка,
	//	|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
	//	|	КостЦентры.Сегмент.Код КАК Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
	//	|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
	//	|				И (НЕ HFM_Technology.ПометкаУдаления)
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	Сегменты.Ссылка,
	//	|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
	//	|	Сегменты.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
	//	|			ПО (НЕ HFM_Technology.ПометкаУдаления)
	//	|				И Сегменты.Код = HFM_Technology.Код
	//	|		ПО (НЕ Сегменты.ПометкаУдаления)
	//	|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 8, 3) = Сегменты.Код)
	//	|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
	//	|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	//	|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
	//	|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	//	|ГДЕ
	//	|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
	//	|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
	//	|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
	//	|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
	//	|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
	//	|				И (НЕ HFM_Locations.ПометкаУдаления)
	//	|		ПО (НЕ КостЦентры.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
	//	|ГДЕ
	//	|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
	//	|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ПодразделенияОрганизаций.Ссылка,
	//	|	ПодразделенияОрганизаций.Код,
	//	|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
	//	|			ПО (НЕ HFM_Locations.ПометкаУдаления)
	//	|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
	//	|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
	//	|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
	//	|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
	//	|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	//	|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
	//	|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	//	|ГДЕ
	//	|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
	//	|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	Lawson.Ссылка,
	//	|	Lawson.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
	//	|		ПО (НЕ Lawson.ПометкаУдаления)
	//	|			И ВТ_HOBAccrualsSourceData.Account = Lawson.Код
	//	|ГДЕ
	//	|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	Организации.Ссылка,
	//	|	Организации.Код
	//	|ИЗ
	//	|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	//	|		ПО (НЕ Организации.ПометкаУдаления)
	//	|			И (Организации.Source = &ТипВнешнейСистемы)
	//	|			И ВТ_HOBAccrualsSourceData.CompanyCode = Организации.Код
	//	|ГДЕ
	//	|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	//
	//Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	//Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	//Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	//МассивРезультатов = Запрос.ВыполнитьПакет();
	//
	//ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	//
	//ВыборкаСегментов = МассивРезультатов[2].Выбрать();
	//
	//Пока ВыборкаСегментов.Следующий() Цикл
	//	
	//	Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
	//		
	//		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
	//		СтрокаКоллизии.КоллизияОтработана = Ложь;
	//		СтрокаКоллизии.Описание = "Not specified base element";
	//		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
	//		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
	//		СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
	//		СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
	//		
	//	Иначе
	//		
	//		ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
	//		ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
	//		ТекОбъект.Записать();
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//// локации
	//ВыборкаЛокаций = МассивРезультатов[3].Выбрать();
	//
	//Пока ВыборкаЛокаций.Следующий() Цикл
	//	
	//	Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
	//		
	//		ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
	//		ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
	//		ТекОбъект.Записать();
	//		
	//	Иначе
	//		
	//		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
	//		СтрокаКоллизии.КоллизияОтработана = Ложь;
	//		СтрокаКоллизии.Описание = "Not specified base element";
	//		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
	//		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
	//		СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
	//		СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//// счета
	//ВыборкаСчетов = МассивРезультатов[4].Выбрать();
	//
	//Пока ВыборкаСчетов.Следующий() Цикл
	//	
	//	СтрокаКоллизии = ТаблицаКоллизий.Добавить();
	//	СтрокаКоллизии.КоллизияОтработана = Ложь;
	//	СтрокаКоллизии.Описание = "Not specified base element";
	//	СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
	//	СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
	//	СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
	//	СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
	//	
	//КонецЦикла;
	//
	//// организации
	//ВыборкаКомпаний = МассивРезультатов[5].Выбрать();
	//
	//Пока ВыборкаКомпаний.Следующий() Цикл
	//	
	//	СтрокаКоллизии = ТаблицаКоллизий.Добавить();
	//	СтрокаКоллизии.КоллизияОтработана = Ложь;
	//	СтрокаКоллизии.Описание = "Not specified base element";
	//	СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
	//	СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
	//	СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
	//	СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
	//	
	//КонецЦикла;
	//
	//ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	//
	//ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	//
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуНастроекСинхронизацииJV(ТаблицаДанных)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBJVSourceData.Account,
		|	HOBJVSourceData.Client,
		|	HOBJVSourceData.INN,
		|	HOBJVSourceData.CompanyCode,
		|	HOBJVSourceData.CompanyDesc,
		|	HOBJVSourceData.Currency,
		|	HOBJVSourceData.LocationCode,
		|	HOBJVSourceData.LocationDesc,
		|	HOBJVSourceData.Amount,
		|	HOBJVSourceData.BaseAmount,
		|	HOBJVSourceData.AU,
		|	HOBJVSourceData.AUType,
		|	HOBJVSourceData.SubSubSegment,
		|	HOBJVSourceData.LegalEntity
		|ПОМЕСТИТЬ ВТ_HOBJVSourceData
		|ИЗ
		|	&ВнешняяТаблицаДанных КАК HOBJVSourceData
		|";
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	ВТ_HOBJVSourceData.Currency КАК Идентификатор
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_HOBJVSourceData.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.Account
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.CompanyCode
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBJVSourceData.AUType <> ""Lawson"")
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И Сегменты.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Legal entity"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.LegalEntity),
		|	ЗНАЧЕНИЕ(Справочник.LegalEntiites.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.LegalEntity
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBJVSourceData.LegalEntity = LegalEntiites.Код
		|			И (НЕ LegalEntiites.ПометкаУдаления)
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = LegalEntiites.Владелец.Код
		|ГДЕ
		|	LegalEntiites.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
		|	Сегменты.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО (НЕ HFM_Technology.ПометкаУдаления)
		|				И Сегменты.Код = HFM_Technology.Код
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО (НЕ HFM_Locations.ПометкаУдаления)
		|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьПроводкиDSS(ТаблицаДанных)
	
	Если ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		СформироватьПроводкиDSSJV(ТаблицаДанных);
	//ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
	//	_СформироватьПроводкиDSSAccruals(ТаблицаДанных);
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		СформироватьПроводкиDSSReceivables(ТаблицаДанных);
	Иначе
		ВызватьИсключение "Unknown type of transactions!";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПроводкиDSSJV(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBJVSourceData.Account,
		|	HOBJVSourceData.Client,
		|	HOBJVSourceData.CompanyCode,
		|	HOBJVSourceData.CompanyDesc,
		|	HOBJVSourceData.Currency,
		|	HOBJVSourceData.LocationCode,
		|	HOBJVSourceData.LocationDesc,
		|	HOBJVSourceData.Amount,
		|	HOBJVSourceData.BaseAmount,
		|	HOBJVSourceData.AU,
		|	HOBJVSourceData.AUType,
		|	HOBJVSourceData.SubSubSegment,
		|	HOBJVSourceData.LegalEntity
		|ПОМЕСТИТЬ ВТ_HOBJVSourceData
		|ИЗ
		|	&ВнешняяТаблицаДанных КАК HOBJVSourceData"
		;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_HOBJVSourceData.Currency
		|					ИЗ
		|						ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.AU,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Company,
		|	Lawson.Ссылка КАК Account,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_HOBJVSourceData.Amount,
		|	ВТ_HOBJVSourceData.BaseAmount,
		|	ВТ_HOBJVSourceData.LocationCode КАК CREW,
		|	ВТ_HOBJVSourceData.CompanyCode,
		|	ВТ_HOBJVSourceData.AU КАК AUCode,
		|	ВТ_HOBJVSourceData.LocationCode,
		|	ВТ_HOBJVSourceData.Account КАК AccountCode,
		|	КостЦентры.Ссылка КАК AU,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	LegalEntiites.Ссылка КАК LegalEntity
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.Account = Lawson.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_HOBJVSourceData.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBJVSourceData.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = LegalEntiites.Владелец.Код
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Lawson.Ссылка,
		|	ПодразделенияОрганизаций.Ссылка,
		|	Сегменты.Ссылка,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника,
		|	ВТ_HOBJVSourceData.Amount,
		|	ВТ_HOBJVSourceData.BaseAmount,
		|	ВТ_HOBJVSourceData.LocationCode,
		|	ВТ_HOBJVSourceData.CompanyCode,
		|	ВТ_HOBJVSourceData.AU,
		|	ВТ_HOBJVSourceData.LocationCode,
		|	ВТ_HOBJVSourceData.Account,
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель,
		|	LegalEntiites.Ссылка
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.Account = Lawson.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_HOBJVSourceData.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBJVSourceData.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = LegalEntiites.Владелец.Код
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшРучныхКоррерктировок = РезультатЗапроса[1].Выгрузить();
	//КэшРучныхКоррерктировок.Индексы.Добавить("Company, Client, Location, SubSubSegment, Account, Currency");
	КэшРучныхКоррерктировок.Индексы.Добавить("Company, Location, SubSubSegment, Account, Currency");
	
	ТаблицаДаты = РезультатЗапроса[2].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[3].Выбрать();
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		ТранзакцияHOBОбъект = Документы.ТранзакцияHOB.СоздатьДокумент();
		
		ЗаполнитьТранзакцию(ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, ,  Отказ, ТекстСообщенияОбОшибках, Период);
		
		ТранзакцияHOBОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, , , КэшРучныхКоррерктировок, Неопределено, Неопределено, Неопределено, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		ТекДок = ТранзакцияHOBОбъект.Ссылка.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура _СформироватьПроводкиDSSAccruals(ТаблицаДанных)
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПроводкиDSSReceivables(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	HOBReceivablesSourceData.Account,
	|	HOBReceivablesSourceData.Client,
	|	HOBReceivablesSourceData.INN,
	|	HOBReceivablesSourceData.CompanyCode,
	|	HOBReceivablesSourceData.CompanyDesc,
	|	HOBReceivablesSourceData.Currency,
	|	HOBReceivablesSourceData.LocationCode,
	|	HOBReceivablesSourceData.LocationDesc,
	|	HOBReceivablesSourceData.Amount,
	|	HOBReceivablesSourceData.BaseAmount,
	|	HOBReceivablesSourceData.AU,
	|	HOBReceivablesSourceData.AUType,
	|	HOBReceivablesSourceData.SubSubSegment,
	|	HOBReceivablesSourceData.InvoiceID,
	|	HOBReceivablesSourceData.InvoiceCurrency,
	|	HOBReceivablesSourceData.InvoiceType,
	|	HOBReceivablesSourceData.Invoice,
	|	HOBReceivablesSourceData.InvoiceNumber,
	|	HOBReceivablesSourceData.InvoiceDate,
	|	HOBReceivablesSourceData.InvoiceAmount,
	|	HOBReceivablesSourceData.InvoiceAgreementCode,
	|	HOBReceivablesSourceData.InvoiceAgreement,
	|	HOBReceivablesSourceData.FiscalInvoiceNo,
	|	HOBReceivablesSourceData.FiscalInvoiceDate,
	|	HOBReceivablesSourceData.InvoiceBilled,
	|	HOBReceivablesSourceData.PaymentNumber,
	|	HOBReceivablesSourceData.PaymentDate,
	|	HOBReceivablesSourceData.СтрокаФайла,
	|	HOBReceivablesSourceData.LegalEntity
	|ПОМЕСТИТЬ ВТ_HOBReceivablesSourceData
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК HOBReceivablesSourceData"
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_HOBReceivablesSourceData.INN
		|					ИЗ
		|						ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_HOBReceivablesSourceData.Currency
		|					ИЗ
		|						ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_HOBReceivablesSourceData.InvoiceCurrency
		|					ИЗ
		|						ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	INV.DocID,
		|	INV.Ссылка
		|ИЗ
		|	Документ.Invoice КАК INV
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ПО INV.DocID = ВТ_HOBReceivablesSourceData.InvoiceID
		|			И (НЕ INV.ПометкаУдаления)
		|			И (INV.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Cash.DocID,
		|	Cash.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК Cash
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ПО Cash.DocID = ВТ_HOBReceivablesSourceData.InvoiceID
		|			И (НЕ Cash.ПометкаУдаления)
		|			И (Cash.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BatchAllocation.DocID,
		|	BatchAllocation.Ссылка
		|ИЗ
		|	Документ.BatchAllocation КАК BatchAllocation
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ПО BatchAllocation.DocID = ВТ_HOBReceivablesSourceData.InvoiceID
		|			И (НЕ BatchAllocation.ПометкаУдаления)
		|			И (BatchAllocation.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Memo.DocID,
		|	Memo.Ссылка
		|ИЗ
		|	Документ.Memo КАК Memo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ПО Memo.DocID = ВТ_HOBReceivablesSourceData.InvoiceID
		|			И (НЕ Memo.ПометкаУдаления)
		|			И (Memo.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Company,
		|	Lawson.Ссылка КАК Account,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_HOBReceivablesSourceData.Amount,
		|	ВТ_HOBReceivablesSourceData.BaseAmount,
		|	ВТ_HOBReceivablesSourceData.LocationCode КАК CREW,
		|	ВТ_HOBReceivablesSourceData.INN КАК CustomerNumber,
		|	ВТ_HOBReceivablesSourceData.CompanyCode,
		|	ВТ_HOBReceivablesSourceData.AU КАК AUCode,
		|	ВТ_HOBReceivablesSourceData.LocationCode,
		|	ВТ_HOBReceivablesSourceData.Account КАК AccountCode,
		|	КостЦентры.Ссылка КАК AU,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВТ_СоответствиеCurrency1.ОбъектПриемника КАК InvoiceCurrency,
		|	ВТ_HOBReceivablesSourceData.InvoiceType,
		|	ВТ_HOBReceivablesSourceData.InvoiceID,
		|	ВТ_HOBReceivablesSourceData.InvoiceNumber,
		|	ВТ_HOBReceivablesSourceData.InvoiceDate,
		|	ВТ_HOBReceivablesSourceData.InvoiceAmount,
		|	ВТ_HOBReceivablesSourceData.InvoiceAgreementCode,
		|	ВТ_HOBReceivablesSourceData.InvoiceAgreement,
		|	ВТ_HOBReceivablesSourceData.FiscalInvoiceNo,
		|	ВТ_HOBReceivablesSourceData.FiscalInvoiceDate,
		|	ВТ_HOBReceivablesSourceData.InvoiceBilled,
		|	ВТ_HOBReceivablesSourceData.PaymentNumber,
		|	ВТ_HOBReceivablesSourceData.PaymentDate,
		|	ВТ_HOBReceivablesSourceData.СтрокаФайла КАК СтрокаФайла,
		|	LegalEntiites.Ссылка КАК LegalEntity
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBReceivablesSourceData.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.Account = Lawson.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_HOBReceivablesSourceData.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_HOBReceivablesSourceData.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_HOBReceivablesSourceData.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency1
		|		ПО ВТ_HOBReceivablesSourceData.InvoiceCurrency = ВТ_СоответствиеCurrency1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBReceivablesSourceData.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBReceivablesSourceData.CompanyCode = LegalEntiites.Владелец.Код
		|ГДЕ
		|	ВТ_HOBReceivablesSourceData.AUType = ""Lawson""
		|	И НЕ ВТ_HOBReceivablesSourceData.INN В
		|				(ВЫБРАТЬ
		|					HOBIgnoredClients.INN
		|				ИЗ
		|					РегистрСведений.HOBIgnoredClients КАК HOBIgnoredClients)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Lawson.Ссылка,
		|	ПодразделенияОрганизаций.Ссылка,
		|	Сегменты.Ссылка,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
		|	ВТ_HOBReceivablesSourceData.Amount,
		|	ВТ_HOBReceivablesSourceData.BaseAmount,
		|	ВТ_HOBReceivablesSourceData.LocationCode,
		|	ВТ_HOBReceivablesSourceData.INN,
		|	ВТ_HOBReceivablesSourceData.CompanyCode,
		|	ВТ_HOBReceivablesSourceData.AU,
		|	ВТ_HOBReceivablesSourceData.LocationCode,
		|	ВТ_HOBReceivablesSourceData.Account,
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель,
		|	ВТ_СоответствиеCurrency1.ОбъектПриемника,
		|	ВТ_HOBReceivablesSourceData.InvoiceType,
		|	ВТ_HOBReceivablesSourceData.InvoiceID,
		|	ВТ_HOBReceivablesSourceData.InvoiceNumber,
		|	ВТ_HOBReceivablesSourceData.InvoiceDate,
		|	ВТ_HOBReceivablesSourceData.InvoiceAmount,
		|	ВТ_HOBReceivablesSourceData.InvoiceAgreementCode,
		|	ВТ_HOBReceivablesSourceData.InvoiceAgreement,
		|	ВТ_HOBReceivablesSourceData.FiscalInvoiceNo,
		|	ВТ_HOBReceivablesSourceData.FiscalInvoiceDate,
		|	ВТ_HOBReceivablesSourceData.InvoiceBilled,
		|	ВТ_HOBReceivablesSourceData.PaymentNumber,
		|	ВТ_HOBReceivablesSourceData.PaymentDate,
		|	ВТ_HOBReceivablesSourceData.СтрокаФайла,
		|	LegalEntiites.Ссылка
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBReceivablesSourceData.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.Account = Lawson.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_HOBReceivablesSourceData.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_HOBReceivablesSourceData.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency1
		|		ПО ВТ_HOBReceivablesSourceData.InvoiceCurrency = ВТ_СоответствиеCurrency1.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBReceivablesSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBReceivablesSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBReceivablesSourceData.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBReceivablesSourceData.CompanyCode = LegalEntiites.Владелец.Код
		|ГДЕ
		|	ВТ_HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И НЕ ВТ_HOBReceivablesSourceData.INN В
		|				(ВЫБРАТЬ
		|					HOBIgnoredClients.INN
		|				ИЗ
		|					РегистрСведений.HOBIgnoredClients КАК HOBIgnoredClients)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокаФайла";
	
	//Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшИнвойсов = РезультатЗапроса[2].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("DocID");
	
	КэшCashBatch = РезультатЗапроса[3].Выгрузить();
	КэшCashBatch.Индексы.Добавить("DocID");
	
	КэшBatchAllocation = РезультатЗапроса[4].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("DocID");
	
	КэшMemo = РезультатЗапроса[5].Выгрузить();
	КэшMemo.Индексы.Добавить("DocID");
	
	ТаблицаДаты = РезультатЗапроса[6].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[7].Выбрать();
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		

		ТранзакцияHOBОбъект = Документы.ТранзакцияHOB.СоздатьДокумент();
		
		КэшПредставленийТипов = Новый Соответствие;
		
		ЗаполнитьТранзакцию(ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, КэшПредставленийТипов, Отказ, ТекстСообщенияОбОшибках, Период);
		
		ТранзакцияHOBОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, , КэшИнвойсов, Неопределено, КэшCashBatch, КэшBatchAllocation, КэшMemo, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		ТекДок = ТранзакцияHOBОбъект.Ссылка.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;

		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТранзакцию(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, КэшПредставленийТипов, Отказ, ТекстСообщенияОбОшибках, Период)
	
	ЗаполнитьЗначенияСвойств(ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
	
	ТранзакцияHOBОбъект.Дата = Период;
	
	ТранзакцияHOBОбъект.TrID = Строка(Новый УникальныйИдентификатор());
	
	ТранзакцияHOBОбъект.TransactionType = ТипТранзакций;
	
	ПреобразованиеСокрЛП(ТранзакцияHOBОбъект);
	
	Если ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		
		//ТранзакцияHOBОбъект.HOBDocumentType = ПолучитьТипДокумента(ДанныеДляЗаполнения.DocumentType, КэшПредставленийТипов);
		ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.ВводНачальныхОстатков;
		ТранзакцияHOBОбъект.HOBInvoiceType = ПолучитьТипДокумента(ДанныеДляЗаполнения.InvoiceType, КэшПредставленийТипов);
		
		Если НЕ ЗначениеЗаполнено(ТранзакцияHOBОбъект.HOBInvoiceType) Тогда
			ТекОшибка = "Unrecognized document type " + ДанныеДляЗаполнения.InvoiceType;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТранзакцияHOBОбъект.Client) Тогда
		
		Если ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
			ТранзакцияHOBОбъект.Client = Справочники.Контрагенты.GLNoName;
		Иначе
			ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразованиеСокрЛП(ТранзакцияHOBОбъект)
	
	ТранзакцияHOBОбъект.Contract = СокрЛП(ТранзакцияHOBОбъект.Contract);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипДокумента(ПредставлениеТипа, КэшПредставленийТипов)
	
	ТипИзКэша = КэшПредставленийТипов[ПредставлениеТипа];
	
	Если ТипИзКэша <> Неопределено Тогда
		Возврат ТипИзКэша;
	КонецЕсли;
	
	Если ПредставлениеТипа = "Операция международная" ИЛИ ПредставлениеТипа = "Операция (бухгалтерский и налоговый учет)" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.Операция;
	ИначеЕсли ПредставлениеТипа = "Сторнирование произвольного документа" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.Сторно;
	ИначеЕсли ПредставлениеТипа = "Платежное поручение входящее" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПлатежноеПоручениеВходящее;
	ИначеЕсли ПредставлениеТипа = "Акт об оказании производственных услуг" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг;
	ИначеЕсли ПредставлениеТипа = "Корректировка долга" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.КорректировкаДолга;
	ИначеЕсли ПредставлениеТипа = "Корректировка реализации" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.КорректировкаРеализации;
	ИначеЕсли ПредставлениеТипа = "Реализация товаров и услуг" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг;
	ИначеЕсли ПредставлениеТипа = "Платежное поручение исходящее" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПлетежноеПоручениеИсходящее;
	ИначеЕсли ПредставлениеТипа = "Передача ОС" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПередачаОС;
	ИначеЕсли ПредставлениеТипа = "Прочие затраты" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПрочиеЗатраты;
	ИначеЕсли ПредставлениеТипа = "Реализация услуг по переработке" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке;
	КонецЕсли;
	
	КэшПредставленийТипов.Вставить(ПредставлениеТипа, ЗначениеТипа);
	
	Возврат ЗначениеТипа;
	
КонецФункции

&НаСервере
Функция СформироватьСвязанныеОбъекты(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, КэшSalesOrders, КэшИнвойсов, КэшРучныхКоррерктировок, КэшCashBatch, КэшBatchAllocation, КэшMemo, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Company, Location, SubSubSegment, AU, Account, Currency");
	
	Если ТранзакцияHOBОбъект.TransactionType = Перечисления.HOBTransactionType.JV Тогда
		
		СтруктураПоискаРучнойКорректировки.Company = ТранзакцияHOBОбъект.Company;
		//СтруктураПоискаРучнойКорректировки.Client = ТранзакцияHOBОбъект.Client;
		СтруктураПоискаРучнойКорректировки.Location = ТранзакцияHOBОбъект.Location;
		СтруктураПоискаРучнойКорректировки.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
		СтруктураПоискаРучнойКорректировки.AU = ТранзакцияHOBОбъект.AU;
		СтруктураПоискаРучнойКорректировки.Account = ТранзакцияHOBОбъект.Account;
		СтруктураПоискаРучнойКорректировки.Currency = ТранзакцияHOBОбъект.Currency;
		
		СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
		Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
			ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ТранзакцияHOBОбъект);
			НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
			НоваяСтрокаКэша.Company = ТранзакцияHOBОбъект.Company;
			//НоваяСтрокаКэша.Client = ТранзакцияHOBОбъект.Client;
			НоваяСтрокаКэша.Location = ТранзакцияHOBОбъект.Location;
			НоваяСтрокаКэша.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
			НоваяСтрокаКэша.AU = ТранзакцияHOBОбъект.AU;
			НоваяСтрокаКэша.Account = ТранзакцияHOBОбъект.Account;
			НоваяСтрокаКэша.Currency = ТранзакцияHOBОбъект.Currency;
			НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
		КонецЕсли;
		
	ИначеЕсли ТранзакцияHOBОбъект.TransactionType = Перечисления.HOBTransactionType.Receivables Тогда
		
		Если ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.ПлатежноеПоручениеВходящее Тогда // действия с авансами
			
			СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.InvoiceID, "DocID");
			
			Если СтрокаCashBatch = Неопределено Тогда

				ТекCashBatch = СоздатьCashBatch(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, ДанныеДляЗаполнения.InvoiceID, Истина);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.InvoiceID;
				НоваяСтрокаКэша.Ссылка = ТекCashBatch;
				
			Иначе
				
				ТекCashBatch = СтрокаCashBatch.Ссылка;
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			
			КонецЕсли;
			
		ИначеЕсли ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаДолга
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.ПлетежноеПоручениеИсходящее Тогда // исходящий платеж, это странно, но он по идее должен закрыться, если и встретится
			
			СтрокаМемо = КэшMemo.Найти(ДанныеДляЗаполнения.InvoiceID, "DocID");
			
			Если СтрокаМемо = Неопределено Тогда

				ТекМемо = СоздатьМемо(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, ДанныеДляЗаполнения.InvoiceID);
				НоваяСтрокаКэша = КэшMemo.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.InvoiceID;
				НоваяСтрокаКэша.Ссылка = ТекМемо;
				
			Иначе
				
				ТекМемо = СтрокаМемо.Ссылка;
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			
			КонецЕсли;
			
		ИначеЕсли ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаРеализации
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.ПередачаОС
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.ПрочиеЗатраты Тогда
			
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.InvoiceID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				// { RGS TAlmazova 25.10.2016 13:36:58 - обнуляем только в первый месяц загрузки
				//Если НЕ (ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг
				//	ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг
				//	ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке
				//	ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.ПередачаОС
				//	ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.КорректировкаРеализации И ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаРеализации) Тогда
				Если НЕ (ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг
					ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг
					ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке
					ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.ПередачаОС
					ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.КорректировкаРеализации И ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаРеализации)
					И НачалоМесяца(ТранзакцияHOBОбъект.Дата) = НачалоМесяца(ДатаНачалаЗагрузки) Тогда
				// } RGS TAlmazova 25.10.2016 13:37:16 - обнуляем только в первый месяц загрузки
					
					Если ТранзакцияHOBОбъект.Дата >= ДатаВыверенныхОстатков Тогда
						ТекОшибка = "Failed to find Invoice for transaction " + ТранзакцияHOBОбъект.Номер + " (" + ТранзакцияHOBОбъект.TrID +")";
						Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
							ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
						КонецЕсли;
						Отказ = Истина;
					Иначе
						ОбнулитьСуммыПроводки(ТранзакцияHOBОбъект);
						ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
					КонецЕсли;
					
				Иначе
					
					ТекИнвойс = СоздатьИнвойс(ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
					НоваяСтрокаКэша = КэшИнвойсов.Добавить();
					НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.InvoiceID;
					НоваяСтрокаКэша.Ссылка = ТекИнвойс;
					
				КонецЕсли;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Ссылка;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			
			КонецЕсли;
			
		Иначе
			
			ТекОшибка = "Unexpected invoice type " + ТранзакцияHOBОбъект.Номер + " (" + ТранзакцияHOBОбъект.TrID +")";
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.ПлатежноеПоручениеВходящее Тогда
			
			СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.DocumentID, "DocID");
			
			Если СтрокаCashBatch = Неопределено Тогда

				ТекCashBatch = СоздатьCashBatch(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, ДанныеДляЗаполнения.DocumentID);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocumentID;
				НоваяСтрокаКэша.Ссылка = ТекCashBatch;
				
			Иначе
				
				ТекCashBatch = СтрокаCashBatch.Ссылка;
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			
			КонецЕсли;
			
			СтрокаBatchAllocation = КэшBatchAllocation.Найти(ДанныеДляЗаполнения.DocumentID, "DocID");
			
			Если СтрокаBatchAllocation = Неопределено Тогда

				ТекBatchAllocation = СоздатьBatchAllocation(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, ДанныеДляЗаполнения.DocumentID);
				НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocumentID;
				НоваяСтрокаКэша.Ссылка = ТекBatchAllocation;
				
			Иначе
				
				ТекBatchAllocation = СтрокаBatchAllocation.Ссылка;
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ТекBatchAllocation);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
КонецФункции

&НаСервере
Процедура ОбнулитьСуммыПроводки(ТранзакцияHOBОбъект)
	
	ТранзакцияHOBОбъект1 = ТранзакцияHOBОбъект.Ссылка.ПолучитьОбъект();
	ТранзакцияHOBОбъект1.Amount = 0;
	ТранзакцияHOBОбъект1.BaseAmount = 0;
	ТранзакцияHOBОбъект1.ОбменДанными.Загрузка = Истина;
	ТранзакцияHOBОбъект1.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, ТипОбъекта, СвязанныйОбъект)
	
	НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	НЗ.Отбор.ПроводкаDSS.Установить(ТранзакцияHOBОбъект.Ссылка);
	НЗ.Отбор.ТипСвязанногоОбъекта.Установить(ТипОбъекта);
	НоваяЗапись = НЗ.Добавить();
	НоваяЗапись.ПроводкаDSS = ТранзакцияHOBОбъект.Ссылка;
	НоваяЗапись.ТипСвязанногоОбъекта = ТипОбъекта;
	НоваяЗапись.СвязанныйОбъект = СвязанныйОбъект;
	НЗ.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Функция СоздатьSalesOrder(ТранзакцияHOBОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.SalesOrder.СоздатьДокумент();
	
	ДокОбъект.Номер = ДанныеДляЗаполнения.SalesOrderNumber;
	ДокОбъект.Дата = ДанныеДляЗаполнения.SalesOrderDate;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	ДокОбъект.Currency = ДанныеДляЗаполнения.SalesOrderCurrency;
	ДокОбъект.ExchangeRate = ДанныеДляЗаполнения.SalesOrderExchangeRate;
	ДокОбъект.ApprovalDate = ДанныеДляЗаполнения.SalesOrderApprovalDate;
	ДокОбъект.ApprovedBy = ДанныеДляЗаполнения.SalesOrderApprovedBy;
	ДокОбъект.DocID = ДанныеДляЗаполнения.SalesOrderID;
	ДокОбъект.JobEndDate = ДанныеДляЗаполнения.JobEndDate;
	ДокОбъект.Amount = ДанныеДляЗаполнения.SalesOrderAmount;
	ДокОбъект.AgreementCode = ДанныеДляЗаполнения.SalesOrderAgreementCode;
	ДокОбъект.Agreement = ДанныеДляЗаполнения.SalesOrderAgreement;
	ДокОбъект.ERPStatus = ДанныеДляЗаполнения.ERPStatus;
	ДокОбъект.OrderType = Перечисления.SalesOrederTypes.SalesOrder;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	//ДокОбъект.SubGeoMarket = ТранзакцияHOBОбъект.SubGeoMarket;
	ДокОбъект.CREW = ДанныеДляЗаполнения.LocationCode;
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьИнвойс(ТранзакцияHOBОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	//ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNumber;
	//ДокОбъект.DocNumber = ?(ПустаяСтрока(ТранзакцияHOBОбъект.DocNumber2), ТранзакцияHOBОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2);
	ДокОбъект.DocNumber = ДанныеДляЗаполнения.InvoiceNumber;
	ДокОбъект.Дата = ДанныеДляЗаполнения.InvoiceDate;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
	ДокОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияHOBОбъект.InvoiceID;
	ДокОбъект.Agreement = ДанныеДляЗаполнения.InvoiceAgreement;
	ДокОбъект.AgreementCode = ДанныеДляЗаполнения.InvoiceAgreementCode;
	ДокОбъект.FiscalInvoiceNo = ДанныеДляЗаполнения.InvoiceNumber;
	ДокОбъект.FiscalInvoiceDate = ДанныеДляЗаполнения.InvoiceDate;
	ДокОбъект.Amount = ДанныеДляЗаполнения.InvoiceAmount;
	//ДокОбъект.PassedForApproval = ДанныеДляЗаполнения.InvoicePassedForApproval;
	//ДокОбъект.PassedForApprovalDate = ДанныеДляЗаполнения.InvoicePassedForApprovalDate;
	//ДокОбъект.PassedForPayment = ДанныеДляЗаполнения.InvoicePassedForPayment;
	//ДокОбъект.PassedForPaymentDate = ДанныеДляЗаполнения.InvoicePassedForPaymentDate;
	//ДокОбъект.ExpectedDateOfPayment = ДанныеДляЗаполнения.ExpectedDateOfPayment;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьCashBatch(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, DocID, Prepayment = Ложь)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	ДокОбъект.Дата = ДанныеДляЗаполнения.InvoiceDate;
	//ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNumber;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
	ДокОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	ДокОбъект.DocID = DocID;
	ДокОбъект.Prepayment = Prepayment;
	ДокОбъект.PaymentDate = ДанныеДляЗаполнения.PaymentDate;
	ДокОбъект.PaymentNumber = ДанныеДляЗаполнения.PaymentNumber;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	// { RGS TAlmazova 30.12.2016 0:16:23 - заполнение Amount
	ДокОбъект.Amount = ДанныеДляЗаполнения.InvoiceAmount;
	// } RGS TAlmazova 30.12.2016 0:16:36 - заполнение Amount
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьBatchAllocation(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, DocID)
	
	ДокОбъект = Документы.BatchAllocation.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
	ДокОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	ДокОбъект.DocID = DocID;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьМемо(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, DocID)
	
	ДокОбъект = Документы.Memo.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNumber;
	ДокОбъект.Дата = ДанныеДляЗаполнения.InvoiceDate;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
	ДокОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	ДокОбъект.DocID = DocID;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ДозаполнитьИнвойсИзПроводки(Инвойс, ТранзакцияHOBОбъект, ДанныеДляЗаполнения)
	
	//Возврат;
	
	РеквизитыИнвойса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инвойс, "Company,DocID,Client,Location,SubSubSegment,AU,Account,Currency,ClientID");
	
	// { RGS TAlmazova 20.12.2016 1:30:26 - дозаполнение компании в регистре FiscalPayments
	Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) Тогда
		НаборЗаписей = РегистрыСведений.FiscalPayments.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Invoice.Установить(Инвойс);
		НаборЗаписей.Прочитать();
		Для Каждого Запись из НаборЗаписей Цикл
			Если Запись.Company = Справочники.Организации.ПустаяСсылка() Тогда
				Запись.Company = ТранзакцияHOBОбъект.Company;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	// } RGS TAlmazova 20.12.2016 1:30:27 - дозаполнение компании в регистре FiscalPayments
	
	Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocID) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Client) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Location) ИЛИ
		НЕ ЗначениеЗаполнено(РеквизитыИнвойса.SubSubSegment) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.AU) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Account) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Currency) 
		ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) Тогда
		ИнвойсОбъект = Инвойс.ПолучитьОбъект();
		Для каждого Реквизит из РеквизитыИнвойса Цикл
			Если Реквизит.Ключ <> "DocID" И Реквизит.Ключ <> "ClientID" Тогда
				Если НЕ ЗначениеЗаполнено(Реквизит.Значение) Тогда
					ИнвойсОбъект[Реквизит.Ключ] = ТранзакцияHOBОбъект[Реквизит.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocID) Тогда
			ИнвойсОбъект.DocID = ТранзакцияHOBОбъект.InvoiceID;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) Тогда
			ИнвойсОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
		КонецЕсли;
		ИнвойсОбъект.ОбменДанными.Загрузка = Истина;
		ИнвойсОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьРучнуюКорректировку(ТранзакцияHOBОбъект)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = ТекущаяДата();
	РучнаяКорректировкаОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	РучнаяКорректировкаОбъект.Company = ТранзакцияHOBОбъект.Company;
	//РучнаяКорректировкаОбъект.Client = ТранзакцияHOBОбъект.Client;
	РучнаяКорректировкаОбъект.Location = ТранзакцияHOBОбъект.Location;
	РучнаяКорректировкаОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	РучнаяКорректировкаОбъект.AU = ТранзакцияHOBОбъект.AU;
	РучнаяКорректировкаОбъект.Account = ТранзакцияHOBОбъект.Account;
	РучнаяКорректировкаОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	РучнаяКорректировкаОбъект.Записать();
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, РучнаяКорректировкаОбъект.Ссылка);
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Результат = Ложь;
	
	Если Объект.ИмяФайла <> "" И ТипТранзакций <> ПредопределенноеЗначение("Перечисление.HOBTransactionType.ПустаяСсылка") И Период <> '00010101' Тогда
		
		ПрочитатьФайлНаСервере(Результат);
		
	КонецЕсли;
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'HOB first balances loaded'");
	ИначеЕсли ТаблицаКоллизий.Количество() <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'HOB first balances are not loaded, add the missing data and download it again'");
	Иначе
		ТекстСообщения = НСтр("ru = 'HOB first balances are not loaded, incorrect file format or parameters'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	Если ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		ЗаполнитьСтруктуруКолонокJVПоУмолчанию();
	//ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
	//	ЗаполнитьСтруктуруКолонокAccrualsПоУмолчанию();
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		ЗаполнитьСтруктуруКолонокReceivablesПоУмолчанию();
	КонецЕсли;
	
	//ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	//ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	//ТипДата = Новый ОписаниеТипов("Дата");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокJVПоУмолчанию()
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 1;
	
	// Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Client";
	СтрокаТЗ.ИмяКолонки = "Client";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 2;
	
	// INN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INN";
	СтрокаТЗ.ИмяКолонки = "INN";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 3;
	
	// CompanyCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "CompanyCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 4;
	
	// CompanyDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyDesc";
	СтрокаТЗ.ИмяКолонки = "CompanyDesc";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 5;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 6;
	
	// LocationCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationCode";
	СтрокаТЗ.ИмяКолонки = "LocationCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 7;
	
	// LocationDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationDesc";
	СтрокаТЗ.ИмяКолонки = "LocationDesc";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 8;
	
	// Amount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Amount";
	СтрокаТЗ.ИмяКолонки = "Amount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 9;
	
	// BaseAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseAmount";
	СтрокаТЗ.ИмяКолонки = "BaseAmount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 10;
	
	// AU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU";
	СтрокаТЗ.ИмяКолонки = "AU";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 11;
	
	// AUType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AUType";
	СтрокаТЗ.ИмяКолонки = "AUType";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 12;
	
	// SubSubSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSubSegment";
	СтрокаТЗ.ИмяКолонки = "SubSubSegment";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 13;
	
	// SubSubSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalEntity";
	СтрокаТЗ.ИмяКолонки = "LegalEntity";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 14;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокReceivablesПоУмолчанию()
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
		
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 1;
	
	// Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Client";
	СтрокаТЗ.ИмяКолонки = "Client";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 2;
	
	// INN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INN";
	СтрокаТЗ.ИмяКолонки = "INN";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 3;
	
	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 4;
	//
	// InvoiceType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceType";
	СтрокаТЗ.ИмяКолонки = "InvoiceType";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 5;
	
	// CompanyCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "CompanyCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 6;
	
	// CompanyDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyDesc";
	СтрокаТЗ.ИмяКолонки = "CompanyDesc";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 7;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 8;
	
	// LocationCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationCode";
	СтрокаТЗ.ИмяКолонки = "LocationCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 9;
	
	// LocationDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationDesc";
	СтрокаТЗ.ИмяКолонки = "LocationDesc";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 10;
	
	// Amount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Amount";
	СтрокаТЗ.ИмяКолонки = "Amount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 11;
	
	// BaseAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseAmount";
	СтрокаТЗ.ИмяКолонки = "BaseAmount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.НомерКолонки = 12;
	
	// SubSubSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSubSegment";
	СтрокаТЗ.ИмяКолонки = "SubSubSegment";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 13;
	
	// InvoiceNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceNumber";
	СтрокаТЗ.ИмяКолонки = "InvoiceNumber";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 14;
	
	// InvoiceDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceDate";
	СтрокаТЗ.ИмяКолонки = "InvoiceDate";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 15;
	
	// InvoiceCurrency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceCurrency";
	СтрокаТЗ.ИмяКолонки = "InvoiceCurrency";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 16;
	
	// InvoiceAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAmount";
	СтрокаТЗ.ИмяКолонки = "InvoiceAmount";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 17;
	
	// InvoiceAgreementCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAgreementCode";
	СтрокаТЗ.ИмяКолонки = "InvoiceAgreementCode";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 18;
	
	// InvoiceAgreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAgreement";
	СтрокаТЗ.ИмяКолонки = "InvoiceAgreement";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 19;
	
	// AU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU";
	СтрокаТЗ.ИмяКолонки = "AU";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 20;
	
	// AUType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AUType";
	СтрокаТЗ.ИмяКолонки = "AUType";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 21;
	
	// PaymentNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PaymentNumber";
	СтрокаТЗ.ИмяКолонки = "PaymentNumber";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 22;
	
	// PaymentDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PaymentDate";
	СтрокаТЗ.ИмяКолонки = "PaymentDate";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 23;
	
	// LegalEntity
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalEntity";
	СтрокаТЗ.ИмяКолонки = "LegalEntity";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 24;
	
	// FiscalInvoiceNo
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FiscalInvoiceNo";
	СтрокаТЗ.ИмяКолонки = "FiscalInvoiceNo";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 25;
	
	// FiscalInvoiceDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FiscalInvoiceDate";
	СтрокаТЗ.ИмяКолонки = "FiscalInvoiceDate";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 26;
	
	// InvoiceBilled
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceBilled";
	СтрокаТЗ.ИмяКолонки = "InvoiceBilled";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 27;

	// InvoiceID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceID";
	СтрокаТЗ.ИмяКолонки = "InvoiceID";
	СтрокаТЗ.Обязательная = Истина;
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.НомерКолонки = 28;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ЗаполнитьСтруктуруФайлаПоУмолчанию();
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля,ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьТаблицуОстатковНаСервере()
	
	НачатьТранзакцию();
	
	AmountTotal = 0;
	
	Отчет = Отчеты.ARDetailsAgeing.Создать();
	СКД = Отчет.СхемаКомпоновкиДанных;
	ИмяВарианта = "PowerBI";
	АктивизироватьВариантОтчета(СКД, ИмяВарианта);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	Отчет.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	//обязательные отборы
	ПараметрыДанных = Новый Соответствие;
	ПараметрыДанных.Вставить("Период", КонецДня(Дата));
	ИнициализироватьПараметрыДанных(Отчет.КомпоновщикНастроек, ПараметрыДанных);
	
	НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Source")).Поле;
	НовыйЭлементОтбора.ПравоеЗначение = Перечисления.ТипыСоответствий.Lawson;
	
	НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("TransactionType")).Поле;
	
	Если ТипКорректировки = Перечисления.ТипыКорректировкиРегистров.КорректировкаJV Тогда
		НовыйЭлементОтбора.ПравоеЗначение = "JV";
	ИначеЕсли ТипКорректировки = Перечисления.ТипыКорректировкиРегистров.КорректировкаCashBatch Тогда
		НовыйЭлементОтбора.ПравоеЗначение = "Payment";
	КонецЕсли;
	
	//пользоватательские отборы
	Если ЗначениеЗаполнено(MgmtGeomarket) Тогда
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("MgmtGeomarket")).Поле;
		НовыйЭлементОтбора.ПравоеЗначение = MgmtGeomarket;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Client) Тогда
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Client")).Поле;
		НовыйЭлементОтбора.ПравоеЗначение = Client;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Company) Тогда
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Company")).Поле;
		НовыйЭлементОтбора.ПравоеЗначение = Company;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Account) Тогда
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Account")).Поле;
		//НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлементОтбора.ПравоеЗначение = Account;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаемыеAU) И ЗначениеЗаполнено(AU) Тогда
		
		Группа = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		НовыйЭлементОтбора = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("AU")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		НовыйЭлементОтбора.ПравоеЗначение = ИсключаемыеAU;
		НовыйЭлементОтбора = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("AU")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлементОтбора.ПравоеЗначение = AU;
		
	ИначеЕсли ЗначениеЗаполнено(ИсключаемыеAU) Тогда
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("AU")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		НовыйЭлементОтбора.ПравоеЗначение = ИсключаемыеAU;
		
	ИначеЕсли ЗначениеЗаполнено(AU) Тогда
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("AU")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлементОтбора.ПравоеЗначение = AU;
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиДляКомпоновкиМакета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиДляКомпоновкиМакета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	// Создадим и инициализируем процессор вывода результата
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТЗ_Загружаемая = ТЗ.Скопировать(,"Source, MgmtGeomarket, Company, CustomerID, Client, Account, AU, TransactionType, ДатаДокумента, Document, Currency, AmountОстаток, BaseAmountОстаток");
	
	ТЗ_Загружаемая.Свернуть("Source, MgmtGeomarket, Company, CustomerID, Client, Account, AU, ДатаДокумента, Currency, Document", "AmountОстаток, BaseAmountОстаток");
	
	ТаблицаОстатков.Загрузить(ТЗ_Загружаемая);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОстатков(Команда)
	
	AmountTotal = 0;
	Элементы.СоздатьКорректировкуРегистров.Доступность = Истина;
	Если НЕ ЗначениеЗаполнено(ТипКорректировки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("The adjustment type is not filled.");
	Иначе
		ЗаполнитьТаблицуОстатковНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура АктивизироватьВариантОтчета(СКД, ИмяВарианта)
	
	Если Не ЗначениеЗаполнено(ИмяВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	Вариант = СКД.ВариантыНастроек.Найти(ИмяВарианта);
	
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыДляУдаления = Новый Массив;
	
	Для каждого ТекВариант Из СКД.ВариантыНастроек Цикл
		Если ТекВариант.Имя <> ИмяВарианта Тогда
			ВариантыДляУдаления.Добавить(ТекВариант);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекВариант Из ВариантыДляУдаления Цикл
		СКД.ВариантыНастроек.Удалить(ТекВариант);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыДанных(КомпоновщикНастроек, ПараметрыДанных)
	
	Если ПараметрыДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекПараметр Из ПараметрыДанных Цикл
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ТекПараметр.Ключ);
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ТекПараметр.Значение;
			Параметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		Если СтрокаТаблицы.Apply Тогда
			СтрокаТаблицы.Apply = Ложь;
			AmountTotal = AmountTotal - СтрокаТаблицы.AmountОстаток;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		Если Элементы.ТаблицаОстатков.ПроверитьСтроку(СтрокаТаблицы.ПолучитьИдентификатор()) Тогда
			Если НЕ СтрокаТаблицы.Apply Тогда
				СтрокаТаблицы.Apply = Истина;
				AmountTotal = AmountTotal + СтрокаТаблицы.AmountОстаток;
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковApplyПриИзменении(Элемент)
	
	Если Элементы.ТаблицаОстатков.ТекущиеДанные.Apply Тогда
		AmountTotal = AmountTotal + Элементы.ТаблицаОстатков.ТекущиеДанные.AmountОстаток;
	Иначе
		AmountTotal = AmountTotal - Элементы.ТаблицаОстатков.ТекущиеДанные.AmountОстаток;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуРегистров(Команда)
	СоздатьКорректировкуРегистровНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкуРегистровНаСервере()
	
	ТЗ = ТаблицаОстатков.Выгрузить(,"Apply,Source,Currency,Client,CustomerID,Company,Account,AU,Document,BaseAmountОстаток,AmountОстаток");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Apply", Истина);
	
	ТЗ_ДляКорректировки = ТЗ.Скопировать(Отбор,"Source,Currency,Client,CustomerID,Company,Account,AU,Document,BaseAmountОстаток,AmountОстаток");
	
	ТЗ_ДляПроверки = ТЗ_ДляКорректировки.Скопировать(,"Source,Currency,Client,CustomerID,Company,Account,AU,BaseAmountОстаток,AmountОстаток");
	ТЗ_ДляПроверки.Свернуть("Source,Currency,Client,CustomerID,Company,Account,AU","BaseAmountОстаток,AmountОстаток");
	
	//Проверяем, что в тотале при группировке по всей аналитике кроме документа суммы нулевые, в противном случае ругаетсмся, так как это уже не 
	//корректировка документа, а переносы сумм по разной аналитике, чего нельзя допустить в данной обработке
	ПроверкаПройдена = Истина;
	СообщениеОбОшибке = "";
	
	Для Каждого СтрокаТЗ Из ТЗ_ДляПроверки Цикл
		
		Если Макс(СтрокаТЗ.AmountОстаток, -СтрокаТЗ.AmountОстаток) > 1 Тогда
			ПроверкаПройдена= Ложь;
			СообщениеОбОшибке =  СообщениеОбОшибке + "For " + СтрокаТЗ.Source + " " + СтрокаТЗ.Currency + СтрокаТЗ.Client + " "
				+ СтрокаТЗ.Company + " " + СтрокаТЗ.Account + " " + СтрокаТЗ.AU + " total sum: " + СтрокаТЗ.AmountОстаток + 
				". Adjustment banned!" + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверкаПройдена И ТЗ_ДляКорректировки.Количество() > 0 Тогда
		СоздатьДокументКорректировкиРегистров(ТЗ_ДляКорректировки);
	ИначеЕсли СообщениеОбОшибке = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("No rows selected for adjustment.");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументКорректировкиРегистров(ТЗ_ДляКорректировки)
	
	НачатьТранзакцию();
	
	УстановитьПривилегированныйРежим(Истина);
	Док = Документы.КорректировкаРегистров.СоздатьДокумент();
	Док.ДополнительныеСвойства.Вставить("РазрешитьСозданиеДокументаБезРеверса", Истина);
	Док.Дата = КонецМесяца(Дата);
	Док.Ответственный = Пользователи.ТекущийПользователь();
	Если ТипКорректировки = Перечисления.ТипыКорректировкиРегистров.КорректировкаJV Тогда
		
		Док.Комментарий = "JV Adjustment";
		Док.ТипКорректировки = Перечисления.ТипыКорректировкиРегистров.КорректировкаJV;
		
		Для Каждого СтрокаТЗ Из ТЗ_ДляКорректировки Цикл
			
			Движение = Док.Движения.ManualTransactions.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТЗ);
			Движение.Период = КонецМесяца(Дата);
			Движение.РучнаяКорректировка = СтрокаТЗ.Document;
			Движение.ClientID = СтрокаТЗ.CustomerID;
			Движение.Amount = -СтрокаТЗ.AmountОстаток;
			Движение.BaseAmount = -СтрокаТЗ.BaseAmountОстаток;
			
		КонецЦикла;
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "ManualTransactions";
		
		Док.Движения.ManualTransactions.Записывать = Истина;
		
	Иначе
		
		Док.Комментарий = "CashBatch Adjustment";
		Док.ТипКорректировки = Перечисления.ТипыКорректировкиРегистров.КорректировкаCashBatch;
		
		Для Каждого СтрокаТЗ Из ТЗ_ДляКорректировки Цикл
			
			ДвижениеCash = Док.Движения.UnallocatedCash.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеCash, СтрокаТЗ);
			ДвижениеCash.Период = КонецМесяца(Дата);
			ДвижениеCash.CashBatch = СтрокаТЗ.Document;
			ДвижениеCash.ClientID = СтрокаТЗ.CustomerID;
			ДвижениеCash.Amount = СтрокаТЗ.AmountОстаток;
			ДвижениеCash.BaseAmount = СтрокаТЗ.BaseAmountОстаток;
			
			ДвижениеPayments = Док.Движения.Payments.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеPayments, СтрокаТЗ);
			ДвижениеPayments.Период = КонецМесяца(Дата);
			ДвижениеPayments.CashBatch = СтрокаТЗ.Document;
			ДвижениеPayments.ClientID = СтрокаТЗ.CustomerID;
			ДвижениеPayments.Amount = СтрокаТЗ.AmountОстаток;
			
		КонецЦикла;
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "UnallocatedCash";
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "Payments";
		
		Док.Движения.UnallocatedCash.Записывать = Истина;
		Док.Движения.Payments.Записывать = Истина;
		
	КонецЕсли;
	
	Док.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Correction completed!");
	//Элементы.СоздатьКорректировкуРегистров.Доступность = Ложь;
	ЗаполнитьТаблицуОстатковНаСервере();
	

КонецПроцедуры


&НаСервере
Процедура ПроставитьОтметкуНаОбнуляющихсяСтрокахНаСервере()
	
	ТЗ = ТаблицаОстатков.Выгрузить(,"Source,Currency,Client,CustomerID,Company,Account,AU,Document,AmountОстаток");
	
	ТЗ.Свернуть("Source,Currency,Client,CustomerID,Company,Account,AU","AmountОстаток");
	
	Отбор = Новый Структура;
	Отбор.Вставить("AmountОстаток", 0);
	
	ТЗ_АналитикаВТоталеНоль = ТЗ.Скопировать(Отбор,"Source,Currency,Client,CustomerID,Company,Account,AU,AmountОстаток");
	ТЗ_АналитикаВТоталеНоль.Свернуть("Source,Currency,Client,CustomerID,Company,Account,AU");
	
	Отбор = Новый Структура;
	
	Для каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		
		Отбор.Очистить();
		Отбор.Вставить("Source",СтрокаТаблицы.Source);
		Отбор.Вставить("Currency",СтрокаТаблицы.Currency);
		Отбор.Вставить("Client",СтрокаТаблицы.Client);
		Отбор.Вставить("CustomerID",СтрокаТаблицы.CustomerID);
		Отбор.Вставить("Company",СтрокаТаблицы.Company);
		Отбор.Вставить("Account",СтрокаТаблицы.Account);
		Отбор.Вставить("AU",СтрокаТаблицы.AU);
		Строки = ТЗ_АналитикаВТоталеНоль.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			СтрокаТаблицы.Apply = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПроставитьОтметкуНаОбнуляющихсяСтроках(Команда)
	ПроставитьОтметкуНаОбнуляющихсяСтрокахНаСервере();
КонецПроцедуры


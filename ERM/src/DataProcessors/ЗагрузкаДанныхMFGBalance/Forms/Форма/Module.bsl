
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = "Excel (*.xlsx)";
	ДиалогОткрытияФайла.Заголовок = "Select a file to loading";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайла = ВыбранныеФайлы[0];
		АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), УникальныйИдентификатор);
		АдресФайлаВХранилище = АдресВХранилище;
		ЗаполнитьСписокЛистовЭкселя(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокЛистовЭкселя(ЗаполнитьЛист = Ложь)
	
	СписокЛистов = Новый Массив;
	
	ФайлЭксель = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Элементы.ЛистФайла.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	
	Если ЗаполнитьЛист Тогда
		
		Если СписокЛистов.Количество() = 1 Тогда
			ЛистФайла = СписокЛистов[0];
		ИначеЕсли СписокЛистов.Количество() > 1 Тогда
			Для каждого Лист Из СписокЛистов Цикл
				Если СтрНайти(Лист,"XR294") > 0 Тогда
					ЛистФайла = Лист;
				КонецЕсли;
			КонецЦикла;
		Конецесли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Результат)
	
	Если Объект.ИмяФайла = "" Тогда
		Сообщить("The file is not selected");
	ИначеЕсли Период = Дата(1,1,1) Тогда
		Сообщить("Specify the period downloaded balances");
	Иначе
		
		ТаблицаКоллизий.Очистить();
		
		ДанныеДляЗаполнения = Новый Структура();
		ТекстОшибки = "";
		
		ДД = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
		ДД.Записать(ПутьКФайлу);
		
		Connection = Новый COMОбъект("ADODB.Connection");
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
		
		Попытка
			Connection.Open(СтрокаПодключения);
		Исключение
			Попытка
				СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
				Connection.Open(СтрокаПодключения);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибки);
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
		КонецПопытки;
		
		rs = Новый COMObject("ADODB.RecordSet");
		rs.ActiveConnection = Connection;
		sqlString = "select * from [" + ЛистФайла + "]";
		rs.Open(sqlString);
		
		СоответствиеКолонок = Новый Соответствие;
		Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
			СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
		КонецЦикла;
		
		ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
		
		rs.MoveFirst();
		
		ВеличинаСдвига = ПерваяСтрокаДанных - 1 - ?(ИменаКолонокВПервойСтроке, 1, 1);
		Если ВеличинаСдвига <> 0 Тогда
			rs.Move(ВеличинаСдвига);
		КонецЕсли;
		
		ТекНомерСтроки = ПерваяСтрокаДанных;
		
		ТипСтрока = Тип("Строка");
		ТипЧисло = Тип("Число");
		
		Пока Не rs.EOF Цикл
			
			СтрокаДанных = ТаблицаДанных.Добавить();
			СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
			
			Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
				
				Попытка
					ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
					Если ЭлементСоответствия.Значение = "Invoice" И ТекЗначение = Null Тогда
						Возврат;
					КонецЕсли;
				Исключение
					ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
					ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресВХранилище);
					Возврат;
				КонецПопытки;
					
				Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
				ИначеЕсли ТипЗнч(СтрокаДанных[ЭлементСоответствия.Ключ]) =  ТипЗнч("Строка")Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = Формат(ТекЗначение, "ЧРГ=; ЧН=0; ЧГ=0");
				Иначе
					СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
			rs.MoveNext();
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		КонецЦикла;
		
		rs.Close();
		Connection.Close();
		УдалитьФайлы(ПутьКФайлу);
		
		Результат = ПроверитьКорректностьДанных(ТаблицаДанных);
		
		Если Результат Тогда
			СоздатьЗаписиРегистра(ТаблицаДанных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Результат = Ложь;
	
	ПрочитатьФайлНаСервере(Результат);
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'Balances loaded'");
	ИначеЕсли ТаблицаКоллизий.Количество() = 0 Тогда
		ТекстСообщения = "The column ""Invoice"" is not filled. Check the downloaded data.";
	Иначе	
		ТекстСообщения = НСтр("ru = 'Balances are not loaded, add the missing data and download it again'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// AcctUnit
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AcctUnit";
	СтрокаТЗ.ИмяКолонки = "AcctUnit";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;

	// TransType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransType";
	СтрокаТЗ.ИмяКолонки = "TransType";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// Customer
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Customer";
	СтрокаТЗ.ИмяКолонки = "Customer";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// TransDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransDate";
	СтрокаТЗ.ИмяКолонки = "TransDate";
	СтрокаТЗ.ТипКолонки = ТипДата;
	СтрокаТЗ.Обязательная = Истина;

	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	ТекМассивТипов = Новый Массив;
	ТекМассивТипов.Добавить(Тип("Строка"));
	//ТекМассивТипов.Добавить(Тип("Число"));
	СтрокаТЗ.ТипКолонки = Новый ОписаниеТипов(ТекМассивТипов, , Новый КвалификаторыСтроки(100));
	СтрокаТЗ.Обязательная = Истина;
	
	// CurrencyCd
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrigCurrency";
	СтрокаТЗ.ИмяКолонки = "OrigCurrency";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
	// RemAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "RemAmount";
	СтрокаТЗ.ИмяКолонки = "RemAmount";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// BaseCurEquiv
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseCurEquiv";
	СтрокаТЗ.ИмяКолонки = "BaseCurEquiv";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// OrigAmt
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrigAmt";
	СтрокаТЗ.ИмяКолонки = "OrigAmt";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	СтрокаТЗ.Обязательная = Истина;
	
	// Agreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "RefField";
	СтрокаТЗ.ИмяКолонки = "RefField";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	СтрокаТЗ.Обязательная = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСтруктуруФайлаПоУмолчанию();
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля, ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Функция ПроверитьКорректностьДанных(ТаблицаДанных)
	
	Результат = Ложь;
	ПериодНач = НачалоМесяца(Период);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.OrigCurrency КАК CurrencyCode,
	|	ТаблицаИсходныхДанных.Account,
	|	ТаблицаИсходныхДанных.Company,
	|	ТаблицаИсходныхДанных.AcctUnit,
	|	ТаблицаИсходныхДанных.Customer
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных";
	;
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	врТЗТаблицаДанных.CurrencyCode КАК Идентификатор
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО врТЗТаблицаДанных.CurrencyCode = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И НЕ врТЗТаблицаДанных.CurrencyCode = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	врТЗТаблицаДанных.Account
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО врТЗТаблицаДанных.Account = Lawson.КодЧислом
		|			И (НЕ Lawson.ПометкаУдаления)
		|ГДЕ
		|	врТЗТаблицаДанных.Account <> 0
		|	И Lawson.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	врТЗТаблицаДанных.Company
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И врТЗТаблицаДанных.Company = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	врТЗТаблицаДанных.Company <> 0
		|	И Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Client"",
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client),
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	врТЗТаблицаДанных.Customer
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО врТЗТаблицаДанных.Customer = Контрагенты.CRMID
		|ГДЕ
		|	Контрагенты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AcctUnit = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AcctUnit = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	врТЗТаблицаДанных.AcctUnit
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AcctUnit = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО врТЗТаблицаДанных.AcctUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И врТЗТаблицаДанных.AcctUnit = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО врТЗТаблицаДанных.Account = Lawson.КодЧислом
		|			И (НЕ Lawson.ПометкаУдаления)
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО врТЗТаблицаДанных.Company = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)"
		;
	
	Запрос.УстановитьПараметр("Период", ПериодНач);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.MFG);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий1 = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.MFG;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если ВыборкаЛокаций.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.MFG;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий1.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.MFG;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий1", ТаблицаКоллизий1);
	ТаблицаКоллизий.Загрузить(ТаблицаКоллизий1);
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура СоздатьЗаписиРегистра(ТаблицаДанных)
	
	УстановитьПривилегированныйРежим(Истина);

	ТаблицаДанных.Колонки.Добавить("InvoiceNo", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		СтрокаТЗ.InvoiceNo = ?(ЗначениеЗаполнено(СтрокаТЗ.Invoice), "MF-" + СтрокаТЗ.Invoice, "MF-#empty#") + ";" + СтрокаТЗ.Customer + ";" + Формат(Год(СтрокаТЗ.TransDate), "ЧГ=");
	КонецЦикла;
	
	ПериодНач = НачалоМесяца(Период);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.OrigCurrency КАК CurrencyCode,
	|	ТаблицаИсходныхДанных.Account КАК AccountCode,
	|	ТаблицаИсходныхДанных.Company КАК CompanyCode,
	|	ТаблицаИсходныхДанных.AcctUnit,
	|	ТаблицаИсходныхДанных.TransType,
	|	ТаблицаИсходныхДанных.TransDate,
	|	ТаблицаИсходныхДанных.RefField,
	|	ТаблицаИсходныхДанных.Invoice,
	|	ТаблицаИсходныхДанных.InvoiceNo,
	|	ТаблицаИсходныхДанных.Customer,
	|	ТаблицаИсходныхДанных.OrigAmt,
	|	ТаблицаИсходныхДанных.RemAmount,
	|	ТаблицаИсходныхДанных.BaseCurEquiv
	|ПОМЕСТИТЬ врТЗТаблицаДанных
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ТаблицаИсходныхДанных";
	
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиИнвойсов.ArInvoice,
	|	КлючиИнвойсов.Company,
	|	КлючиИнвойсов.Invoice
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
	|		ПО врТЗТаблицаДанных.InvoiceNo = КлючиИнвойсов.ArInvoice
	|			И врТЗТаблицаДанных.CompanyCode = КлючиИнвойсов.Company.Код
	|			И (врТЗТаблицаДанных.TransType = ""I"")
	|			И (КлючиИнвойсов.Source = &Source)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиSalesOrders.ArInvoice,
	|	КлючиSalesOrders.Company,
	|	КлючиSalesOrders.SalesOrder
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrders
	|		ПО врТЗТаблицаДанных.InvoiceNo = КлючиSalesOrders.ArInvoice
	|			И врТЗТаблицаДанных.CompanyCode = КлючиSalesOrders.Company.Код
	|			И (врТЗТаблицаДанных.TransType = ""A"")
	|			И (КлючиSalesOrders.Company.Source = &Source)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФайла.Invoice КАК ArBatchNbr,
	|	CashBatch.Company,
	|	CashBatch.Prepayment,
	|	CashBatch.Ссылка КАК CashBatch
	|ИЗ
	|	Документ.CashBatch КАК CashBatch
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТЗТаблицаДанных КАК ВТ_ДанныеФайла
	|		ПО (CashBatch.Source = &Source)
	|			И CashBatch.DocID = ВТ_ДанныеФайла.InvoiceNo
	|			И CashBatch.Company.Код = ВТ_ДанныеФайла.CompanyCode
	|			И (ВТ_ДанныеФайла.TransType = ""P"")
	|			И (НЕ CashBatch.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиРучныхКорректировок.Company,
	|	КлючиРучныхКорректировок.Client,
	|	КлючиРучныхКорректировок.Location,
	|	КлючиРучныхКорректировок.SubSubSegment,
	|	КлючиРучныхКорректировок.AU,
	|	КлючиРучныхКорректировок.Account,
	|	КлючиРучныхКорректировок.Currency,
	|	КлючиРучныхКорректировок.РучнаяКорректировка
	|ИЗ
	|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
	|ГДЕ
	|	КлючиРучныхКорректировок.Source = &Source
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
	|ИЗ
	|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
	|			&Период,
	|			ТипСоответствия = &Source
	|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
	|				И Идентификатор В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ДанныеФайла.CurrencyCode
	|					ИЗ
	|						врТЗТаблицаДанных КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Source КАК Source,
	|	врТЗТаблицаДанных.OrigAmt,
	|	врТЗТаблицаДанных.RemAmount КАК Amount,
	|	врТЗТаблицаДанных.BaseCurEquiv КАК BaseAmount,
	|	врТЗТаблицаДанных.TransType,
	|	врТЗТаблицаДанных.TransDate,
	|	врТЗТаблицаДанных.RefField,
	|	врТЗТаблицаДанных.Customer КАК CustomerNumber,
	|	ВЫБОР
	|		КОГДА врТЗТаблицаДанных.TransType = ""A""
	|				И врТЗТаблицаДанных.Invoice = """"
	|			ТОГДА ""MF-#empty#""
	|		ИНАЧЕ врТЗТаблицаДанных.Invoice
	|	КОНЕЦ КАК Invoice,
	|	врТЗТаблицаДанных.InvoiceNo КАК InvoiceNo,
	|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
	|	Организации.Ссылка КАК Company,
	|	КостЦентры.Ссылка КАК AU,
	|	Lawson.Ссылка КАК Account,
	|	КостЦентры.Сегмент КАК SubSubSegment,
	|	КостЦентры.ПодразделениеОрганизации КАК Location,
	|	Контрагенты.Ссылка КАК Client
	|ИЗ
	|	врТЗТаблицаДанных КАК врТЗТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
	|		ПО врТЗТаблицаДанных.CurrencyCode = ВТ_СоответствиеCurrency.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО врТЗТаблицаДанных.CompanyCode = Организации.Код
	|			И (Организации.Source = &Source)
	|			И (НЕ Организации.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
	|		ПО врТЗТаблицаДанных.AccountCode = Lawson.КодЧислом
	|			И (НЕ Lawson.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
	|		ПО врТЗТаблицаДанных.AcctUnit = КостЦентры.Код
	|			И (НЕ КостЦентры.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (НЕ Контрагенты.ПометкаУдаления)
	|			И врТЗТаблицаДанных.Customer = Контрагенты.CRMID";
	
	Запрос.УстановитьПараметр("Период", ПериодНач);
	Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.MFG);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшИнвойсов = РезультатЗапроса[0].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice, Company");
	
	КэшSalesOrders = РезультатЗапроса[1].Выгрузить();
	КэшSalesOrders.Индексы.Добавить("ArInvoice, Company");
	
	КэшCashBatch = РезультатЗапроса[2].Выгрузить();
	КэшCashBatch.Индексы.Добавить("ARBatchNbr, Company, Prepayment");
	
	КэшРучныхКорректировок = РезультатЗапроса[3].Выгрузить();
	КэшРучныхКорректировок.Индексы.Добавить("Company, Client, Location, SubSubSegment, AU, Account, Currency");
	
	СтруктураПоискаInvoice = Новый Структура("ArInvoice, Company");
	СтруктураПоискаBatch = Новый Структура("ARBatchNbr, Prepayment");
	СтруктураПоискаSO = Новый Структура("ArInvoice, Company");
	СтруктураПоискаJV = Новый Структура("Company, Client, Location, SubSubSegment, AU, Account, Currency");
	
	ВыборкаДанные = РезультатЗапроса[5].Выбрать();
	
	НачатьТранзакцию();
	
	СформироватьЗаписиПоСписаниюТекущихОстатков();
	
	ARBalance = РегистрыСведений.ARBalance;
	НаборЗаписей = ARBalance.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Source.Установить(Перечисления.ТипыСоответствий.MFG);
	НаборЗаписей.Отбор.Период.Установить(ПериодНач);
	НаборЗаписей.Записать(Истина);
	
	ТЗ_ARBalance = НаборЗаписей.ВыгрузитьКолонки();
	
	ТипТранзакции = "";
	
	Док = Документы.КорректировкаРегистров.СоздатьДокумент();
	Док.ДополнительныеСвойства.Вставить("РазрешитьСозданиеДокументаБезРеверса", Истина);
	Док.Дата = КонецМесяца(Период);
	Док.Комментарий = "Ввод остатков по MFG";
	Док.Ответственный = Пользователи.ТекущийПользователь();
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.MFG);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДанные.Следующий() Цикл
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДанные, ВыборкаДанные.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		//Если ВыборкаДанные.TransType = "P" ИЛИ ВыборкаДанные.TransType = "I" Тогда
		//	
		//	Если ВыборкаДанные.TransType = "I" Тогда
		//		
		//		Инвойс = КэшИнвойсов.Найти(ВыборкаДанные.Invoice, "ArInvoice");
		//		Если Инвойс = Неопределено Тогда
		//			ПолеИнвойс =  ВыборкаДанные.Invoice;
		//		Иначе
		//			ПолеИнвойс = Инвойс.Invoice;
		//		КонецЕсли;
		//		
		//		ТипТранзакции = "I";
		//		
		//	ИначеЕсли ВыборкаДанные.TransType = "P" Тогда
		//		
		//		СтруктураПоискаBatch.ARBatchNbr = ВыборкаДанные.Invoice;
		//		СтруктураПоискаBatch.Prepayment = ВыборкаДанные.Account = ПланыСчетов.Lawson.AdvancesFromCustomers;
		//		
		//		СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
		//		Если СтрокиCashBatch.Количество() = 0 Тогда
		//			ПолеИнвойс =  ВыборкаДанные.Invoice;
		//		Иначе
		//			ПолеИнвойс = СтрокиCashBatch[0].CashBatch;
		//		КонецЕсли;
		//		
		//		ТипТранзакции = "P";
		//		
		//	Иначе
		//		
		//		ПолеИнвойс = ВыборкаДанные.Invoice;
		//		
		//	КонецЕсли;
		//	
		//	НоваяЗапись = НаборЗаписей.Добавить();
		//	НоваяЗапись.Период = ПериодНач;
		//	НоваяЗапись.Location = ВыборкаДанные.Location;
		//	НоваяЗапись.Client = ВыборкаДанные.Client;
		//	НоваяЗапись.Company = ВыборкаДанные.Company;
		//	НоваяЗапись.Source = Перечисления.ТипыСоответствий.Lawson;
		//	НоваяЗапись.SubSubSegment = ВыборкаДанные.SubSubSegment;
		//	НоваяЗапись.Invoice = ПолеИнвойс;
		//	НоваяЗапись.TransType = ТипТранзакции;
		//	НоваяЗапись.Account = ВыборкаДанные.Account;
		//	НоваяЗапись.Currency = ВыборкаДанные.Currency;
		//	НоваяЗапись.AU = ВыборкаДанные.AU;
		//	НоваяЗапись.Amount = ВыборкаДанные.RemAmount;
		//	
		//КонецЕсли;
		//
		//НаборЗаписей.Записать();
		
		Если ВыборкаДанные.TransType = "I" Тогда
			
			//СтрокаКэша = КэшИнвойсов.Найти("RD-" + ВыборкаДанные.Invoice, "ArInvoice");
			СтруктураПоискаInvoice.ArInvoice = ВыборкаДанные.InvoiceNo;
			СтруктураПоискаInvoice.Company = ВыборкаДанные.Company;
			СтрокиКэша = КэшИнвойсов.НайтиСтроки(СтруктураПоискаInvoice);
			Если СтрокиКэша.Количество() = 0 Тогда
				ТекИнвойс = СоздатьИнвойс(ВыборкаДанные);
				СтрокаКэша = КэшИнвойсов.Добавить();
				//СтрокаКэша.ArInvoice = "RD-" + ВыборкаДанные.Invoice;
				СтрокаКэша.ArInvoice = ВыборкаДанные.InvoiceNo;
				СтрокаКэша.Company = ВыборкаДанные.Company;
				СтрокаКэша.Invoice = ТекИнвойс;
			Иначе
				ТекИнвойс = СтрокиКэша[0].Invoice;
			КонецЕсли;
			
			Движение = Док.Движения.BilledAR.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаДанные);
			Движение.Период = Док.Дата;
			Движение.Invoice = ТекИнвойс;
			
			СтрокаARBalance = ТЗ_ARBalance.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаARBalance, Движение);
			СтрокаARBalance.TransType = ВыборкаДанные.TransType;
			СтрокаARBalance.Invoice = ТекИнвойс;
			
		ИначеЕсли ВыборкаДанные.TransType = "P" Тогда
			
			СтруктураПоискаBatch.ARBatchNbr = ВыборкаДанные.Invoice;
			СтруктураПоискаBatch.Company = ВыборкаДанные.Company;
			СтруктураПоискаBatch.Prepayment = ВыборкаДанные.Account = ПланыСчетов.Lawson.AdvancesFromCustomers;
			
			СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
			Если СтрокиCashBatch.Количество() = 0 Тогда
				ТекCashBatch = СоздатьCashBatch(ВыборкаДанные, СтруктураПоискаBatch.Prepayment);
				СтрокаКэша = КэшCashBatch.Добавить();
				//СтрокаКэша.ARBatchNbr = ВыборкаДанные.Invoice;
				СтрокаКэша.ARBatchNbr = ВыборкаДанные.InvoiceNo;
				СтрокаКэша.Company = ВыборкаДанные.Company;
				СтрокаКэша.Prepayment = СтруктураПоискаBatch.Prepayment;
				СтрокаКэша.CashBatch = ТекCashBatch;
			Иначе
				ТекCashBatch = СтрокиCashBatch[0].CashBatch;
			КонецЕсли;
			
			Движение = Док.Движения.UnallocatedCash.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаДанные);
			Движение.Период = Док.Дата;
			Движение.CashBatch = ТекCashBatch;
			
			СтрокаARBalance = ТЗ_ARBalance.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаARBalance, Движение);
			СтрокаARBalance.TransType = ВыборкаДанные.TransType;
			СтрокаARBalance.Invoice = ТекCashBatch;
			
		ИначеЕсли ВыборкаДанные.TransType = "A" Тогда
			
			//СтруктураПоискаSO.ArInvoice = ВыборкаДанные.Invoice;
			СтруктураПоискаSO.ArInvoice = ВыборкаДанные.InvoiceNo;
			СтруктураПоискаSO.Company = ВыборкаДанные.Company;
			
			СтрокиSO = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSO);
			Если СтрокиSO.Количество() = 0 Тогда
				ТекSalesOrder = СоздатьSalesOrder(ВыборкаДанные);
				СтрокаКэша = КэшSalesOrders.Добавить();
				//СтрокаКэша.ArInvoice = ВыборкаДанные.Invoice;
				СтрокаКэша.ArInvoice = ВыборкаДанные.InvoiceNo;
				СтрокаКэша.Company = ВыборкаДанные.Company;
				СтрокаКэша.SalesOrder = ТекSalesOrder;
			Иначе
				ТекSalesOrder = СтрокиSO[0].SalesOrder;
			КонецЕсли;
			
			Движение = Док.Движения.UnbilledAR.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаДанные);
			Движение.Период = Док.Дата;
			Движение.SalesOrder = ТекSalesOrder;
			
			СтрокаARBalance = ТЗ_ARBalance.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаARBalance, Движение);
			СтрокаARBalance.TransType = ВыборкаДанные.TransType;
			СтрокаARBalance.Invoice = ТекSalesOrder;
			
		ИначеЕсли ВыборкаДанные.TransType = "JV" Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаJV, ВыборкаДанные);
			
			СтрокиJV = КэшРучныхКорректировок.НайтиСтроки(СтруктураПоискаJV);
			Если СтрокиJV.Количество() = 0 Тогда
				ТекJV = СоздатьРучнуюКорректировку(ВыборкаДанные);
				СтрокаКэша = КэшРучныхКорректировок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКэша, СтруктураПоискаJV);
				СтрокаКэша.РучнаяКорректировка = ТекJV;
			Иначе
				ТекJV = СтрокиJV[0].РучнаяКорректировка;
			КонецЕсли;
			
			Движение = Док.Движения.ManualTransactions.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаДанные);
			Движение.Период = Док.Дата;
			Движение.РучнаяКорректировка = ТекJV;
			
			СтрокаARBalance = ТЗ_ARBalance.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаARBalance, Движение);
			СтрокаARBalance.TransType = ВыборкаДанные.TransType;
			СтрокаARBalance.Invoice = ТекJV;
			
		Иначе
			
			ВызватьИсключение "Unknown transaction type";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Док.Движения.UnbilledAR.Количество() > 0 Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "UnbilledAR";
		
		Док.Движения.UnbilledAR.Записывать = Истина;
		
	КонецЕсли;
	
	Если Док.Движения.BilledAR.Количество() > 0 Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "BilledAR";
		
		Док.Движения.BilledAR.Записывать = Истина;
		
	КонецЕсли;
	
	Если Док.Движения.UnallocatedCash.Количество() > 0 Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "UnallocatedCash";
		
		Док.Движения.UnallocatedCash.Записывать = Истина;
		
	КонецЕсли;
	
	Если Док.Движения.ManualTransactions.Количество() > 0 Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "ManualTransactions";
		
		Док.Движения.ManualTransactions.Записывать = Истина;
		
	КонецЕсли;
	
	Док.Записать();
	
	ТЗ_ARBalance.Свернуть("Период, Client, Company, Source, Location, SubSubSegment, TransType, Invoice, Account, Currency, AU", "Amount");
	ТЗ_ARBalance.ЗаполнитьЗначения(ПериодНач, "Период");
	НаборЗаписей.Загрузить(ТЗ_ARBalance);
	НаборЗаписей.Записать(Ложь);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаписиПоСписаниюТекущихОстатков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	UnbilledARОстатки.Client,
		|	UnbilledARОстатки.Company,
		|	UnbilledARОстатки.Source,
		|	UnbilledARОстатки.Location,
		|	UnbilledARОстатки.SubSubSegment,
		|	UnbilledARОстатки.SalesOrder,
		|	UnbilledARОстатки.Account,
		|	UnbilledARОстатки.Currency,
		|	UnbilledARОстатки.AU,
		|	UnbilledARОстатки.AmountОстаток КАК Amount,
		|	UnbilledARОстатки.BaseAmountОстаток КАК BaseAmount
		|ИЗ
		|	РегистрНакопления.UnbilledAR.Остатки(&ПериодОстатков, Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.MFG)) КАК UnbilledARОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BilledARОстатки.Client,
		|	BilledARОстатки.Company,
		|	BilledARОстатки.Source,
		|	BilledARОстатки.Location,
		|	BilledARОстатки.SubSubSegment,
		|	BilledARОстатки.Invoice,
		|	BilledARОстатки.Account,
		|	BilledARОстатки.Currency,
		|	BilledARОстатки.AU,
		|	BilledARОстатки.AmountОстаток КАК Amount,
		|	BilledARОстатки.BaseAmountОстаток КАК BaseAmount
		|ИЗ
		|	РегистрНакопления.BilledAR.Остатки(&ПериодОстатков, Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.MFG)) КАК BilledARОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	UnallocatedCashОстатки.Client,
		|	UnallocatedCashОстатки.Company,
		|	UnallocatedCashОстатки.Source,
		|	UnallocatedCashОстатки.Location,
		|	UnallocatedCashОстатки.SubSubSegment,
		|	UnallocatedCashОстатки.CashBatch,
		|	UnallocatedCashОстатки.Account,
		|	UnallocatedCashОстатки.Currency,
		|	UnallocatedCashОстатки.AU,
		|	UnallocatedCashОстатки.AmountОстаток КАК Amount,
		|	UnallocatedCashОстатки.BaseAmountОстаток КАК BaseAmount
		|ИЗ
		|	РегистрНакопления.UnallocatedCash.Остатки(&ПериодОстатков, Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.MFG)) КАК UnallocatedCashОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ManualTransactionsОстатки.Company,
		|	ManualTransactionsОстатки.Source,
		|	ManualTransactionsОстатки.Location,
		|	ManualTransactionsОстатки.SubSubSegment,
		|	ManualTransactionsОстатки.РучнаяКорректировка,
		|	ManualTransactionsОстатки.Account,
		|	ManualTransactionsОстатки.Currency,
		|	ManualTransactionsОстатки.AU,
		|	ManualTransactionsОстатки.AmountОстаток КАК Amount,
		|	ManualTransactionsОстатки.BaseAmountОстаток КАК BaseAmount
		|ИЗ
		|	РегистрНакопления.ManualTransactions.Остатки(&ПериодОстатков, Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.MFG)) КАК ManualTransactionsОстатки";
	
	Запрос.УстановитьПараметр("ПериодОстатков", КонецМесяца(Период) + 1);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатUnbilledAR = МассивРезультатов[0];
	РезультатBilledAR = МассивРезультатов[1];
	РезультатUnallocatedCash = МассивРезультатов[2];
	РезультатManualTransactions = МассивРезультатов[3];
	
	Если РезультатUnbilledAR.Пустой() И РезультатBilledAR.Пустой() И РезультатUnallocatedCash.Пустой() И РезультатManualTransactions.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Док = Документы.КорректировкаРегистров.СоздатьДокумент();
	Док.ДополнительныеСвойства.Вставить("РазрешитьСозданиеДокументаБезРеверса", Истина);
	Док.Дата = КонецМесяца(Период) - 1;
	Док.Комментарий = "Списание текущих остатков по MFG";
	Док.Ответственный = Пользователи.ТекущийПользователь();
	
	Если НЕ РезультатUnbilledAR.Пустой() Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "UnbilledAR";
		
		Выборка = РезультатUnbilledAR.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекДвижение = Док.Движения.UnbilledAR.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДвижение, Выборка);
			ТекДвижение.Период = Док.Дата;
			ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
		КонецЦикла;
		
		Док.Движения.UnbilledAR.Записывать = Истина;
		
	КонецЕсли;
	
	Если НЕ РезультатBilledAR.Пустой() Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "BilledAR";
		
		Выборка = РезультатBilledAR.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекДвижение = Док.Движения.BilledAR.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДвижение, Выборка);
			ТекДвижение.Период = Док.Дата;
			ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
		КонецЦикла;
		
		Док.Движения.BilledAR.Записывать = Истина;
		
	КонецЕсли;
	
	Если НЕ РезультатUnallocatedCash.Пустой() Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "UnallocatedCash";
		
		Выборка = РезультатUnallocatedCash.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекДвижение = Док.Движения.UnallocatedCash.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДвижение, Выборка);
			ТекДвижение.Период = Док.Дата;
			ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
		КонецЦикла;
		
		Док.Движения.UnallocatedCash.Записывать = Истина;
		
	КонецЕсли;
	
	Если НЕ РезультатManualTransactions.Пустой() Тогда
		
		СтрокаТаблицыРегистров = Док.ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.Имя = "ManualTransactions";
		
		Выборка = РезультатManualTransactions.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекДвижение = Док.Движения.ManualTransactions.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДвижение, Выборка);
			ТекДвижение.Период = Док.Дата;
			ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
		КонецЦикла;
		
		Док.Движения.ManualTransactions.Записывать = Истина;
		
	КонецЕсли;
	
	Док.Записать();
	
КонецПроцедуры

&НаСервере
Функция СоздатьИнвойс(ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.MFG;
	ДокОбъект.Company = ДанныеДляЗаполнения.Company;
	//ДокОбъект.Номер = "RD-" + ДанныеДляЗаполнения.Invoice;
	ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNo;
	ДокОбъект.Дата = ДанныеДляЗаполнения.TransDate;
	ДокОбъект.DocNumber = ДанныеДляЗаполнения.Invoice;
	ДокОбъект.Client = ДанныеДляЗаполнения.Client;
	ДокОбъект.AU = ДанныеДляЗаполнения.AU;
	ДокОбъект.Location = ДанныеДляЗаполнения.Location;
	ДокОбъект.SubSubSegment = ДанныеДляЗаполнения.SubSubSegment;
	ДокОбъект.Account = ДанныеДляЗаполнения.Account;
	ДокОбъект.Currency = ДанныеДляЗаполнения.Currency;
	ДокОбъект.Amount = ДанныеДляЗаполнения.OrigAmt;
	ДокОбъект.Agreement = ДанныеДляЗаполнения.RefField;
	//ДокОбъект.Amount = ПроводкаDSSОбъект.TranAmount;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьSalesOrder(ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.SalesOrder.СоздатьДокумент();
	//ДокОбъект.Номер = ?(ДанныеДляЗаполнения.Invoice = "RD-#empty#", ДанныеДляЗаполнения.Invoice, "RD-" + ДанныеДляЗаполнения.Invoice);
	ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNo;
	ДокОбъект.Дата = ДанныеДляЗаполнения.TransDate;
	ДокОбъект.Client = ДанныеДляЗаполнения.Client;
	//ДокОбъект.ArInvoice = ДанныеДляЗаполнения.Invoice;
	ДокОбъект.ArInvoice = ДанныеДляЗаполнения.InvoiceNo;
	ДокОбъект.AU = ДанныеДляЗаполнения.AU;
	ДокОбъект.Company = ДанныеДляЗаполнения.Company;
	ДокОбъект.Location = ДанныеДляЗаполнения.Location;
	ДокОбъект.SubSubSegment = ДанныеДляЗаполнения.SubSubSegment;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.MFG;
	ДокОбъект.Account = ДанныеДляЗаполнения.Account;
	ДокОбъект.Currency = ДанныеДляЗаполнения.Currency;
	ДокОбъект.Amount = ДанныеДляЗаполнения.OrigAmt;
	ДокОбъект.OrderType = Перечисления.SalesOrederTypes.SalesOrder;
	ДокОбъект.Agreement = ДанныеДляЗаполнения.RefField;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьCashBatch(ДанныеДляЗаполнения, Prepayment)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	ДокОбъект.Дата = ДанныеДляЗаполнения.TransDate;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.MFG;
	ДокОбъект.Company = ДанныеДляЗаполнения.Company;
	ДокОбъект.Client = ДанныеДляЗаполнения.Client;
	ДокОбъект.AU = ДанныеДляЗаполнения.AU;
	ДокОбъект.Location = ДанныеДляЗаполнения.Location;
	//ДокОбъект.DocID = ДанныеДляЗаполнения.Invoice;
	ДокОбъект.DocID = ДанныеДляЗаполнения.InvoiceNo;
	ДокОбъект.PaymentNumber = ДанныеДляЗаполнения.Invoice;
	ДокОбъект.SubSubSegment = ДанныеДляЗаполнения.SubSubSegment;
	ДокОбъект.Account = ДанныеДляЗаполнения.Account;
	ДокОбъект.Amount = ДанныеДляЗаполнения.OrigAmt;
	ДокОбъект.Currency = ДанныеДляЗаполнения.Currency;
	ДокОбъект.Prepayment = Prepayment;
	ДокОбъект.Agreement = ДанныеДляЗаполнения.RefField;
	ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьРучнуюКорректировку(ДанныеДляЗаполнения)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = ДанныеДляЗаполнения.TransDate;
	РучнаяКорректировкаОбъект.Source = Перечисления.ТипыСоответствий.MFG;
	РучнаяКорректировкаОбъект.Company = ДанныеДляЗаполнения.Company;
	РучнаяКорректировкаОбъект.Client = ДанныеДляЗаполнения.Client;
	РучнаяКорректировкаОбъект.Location = ДанныеДляЗаполнения.Location;
	РучнаяКорректировкаОбъект.SubSubSegment = ДанныеДляЗаполнения.SubSubSegment;
	РучнаяКорректировкаОбъект.AU = ДанныеДляЗаполнения.AU;
	РучнаяКорректировкаОбъект.Account = ДанныеДляЗаполнения.Account;
	РучнаяКорректировкаОбъект.Currency = ДанныеДляЗаполнения.Currency;
	РучнаяКорректировкаОбъект.Записать();
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = РезультатВыбора.НачалоПериода;
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Период = Дата(1,1,1) Тогда	
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
	Иначе
		ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Период), КонецМесяца(Период));
	КонецЕсли;	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтаФорма.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры



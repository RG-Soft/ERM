
Функция GetClientList(ПараметрыПоиска)
	
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Отправка");
	
	#Область НастройкаКомпонентовОбмена
	УзелДляОбмена = ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.НайтиПоКоду("PS");
	
	КомпонентыОбмена.УзелКорреспондента = УзелДляОбмена;
	
	КомпонентыОбмена.ВерсияФорматаОбмена = ОбменДаннымиXDTOСервер.ВерсияФорматаОбменаПриВыгрузке(УзелДляОбмена);
	
	ФорматОбмена = ОбменДаннымиXDTOСервер.ФорматОбмена(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	КомпонентыОбмена.XMLСхема = ФорматОбмена;
	
	КомпонентыОбмена.МенеджерОбмена = ОбменДаннымиXDTOСервер.МенеджерОбменаВерсииФормата(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	
	КомпонентыОбмена.ТаблицаПравилаРегистрацииОбъектов = ОбменДаннымиXDTOСервер.ПравилаРегистрацииОбъектов(УзелДляОбмена);
	КомпонентыОбмена.СвойстваУзлаПланаОбмена = ОбменДаннымиXDTOСервер.СвойстваУзлаПланаОбмена(УзелДляОбмена);
	
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	#КонецОбласти
	
	#Область ВыгрузкаДанных
	СтруктураВозвратаСпискаКлиентов = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СтруктураВозвратаСпискаКлиентов");
	СписокКлиентовXDTO = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СписокКонтрагентов");
	ТипКлиентаXDTO = ПолучитьТипОбъектаXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", "Справочник.Контрагенты");
	ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_Контрагенты_Отправка", "ИмяПКО");
	
	ВыборкаКлиентов = ПолучитьВыборкуКлиентов(ПараметрыПоиска);
	
	ТекНомерКлиента = 0;
	Пока ВыборкаКлиентов.Следующий() И ТекНомерКлиента <= 100 Цикл
		
		СтруктураXDTO = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена, ВыборкаКлиентов.Клиент, ПравилоКонвертации);
		КлиентXDTO = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", "Справочник.Контрагенты");
		СписокКлиентовXDTO.Контрагенты.Добавить(ОбменДаннымиXDTOСервер.ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, СтруктураXDTO, ТипКлиентаXDTO, КлиентXDTO));
		ТекНомерКлиента = ТекНомерКлиента + 1;
		
	КонецЦикла;
	
	Если ВыборкаКлиентов.Количество() > 100 Тогда
		СтруктураВозвратаСпискаКлиентов.ДопИнформация = "Найдено более 100 элементов. Необходимо уточнить условия запроса.";
	КонецЕсли;
	
	// { RGS VShamin 29.04.2016 14:14:18 - 
	Если ВыборкаКлиентов.Количество() = 0 Тогда
		СтруктураВозвратаСпискаКлиентов.ДопИнформация = "Не найдено ни одного клиента. Необходимо уточнить условия запроса.";
	КонецЕсли;
	// } RGS VShamin 29.04.2016 14:14:18 - 
	
	СтруктураВозвратаСпискаКлиентов.СписокКлиентов = СписокКлиентовXDTO;
	
	Попытка
		СтруктураВозвратаСпискаКлиентов.Проверить();
	Исключение
		СтруктураВозвратаСпискаКлиентов.СообщениеОбОшибке = ОписаниеОшибки();
		СтруктураВозвратаСпискаКлиентов.СписокКлиентов = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СписокКонтрагентов");
	КонецПопытки;
	
	#КонецОбласти
	
	Возврат СтруктураВозвратаСпискаКлиентов;
	
КонецФункции

Функция ПолучитьВыборкуКлиентов(ПараметрыПоиска)
	
	Запрос = Новый Запрос;
	
	ДопУсловие = "";
	Если ЗначениеЗаполнено(ПараметрыПоиска.НаименованиеАнгл) Тогда
		ДопУсловие = ДопУсловие + " И Контрагенты.Наименование ПОДОБНО ""%" + СокрЛП(ПараметрыПоиска.НаименованиеАнгл) + "%""";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПоиска.Наименование) Тогда
		ДопУсловие = ДопУсловие + " И Контрагенты.ЛокальноеНаименование ПОДОБНО ""%" + СокрЛП(ПараметрыПоиска.Наименование) + "%""";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПоиска.ИНН) Тогда
		ДопУсловие = ДопУсловие + " И Контрагенты.ИНН = """ + СокрЛП(ПараметрыПоиска.ИНН) + """";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПоиска.КПП) Тогда
		ДопУсловие = ДопУсловие + " И Контрагенты.КПП = """ + СокрЛП(ПараметрыПоиска.КПП) + """";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Клиент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления" + ДопУсловие;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ПолучитьОбъектXDTO(ИспользуемаяФабрикаXDTO, URIПространстваИмен, Имя) 
	
	// Конструирует объект XDTO типа Имя с помощью ФабрикиXDTO и URIПространстваИмен
	
	ТипПоля = ИспользуемаяФабрикаXDTO.Тип(URIПространстваИмен, Имя);
	Возврат ИспользуемаяФабрикаXDTO.Создать(ТипПоля);
	
КонецФункции

Функция ПолучитьТипОбъектаXDTO(ИспользуемаяФабрикаXDTO, URIПространстваИмен, Имя)
	
	Возврат ИспользуемаяФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", Имя);
	
КонецФункции

Функция RegisterClients(RefList)
	
	УзелОбмена = ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.ПолучитьУзелОбменаПоИдентификаторуКорреспондента(RefList.ИдентификаторКорреспондента);
	
	Для каждого ТекСсылка Из RefList.Ссылки Цикл
		
		ТекКлиент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекСсылка));
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ТекКлиент);
		
	КонецЦикла;
	
	// инициируем обмен
	Отказ = Ложь;
	ПараметрыОбмена = Новый Структура();
	ПараметрыОбмена.Вставить("ВидТранспортаСообщенийОбмена", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	ПараметрыОбмена.Вставить("ВыполнятьЗагрузку", Истина);
	ПараметрыОбмена.Вставить("ВыполнятьВыгрузку", Истина);
	ПараметрыОбмена.Вставить("ТолькоПараметры", Ложь);
	ПараметрыОбмена.Вставить("ПараметрыАутентификации", Неопределено);
	ПараметрыОбмена.Вставить("ИдентификаторФайла", "");
	ПараметрыОбмена.Вставить("ДлительнаяОперация", Ложь);
	ПараметрыОбмена.Вставить("ИдентификаторОперации", "");
	ПараметрыОбмена.Вставить("ДлительнаяОперацияРазрешена", Истина);
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелОбмена, ПараметрыОбмена, Отказ);
	
	Возврат Отказ;
	
КонецФункции

Функция GetRequestList()
	
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Отправка");
	
	#Область НастройкаКомпонентовОбмена
	УзелДляОбмена = ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.НайтиПоКоду("PS");
	
	КомпонентыОбмена.УзелКорреспондента = УзелДляОбмена;
	
	КомпонентыОбмена.ВерсияФорматаОбмена = ОбменДаннымиXDTOСервер.ВерсияФорматаОбменаПриВыгрузке(УзелДляОбмена);
	
	ФорматОбмена = ОбменДаннымиXDTOСервер.ФорматОбмена(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	КомпонентыОбмена.XMLСхема = ФорматОбмена;
	
	КомпонентыОбмена.МенеджерОбмена = ОбменДаннымиXDTOСервер.МенеджерОбменаВерсииФормата(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	
	КомпонентыОбмена.ТаблицаПравилаРегистрацииОбъектов = ОбменДаннымиXDTOСервер.ПравилаРегистрацииОбъектов(УзелДляОбмена);
	КомпонентыОбмена.СвойстваУзлаПланаОбмена = ОбменДаннымиXDTOСервер.СвойстваУзлаПланаОбмена(УзелДляОбмена);
	
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	#КонецОбласти
	
	#Область ВыгрузкаДанных
	СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов");
	СписокЗаявокXDTO = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СписокЗаявокНаИзменениеКлиентов");
	ТипЗаявкиXDTO = ПолучитьТипОбъектаXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", "Справочник.ЗаявкаНаИзменениеКлиента");
	ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_ЗаявкаНаИзменениеКлиента_Отправка", "ИмяПКО");
	
	ВыборкаЗаявок = ПолучитьВыборкуЗаявок();
	
	ТекНомерКлиента = 0;
	Пока ВыборкаЗаявок.Следующий() Цикл
		
		СтруктураXDTO = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена, ВыборкаЗаявок.Заявка, ПравилоКонвертации);
		ЗаявкаXDTO = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", "Справочник.ЗаявкаНаИзменениеКлиента");
		СписокЗаявокXDTO.Заявки.Добавить(ОбменДаннымиXDTOСервер.ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, СтруктураXDTO, ТипЗаявкиXDTO, ЗаявкаXDTO));
		ТекНомерКлиента = ТекНомерКлиента + 1;
		
	КонецЦикла;
	
	СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов.СписокЗаявок = СписокЗаявокXDTO;
	
	Попытка
		СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов.Проверить();
	Исключение
		СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов.СообщениеОбОшибке = ОписаниеОшибки();
		СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов.СписокЗаявок = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов");
	КонецПопытки;
	
	#КонецОбласти
	
	Возврат СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов;
	
КонецФункции

Функция ПолучитьВыборкуЗаявок()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаИзменениеКлиента.Ссылка КАК Заявка
	|ИЗ
	|	Справочник.ЗаявкаНаИзменениеКлиента КАК ЗаявкаНаИзменениеКлиента";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция GetRequestAttachedFiles(Request)
	
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Отправка");
	
	#Область НастройкаКомпонентовОбмена
	УзелДляОбмена = ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.НайтиПоКоду("PS");
	
	КомпонентыОбмена.УзелКорреспондента = УзелДляОбмена;
	
	КомпонентыОбмена.ВерсияФорматаОбмена = ОбменДаннымиXDTOСервер.ВерсияФорматаОбменаПриВыгрузке(УзелДляОбмена);
	
	ФорматОбмена = ОбменДаннымиXDTOСервер.ФорматОбмена(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	КомпонентыОбмена.XMLСхема = ФорматОбмена;
	
	КомпонентыОбмена.МенеджерОбмена = ОбменДаннымиXDTOСервер.МенеджерОбменаВерсииФормата(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	
	КомпонентыОбмена.ТаблицаПравилаРегистрацииОбъектов = ОбменДаннымиXDTOСервер.ПравилаРегистрацииОбъектов(УзелДляОбмена);
	КомпонентыОбмена.СвойстваУзлаПланаОбмена = ОбменДаннымиXDTOСервер.СвойстваУзлаПланаОбмена(УзелДляОбмена);
	
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	#КонецОбласти
	
	#Область ВыгрузкаДанных
	СтруктураВозвратаПрисоединенныхФайловЗаявок = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СтруктураВозвратаПрисоединенныхФайловЗаявок");
	СписокПрисоединенныхФайловXDTO = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СписокПрисоединенныхФайловЗаявок");
	ТипПрисоединенногоФайлаXDTO = ПолучитьТипОбъектаXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", "Справочник.ЗаявкаНаИзменениеКлиентаПрисоединенныеФайлы");
	ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_ЗаявкаНаИзменениеКлиентаПФ_Отправка", "ИмяПКО");
	
	Заявка = Справочники.ЗаявкаНаИзменениеКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(Request));
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуПрисоединенныхФайловЗаявки(Заявка);
	
	Пока ВыборкаПрисоединенныхФайлов.Следующий() Цикл
		
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.ПрисоединенныйФайл);
		СтруктураXDTO = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена, ВыборкаПрисоединенныхФайлов.ПрисоединенныйФайл, ПравилоКонвертации);
		СтруктураXDTO.ФайлХранилище = ПолучитьИзВременногоХранилища(ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.ПрисоединенныйФайл).СсылкаНаДвоичныеДанныеФайла);
		ПрисоединенныйФайлXDTO = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", "Справочник.ЗаявкаНаИзменениеКлиентаПрисоединенныеФайлы");
		СписокПрисоединенныхФайловXDTO.ПрисоединенныеФайлы.Добавить(ОбменДаннымиXDTOСервер.ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, СтруктураXDTO, ТипПрисоединенногоФайлаXDTO, ПрисоединенныйФайлXDTO));
		
	КонецЦикла;
	
	СтруктураВозвратаПрисоединенныхФайловЗаявок.СписокПрисоединенныхФайлов = СписокПрисоединенныхФайловXDTO;
	
	Попытка
		СтруктураВозвратаПрисоединенныхФайловЗаявок.Проверить();
	Исключение
		СтруктураВозвратаПрисоединенныхФайловЗаявок.СообщениеОбОшибке = ОписаниеОшибки();
		СтруктураВозвратаПрисоединенныхФайловЗаявок.СписокЗаявок = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СтруктураВозвратаСпискаЗаявокНаИзменениеКлиентов");
	КонецПопытки;
	
	#КонецОбласти
	
	Возврат СтруктураВозвратаПрисоединенныхФайловЗаявок;
	
КонецФункции

Функция ПолучитьВыборкуПрисоединенныхФайловЗаявки(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаИзменениеКлиентаПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
		|ИЗ
		|	Справочник.ЗаявкаНаИзменениеКлиентаПрисоединенныеФайлы КАК ЗаявкаНаИзменениеКлиентаПрисоединенныеФайлы
		|ГДЕ
		|	ЗаявкаНаИзменениеКлиентаПрисоединенныеФайлы.ВладелецФайла = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

// { RGS VShamin 04.05.2016 13:38:20 - 
Функция CreateRequest(CreationParameter)
	
	ОписаниеОшибки = "";
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Получение");
	
	#Область НастройкаКомпонентовОбмена
	УзелДляОбмена = ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.ПолучитьУзелОбменаПоИдентификаторуКорреспондента(CreationParameter.ИдентификаторКорреспондента);
	КомпонентыОбмена.УзелКорреспондента = УзелДляОбмена;
	КомпонентыОбмена.ВерсияФорматаОбмена = ОбменДаннымиXDTOСервер.ВерсияФорматаОбменаПриВыгрузке(УзелДляОбмена);
	ФорматОбмена = ОбменДаннымиXDTOСервер.ФорматОбмена(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	КомпонентыОбмена.XMLСхема = ФорматОбмена;
	КомпонентыОбмена.МенеджерОбмена = ОбменДаннымиXDTOСервер.МенеджерОбменаВерсииФормата(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	КомпонентыОбмена.ТаблицаПравилаРегистрацииОбъектов = ОбменДаннымиXDTOСервер.ПравилаРегистрацииОбъектов(УзелДляОбмена);
	КомпонентыОбмена.СвойстваУзлаПланаОбмена = ОбменДаннымиXDTOСервер.СвойстваУзлаПланаОбмена(УзелДляОбмена);
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	#КонецОбласти
	ПравилоКонвертацииЗаявкаПолучение = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_ЗаявкаНаИзменениеКлиента_Получение", "ИмяПКО");
	
	ПараметрыСозданияЗаявки = CreationParameter.ПараметрыСозданияЗаявки;
	
	ЗаявкаНаИзменениеКлиента = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", "КлючевыеСвойстваЗаявкаНаИзменениеКлиента");
	//ЗаявкаНаИзменениеКлиента.Ссылка = Ссылка;
	
	ЗаявкаНаИзменениеКлиента = ПолучитьОбъектXDTO(ФабрикаXDTO, "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0", "Справочник.ЗаявкаНаИзменениеКлиента");
	ЗаявкаНаИзменениеКлиента.КлючевыеСвойства = ЗаявкаНаИзменениеКлиента;
	//ЗаявкаНаИзменениеКлиента.Код = Инициатор.Наименование;
	ЗаявкаНаИзменениеКлиента.ДатаЗаявки = ПараметрыСозданияЗаявки.ДатаЗаявки;
	ЗаявкаНаИзменениеКлиента.ВидОперации = ПараметрыСозданияЗаявки.ВидОперации;
	ЗаявкаНаИзменениеКлиента.ИзменяемыйКлиент = ПараметрыСозданияЗаявки.ИзменяемыйКлиент;
	ЗаявкаНаИзменениеКлиента.Инициатор = ПараметрыСозданияЗаявки.Инициатор;
	ЗаявкаНаИзменениеКлиента.СостояниеЗаявки = ПараметрыСозданияЗаявки.СостояниеЗаявки;
	ЗаявкаНаИзменениеКлиента.Комментарий = ПараметрыСозданияЗаявки.Комментарий;
	
	ДанныеИБ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ЗаявкаНаИзменениеКлиента, ПравилоКонвертацииЗаявкаПолучение);
	
	Возврат ОписаниеОшибки;
	
КонецФункции // } RGS VShamin 04.05.2016 13:38:20 - 

// { RGS VShamin 04.05.2016 15:01:39 - 
Функция ПолучитьВидОперацииИзмененияНСИ(ВидОперацииСтрока)

	Если ВидОперацииСтрока = "РегистрацияНовогоОбъекта" Тогда
		Возврат Перечисления.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта;
	ИначеЕсли ВидОперацииСтрока = "ИзменениеРеквизитовОбъекта" Тогда
		Возврат Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта;
	ИначеЕсли ВидОперацииСтрока = "УдалениеОбъекта" Тогда
		Возврат Перечисления.ВидыОперацийИзмененияНСИ.УдалениеОбъекта;
	ИначеЕсли ВидОперацииСтрока = "УдалениеДубликатаОбъекта" Тогда
		Возврат Перечисления.ВидыОперацийИзмененияНСИ.УдалениеДубликатаОбъекта;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // } RGS VShamin 04.05.2016 15:01:42 - 

// { RGS VShamin 04.05.2016 15:01:39 - 
Функция ПолучитьСостояниеЗаявкиНаИзменениеНСИ(СостояниеЗаявкиСтрока)

	Если СостояниеЗаявкиСтрока = "Новая" Тогда
		Возврат Перечисления.СостояниеЗаявкиНаИзменениеНСИ.Новая;
	ИначеЕсли СостояниеЗаявкиСтрока = "ВРаботе" Тогда
		Возврат Перечисления.СостояниеЗаявкиНаИзменениеНСИ.ВРаботе;
	ИначеЕсли СостояниеЗаявкиСтрока = "Выполнена" Тогда
		Возврат Перечисления.СостояниеЗаявкиНаИзменениеНСИ.Выполнена;
	ИначеЕсли СостояниеЗаявкиСтрока = "Отклонена" Тогда
		Возврат Перечисления.СостояниеЗаявкиНаИзменениеНСИ.Отклонена;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // } RGS VShamin 04.05.2016 15:01:42 - 
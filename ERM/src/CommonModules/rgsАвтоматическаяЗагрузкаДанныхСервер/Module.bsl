
Процедура ВыполнитьЗагрузкуДанныхOracleMI() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.OracleMI);
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.OracleMI, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
			"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанныхOracleSmith() Экспорт
	
	//// 4010
	//СтруктураНастроек = Новый Структура();
	//ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.OracleSmith, "4010");
	//
	//ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	//
	//Если Не ПолучениеВыполнено Тогда
	//	
	//	СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.OracleSmith, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
	//	
	//	РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
	//		"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
	//		
	//	ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
	//	
	//Иначе
	//	
	//	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	//	
	//	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	//	
	//КонецЕсли;
	//
	////ToDo переделать на загрузку нескольких файлов одним регламентом. Пока просто пауза, так как в регистре E-mail периодичность - сек
	//scr = Новый COMОбъект("WScript.Shell");
	//scr.Run("timeout 2",0,1);
	
	//// 3840
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.OracleSmith);
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.OracleSmith, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
			"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	Иначе
		
		ЗагрузитьПолученныеДанные(СтруктураНастроек);
		
		ДействияПриОкончанииЗагрузки(СтруктураНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанныхLawson() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.Lawson);
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
			"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанныхHOB_Receivables() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.HOBs, "Receivables");
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
			"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанныхHOB_Accruals() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.HOBs, "Accruals");
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	ОтправитьУведомление = День(ТекущаяДата()) < 8;
	
	Если Не ПолучениеВыполнено Тогда
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Если ОтправитьУведомление Тогда 
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
			
		ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанныхHOB_JV() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.HOBs, "JV");
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
			"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанныхOracleMISO() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.OracleMI, "SO");
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
			"ERM: Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Oracle MI SO loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуКурсовВалют() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, "Currency");
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		//СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		//РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCurrency.Получить(),
		//	"ERM: Currency loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Currency loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуOracleHFM() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Перечисления.ТипыСоответствий.OracleMI, "HFM");
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		//СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.OracleMI, "Oracle MI HFM loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		//РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
		//	"ERM: Oracle MI HFM loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Oracle MI HFM loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуКлиентовCRM() Экспорт
	
	СтруктураНастроек = Новый Структура();
	ИнициализироватьСтруктуруНастроек(СтруктураНастроек, "CRMClients");
	
	ПолучениеВыполнено = ВыполнитьПолучениеСообщения(СтруктураНастроек);
	
	Если Не ПолучениеВыполнено Тогда
		
		//СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCRMClients.Получить(),
			"ERM: CRM Clients loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("CRM Clients loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПолученныеДанные(СтруктураНастроек);
	
	ДействияПриОкончанииЗагрузки(СтруктураНастроек);
	
КонецПроцедуры

Процедура ИнициализироватьСтруктуруНастроек(СтруктураНастроек, Источник, ТипЗагрузки = Неопределено)
	
	СтруктураНастроек.Вставить("СтрокаСообщенияОбОшибке", "");
	СтруктураНастроек.Вставить("СтрокаСообщенияОбОшибкеЖР", "");
	СтруктураНастроек.Вставить("ИмяКаталогаОбменаИнформацией", ИмяКаталогаОбменаИнформацией(Источник));
	СтруктураНастроек.Вставить("ШаблонИмениФайлаСообщения", ПолучитьШаблонИмениФайлаСообщения(Источник, ТипЗагрузки));
	СтруктураНастроек.Вставить("ШаблонИмениФайлаДанных", ПолучитьШаблонИмениФайлаДанных(Источник));
	СтруктураНастроек.Вставить("ИмяКаталогаСообщенияОбмена", ПолучитьИмяКаталогаСообщенияОбмена(Источник));
	СтруктураНастроек.Вставить("ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений", Истина);
	СтруктураНастроек.Вставить("СообщенияОшибок", Новый Соответствие);
	СтруктураНастроек.Вставить("ИмяПолученногоФайла", "");
	СтруктураНастроек.Вставить("РасширениеФайлаДанных", ПолучитьРасширениеФайлаДанных(Источник, ТипЗагрузки));
	СтруктураНастроек.Вставить("Источник", Источник);
	СтруктураНастроек.Вставить("ТипЗагрузки", ТипЗагрузки);
	СтруктураНастроек.Вставить("FTPСоединение", Неопределено);
	Если Источник = Перечисления.ТипыСоответствий.HOBs Тогда 
		СтруктураНастроек.Вставить("FTP", Истина);
	Иначе
		СтруктураНастроек.Вставить("FTP", Ложь);
	КонецЕсли;
	
	ИнициализацияСообщенийОшибок(СтруктураНастроек);
	
КонецПроцедуры

Функция ПолучитьШаблонИмениФайлаСообщения(Источник, ТипЗагрузки)
	
	Если Источник = Перечисления.ТипыСоответствий.OracleMI И ТипЗагрузки = "SO" Тогда
		Возврат "OracleMISO*";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleMI И ТипЗагрузки = "HFM" Тогда
		Возврат "HFM*";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
		Возврат "OracleMITransactions*";
	//ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleSmith И ТипЗагрузки = "4010" Тогда
	//	Возврат "4010_FINR666B*";
	//ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleSmith И ТипЗагрузки = "3840" Тогда
	//	Возврат "3840_FINR666B*";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
		Возврат "FINR666*";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.Lawson Тогда
		Возврат "*XR222*";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.HOBs И ТипЗагрузки = "Receivables" Тогда
		Возврат "HOB_Receivables*";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.HOBs И ТипЗагрузки = "Accruals" Тогда
		Возврат "HOB_Accruals*";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.HOBs И ТипЗагрузки = "JV" Тогда
		Возврат "HOB_JV*";
	ИначеЕсли Источник = "Currency" Тогда
		Возврат "Currency*"
	ИначеЕсли Источник = "CRMClients" Тогда
		Возврат "output*"
	Иначе
		ВызватьИсключение "Для источника '" + Строка(Источник) + "' значение не определено.";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьШаблонИмениФайлаДанных(Источник)
	
	Если Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
		Возврат "*.xls*";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
		Возврат "*.txt";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.Lawson Тогда
		Возврат "XR222*.csv";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.HOBs Тогда
		Возврат "HOB*.csv";
	ИначеЕсли Источник = "Currency" Тогда
		Возврат "*.xls*";
	ИначеЕсли Источник = "CRMClients" Тогда
		Возврат "*.csv";
	Иначе
		ВызватьИсключение "Для источника '" + Строка(Источник) + "' значение не определено.";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяКаталогаСообщенияОбмена(Источник)
	
	Если Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
		Возврат КаталогВременныхФайлов() + "MI-" + Строка(Новый УникальныйИдентификатор());
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
		Возврат КаталогВременныхФайлов() + "SM-" + Строка(Новый УникальныйИдентификатор());
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.Lawson Тогда
		Возврат КаталогВременныхФайлов() + "Lawson-" + Строка(Новый УникальныйИдентификатор());
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.HOBs Тогда
		Возврат КаталогВременныхФайлов() + "HOB-" + Строка(Новый УникальныйИдентификатор());
	ИначеЕсли Источник = "Currency" Тогда
		Возврат КаталогВременныхФайлов() + "Cur-" + Строка(Новый УникальныйИдентификатор());
	ИначеЕсли Источник = "CRMClients" Тогда
		Возврат КаталогВременныхФайлов() + "CRM-" + Строка(Новый УникальныйИдентификатор());
	Иначе
		ВызватьИсключение "Для источника '" + Строка(Источник) + "' значение не определено.";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРасширениеФайлаДанных(Источник, ТипЗагрузки)
	
	Если Источник = Перечисления.ТипыСоответствий.OracleMI И ТипЗагрузки = "HFM" Тогда
		Возврат ".xlsb";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
		Возврат ".xls";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
		Возврат ".txt";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.Lawson Тогда
		Возврат ".csv";
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.HOBs Тогда
		Возврат ".csv";
	ИначеЕсли Источник = "Currency" Тогда
		Возврат ".xls";
	ИначеЕсли Источник = "CRMClients" Тогда
		Возврат ".csv";
	Иначе
		ВызватьИсключение "Для источника '" + Строка(Источник) + "' значение не определено.";
	КонецЕсли;
	
КонецФункции

Процедура ИнициализацияСообщенийОшибок(СтруктураНастроек)
	
	СообщенияОшибок = СтруктураНастроек.СообщенияОшибок;
	СообщенияОшибок.Вставить(1, НСтр("ru = 'Ошибка подключения: Не указан каталог обмена информацией.'"));
	СообщенияОшибок.Вставить(2, НСтр("ru = 'Ошибка подключения: Каталог обмена информацией не существует.'"));
	
	СообщенияОшибок.Вставить(3, НСтр("ru = 'В каталоге обмена информацией не был обнаружен файл сообщения с данными.'"));
	СообщенияОшибок.Вставить(4, НСтр("ru = 'Ошибка при распаковке сжатого файла сообщения.'"));
	СообщенияОшибок.Вставить(5, НСтр("ru = 'Ошибка при сжатии файла сообщения обмена.'"));
	СообщенияОшибок.Вставить(6, НСтр("ru = 'Ошибка при создании временного каталога'"));
	СообщенияОшибок.Вставить(7, НСтр("ru = 'Архив не содержит файл сообщения обмена'"));
	
	СообщенияОшибок.Вставить(8, НСтр("ru = 'Ошибка записи файла в каталог обмена информацией. Проверьте права пользователя на доступ к каталогу.'"));
	СообщенияОшибок.Вставить(9, НСтр("ru = 'Ошибка удаления файла из каталога обмена информацией. Проверьте права пользователя на доступ к каталогу.'"));
	
	СообщенияОшибок.Вставить(10, НСтр("ru = 'Ошибка обработки файла'"));
	СообщенияОшибок.Вставить(11, НСтр("ru = 'Ошибка чтения данных из файла'"));
	СообщенияОшибок.Вставить(12, НСтр("ru = 'Ошибка проверки синхронизации данных'"));
	
	//СообщенияОшибок.Вставить(13, НСтр("ru = 'Ошибка в FTP соединении'"));
	
КонецПроцедуры

Функция ВыполнитьПолучениеСообщения(СтруктураНастроек)
	
	Попытка
		Если СтруктураНастроек.FTP Тогда
			Результат = ПолучитьСообщениеFTP(СтруктураНастроек);
		Иначе 
			Результат = ПолучитьСообщение(СтруктураНастроек);
		КонецЕсли;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСообщениеFTP(СтруктураНастроек)
	
	ИмяКаталогаОбменаИнформацией = СтруктураНастроек.ИмяКаталогаОбменаИнформацией;
	ШаблонИмениФайлаСообщения = СтруктураНастроек.ШаблонИмениФайлаСообщения;
	ИмяКаталогаСообщенияОбмена = СтруктураНастроек.ИмяКаталогаСообщенияОбмена;
	ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений = СтруктураНастроек.ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений;
	
	СоздатьКаталог(ИмяКаталогаСообщенияОбмена);
	
	ТаблицаФайловСообщенийОбмена = Новый ТаблицаЗначений;
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("Файл");
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ВремяИзменения");
	
	Попытка
		FTPСоединение = ПолучитьFTPСоединение();
		СтруктураНастроек.FTPСоединение = FTPСоединение;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучитьСообщениеОбОшибке(10, СтруктураНастроек);
		ДополнитьСообщениеОбОшибке(ТекстОшибки, СтруктураНастроек);
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		МассивНайденныхФайлов = FTPСоединение.НайтиФайлы(ИмяКаталогаОбменаИнформацией, ШаблонИмениФайлаСообщения + ".*", Ложь);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучитьСообщениеОбОшибке(3, СтруктураНастроек);
		ДополнитьСообщениеОбОшибке(ТекстОшибки, СтруктураНастроек);
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого ТекущийФайл Из МассивНайденныхФайлов Цикл
		
		// Проверяем нужное расширение.
		Если ((ВРег(ТекущийФайл.Расширение) <> ".ZIP")
			И (ВРег(ТекущийФайл.Расширение) <> ".XML")) Тогда
			
			Продолжить;
			
		// Проверяем что это файл, а не каталог.
		ИначеЕсли НЕ ТекущийФайл.ЭтоФайл() Тогда
			
			Продолжить;
			
		// Проверяем ненулевой размер файла.
		ИначеЕсли (ТекущийФайл.Размер() = 0) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Файл является требуемым сообщением обмена; добавляем его в таблицу.
		СтрокаТаблицы = ТаблицаФайловСообщенийОбмена.Добавить();
		СтрокаТаблицы.Файл           = ТекущийФайл;
		СтрокаТаблицы.ВремяИзменения = ТекущийФайл.ПолучитьВремяИзменения();
		
	КонецЦикла;
	
	Если ТаблицаФайловСообщенийОбмена.Количество() = 0 Тогда
		
		ПолучитьСообщениеОбОшибке(3, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = 'Каталог обмена информацией на сервере: ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяКаталогаОбменаИнформацией);
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = 'Имя файла сообщения обмена: ""%1"" или ""%2""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ШаблонИмениФайлаСообщения + ".xml", ШаблонИмениФайлаСообщения + ".zip");
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		Возврат Ложь;
		
	Иначе
		
		ТаблицаФайловСообщенийОбмена.Сортировать("ВремяИзменения Возр");
		
		// Получаем из таблицы самый "свежий" файл сообщения обмена.
		ФайлВходящегоСообщения = ТаблицаФайловСообщенийОбмена[0].Файл;
		СтруктураНастроек.Вставить("ИмяПолученногоФайла", ФайлВходящегоСообщения.Имя);
		
		// Записываем константу
		ДатаФайла = ФайлВходящегоСообщения.ПолучитьВремяИзменения();
		Если День(ДатаФайла) > 8 Тогда
			Константы.rgsДатаЗакрытияHOB.Установить(НачалоМесяца(ДатаФайла));
		Иначе
			Константы.rgsДатаЗакрытияHOB.Установить(НачалоМесяца(НачалоМесяца(ДатаФайла) - 1));
		КонецЕсли;
		
		ФайлЗапакован = (ВРег(ФайлВходящегоСообщения.Расширение) = ".ZIP");
		
		Если ФайлЗапакован Тогда
			
			// Получаем имя для временного файла архива.
			ИмяВременногоФайлаАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ФайлВходящегоСообщения.Имя);
			
			Попытка
				FTPСоединение.Получить(ФайлВходящегоСообщения.ПолноеИмя, ИмяВременногоФайлаАрхива);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПолучитьСообщениеОбОшибке(10, СтруктураНастроек);
				ДополнитьСообщениеОбОшибке(ТекстОшибки,СтруктураНастроек);
				Возврат Ложь;
			КонецПопытки;
			ПарольАрхиваСообщенияОбмена = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПланыОбмена.rgsОбменДокументамиERM.НайтиПоКоду("HB"),"ПарольАрхиваСообщенияОбмена");
			// Распаковываем временный файл архива.
			УспешноРаспаковано = ОбменДаннымиСервер.РаспаковатьZipФайл(ИмяВременногоФайлаАрхива, ИмяКаталогаСообщенияОбмена, ПарольАрхиваСообщенияОбмена);
			
			Если Не УспешноРаспаковано Тогда
				ПолучитьСообщениеОбОшибке(4, СтруктураНастроек);
				Возврат Ложь;
			КонецЕсли;
			
			//// Проверка на существование файла сообщения.
			//Файл = Новый Файл(ИмяФайлаСообщенияОбмена());
			//
			//Если Не Файл.Существует() Тогда
			//	
			//	ПолучитьСообщениеОбОшибке(5);
			//	Возврат Ложь;
			//	
			//КонецЕсли;
			
		Иначе
			Попытка
				FTPСоединение.Получить(ФайлВходящегоСообщения.ПолноеИмя, ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ФайлВходящегоСообщения.Имя));
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПолучитьСообщениеОбОшибке(10, СтруктураНастроек);
				ДополнитьСообщениеОбОшибке(ТекстОшибки,СтруктураНастроек);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьFTPСоединение()
	
	//Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ЗагрузкаДанныхHOB");
	//ПараметрыFTP = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Сервер, ИмяПользователя, ПарольПользователя");
	ПараметрыFTP = РегистрыСведений.УдалитьНастройкиТранспортаОбмена.НастройкиТранспорта(ПланыОбмена.rgsОбменДокументамиERM.НайтиПоКоду("HB"));
	
	СерверИКаталогНаСервере = РазделитьFTPРесурсНаСерверИКаталог(СокрЛП(ПараметрыFTP.FTPСоединениеПуть));
	КаталогНаСервере = СерверИКаталогНаСервере.ИмяКаталога;
	ИмяСервера = СерверИКаталогНаСервере.ИмяСервера;
	//ПараметрыFTP.Вставить("Порт", 21);
	//ПараметрыFTP.Вставить("ПассивноеСоединение", Ложь);
	//ПараметрыFTP.Вставить("Таймаут", 0);
	//ПараметрыFTP.Вставить("ЗащищенноеСоединение", Неопределено);

	НастройкиFTP = ОбменДаннымиСервер.FTPНастройкиСоединения();
	НастройкиFTP.Сервер               = ИмяСервера;
	НастройкиFTP.Порт                 = ПараметрыFTP.FTPСоединениеПорт;
	НастройкиFTP.ИмяПользователя      = ПараметрыFTP.FTPСоединениеПользователь;
	НастройкиFTP.ПарольПользователя   = ПараметрыFTP.FTPСоединениеПароль;
	НастройкиFTP.ПассивноеСоединение  = ПараметрыFTP.FTPСоединениеПассивноеСоединение;
	НастройкиFTP.ЗащищенноеСоединение = ОбменДаннымиСервер.ЗащищенноеСоединение(ПараметрыFTP.FTPСоединениеПуть);
	
	Возврат ОбменДаннымиСервер.FTPСоединение(НастройкиFTP);
	
КонецФункции


Функция РазделитьFTPРесурсНаСерверИКаталог(Знач ПолныйПуть)
	
	Результат = Новый Структура("ИмяСервера, ИмяКаталога");
	
	ПараметрыFTPСерверПуть = ОбменДаннымиСервер.FTPИмяСервераИПуть(ПолныйПуть);
	
	Результат.ИмяСервера  = ПараметрыFTPСерверПуть.Сервер;
	Результат.ИмяКаталога = ПараметрыFTPСерверПуть.Путь;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСообщение(СтруктураНастроек)
	
	ИмяКаталогаОбменаИнформацией = СтруктураНастроек.ИмяКаталогаОбменаИнформацией;
	ШаблонИмениФайлаСообщения = СтруктураНастроек.ШаблонИмениФайлаСообщения;
	ИмяКаталогаСообщенияОбмена = СтруктураНастроек.ИмяКаталогаСообщенияОбмена;
	ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений = СтруктураНастроек.ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений;
	
	СоздатьКаталог(ИмяКаталогаСообщенияОбмена);
	
	ТаблицаФайловСообщенийОбмена = Новый ТаблицаЗначений;
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("Файл", Новый ОписаниеТипов("Файл"));
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ВремяИзменения");
	
	МассивНайденныхФайлов = НайтиФайлы(ИмяКаталогаОбменаИнформацией, ШаблонИмениФайлаСообщения + ".*", Ложь);
	
	Для Каждого ТекущийФайл Из МассивНайденныхФайлов Цикл
		
		// Проверяем нужное расширение.
		Если ((ВРег(ТекущийФайл.Расширение) <> ".TGZ")) И((ВРег(ТекущийФайл.Расширение) <> ".ZIP")) И ((ВРег(ТекущийФайл.Расширение) <> ВРег(СтруктураНастроек.РасширениеФайлаДанных))) Тогда
			
			Продолжить;
			
		// Проверяем что это файл, а не каталог.
		ИначеЕсли НЕ ТекущийФайл.ЭтоФайл() Тогда
			
			Продолжить;
			
		// Проверяем ненулевой размер файла.
		ИначеЕсли (ТекущийФайл.Размер() = 0) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Файл является требуемым сообщением обмена; добавляем его в таблицу.
		СтрокаТаблицы = ТаблицаФайловСообщенийОбмена.Добавить();
		СтрокаТаблицы.Файл           = ТекущийФайл;
		СтрокаТаблицы.ВремяИзменения = ТекущийФайл.ПолучитьВремяИзменения();
		
	КонецЦикла;
	
	Если ТаблицаФайловСообщенийОбмена.Количество() = 0 Тогда
		
		ПолучитьСообщениеОбОшибке(3, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = 'Каталог обмена информацией: ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяКаталогаОбменаИнформацией);
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = 'Имя файла сообщения обмена: ""%1"" или ""%2""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ШаблонИмениФайлаСообщения + СтруктураНастроек.РасширениеФайлаДанных, ШаблонИмениФайлаСообщения + ".zip");
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		Возврат Ложь;
		
	Иначе
		
		ТаблицаФайловСообщенийОбмена.Сортировать("ВремяИзменения Возр");
		
		// Получаем из таблицы самый "свежий" файл сообщения обмена.
		ФайлВходящегоСообщения = ТаблицаФайловСообщенийОбмена[0].Файл;
		СтруктураНастроек.Вставить("ИмяПолученногоФайла", ФайлВходящегоСообщения.Имя);
		
		ФайлЗапакован = (ВРег(ФайлВходящегоСообщения.Расширение) = ".ZIP") ИЛИ (ВРег(ФайлВходящегоСообщения.Расширение) = ".TGZ");
		
		Если ФайлЗапакован Тогда
			
			// Получаем имя для временного файла архива.
			ИмяВременногоФайлаАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ФайлВходящегоСообщения.Имя);
			
			// Копируем файл архива из сетевого каталога во временный.
			Если Не ВыполнитьКопированиеФайла(ФайлВходящегоСообщения.ПолноеИмя, ИмяВременногоФайлаАрхива, СтруктураНастроек) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Распаковываем временный файл архива.
			Если ВРег(ФайлВходящегоСообщения.Расширение) = ".TGZ" Тогда
				УспешноРаспаковано = ОбменДаннымиСервер.РаспаковатьTarФайл(ИмяВременногоФайлаАрхива, ИмяКаталогаСообщенияОбмена);
			Иначе
				УспешноРаспаковано = ОбменДаннымиСервер.РаспаковатьZipФайл(ИмяВременногоФайлаАрхива, ИмяКаталогаСообщенияОбмена);
			КонецЕсли;
			
			Если Не УспешноРаспаковано Тогда
				ПолучитьСообщениеОбОшибке(4, СтруктураНастроек);
				Возврат Ложь;
			КонецЕсли;
			
			//// Проверка на существование файла сообщения.
			//Файл = Новый Файл(ИмяФайлаСообщенияОбмена);
			//
			//Если Не Файл.Существует() Тогда
			//	
			//	ПолучитьСообщениеОбОшибке(7, СтруктураНастроек);
			//	Возврат Ложь;
			//	
			//КонецЕсли;
			
		Иначе
			
			// Просто копируем файл входящего сообщения из каталога обмена в каталог временных файлов.
			Если ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений 
				И Не ВыполнитьКопированиеФайла(ФайлВходящегоСообщения.ПолноеИмя, ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ФайлВходящегоСообщения.Имя), СтруктураНастроек) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИмяКаталогаОбменаИнформацией(Источник)
	
	Если Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
		Возврат Константы.КаталогОбменаOracleMI.Получить();
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
		Возврат Константы.КаталогОбменаOracleSmith.Получить();
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.Lawson Тогда
		Возврат Константы.КаталогОбменаLawson.Получить();
	ИначеЕсли Источник = Перечисления.ТипыСоответствий.HOBs Тогда
		Возврат Константы.КаталогОбменаHOB.Получить();
	ИначеЕсли Источник = "Currency" Тогда
		Возврат Константы.КаталогОбменаCurrencyRate.Получить();
	ИначеЕсли Источник = "CRMClients" Тогда
		Возврат Константы.КаталогОбменаCRMClients.Получить();
	Иначе
		ВызватьИсключение "Для источника '" + Строка(Источник) + "' значение не определено.";
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьСообщениеОбОшибке(НомерСообщения, СтруктураНастроек)
	
	УстановитьСтрокуСообщенияОбОшибке(СтруктураНастроек.СообщенияОшибок[НомерСообщения], СтруктураНастроек)
	
КонецПроцедуры

Процедура УстановитьСтрокуСообщенияОбОшибке(Знач Сообщение, СтруктураНастроек)
	
	ИмяОбъекта = НСтр("ru = 'Получение данных %1'");
	ИмяИсточника = "";
	Если СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
		ИмяИсточника = "Oracle MI";
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
		ИмяИсточника = "Oracle Smith";
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.Lawson Тогда
		ИмяИсточника = "Lawson";
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs Тогда
		ИмяИсточника = "HOBs";
	ИначеЕсли СтруктураНастроек.Источник = "Currency" Тогда
		ИмяИсточника = "Currency";
	КонецЕсли;
	ИмяОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяОбъекта, ИмяИсточника);
	
	Если Сообщение = Неопределено Тогда
		Сообщение = Нстр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	СтруктураНастроек.СтрокаСообщенияОбОшибке   = Сообщение;
	СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР = ИмяОбъекта + ": " + Сообщение;
	
КонецПроцедуры

Процедура ДополнитьСообщениеОбОшибке(Сообщение, СтруктураНастроек)
	
	СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР = СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР + Символы.ПС + Сообщение;
	
КонецПроцедуры

Функция ВыполнитьКопированиеФайла(Знач ИмяФайлаИсточника, Знач ИмяФайлаПриемника, СтруктураНастроек)
	
	Попытка
		
		УдалитьФайлы(ИмяФайлаПриемника);
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при копировании файла из %1 в %2. Описание ошибки: %3'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							ИмяФайлаИсточника,
							ИмяФайлаПриемника,
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		Возврат Ложь
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСписокЛистовЭкселя(ПутьКФайлу)
	
	СписокЛистов = Новый Массив;
	ИменаКолонокВПервойСтроке = Ложь;
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если Найти(rs.Fields("TABLE_NAME").Value, "_FilterDatabase") = 0 Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Возврат СписокЛистов;
	
КонецФункции

Процедура ЗагрузитьПолученныеДанные(СтруктураНастроек)
	
	МассивНайденныхФайлов = НайтиФайлы(СтруктураНастроек.ИмяКаталогаСообщенияОбмена, СтруктураНастроек.ШаблонИмениФайлаДанных, Ложь);
	
	// формируем документ загрузки для каждого найденного файла (должен быть 1 по идее)
	Для каждого НайденныйФайл Из МассивНайденныхФайлов Цикл
		
		Если Врег(НайденныйФайл.Расширение) <> Врег(СтруктураНастроек.РасширениеФайлаДанных) Тогда
			
			ПолучитьСообщениеОбОшибке(7, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = 'Файл с данными имеет неверный формат: ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, НайденныйФайл.Имя);
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			Если СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI И СтруктураНастроек.ТипЗагрузки = "SO" Тогда
				
				СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
					"ERM: Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("Oracle MI SO loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI И СтруктураНастроек.ТипЗагрузки = "HFM" Тогда
				
				СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Oracle MI HFM loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
					"ERM: Oracle MI HFM loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("Oracle MI HFM loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
				
				СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
					"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
				
				СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
					"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.Lawson Тогда
				
				СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
					"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "Receivables" Тогда
				
				СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "Accruals" Тогда
				
				СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "JV" Тогда
				
				СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = "Currency" Тогда
				
				//СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Currency loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCurrency.Получить(),
					"ERM: Currency loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("Currency loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			ИначеЕсли СтруктураНастроек.Источник = "CRMClients" Тогда
				
				//СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Currency loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCRMClients.Получить(),
					"ERM: CRM Clients loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
					
				ЗаписьЖурналаРегистрации("CRM Clients loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Врег(НайденныйФайл.Расширение) = ".XLS" Тогда
			
			ОбрабатываемыйФайл = ПреобразоватьВXLSB(НайденныйФайл);
			
		Иначе
			
			ОбрабатываемыйФайл = НайденныйФайл;
			
		КонецЕсли;
		
		ЗагрузитьФайлДанных(ОбрабатываемыйФайл, СтруктураНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанных(ОбрабатываемыйФайл, СтруктураНастроек)
	
	Если СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI И СтруктураНастроек.ТипЗагрузки = "SO" Тогда
		ЗагрузитьФайлДанныхOracleMISO(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI И СтруктураНастроек.ТипЗагрузки = "HFM" Тогда
		ЗагрузитьФайлДанныхOracleHFM(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
		ЗагрузитьФайлДанныхOracleMI(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
		ЗагрузитьФайлДанныхOracleSmith(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.Lawson Тогда
		ЗагрузитьФайлДанныхLawson(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "Receivables" Тогда
		ЗагрузитьФайлДанныхHOB_Receivables(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "Accruals" Тогда
		ЗагрузитьФайлДанныхHOB_Accruals(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "JV" Тогда
		ЗагрузитьФайлДанныхHOB_JV(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = "Currency" Тогда
		ЗагрузитьФайлДанныхCurrency(ОбрабатываемыйФайл, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = "CRMClients" Тогда
		ЗагрузитьФайлДанныхCRMClients(ОбрабатываемыйФайл, СтруктураНастроек);
	Иначе
		ВызватьИсключение "Для источника '" + Строка(СтруктураНастроек.Источник) + "' не определен обработчик.";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхOracleMI(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДокументЗагрузки = Документы.ЗагрузкаДанныхOracle.СоздатьДокумент();
	ДокументЗагрузки.Дата = ТекущаяДата();
	ДокументЗагрузки.Source = Перечисления.ТипыСоответствий.OracleMI;
	ДокументЗагрузки.ИмяФайла = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Комментарий = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Ответственный = Пользователи.ТекущийПользователь();
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ДокументЗагрузки.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	ДокументЗагрузки.Записать();
	
	Попытка
		СписокЛистовЭкселя = ПолучитьСписокЛистовЭкселя(ОбрабатываемыйФайл.ПолноеИмя);
	Исключение
		СписокЛистовЭкселя = Новый Массив();
	КонецПопытки;
	
	Если СписокЛистовЭкселя.Количество() = 1 Тогда
		
		ДокументЗагрузки.ЛистФайла = СписокЛистовЭкселя[0];
		ДокументЗагрузки.Записать();
		
	Иначе
		
		ПолучитьСообщениеОбОшибке(10, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = 'Не удалось определить лист файла в документе: ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
			"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураНастроек.Вставить("НачалоОбработкиФайла", ТекущаяДата());
	СтруктураНастроек.Вставить("ОбъемВБайтах", ОбрабатываемыйФайл.Размер());
	ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхOracleSmith(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДокументЗагрузки = Документы.ЗагрузкаДанныхOracle.СоздатьДокумент();
	ДокументЗагрузки.Дата = ТекущаяДата();
	ДокументЗагрузки.Source = Перечисления.ТипыСоответствий.OracleSmith;
	ДокументЗагрузки.ИмяФайла = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Комментарий = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Ответственный = Пользователи.ТекущийПользователь();
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ДокументЗагрузки.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	ДокументЗагрузки.Записать();
	
	СтруктураНастроек.Вставить("НачалоОбработкиФайла", ТекущаяДата());
	СтруктураНастроек.Вставить("ОбъемВБайтах", ОбрабатываемыйФайл.Размер());
	ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхLawson(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДокументЗагрузки = Документы.ЗагрузкаДанныхLawson.СоздатьДокумент();
	ДокументЗагрузки.Дата = ТекущаяДата();
	ДокументЗагрузки.ИмяФайла = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Комментарий = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Ответственный = Пользователи.ТекущийПользователь();
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ДокументЗагрузки.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	ДокументЗагрузки.Записать();
	
	СтруктураНастроек.Вставить("НачалоОбработкиФайла", ТекущаяДата());
	СтруктураНастроек.Вставить("ОбъемВБайтах", ОбрабатываемыйФайл.Размер());
	ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхOracleMISO(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДокументЗагрузки = Документы.ЗагрузкаДанныхOracleSalesOrdersDetails.СоздатьДокумент();
	ДокументЗагрузки.Дата = ТекущаяДата();
	ДокументЗагрузки.ИмяФайла = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Комментарий = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Ответственный = Пользователи.ТекущийПользователь();
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ДокументЗагрузки.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	ДокументЗагрузки.Записать();
	
	Попытка
		СписокЛистовЭкселя = ПолучитьСписокЛистовЭкселя(ОбрабатываемыйФайл.ПолноеИмя);
	Исключение
		СписокЛистовЭкселя = Новый Массив();
	КонецПопытки;
	
	Если СписокЛистовЭкселя.Количество() = 1 Тогда
		
		ДокументЗагрузки.ЛистФайла = СписокЛистовЭкселя[0];
		ДокументЗагрузки.Записать();
		
	Иначе
		
		ПолучитьСообщениеОбОшибке(10, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = 'Не удалось определить лист файла в документе: ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(СтруктураНастроек.Источник, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
			"ERM: Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Oracle MI SO loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураНастроек.Вставить("НачалоОбработкиФайла", ТекущаяДата());
	СтруктураНастроек.Вставить("ОбъемВБайтах", ОбрабатываемыйФайл.Размер());
	ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхHOB_Receivables(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДокументЗагрузки = Документы.ЗагрузкаДанныхHOB.СоздатьДокумент();
	ДокументЗагрузки.Дата = ТекущаяДата();
	ДокументЗагрузки.ИмяФайла = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.ТипТранзакций = Перечисления.HOBTransactionType.Receivables;
	ДокументЗагрузки.Комментарий = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Ответственный = Пользователи.ТекущийПользователь();
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ДокументЗагрузки.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	ДокументЗагрузки.Записать();
	
	СтруктураНастроек.Вставить("НачалоОбработкиФайла", ТекущаяДата());
	СтруктураНастроек.Вставить("ОбъемВБайтах", ОбрабатываемыйФайл.Размер());
	ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхHOB_Accruals(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДокументЗагрузки = Документы.ЗагрузкаДанныхHOB.СоздатьДокумент();
	ДокументЗагрузки.Дата = ТекущаяДата();
	ДокументЗагрузки.ИмяФайла = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.ТипТранзакций = Перечисления.HOBTransactionType.Accrual;
	ДокументЗагрузки.Комментарий = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Ответственный = Пользователи.ТекущийПользователь();
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ДокументЗагрузки.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	ДокументЗагрузки.Записать();
	
	СтруктураНастроек.Вставить("НачалоОбработкиФайла", ТекущаяДата());
	СтруктураНастроек.Вставить("ОбъемВБайтах", ОбрабатываемыйФайл.Размер());
	ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхHOB_JV(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДокументЗагрузки = Документы.ЗагрузкаДанныхHOB.СоздатьДокумент();
	ДокументЗагрузки.Дата = ТекущаяДата();
	ДокументЗагрузки.ИмяФайла = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.ТипТранзакций = Перечисления.HOBTransactionType.JV;
	ДокументЗагрузки.Комментарий = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Ответственный = Пользователи.ТекущийПользователь();
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ДокументЗагрузки.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	ДокументЗагрузки.Записать();
	
	СтруктураНастроек.Вставить("НачалоОбработкиФайла", ТекущаяДата());
	СтруктураНастроек.Вставить("ОбъемВБайтах", ОбрабатываемыйФайл.Размер());
	ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхCurrency(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	СтруктураПараметров = Новый Структура("Дата, ЛистФайла, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	
	Попытка
		СписокЛистовЭкселя = ПолучитьСписокЛистовЭкселя(ОбрабатываемыйФайл.ПолноеИмя);
	Исключение
		СписокЛистовЭкселя = Новый Массив();
	КонецПопытки;
	
	Если СписокЛистовЭкселя.Количество() = 1 Тогда
		
		СтруктураПараметров.Вставить("ЛистФайла", СписокЛистовЭкселя[0]);
		
	Иначе
		
		ПолучитьСообщениеОбОшибке(10, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = 'Не удалось определить лист файла в документе'");
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCurrency.Получить(),
			"ERM: Currency loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации("Currency loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ИсточникДанных", ИсточникДанных);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	Попытка
		
		Обработки.ЗагрузкаДанныхКурсыВалют.ЗагрузитьКурсыВалют(СтруктураПараметров, АдресХранилища);
		
	Исключение
		
		//СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = ОписаниеОшибки();
		
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCurrency.Получить(),
				"ERM: Currency loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			//СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Currency loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		
	КонецПопытки;
		
		
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхOracleHFM(ОбрабатываемыйФайл, СтруктураНастроек)
	
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	СтруктураПараметров = Новый Структура("Дата, ЛистФайла, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	
	Попытка
		СписокЛистовЭкселя = ПолучитьСписокЛистовЭкселя(ОбрабатываемыйФайл.ПолноеИмя);
	Исключение
		СписокЛистовЭкселя = Новый Массив();
	КонецПопытки;
	
	Если СписокЛистовЭкселя.Количество() = 1 Тогда
		
		СтруктураПараметров.Вставить("ЛистФайла", СписокЛистовЭкселя[0]);
		
	Иначе
		
		ПолучитьСообщениеОбОшибке(10, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = 'Не удалось определить лист файла в документе'");
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхOracleMI.Получить(),
			"ERM: Oracle MI HFM loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		ЗаписьЖурналаРегистрации(" Oracle MI HFM loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ИсточникДанных", ИсточникДанных);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	Попытка
		
		Обработки.ЗагрузкаOracleHFM.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
	Исключение
		
		//СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = ОписаниеОшибки();
		
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхOracleMI.Получить(),
				"ERM: Oracle MI HFM loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			//СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle MI HFM loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
		
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗагрузитьФайлДанныхCRMClients(ОбрабатываемыйФайл, СтруктураНастроек)
	
	ДокументЗагрузки = Документы.ЗагрузкаДанныхCRMAccountsExtract.СоздатьДокумент();
	ДокументЗагрузки.Дата = ТекущаяДата();
	ДокументЗагрузки.ИмяФайла = ОбрабатываемыйФайл.Имя;
	//ДокументЗагрузки.Комментарий = ОбрабатываемыйФайл.Имя;
	ДокументЗагрузки.Ответственный = Пользователи.ТекущийПользователь();
	ДвоичныеДанные = Новый ДвоичныеДанные(ОбрабатываемыйФайл.ПолноеИмя);
	ДокументЗагрузки.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	ДокументЗагрузки.Записать();
	
	СтруктураНастроек.Вставить("НачалоОбработкиФайла", ТекущаяДата());
	СтруктураНастроек.Вставить("ОбъемВБайтах", ОбрабатываемыйФайл.Размер());
	ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек);
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузки(ДокументЗагрузки, СтруктураНастроек)
	
	Если СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI И СтруктураНастроек.ТипЗагрузки = "SO" Тогда
		ОбработатьДокументЗагрузкиOracleMISO(ДокументЗагрузки, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleMI Тогда
		ОбработатьДокументЗагрузкиOracleMI(ДокументЗагрузки, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.OracleSmith Тогда
		ОбработатьДокументЗагрузкиOracleSmith(ДокументЗагрузки, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.Lawson Тогда
		ОбработатьДокументЗагрузкиLawson(ДокументЗагрузки, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "Receivables" Тогда
		ОбработатьДокументЗагрузкиHOB_Receivables(ДокументЗагрузки, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "Accruals" Тогда
		ОбработатьДокументЗагрузкиHOB_Accruals(ДокументЗагрузки, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = Перечисления.ТипыСоответствий.HOBs И СтруктураНастроек.ТипЗагрузки = "JV" Тогда
		ОбработатьДокументЗагрузкиHOB_JV(ДокументЗагрузки, СтруктураНастроек);
	ИначеЕсли СтруктураНастроек.Источник = "CRMClients" Тогда
		ОбработатьДокументЗагрузкиCRMClients(ДокументЗагрузки, СтруктураНастроек);
	Иначе
		ВызватьИсключение "Для источника '" + Строка(СтруктураНастроек.Источник) + "' не определен обработчик.";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузкиOracleMI(ДокументЗагрузки, СтруктураНастроек)
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных, ТипВнешнейСистемы");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхOracle.ПолучитьСтруктуруКолонокТаблицыДанных());
	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", 0);
	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
	СтруктураПараметров.Вставить("ЛистФайла", ДокументЗагрузки.ЛистФайла);
	СтруктураПараметров.Вставить("ИмяРегистра", "OracleSourceData");
	СтруктураПараметров.Вставить("ТипВнешнейСистемы", ДокументЗагрузки.Source);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	СтруктураЗаписиЛогов = Новый Структура;
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("ДокументЗагрузки", ДокументЗагрузки.Ссылка);
	СтруктураЗаписиЛогов.Вставить("Source", ДокументЗагрузки.Source);
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.LoadedSourseData);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", СтруктураНастроек.НачалоОбработкиФайла);
	СтруктураЗаписиЛогов.Вставить("ОбъемВБайтах", СтруктураНастроек.ОбъемВБайтах);
	СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracle.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
					"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
				"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем загрузку данных из файла
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка настроек синхронизации
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CheckedConflicts);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracle.ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.ТаблицаКоллизий.Количество() > 0 Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "Найдены ошибки синхронизации данных");
			
			ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
					"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
				"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проверку синхронизации данных
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// создание транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CreatedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracle.СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища);
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
				"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем создание транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проведение транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.PostedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracle.ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(14, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
					"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		Иначе
			
			ТекстСообщения = "Файл " + СтруктураНастроек.ИмяПолученногоФайла + " загружен успешно." + Символы.ПС
				+ "Ссылка на документ загрузки: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка);
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
				"ERM: Oracle MI successful loading", ТекстСообщения, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(14, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
				"ERM: Oracle MI loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проведение транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузкиOracleSmith(ДокументЗагрузки, СтруктураНастроек)
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных, ТипВнешнейСистемы");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхOracle.ПолучитьСтруктуруКолонокТаблицыДанных(Перечисления.ТипыСоответствий.OracleSmith));
	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", 0);
	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
	//СтруктураПараметров.Вставить("ЛистФайла", ДокументЗагрузки.ЛистФайла);
	СтруктураПараметров.Вставить("ИмяРегистра", "OracleSmithSourceData");
	СтруктураПараметров.Вставить("ТипВнешнейСистемы", ДокументЗагрузки.Source);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	СтруктураЗаписиЛогов = Новый Структура;
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("ДокументЗагрузки", ДокументЗагрузки.Ссылка);
	СтруктураЗаписиЛогов.Вставить("Source", ДокументЗагрузки.Source);
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.LoadedSourseData);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", СтруктураНастроек.НачалоОбработкиФайла);
	СтруктураЗаписиЛогов.Вставить("ОбъемВБайтах", СтруктураНастроек.ОбъемВБайтах);
	СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracle.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
					"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
				"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем загрузку данных из файла
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка настроек синхронизации
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CheckedConflicts);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracle.ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.ТаблицаКоллизий.Количество() > 0 Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "Найдены ошибки синхронизации данных");
			
			ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
					"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
				"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проверку синхронизации данных
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// создание транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CreatedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracle.СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища);
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
				"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем создание транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проведение транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.PostedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracle.ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(14, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
					"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		Иначе
			
			ТекстСообщения = "Файл " + СтруктураНастроек.ИмяПолученногоФайла + " загружен успешно." + Символы.ПС
				+ "Ссылка на документ загрузки: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка);
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
				"ERM: Oracle Smith successful loading", ТекстСообщения, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(14, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(ДокументЗагрузки.Source, "Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleSmith),
				"ERM: Oracle Smith loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle Smith loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проведение транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузкиLawson(ДокументЗагрузки, СтруктураНастроек)
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхLawson.ПолучитьСтруктуруКолонокТаблицыДанных());
	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", 0);
	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
	СтруктураПараметров.Вставить("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.Lawson);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	СтруктураЗаписиЛогов = Новый Структура;
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("ДокументЗагрузки", ДокументЗагрузки.Ссылка);
	СтруктураЗаписиЛогов.Вставить("Source", Перечисления.ТипыСоответствий.Lawson);
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.LoadedSourseData);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", СтруктураНастроек.НачалоОбработкиФайла);
	СтруктураЗаписиЛогов.Вставить("ОбъемВБайтах", СтруктураНастроек.ОбъемВБайтах);
	СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Документы.ЗагрузкаДанныхLawson.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
					"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
				"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем загрузку данных из файла
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка настроек синхронизации
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CheckedConflicts);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхLawson.ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.ТаблицаКоллизий.Количество() > 0 Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "Найдены ошибки синхронизации данных");
			
			ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
					"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
				"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проверку синхронизации данных
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// создание транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CreatedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхLawson.СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища);
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
				"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем создание транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проведение транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.PostedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхLawson.ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(14, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
					"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		Иначе
			
			ТекстСообщения = "Файл " + СтруктураНастроек.ИмяПолученногоФайла + " загружен успешно." + Символы.ПС
				+ "Ссылка на документ загрузки: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка);
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
				"ERM: Lawson successful loading", ТекстСообщения, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(14, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.Lawson),
				"ERM: Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Lawson loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проведение транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузкиOracleMISO(ДокументЗагрузки, СтруктураНастроек)
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхOracleSalesOrdersDetails.ПолучитьСтруктуруКолонокТаблицыДанных());
	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", 0);
	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
	СтруктураПараметров.Вставить("ЛистФайла", ДокументЗагрузки.ЛистФайла);
	СтруктураПараметров.Вставить("ИмяРегистра", "OracleSalesOrdersDetailsSourceData");
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	СтруктураЗаписиЛогов = Новый Структура;
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("ДокументЗагрузки", ДокументЗагрузки.Ссылка);
	СтруктураЗаписиЛогов.Вставить("Source", Перечисления.ТипыСоответствий.OracleMI);
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.LoadedSourseData);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", СтруктураНастроек.НачалоОбработкиФайла);
	СтруктураЗаписиЛогов.Вставить("ОбъемВБайтах", СтруктураНастроек.ОбъемВБайтах);
	СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracleSalesOrdersDetails.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.OracleMI, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
					"ERM: Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Oracle MI SO loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.OracleMI, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
				"ERM: Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle MI SO loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем загрузку данных из файла
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// обновление документов
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.UpdatedDocuments);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхOracleSalesOrdersDetails.ОбновитьРеквизитыSalesOrders(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(14, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.OracleMI, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
					"ERM: Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("Oracle MI loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		Иначе
			
			ДокументЗагрузкиОбъект = ДокументЗагрузки.Ссылка.ПолучитьОбъект();
			
			Если РезультатЭтапа.Свойство("ОбновленныеSO") Тогда
				ДокументЗагрузкиОбъект.ОбновленныеSO.Загрузить(РезультатЭтапа.ОбновленныеSO);
			КонецЕсли;
			
			Если РезультатЭтапа.Свойство("НенайденныеSO") Тогда
				ДокументЗагрузкиОбъект.НенайденныеSO.Загрузить(РезультатЭтапа.НенайденныеSO);
			КонецЕсли;
			
			Если РезультатЭтапа.Свойство("НенайденныеInvoices") Тогда
				ДокументЗагрузкиОбъект.НенайденныеInvoices.Загрузить(РезультатЭтапа.НенайденныеInvoices);
			КонецЕсли;
			
			Если ДокументЗагрузкиОбъект.Модифицированность() Тогда
				ДокументЗагрузкиОбъект.Записать();
			КонецЕсли;
			
			ТекстСообщения = "Файл " + СтруктураНастроек.ИмяПолученногоФайла + " загружен успешно." + Символы.ПС
				+ "Ссылка на документ загрузки: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка);
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
				"ERM: Oracle MI SO successful loading", ТекстСообщения, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(14, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.OracleMI, "Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.OracleMI),
				"ERM: Oracle MI SO loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("Oracle MI SO loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проведение транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузкиHOB_Receivables(ДокументЗагрузки, СтруктураНастроек)
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхHOB.ПолучитьСтруктуруКолонокТаблицыДанных(Перечисления.HOBTransactionType.Receivables));
	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", 0);
	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
	СтруктураПараметров.Вставить("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	СтруктураПараметров.Вставить("ТипТранзакций", Перечисления.HOBTransactionType.Receivables);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	СтруктураЗаписиЛогов = Новый Структура;
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("ДокументЗагрузки", ДокументЗагрузки.Ссылка);
	СтруктураЗаписиЛогов.Вставить("Source", Перечисления.ТипыСоответствий.HOBs);
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.LoadedSourseData);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", СтруктураНастроек.НачалоОбработкиФайла);
	СтруктураЗаписиЛогов.Вставить("ОбъемВБайтах", СтруктураНастроек.ОбъемВБайтах);
	СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем загрузку данных из файла
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка настроек синхронизации
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CheckedConflicts);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.ТаблицаКоллизий.Количество() > 0 Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "Найдены ошибки синхронизации данных");
			
			ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проверку синхронизации данных
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// создание транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CreatedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища);
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем создание транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проведение транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.PostedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		Иначе
			
			ТекстСообщения = "Файл " + СтруктураНастроек.ИмяПолученногоФайла + " загружен успешно." + Символы.ПС
				+ "Ссылка на документ загрузки: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка);
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Receivables successful loading", ТекстСообщения, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Receivables loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB Receivables loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проведение транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузкиHOB_Accruals(ДокументЗагрузки, СтруктураНастроек)
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхHOB.ПолучитьСтруктуруКолонокТаблицыДанных(Перечисления.HOBTransactionType.Accrual));
	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", 0);
	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
	СтруктураПараметров.Вставить("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	СтруктураПараметров.Вставить("ТипТранзакций", Перечисления.HOBTransactionType.Accrual);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	СтруктураЗаписиЛогов = Новый Структура;
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("ДокументЗагрузки", ДокументЗагрузки.Ссылка);
	СтруктураЗаписиЛогов.Вставить("Source", Перечисления.ТипыСоответствий.HOBs);
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.LoadedSourseData);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", СтруктураНастроек.НачалоОбработкиФайла);
	СтруктураЗаписиЛогов.Вставить("ОбъемВБайтах", СтруктураНастроек.ОбъемВБайтах);
	СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем загрузку данных из файла
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка настроек синхронизации
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CheckedConflicts);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.ТаблицаКоллизий.Количество() > 0 Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "Найдены ошибки синхронизации данных");
			
			ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проверку синхронизации данных
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// создание транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CreatedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища);
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем создание транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проведение транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.PostedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		Иначе
			
			ТекстСообщения = "Файл " + СтруктураНастроек.ИмяПолученногоФайла + " загружен успешно." + Символы.ПС
				+ "Ссылка на документ загрузки: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка);
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Accruals successful loading", ТекстСообщения, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB Accruals loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB Accruals loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проведение транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузкиHOB_JV(ДокументЗагрузки, СтруктураНастроек)
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхHOB.ПолучитьСтруктуруКолонокТаблицыДанных(Перечисления.HOBTransactionType.JV));
	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", 0);
	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
	СтруктураПараметров.Вставить("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.HOBs);
	СтруктураПараметров.Вставить("ТипТранзакций", Перечисления.HOBTransactionType.JV);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	СтруктураЗаписиЛогов = Новый Структура;
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("ДокументЗагрузки", ДокументЗагрузки.Ссылка);
	СтруктураЗаписиЛогов.Вставить("Source", Перечисления.ТипыСоответствий.HOBs);
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.LoadedSourseData);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", СтруктураНастроек.НачалоОбработкиФайла);
	СтруктураЗаписиЛогов.Вставить("ОбъемВБайтах", СтруктураНастроек.ОбъемВБайтах);
	СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем загрузку данных из файла
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка настроек синхронизации
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CheckedConflicts);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.ТаблицаКоллизий.Количество() > 0 Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "Найдены ошибки синхронизации данных");
			
			ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проверку синхронизации данных
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// создание транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.CreatedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища);
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем создание транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проведение транзакций
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.PostedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		Документы.ЗагрузкаДанныхHOB.ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
					"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		Иначе
			
			ТекстСообщения = "Файл " + СтруктураНастроек.ИмяПолученногоФайла + " загружен успешно." + Символы.ПС
				+ "Ссылка на документ загрузки: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка);
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB JV successful loading", ТекстСообщения, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(13, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.HOBs, "HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(АдресаПолучателейСообщенийОбОшибках(Перечисления.ТипыСоответствий.HOBs),
				"ERM: HOB JV loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("HOB JV loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проведение транзакций
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
КонецПроцедуры

Процедура ОбработатьДокументЗагрузкиCRMClients(ДокументЗагрузки, СтруктураНастроек)
	
//	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
//	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
//	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхCRMAccountsExtract.ПолучитьСтруктуруКолонокТаблицыДанных());
//	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
//	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", Истина);
//	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", 2);
//	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", 0);
//	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
//	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
//	СтруктураПараметров.Вставить("ТипВнешнейСистемы", Перечисления.ТипыСоответствий.Lawson);
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументЗагрузки);
	СтруктураПараметров.Вставить("СтруктураКолонок", Документы.ЗагрузкаДанныхCRMAccountsExtract.ПолучитьСтруктуруКолонокТаблицыДанных());
	СтруктураПараметров.Вставить("ИсточникДанных", ДокументЗагрузки.ИсточникДанных);
	//СтруктураПараметров.Вставить("ЛистФайла", Объект.ЛистФайла);
	СтруктураПараметров.Вставить("Ссылка", ДокументЗагрузки.Ссылка);
	СтруктураПараметров.Вставить("Дата", ДокументЗагрузки.Дата);
	СтруктураПараметров.Вставить("ИмяРегистра", "CRMAccountsExtractSourceData");
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	СтруктураЗаписиЛогов = Новый Структура;
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("ДокументЗагрузки", ДокументЗагрузки.Ссылка);
	//СтруктураЗаписиЛогов.Вставить("Source", Перечисления.ТипыСоответствий.Lawson);
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.LoadedSourseData);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", СтруктураНастроек.НачалоОбработкиФайла);
	СтруктураЗаписиЛогов.Вставить("ОбъемВБайтах", СтруктураНастроек.ОбъемВБайтах);
	СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Документы.ЗагрузкаДанныхCRMAccountsExtract.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		ДокОбъект = СтруктураПараметров.Ссылка.ПолучитьОбъект();

		Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ОшибкаЗаполнения") Тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураДанных.ОшибкаЗаполнения,,"Объект.ЛистФайла");
			//Возврат;
			ВызватьИсключение СтруктураДанных.ОшибкаЗаполнения;
		КонецЕсли;

		Если СтруктураДанных.Свойство("ТаблицаНовыеParentClients") Тогда
			ДокОбъект.НовыеParentClients.Загрузить(СтруктураДанных.ТаблицаНовыеParentClients);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ТаблицаНовыеSalesКлиенты") Тогда
			ДокОбъект.НовыеSalesКлиенты.Загрузить(СтруктураДанных.ТаблицаНовыеSalesКлиенты);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ТаблицаНовыеBillingКлиенты") Тогда
			ДокОбъект.НовыеBillingКлиенты.Загрузить(СтруктураДанных.ТаблицаНовыеBillingКлиенты);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ТаблицаИзмененныеCRMID") Тогда
			ДокОбъект.ИзмененныеCRMID.Загрузить(СтруктураДанных.ТаблицаИзмененныеCRMID);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ТаблицаИзмененныеBillingID") Тогда
			ДокОбъект.ИзмененныеBillingID.Загрузить(СтруктураДанных.ТаблицаИзмененныеBillingID);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ТаблицаИзмененныеParentClients") Тогда
			ДокОбъект.ИзмененныеParentClients.Загрузить(СтруктураДанных.ТаблицаИзмененныеParentClients);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ТаблицаИзмененныеРеквизиты") Тогда
			ДокОбъект.ИзмененныеРеквизиты.Загрузить(СтруктураДанных.ТаблицаИзмененныеРеквизиты);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ТаблицаКлиентыДляДективации") Тогда
			ДокОбъект.КлиентыДляДективации.Загрузить(СтруктураДанных.ТаблицаКлиентыДляДективации);
		КонецЕсли;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		РезультатЭтапа = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЭтапа.Свойство("ОшибкаЗаполнения") Тогда
			
			СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", РезультатЭтапа.ОшибкаЗаполнения);
			
			ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
			
			СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
			ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
			
			//СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
			Попытка
				РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCRMClients.Получить(),
					"ERM: CRM Clients loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
				СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
			Исключение
			КонецПопытки;
				
			ЗаписьЖурналаРегистрации("CRM Clients loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
			
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(11, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		//СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "Lawson loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCRMClients.Получить(),
				"ERM: CRM Clients loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("CRM Clients loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем загрузку данных из файла
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка настроек синхронизации
	СтруктураЗаписиЛогов.Вставить("Период", ТекущаяДата());
	СтруктураЗаписиЛогов.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.PostedTransactions);
	СтруктураЗаписиЛогов.Вставить("ДатаНачала", ТекущаяДата());
	
	Попытка
		
		ДокОбъект = СтруктураПараметров.Ссылка.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
	Исключение
		
		СтруктураЗаписиЛогов.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		
		ПолучитьСообщениеОбОшибке(12, СтруктураНастроек);
		
		СтрокаСообщения = НСтр("ru = '" + СтруктураЗаписиЛогов.ОписаниеОшибки + ": ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолучитьНавигационнуюСсылку(ДокументЗагрузки.Ссылка));
		ДополнитьСообщениеОбОшибке(СтрокаСообщения, СтруктураНастроек);
		
		//СформироватьЗадачуОтветственным(Перечисления.ТипыСоответствий.Lawson, "CRM Clients loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, ДокументЗагрузки.Ссылка);
		Попытка
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCRMClients.Получить(),
				"ERM: CRM Clients loading error", СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР, , ТипТекстаПочтовогоСообщения.ПростойТекст);
			СтруктураЗаписиЛогов.Вставить("СформированоУведомлениеОбОшибке", Истина);
		Исключение
		КонецПопытки;
			
		ЗаписьЖурналаРегистрации("CRM Clients loading error", УровеньЖурналаРегистрации.Ошибка, , , СтруктураНастроек.СтрокаСообщенияОбОшибкеЖР);
		
	КонецПопытки;
	
	// логируем проверку синхронизации данных
	СтруктураЗаписиЛогов.Вставить("ДатаЗавершения", ТекущаяДата());
	РегистрыСведений.ИсторияЗагрузкиДанных.ДобавитьЗапись(СтруктураЗаписиЛогов);
	
	Если ЗначениеЗаполнено(СтруктураЗаписиЛогов.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	

	
КонецПроцедуры

Функция ПреобразоватьВXLSB(ФайлЭксель)
	
	ЭкземплярExcel = Новый COMОбъект("Excel.Application");
	Книга = ЭкземплярExcel.Application.Workbooks.Open(ФайлЭксель.ПолноеИмя);
	ПутьКФайлу = СтрЗаменить(ФайлЭксель.ПолноеИмя, ".xls", ".xlsb");
	Книга.SaveAs(ПутьКФайлу, 50);
	
	ЭкземплярExcel.Quit();
	ЭкземплярExcel = Неопределено;
	
	Возврат Новый Файл(ПутьКФайлу);
	
КонецФункции

Процедура ДействияПриОкончанииЗагрузки(СтруктураНастроек)
	
	Если СтруктураНастроек.FTP Тогда
		СтруктураНастроек.FTPСоединение.Удалить(СтруктураНастроек.ИмяКаталогаОбменаИнформацией, СтруктураНастроек.ИмяПолученногоФайла);	
	Иначе
		Если Не ПустаяСтрока(СтруктураНастроек.ИмяПолученногоФайла) Тогда
			УдалитьФайлы(СтруктураНастроек.ИмяКаталогаОбменаИнформацией, СтруктураНастроек.ИмяПолученногоФайла);
		КонецЕсли;
		УдалитьФайлы(СтруктураНастроек.ИмяКаталогаСообщенияОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция АдресаПолучателейСообщенийОбОшибках(Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ИсполнителиЗадач.Исполнитель КАК Справочник.Пользователи).ПользовательLDAP.Mail, """") КАК Mail
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации";
	
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", Source);
	Запрос.УстановитьПараметр("РольИсполнителя", Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивАдресов = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Mail) Тогда
			МассивАдресов.Добавить(ВыборкаДетальныеЗаписи.Mail);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивАдресов, ", ");
	
КонецФункции

Процедура СформироватьЗадачуОтветственным(Source, Наименование, Описание, Предмет = Неопределено)
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.Наименование = Наименование;
	Задача.Описание = Описание;
	Задача.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	Задача.ОсновнойОбъектАдресации = Source;
	Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
	Задача.Автор = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(Предмет) Тогда
		Задача.Предмет = Предмет;
	КонецЕсли;
	Задача.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИсторииДанных() Экспорт

	ИсторияДанных.ОбновитьИсторию();

КонецПроцедуры
/////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ СИНХРОНИЗАЦИИ СТРОКИ ТАБЛИЦЫ ЗНАЧЕНИЙ С БАЗОЙ ДАННЫХ

Процедура СинхронизироватьСтрокиТаблицыСБазойДанных(ТаблицаБазы, ТаблицаДокумента, СправочникМенеджер, Отказ, Заголовок=Неопределено) Экспорт
	
	// синхронизирует таблицу документа с базой данных
	//
	// Параметры:
	//  ТаблицаБазы  		- ТаблицаЗначений. Обязательно присутствие реквизита Ссылка.
	//  ТаблицаДокумента	- ТаблицаЗначений. Обязательно присутствие реквизита Ссылка.
	//	СправочникМенеджер	- Справочник-менеджер для создания новых объектов. 
	//						  Например "Справочники.СтрокиИнвойса"
	
	ОписаниеТиповЧ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0));
	
	// получим и подготовим рабочую ТЗ
	ТаблицаРабочая = ТаблицаБазы.Скопировать();
	ТаблицаРабочая.Колонки.Добавить("Показатель", ОписаниеТиповЧ);
	ТаблицаРабочая.ЗаполнитьЗначения(-1, "Показатель");
	
	// объединим две таблицы
	Для каждого Стр из ТаблицаДокумента Цикл
		НовСтр = ТаблицаРабочая.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Показатель = 1;
	КонецЦикла;
	
	// подготовим имена колонок для свертки таблицы
	ИменаКолонокСвертки = "";
	Для каждого Колонка ИЗ ТаблицаБазы.Колонки Цикл
		ИменаКолонокСвертки = ИменаКолонокСвертки + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонокСвертки = Сред(ИменаКолонокСвертки, 2);
	
	// свернем вновь образованную таблицу
	ТаблицаРабочая.Свернуть(ИменаКолонокСвертки, "Показатель");
	ТаблицаРабочая.Сортировать("Показатель");
	ТаблицаРабочая.Индексы.Добавить("Ссылка");
	
	// обработаем полученную таблицу
	Для Каждого Стр Из ТаблицаРабочая Цикл
		
		Если ЗначениеЗаполнено(Стр.Ссылка) Тогда
			
			Если Стр.Показатель = 1 Тогда
				
				// строка изменилась, обработаем это
				Объект = Стр.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Объект, Стр);
				Объект.ПометкаУдаления = Ложь;
				ПопыткаЗаписиОбъекта(Объект, Отказ);
				
			ИначеЕсли Стр.Показатель = -1 Тогда
				
				// Показатель = -1, строку удалили или изменили
				// Пометим на удаление элемент справочника
				// Если его не удалили, а изменили, то пометка удаления потом снимется
				// Кажется, что в случаи изменения, помечать на удаление не надо, однако это нужно для контроля уникальности
				
				Объект = Стр.Ссылка.ПолучитьОбъект();
				Объект.ПометкаУдаления = Истина;
				ПопыткаЗаписиОбъекта(Объект, Отказ);
				
			КонецЕсли;
			
		Иначе
			
			// строка добавлена
			Объект = СправочникМенеджер.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Объект, Стр);
			ПопыткаЗаписиОбъекта(Объект, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПопыткаЗаписиОбъекта(Объект, Отказ) Экспорт
	
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Не удалось записать """ + Объект + """! См. сообщения выше.",
		Объект, , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьAccountingUnitsИзAU_master() Экспорт
	Обработки.AULoading.ЗагрузитьAccountingUnitsИзAU_master();
КонецПроцедуры

Процедура ИзменитьСтруктуруСегментов(Стр, Segment, SubSegment, SsubSegment) Экспорт
	
	//сегменты
	
	//Segment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(Стр.Segment));
	Segment = НайтиСегмент(СокрЛП(Стр.Segment), Истина, Ложь);
	SegmentПометитьНаУдаление = НайтиСегмент(СокрЛП(Стр.Segment), Ложь, Ложь);
	
	Если ЗначениеЗаполнено(SegmentПометитьНаУдаление) Тогда
		SegmentПометитьНаУдаление.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Segment) Тогда
		
		SegmentОбъект = Справочники.Сегменты.СоздатьГруппу();
		SegmentОбъект.Код = СокрЛП(Стр.Segment);
		SegmentОбъект.Наименование = СокрЛП(Стр.Segment);
		SegmentОбъект.Родитель = Справочники.Сегменты.ПустаяСсылка();
		SegmentОбъект.Записать();
		Segment = SegmentОбъект.Ссылка;
		
	иначе
		
		SegmentОбъект = Segment.ПолучитьОбъект();
		
		//Если Не SegmentОбъект.ЭтоГруппа Тогда 
		//	
		//	//Запоминаем ссылку на текущий элемент
		//	УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(SegmentОбъект.Ссылка.УникальныйИдентификатор());
		//	
		//	//Создаем новый элемент - группу
		//	НовыйЭлемент = Справочники.Сегменты.СоздатьГруппу();    
		//	НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
		//	
		//	//... с такими же параметрами, что и текущий
		//	НовыйЭлемент.Код                 = SegmentОбъект.Код;
		//	НовыйЭлемент.Наименование        = SegmentОбъект.Наименование;
		//	НовыйЭлемент.Родитель            = Справочники.Сегменты.ПустаяСсылка();
		//	//НовыйЭлемент.Source              = Перечисления.ТипыСоответствий.Lawson;
		//	
		//	//Удаляем текущий - помечаем на удаление
		//	SegmentОбъект.Удалить();
		//	//SegmentОбъект.УстановитьПометкуУдаления(Истина);
		//	
		//	//Записываем новый (группу)
		//	НовыйЭлемент.Записать();
		//	
		//	Segment = НовыйЭлемент.Ссылка;
		//	
		//иначе
			
		РГСофтКлиентСервер.УстановитьЗначение(SegmentОбъект.Родитель, Справочники.Сегменты.ПустаяСсылка());
		
		Если SegmentОбъект.Модифицированность() Тогда 
			SegmentОбъект.Записать();
		КонецЕсли;  
		Segment = SegmentОбъект.Ссылка;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	//SubSegment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(Стр.SubSegment));
	SubSegment = НайтиСегмент(СокрЛП(Стр.SubSegment), Истина, Ложь);
	SubSegmentПометитьНаУдаление = НайтиСегмент(СокрЛП(Стр.SubSegment), Ложь, Ложь);
	
	Если ЗначениеЗаполнено(SubSegmentПометитьНаУдаление) Тогда
		SubSegmentПометитьНаУдаление.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(SubSegment) Тогда 
		
		SubSegmentОбъект = Справочники.Сегменты.СоздатьГруппу();
		SubSegmentОбъект.Код = СокрЛП(Стр.SubSegment);
		SubSegmentОбъект.Наименование = СокрЛП(Стр.SubSegment);
		SubSegmentОбъект.Родитель = Segment;
		SubSegmentОбъект.Записать();
		SubSegment = SubSegmentОбъект.Ссылка;
		
	иначе
		
		SubSegmentОбъект = SubSegment.получитьОбъект();
		
		//Если Не SubSegmentОбъект.ЭтоГруппа Тогда 
		//	
		//	//Запоминаем ссылку на текущий элемент
		//	УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(SubSegmentОбъект.Ссылка.УникальныйИдентификатор());
		//	
		//	//Создаем новый элемент - группу
		//	НовыйЭлемент = Справочники.Сегменты.СоздатьГруппу();    
		//	НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
		//	
		//	//... с такими же параметрами, что и текущий
		//	НовыйЭлемент.Код                 = SubSegmentОбъект.Код;
		//	НовыйЭлемент.Наименование        = SubSegmentОбъект.Наименование;
		//	НовыйЭлемент.Родитель            = Segment;
		//	//НовыйЭлемент.Source              = Перечисления.ТипыСоответствий.Lawson;
		//	
		//	//Удаляем текущий - помечаем на удаление
		//	SubSegmentОбъект.Удалить();
		//	//SubSegmentОбъект.УстановитьПометкуУдаления(Истина);
		//	
		//	//Записываем новый (группу)
		//	НовыйЭлемент.Записать();
		//	
		//	SubSegment = НовыйЭлемент.Ссылка;
		//	
		//иначе
			// { RGS TAlmazova 21.02.2017 17:01:42 - Убираем удаление, перезаписываем существующий SubSegment
			//МассивНовыхЭлементов = Новый Массив;
			
		Если НЕ ЗначениеЗаполнено(SubSegmentОбъект.Родитель) Тогда 
			
			//сделаем все подчиненные группы - элементами, иначе будет превышение уровня элементов
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("SubSegment", SubSegmentОбъект.Ссылка);
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	Сегменты.Ссылка,
			               |	Сегменты.Код,
			               |	Сегменты.Наименование,
			               |	Сегменты.Родитель
			               |ИЗ
			               |	Справочник.Сегменты КАК Сегменты
			               |ГДЕ
			               |	Сегменты.Ссылка В ИЕРАРХИИ(&SubSegment)
			               |	И Сегменты.ЭтоГруппа
			               |	И Сегменты.Ссылка <> &SubSegment";
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			ТЗДляИзменения = ТЗ.Скопировать();
			
			//Для Каждого СтрТЗДляИзменения из ТЗДляИзменения Цикл
			//	
			//	//Запоминаем ссылку на текущий элемент
			//	УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(СтрТЗДляИзменения.Ссылка.УникальныйИдентификатор());
			//	
			//	//Создаем новый элемент - группу
			//	НовыйЭлемент = Справочники.Сегменты.СоздатьЭлемент();    
			//	НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
			//	
			//	//... с такими же параметрами, что и текущий
			//	НовыйЭлемент.Код                 = СтрТЗДляИзменения.Код;
			//	НовыйЭлемент.Наименование        = СтрТЗДляИзменения.Наименование;
			//	НовыйЭлемент.Родитель            = SubSegmentОбъект.Ссылка;
			//	
			//	//Удаляем текущий
			//	СтрТЗДляИзменения.Ссылка.получитьОбъект().Удалить();
			//	
			//	//добавляем новый 
			//	МассивНовыхЭлементов.Добавить(НовыйЭлемент);
			//	
			//КонецЦикла;
				
			КонецЕсли;
				
			// } RGS TAlmazova 21.02.2017 17:02:09 - Убираем удаление, перезаписываем существующий SubSegment
			
			РГСофтКлиентСервер.УстановитьЗначение(SubSegmentОбъект.Родитель, Segment);
			
			Если SubSegmentОбъект.Модифицированность() Тогда 
				SubSegmentОбъект.Записать();
			КонецЕсли;
			
			//Для Каждого НовыйЭлемент из МассивНовыхЭлементов Цикл 
			//	НовыйЭлемент.Записать();
			//КонецЦикла;
			
			SubSegment = SubSegmentОбъект.Ссылка;
				
			//КонецЕсли;
		
	КонецЕсли;
	
	//SsubSegment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(Стр.SsubSegment));
	SsubSegment = НайтиСегмент(СокрЛП(Стр.SsubSegment), Ложь, Ложь);
	SsubSegmentПометитьНаУдаление = НайтиСегмент(СокрЛП(Стр.SsubSegment), Истина, Ложь);
	SsubSegmentПомеченныйНаУдаление = НайтиСегмент(СокрЛП(Стр.SsubSegment), Ложь, Истина);
	
	Если ЗначениеЗаполнено(SsubSegmentПометитьНаУдаление) Тогда
		SsubSegmentПометитьНаУдаление.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(SsubSegment) И ЗначениеЗаполнено(SsubSegmentПомеченныйНаУдаление) Тогда
		 SsubSegmentПомеченныйНаУдаление.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		 SsubSegment = SsubSegmentПомеченныйНаУдаление;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(SsubSegment) Тогда 
		
		SsubSegmentОбъект = Справочники.Сегменты.СоздатьЭлемент();
		SsubSegmentОбъект.Код = СокрЛП(Стр.SsubSegment);
		SsubSegmentОбъект.Наименование = СокрЛП(Стр.SsubSegment);
		SsubSegmentОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
		SsubSegmentОбъект.Родитель = SubSegment;
		SsubSegmentОбъект.Записать();
		SsubSegment = SsubSegmentОбъект.Ссылка;
		
	иначе
		
		SsubSegmentОбъект = SsubSegment.получитьОбъект();
		
		//Если SsubSegmentОбъект.ЭтоГруппа Тогда 
		//	
		//	//Запоминаем ссылку на текущий элемент                           
		//	//УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(SsubSegmentОбъект.Ссылка.УникальныйИдентификатор());
		//	УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(Новый УникальныйИдентификатор());
		//	
		//	//Создаем новый элемент - группу
		//	НовыйЭлемент = Справочники.Сегменты.СоздатьЭлемент();    
		//	НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
		//	
		//	//... с такими же параметрами, что и текущий
		//	НовыйЭлемент.Код                 = SsubSegmentОбъект.Код;
		//	НовыйЭлемент.Наименование        = SsubSegmentОбъект.Наименование;
		//	НовыйЭлемент.Родитель            = SubSegment;
		//	
		//	//Удаляем текущий - помечаем на удаление
		//	//SsubSegmentОбъект.Удалить();
		//	SsubSegmentОбъект.УстановитьПометкуУдаления(Истина);

		//	
		//	//Записываем новый (группу)
		//	НовыйЭлемент.Записать();
		//	
		//	SsubSegment = НовыйЭлемент.Ссылка; 		
		//	
		//иначе
		//	
		РГСофтКлиентСервер.УстановитьЗначение(SsubSegmentОбъект.Родитель, SubSegment);
		//SsubSegmentОбъект.УстановитьПометкуУдаления(Ложь);
		Если SsubSegmentОбъект.Модифицированность() Тогда 
			SsubSegmentОбъект.Записать();
		КонецЕсли;
		
		SsubSegment = SsubSegmentОбъект.Ссылка;
		
		//КонецЕсли;
		
	КонецЕсли;
	
	// { RGS TAlmazova 21.02.2017 17:01:42 - Помечаем на удаление SubSegment, которые больше не используются
	Если ЗначениеЗаполнено(ТЗДляИзменения) Тогда
		Для Каждого СтрТЗДляИзменения из ТЗДляИзменения Цикл
			
			Если ЗначениеЗаполнено(СтрТЗДляИзменения.Родитель) Тогда
				//Удаляем текущий - помечаем на удаление
				СтрТЗДляИзменения.Ссылка.получитьОбъект().УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	// } RGS TAlmazova 21.02.2017 17:01:42 - Помечаем на удаление SubSegment, которые больше не используются


КонецПроцедуры

Функция НайтиСегмент(КодСегмента, ЭтоГруппа, ПометкаУдаления) Экспорт
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сегменты.Ссылка,
		|	Сегменты.ЭтоГруппа
		|ИЗ
		|	Справочник.Сегменты КАК Сегменты
		|ГДЕ
		|	Сегменты.Код = &Код
		|	И Сегменты.ЭтоГруппа = &ЭтоГруппа
		|	И Сегменты.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", КодСегмента);
	Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции

Процедура СообщитьИЗалоггировать(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий="") Экспорт
	
	Сообщить(ИмяСобытия + Символы.ПС + Комментарий);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		Уровень,
		ОбъектМетаданных,
		Данные,
		Комментарий);
	
КонецПроцедуры

Функция ПолучитьДатуСервера() Экспорт
	Возврат ТекущаяДата();
КонецФункции

Функция ПреобразоватьВДату(Знач Строчка, Знач ВидДаты) Экспорт
	
	Если ТипЗнч(Строчка) = Тип("Строка") Тогда
		СтрокаДляОбработки = СокрЛП(Строчка);
		Если СтрДлина(СтрокаДляОбработки) = 7 ИЛИ СтрДлина(СтрокаДляОбработки) = 9 Тогда
			СтрокаДляОбработки = "0" + СтрокаДляОбработки;
		КонецЕсли;
		
		День = Лев(СтрокаДляОбработки, 2);
		Месяц = Сред(СтрокаДляОбработки, 3, 2);
		Год = Прав(СтрокаДляОбработки, 2);
		Если СтрНайти(Месяц, "/") ИЛИ СтрНайти(Месяц, ".") ИЛИ СтрНайти(Месяц, ",") Тогда
			Месяц = Сред(СтрокаДляОбработки, 4, 2);
		КонецЕсли;
		
		Если СтрДлина(СтрокаДляОбработки) = 10 ИЛИ СтрДлина(СтрокаДляОбработки) = 18 Тогда
			Год = Сред(СтрокаДляОбработки, 7, 4);
		Иначе	
			Год = Прав(СтрокаДляОбработки, 2);
			Попытка
				Если Число(Год) > 50 Тогда
					Год = "19" + Год;
				Иначе
					Год = "20" + Год;
				КонецЕсли;
			Исключение
				Возврат Дата(1,1,1);
			КонецПопытки;
		КонецЕсли; 
		
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Дата") Тогда
		Возврат Строчка;
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Число") Тогда 
		День = Цел(Строчка/10000);
		Месяц = Цел((Строчка - День*10000)/100);
		Год = Строчка - День*10000 - Месяц * 100;
		Попытка
			Если Число(Год) > 50 Тогда
				Год = 1900 + Год;
			Иначе
				Год = 2000 + Год;
			КонецЕсли;
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	Иначе		
		Возврат Дата(1,1,1);
	КонецЕсли;	
	Попытка 
		Возврат Дата(Год, Месяц, День);
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
	
КонецФункции

Процедура ЗарегистрироватьПочтовоеСообщение(АдресПолучателя, Тема, Тело, Вложение=Неопределено, ТипТекста = Неопределено, Копия = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.EMailQueue.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.EMail = АдресПолучателя;
	МенеджерЗаписи.Date = ТекущаяДата();
	МенеджерЗаписи.Subject = Тема;
	МенеджерЗаписи.Body = СокрЛП(Тело);
	МенеджерЗаписи.ТипТекста = ТипТекста;
	МенеджерЗаписи.Copy = Копия;
	МенеджерЗаписи.Attachment = Вложение;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура РассылкаEMail() Экспорт 
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	EMailQueue.EMail,
	|	EMailQueue.Date,
	|	EMailQueue.Subject,
	|	EMailQueue.Body,
	|	EMailQueue.Copy,
	|	EMailQueue.ТипТекста,
	|	EMailQueue.АдресОтвета,
	|	EMailQueue.Attachment
	|ИЗ
	|	РегистрСведений.EMailQueue КАК EMailQueue
	|
	|УПОРЯДОЧИТЬ ПО
	|	EMailQueue.Date";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ИмяФайла = "";
	Если Выборка.Следующий() Тогда
		
		МенеджерЗаписи = РегистрыСведений.EMailQueue.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.EMail = Выборка.EMail;
		МенеджерЗаписи.Date = Выборка.Date;
		МенеджерЗаписи.Удалить();
		
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", Выборка.EMail);	
		ПараметрыПисьма.Вставить("Тема", Выборка.Subject);
		ПараметрыПисьма.Вставить("Тело", Выборка.Body);
		ПараметрыПисьма.Вставить("АдресОтвета", Выборка.АдресОтвета);
		// { RGS AGorlenko 25.12.2015 14:05:15 - поддержка различных типов текста
		//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		ПараметрыПисьма.Вставить("ТипТекста", ?(Выборка.ТипТекста.Пустая(), Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Выборка.ТипТекста));
		// } RGS AGorlenko 25.12.2015 14:05:17 - поддержка различных типов текста
		// { RGS AGorlenko 19.12.2015 0:20:27 - поддержка копий
		ПараметрыПисьма.Вставить("Копии", Выборка.Copy);
		// } RGS AGorlenko 19.12.2015 0:20:32 - поддержка копий
		
		Если Выборка.Attachment <> Неопределено Тогда 
			
			// { RGS TAlmazova 11.07.2018 0:20:27
//			Вложения = Новый Соответствие;
//			Вложение = Выборка.Attachment.Получить();
//			
//			Если Вложение <> Неопределено Тогда 
//				
//				ИмяВложения = "";
//				
//				Если ТипЗнч(Вложение) = Тип("ТабличныйДокумент") Тогда  
//					
//					ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xls");
//					ВременныйФайл = Новый Файл(ИмяВременногоФайла);
//					
//					Если СтрНайти(Выборка.Subject, "List of unbilled invoices") = 1 Тогда
//						ИмяВложения = "Notification_Unbilled_Invoices_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
//					ИначеЕсли СтрНайти(Выборка.Subject, "PM notification") = 0 Тогда
//						ИмяВложения = "Notification_KS_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
//					Иначе
//						ИмяВложения = "Notification_PM_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
//					КонецЕсли;
//					
//					ИмяФайла = ВременныйФайл.Путь + ИмяВложения;
//					
//					Вложение.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
//					
//					Вложение = Новый Файл(ИмяФайла);
//					
//				КонецЕсли;
//				
//				Вложения.Вставить(ИмяВложения, Вложение);
//				ПараметрыПисьма.Вставить("Вложения", Вложения);
//			КонецЕсли;

			Вложения = Новый Массив;

			Вложение = Выборка.Attachment.Получить();
			
			Если Вложение <> Неопределено Тогда
				
				ИмяВложения = "";
				
				Если ТипЗнч(Вложение) = Тип("ТабличныйДокумент") Тогда  
					
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xls");
					ВременныйФайл = Новый Файл(ИмяВременногоФайла);
					
					Если СтрНайти(Выборка.Subject, "List of unbilled invoices") = 1 Тогда
						ИмяВложения = "Notification_Unbilled_Invoices_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
					ИначеЕсли СтрНайти(Выборка.Subject, "PM notification") = 0 Тогда
						ИмяВложения = "Notification_KS_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
					Иначе
						ИмяВложения = "Notification_PM_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
					КонецЕсли;
					
					ИмяФайла = ВременныйФайл.Путь + ИмяВложения;
					
					Вложение.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
					
					Вложение = Новый Файл(ИмяФайла);
					
				КонецЕсли;
				
				ОписаниеВложения = Новый Структура;
				ОписаниеВложения.Вставить("Представление", ИмяВложения);
				ОписаниеВложения.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Вложение.ПолноеИмя));
				Вложения.Добавить(ОписаниеВложения);
				ПараметрыПисьма.Вставить("Вложения", Вложения);
			КонецЕсли;
			// } RGS TAlmazova 11.07.2018 0:20:32 
			
		КонецЕсли;
		
		Попытка
			РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись, ПараметрыПисьма);
		Исключение
			
			ТекстОшибки = ИнформацияОбОшибке();
			
			Если ТекстОшибки = Неопределено Тогда
				ВызватьИсключение;
			КонецЕсли;
			
			Если ТекстОшибки.Причина = Неопределено Тогда
				ВызватьИсключение;
			КонецЕсли;
			
			Если СтрНайти(ТекстОшибки.Причина.Описание, "Recipient address rejected: User unknown in relay recipient table") > 0 
				Или СтрНайти(ТекстОшибки.Причина.Описание, "Mailbox not available (SMTP error code") > 0
				Или СтрНайти(ТекстОшибки.Причина.Описание, "Почтовый ящик не доступен (SMTP error code") > 0 Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновлениеСтатусаInvoiceNotDue() Экспорт
	
	Обработки.ОбновлениеСтатусаInvoiceNotDue.ЗаполнитьСтатусInvoiceNotDue();
	
КонецПроцедуры

Процедура АктуализацияСтатусовPaidPartiallyPaid() Экспорт
	
	Период = ТекущаяДата();
	АктуализацияСтатуса(Перечисления.InvoiceStatus.PartiallyPaid, Период);
	АктуализацияСтатуса(Перечисления.InvoiceStatus.InvoicePaid, Период);
	
КонецПроцедуры

Процедура АктуализацияСтатуса(Статус, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	InvoiceCommentsСрезПоследних.Invoice,
		|	InvoiceCommentsСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.InvoiceComments.СрезПоследних(&ДатаКонец, НЕ Inactive) КАК InvoiceCommentsСрезПоследних
		|ГДЕ
		|	InvoiceCommentsСрезПоследних.Problem.Status = &Status";
	
	Запрос.УстановитьПараметр("Status", Статус);
	Запрос.УстановитьПараметр("ДатаКонец", КонецМесяца(Период));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	User = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	ДатаДляЗаписи = НачалоМесяца(Период);
	
	НаборЗаписей = РегистрыСведений.InvoiceComments.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Отбор.Invoice.Установить(ВыборкаДетальныеЗаписи.Invoice);
		
		Если ВыборкаДетальныеЗаписи.Период < ДатаДляЗаписи Тогда
			СтруктураРеквизитовПроблемы = Новый Структура("Дата, Invoice, User, Status, ConfirmedBy, CustomerRepresentative, CustomerInputDetails, Comment, CustInputDate, ForecastDate, RemedialWorkPlan, RWDTargetDate, SLBAssignedTo");
			СтруктураРеквизитовПроблемы.Дата = ДатаДляЗаписи;
			СтруктураРеквизитовПроблемы.Invoice = ВыборкаДетальныеЗаписи.Invoice;
			СтруктураРеквизитовПроблемы.Status = Перечисления.InvoiceStatus.ПустаяСсылка();
			СтруктураРеквизитовПроблемы.User = User;
			СтруктураРеквизитовПроблемы.Comment = "Статус " + Статус + " стал неактивным.";
			
			Problem = РегистрыСведений.InvoiceComments.СоздатьInvoiceProblem(СтруктураРеквизитовПроблемы);
			
			НаборЗаписей.Отбор.Период.Установить(ДатаДляЗаписи);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				РеквизитыПроблемы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НаборЗаписей[0].Problem, "Status,User");
				
				Если РеквизитыПроблемы.Status = Перечисления.InvoiceStatus.ПустаяСсылка() И РеквизитыПроблемы.User = User Тогда
					
					НаборЗаписей[0].Inactive = Ложь; 
					НаборЗаписей[0].ПроставленРегламентомАктуализацииСтатусовОплат = Истина;
					НаборЗаписей.Записать(Истина);
					ПроблемаОбъект = НаборЗаписей[0].Problem.ПолучитьОбъект();
					ПроблемаОбъект.Comment = ПроблемаОбъект.Comment + " Статус " + Статус + " стал неактивным.";
					ПроблемаОбъект.ОбменДанными.Загрузка = Истина;
					ПроблемаОбъект.Записать();
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = ДатаДляЗаписи;
			НоваяЗапись.Invoice = ВыборкаДетальныеЗаписи.Invoice;
			НоваяЗапись.Problem = Problem;
			НоваяЗапись.ПроставленРегламентомАктуализацииСтатусовОплат = Истина;
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
			
	КонецЦикла;
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура КонтрольЗагрузкиДанных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияЗагрузкиДанныхСрезПоследних.ДокументЗагрузки.Ссылка КАК ДокументЗагрузкиСсылка,
		|	ИсторияЗагрузкиДанныхСрезПоследних.ДокументЗагрузки.ТипТранзакций КАК ДокументЗагрузкиТипТранзакций,
		|	ИсторияЗагрузкиДанныхСрезПоследних.ДокументЗагрузки.СтатусЗагрузки
		|ИЗ
		|	РегистрСведений.ИсторияЗагрузкиДанных.СрезПоследних(&ДатаПроверки, ДокументЗагрузки ССЫЛКА Документ.ЗагрузкаДанныхHOB) КАК ИсторияЗагрузкиДанныхСрезПоследних
		|ГДЕ
		|	НЕ ИсторияЗагрузкиДанныхСрезПоследних.ДокументЗагрузки.ПометкаУдаления
		|	И КОНЕЦПЕРИОДА(ИсторияЗагрузкиДанныхСрезПоследних.ДокументЗагрузки.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаПроверки, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("ДатаПроверки", КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ_Хобы = РезультатЗапроса.Выгрузить();
		
	Для каждого СтрокаХобы Из ТЗ_Хобы Цикл
		
		
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецПроцедуры

Процедура _ОтправитьUnbilledNotification() Экспорт
	
	НачатьТранзакцию();
	
	АктуализироватьРегистрОчередьУведомлений();
	
	ДанныеSalesOrders = _ПолучитьДанныеПоSalesOrdersДляUnbilledNotification();
	
	Если ДанныеSalesOrders.Количество() > 0 Тогда
		
		Получатели_Ордера = СобратьПолучателейUnbilledNotification(ДанныеSalesOrders);
		
		УникальныеПолучатели = Получатели_Ордера.Скопировать();
		УникальныеПолучатели.Свернуть("Получатели");
		ид = 1;
		
		Для Каждого Получатель из УникальныеПолучатели Цикл 
			
			СуммаUSD = 0;
			Тема = "TEST Unbilled SO notification";
			
			ТелоHTML = "<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://d349bc7e-06e3-4fc1-b24f-9709087cc83c/mdobject/id44c3769f-050d-4f0a-ae52-7c2a9e753714/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
			|<META name=GENERATOR content=""MSHTML 11.00.9600.18525""></HEAD>
			|<BODY>
			|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Please be kindly informed that there are some unbilled invoices which have job end but not yet billed.</P>
			|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Your immediate actions are required in order to billed this invoices as soon as possible because you are involved in problem decision.</P>
			|<TABLE border=1>
			|<TBODY>
			|<TR style=""BACKGROUND-COLOR:#A4D3EE"" align=""center"">
			|<TD>Geomarket</TD>
			|<TD>Subgeomarket</TD>
			|<TD>Segment</TD>
			|<TD>Client</TD>
			|<TD>Orig. currency</TD>
			|<TD>Amount, orig. currency</TD>
			|<TD>Amount, USD</TD>
			|</TR>";
			
			Отбор = Новый Структура;
			Отбор.Вставить("Получатели", Получатель.Получатели);
			Ордера = Получатели_Ордера.Скопировать(Отбор);
			
			Для Каждого Ордер из Ордера Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("SalesOrder", Ордер.SalesOrder);
				ПроблемыПоОрдеру = ДанныеSalesOrders.Скопировать(Отбор);
				ПроблемыПоОрдеру.Сортировать("ДатаУведомления Возр");
				
				Для Каждого Проблема из ПроблемыПоОрдеру Цикл
					
					СтрокаВТелоСообщения = "<TR>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.GeoMarket),Проблема.GeoMarket," ")+"</TD>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.SubGeoMarket),Проблема.SubGeoMarket," ")+"</TD>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.Segment),Проблема.Segment," ")+"</TD>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.Client),Проблема.Client," ")+"</TD>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.Currency),Проблема.Currency," ")+"</TD>
					|<TD>"+Проблема.Amount+"</TD>
					|<TD>"+Проблема.AmountUSD+"</TD>
					|</TR>";
					ТелоHTML = ТелоHTML + СтрокаВТелоСообщения; 
					СуммаUSD = СуммаUSD + Проблема.AmountUSD;
					
					НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Проблема.Установить(Проблема.Проблема);
					НаборЗаписей.Отбор.Уровень.Установить(Проблема.Уровень);
					НаборЗаписей.Записать();
					
				КонецЦикла;
				
			КонецЦикла;
			
			ТелоHTML = ТелоHTML + "<tr style=""BACKGROUND-COLOR:#A4D3EE"">
			|<td colspan=""6"">Grand total</td>
			|<td>"+СуммаUSD+"</td>
			|</tr></TABLE>
			|</TBODY>
			|</BODY></HTML>"; 
			ТелоHTML = СтрЗаменить(ТелоHTML, Символы.ПС, "");
			Attach = _ПолучитьAttachДляUnbilledNotification(Ордера, ид);
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Получатель.Получатели, Тема, ТелоHTML, Attach, ТипТекстаПочтовогоСообщения.HTML);
			ид = ид + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОтправитьUnbilledNotification() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьУведомлений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	//создание нового коммента с заполненным EscalateTo по СО в статусе Unbilled без EscalateTo.
	ЗаполнениеEscalateToДляUnbilledСО();
	
	АктуализироватьРегистрОчередьУведомлений();
	
	Период = ТекущаяДата();
	ДанныеSalesOrders = ПолучитьДанныеПоSalesOrdersДляUnbilledNotification(Период);
	
	ДанныеSalesOrders.Колонки.ExpectedDateForInvoice.Заголовок = "Expected date for Invoice";
	
	ДанныеSalesOrders.Индексы.Добавить("ПолучательLDAP");
	МассивПолучателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеSalesOrders.ВыгрузитьКолонку("ПолучательLDAP"));
	
	МассивПолучателейТестовыхСообщений = РегистрыСведений.ПолучателиТестовыхНотификаций.ПолучитьСписокПолучателей();
	
	СтруктураОтбора = Новый Структура("ПолучательLDAP");
	
	ОбработанныеПроблемы = Новый Массив;
	
	// { RGS TAlmazova 20.08.2018 14:43:10 - S-E-0000923
	КонецОтчетногоМесяца = НачалоМесяца(Период) - 1;
	// } RGS TAlmazova 20.08.2018 14:43:42 - S-E-0000923
	
	Для Каждого ПолучательLDAP из МассивПолучателей Цикл 
		
		//Если НЕ ЗначениеЗаполнено(Получатель) ИЛИ МассивПолучателейТестовыхСообщений.Найти(Получатель) = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ПолучательLDAP) Тогда
			Продолжить
		КонецЕсли;
		
		ПолучательEmail = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолучательLDAP,"Mail");
		Если НЕ ЗначениеЗаполнено(ПолучательEmail) Тогда
			Продолжить
		КонецЕсли;
		
		СтруктураОтбора.ПолучательLDAP = ПолучательLDAP;
		СуммаUSD = 0;
		Тема = "List of unbilled invoices as of " + Формат(КонецОтчетногоМесяца, "Л=en_US; ДФ='MMMM yyyy'");
		//ТекДата = Формат(ТекущаяДата(),"ДЛФ=DD");
		ТелоHTML = "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://d349bc7e-06e3-4fc1-b24f-9709087cc83c/mdobject/id44c3769f-050d-4f0a-ae52-7c2a9e753714/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
		|<META name=GENERATOR content=""MSHTML 11.00.9600.18525""></HEAD>
		|<BODY>
		//|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Date: " + ТекДата +"</P>
		//|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Subject:  List of unbilled invoices.</P>
		|<br>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Please be kindly informed that there are some unbilled items that have been assigned to you for resolution.</P>
		|<BR>";
		
		
		
		ПолныеДанныеУведомления = ДанныеSalesOrders.Скопировать(СтруктураОтбора);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбработанныеПроблемы, ПолныеДанныеУведомления.ВыгрузитьКолонку("Проблема"));
		ПолныеДанныеУведомления.Колонки.Удалить("Получатель");
		ПолныеДанныеУведомления.Колонки.Удалить("ПолучательLDAP");
		ПолныеДанныеУведомления.Колонки.Удалить("Проблема");
		
		// { RGS TAlmazova 20.08.2018 18:01:20 - S-E-0000923 добавление сводной таблицы
		МассивMngmGeo = ПолныеДанныеУведомления.ВыгрузитьКолонку("ManagementGeomarket");
		МассивMngmGeo = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивMngmGeo);
		ТелоHTMLСводнаяТаблица = "<BR>
		|<TABLE style=""border-collapse: collapse;width:84.2%;border:solid black 1.5pt"">
		|<TBODY>
		|<TR align=""center"" style=""width:6.38%;background:#99CCFF;padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;color:white;"">
		|<TD style=""padding: 5px; border: 2px solid #000;"">ManagementGeomarket</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Product Line</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">QTY</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">USD Total</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">1-30</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">31-60</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">61-90</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">91-120</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">121-180</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">181+</TD>
		|</TR>";
		
		Для каждого MngmGeo Из МассивMngmGeo Цикл
			
			СтруктураОтбораMngmGeo = Новый Структура("ManagementGeomarket");
			СтруктураОтбораMngmGeo.ManagementGeomarket = MngmGeo;
			ДанныеMngmGeo = ПолныеДанныеУведомления.Скопировать(СтруктураОтбораMngmGeo, "ManagementGeomarket, Segment, AmountUSD, Ageing30, Ageing3160, Ageing6190, Ageing91120, Ageing121180, Ageing181, КоличествоSO");
			ДанныеMngmGeo.Свернуть("ManagementGeomarket, Segment", "КоличествоSO, AmountUSD, Ageing30, Ageing3160, Ageing6190, Ageing91120, Ageing121180, Ageing181");
			
			Для Каждого СтрокаДанных из ДанныеMngmGeo Цикл
					
				СтрокаВТелоСообщения = "<TR>
				|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.ManagementGeomarket), СтрокаДанных.ManagementGeomarket, " ") + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.Segment), СтрокаДанных.Segment, " ") + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.КоличествоSO + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.AmountUSD + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.Ageing30 + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.Ageing3160 + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.Ageing6190 + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.Ageing91120 + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.Ageing121180 + "</TD>
				|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.Ageing181 + "</TD>
				|</TR>";
				ТелоHTMLСводнаяТаблица = ТелоHTMLСводнаяТаблица + СтрокаВТелоСообщения;
					
			КонецЦикла;
			
			СтрокаВТелоСообщения = "<TR>
			|<TD style=""padding: 5px; border: 2px solid #000;""><STRONG>" + MngmGeo + " Total" + "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000;""><STRONG>" + "" + "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;""><STRONG>" + ДанныеMngmGeo.Итог("КоличествоSO") + "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;""><STRONG>" + ДанныеMngmGeo.Итог("AmountUSD")+ "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;""><STRONG>" + ДанныеMngmGeo.Итог("Ageing30") + "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;""><STRONG>" + ДанныеMngmGeo.Итог("Ageing3160") + "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;""><STRONG>" + ДанныеMngmGeo.Итог("Ageing6190") + "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;""><STRONG>" + ДанныеMngmGeo.Итог("Ageing91120") + "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;""><STRONG>" + ДанныеMngmGeo.Итог("Ageing121180") + "</STRONG></TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;""><STRONG>" + ДанныеMngmGeo.Итог("Ageing181") + "</STRONG></TD>
			|</TR>";
			ТелоHTMLСводнаяТаблица = ТелоHTMLСводнаяТаблица + СтрокаВТелоСообщения;
			
		КонецЦикла;
		
		ТелоHTML = ТелоHTML + ТелоHTMLСводнаяТаблица;
		
		//МинимальныйУровеньНотификацииПолучателя = ПолучитьМинимальныйУровеньНотификации(ПолучательLDAP);
		//
		//Если МинимальныйУровеньНотификацииПолучателя <> Справочники.EscalationLevels.Level4 Тогда
	
		// } RGS TAlmazova 20.08.2018 18:01:33 - S-E-0000923
		//ДанныеДляТелаПисьма = ПолныеДанныеУведомления.Скопировать(, "GeoMarket, Segment, CustumerId, Client, InvoiceNumber, JobEndDate, InvoiceDate, Currency, Amount, Reason");
		//ДанныеДляТелаПисьма.Свернуть("GeoMarket, Segment, CustumerId, Client, InvoiceNumber, JobEndDate, InvoiceDate, Currency, Reason", "Amount");
		ДанныеДляТелаПисьма = ПолныеДанныеУведомления.Скопировать(, "ManagementGeomarket, Segment, Client, InvoiceNumber, JobEndDate, InvoiceDate, Currency, Amount, WellData, Reason, Ageing");
		ДанныеДляТелаПисьма.Свернуть("ManagementGeomarket, Segment, Client, InvoiceNumber, JobEndDate, InvoiceDate, Currency, WellData, Reason, Ageing", "Amount");
		
		ТелоHTML = ТелоHTML + "</TABLE>
		|<BR>
		|<BR>
		|<TABLE style=""border-collapse: collapse;width:84.2%;border:solid black 1.5pt"">
		|<TBODY>
		|<TR align=""center"" style=""width:6.38%;background:#000099;padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;color:white;"">
		|<TD style=""padding: 5px; border: 2px solid #000;"">ManagementGeomarket</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Product Line</TD>
		//|<TD style=""padding: 5px; border: 2px solid #000;"">Customer ID</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Customer name</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Invoice Reference</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Job End Date</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Invoice transaction date</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Currency</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Amount</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Well number</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Reason</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Ageing</TD>
		|</TR>";
		
		Для Каждого СтрокаДанных из ДанныеДляТелаПисьма Цикл
				
			СтрокаВТелоСообщения = "<TR>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.ManagementGeomarket), СтрокаДанных.ManagementGeomarket, " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.Segment), СтрокаДанных.Segment, " ") + "</TD>
			//|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.CustumerId), СтрокаДанных.CustumerId, " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.Client), СтрокаДанных.Client, " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.InvoiceNumber), СтрокаДанных.InvoiceNumber, " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.JobEndDate), Формат(СтрокаДанных.JobEndDate, "ДФ=MM/dd/yyyy"), " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.InvoiceDate), Формат(СтрокаДанных.InvoiceDate, "ДФ=MM/dd/yyyy"), " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.Currency), СтрокаДанных.Currency, " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000; white-space: nowrap;"">" + СтрокаДанных.Amount + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.WellData), СтрокаДанных.WellData, " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.Reason), СтрокаДанных.Reason, " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.Ageing), СтрокаДанных.Ageing, " ") + "</TD>
			|</TR>";
			ТелоHTML = ТелоHTML + СтрокаВТелоСообщения;
			//СуммаUSD = СуммаUSD + СтрокаДанных.AmountUSD;
			
			//НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Проблема.Установить(Проблема.Проблема);
			//НаборЗаписей.Отбор.Уровень.Установить(Проблема.Уровень);
			//НаборЗаписей.Записать();
				
		КонецЦикла;
		
		//КонецЕсли;
		
		//ТелоHTML = ТелоHTML + "<tr style=""BACKGROUND-COLOR:#A4D3EE"">
		//|<td colspan=""6"">Grand total</td>
		//|<td>"+СуммаUSD+"</td>
		//|</tr></TABLE>
		//|</TBODY>
		//|</BODY></HTML>";
		
		ТелоHTML = ТелоHTML + "</TABLE>
		|<BR>
		|<P FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px??>Please review and respond within the next days. If after 10 business days the issue remains unresolved, it will be escalated to GM Controller.</P>
		|<BR>
		|<P FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px??><STRONG>Thank you for your assistance for resolving this issue in a timely manner.</STRONG></P>
		|<P FONT-SIZE: FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px?? 17px;><FONT size=4>ERM Team</FONT></P>
		|<BR>
		|<P FONT-SIZE: FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px?? 25px;><FONT size=4,5><STRONG>Do not reply to this email address</STRONG></FONT></P>
		|<P FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px??>Please contact your Area/GM/Country Accounts Receivable Lead if you encounter any issue.</P>
		|</BODY>
		|</HTML>";
		ТелоHTML = СтрЗаменить(ТелоHTML, Символы.ПС, "");
		Attach = ПолучитьAttachДляUnbilledNotification(ПолныеДанныеУведомления);
		РГСофт.ЗарегистрироватьПочтовоеСообщение(ПолучательEmail, Тема, ТелоHTML, Attach, ТипТекстаПочтовогоСообщения.HTML);
		
	КонецЦикла;
	
	УдалитьОбработанныеЗаписиИзОчередиУведомленийUnbilled(Период, ОбработанныеПроблемы);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПерезаполнениеPenaltyCalculation() Экспорт
	
	НачатьТранзакцию();
	
	ТекДата = НачалоМесяца(ТекущаяДата());
	НачалоПериода = ДобавитьМесяц(ТекДата, -rgsНастройкаКонфигурации.ЗначениеНастройки("НачалоПериодаПересчетаPenaltyCalculation"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	PenaltyCalculation.Ссылка КАК ДокументPenaltyCalculation,
		|	PenaltyCalculation.Дата КАК Дата
		|ИЗ
		|	Документ.PenaltyCalculation КАК PenaltyCalculation
		|ГДЕ
		|	PenaltyCalculation.Проведен
		|	И PenaltyCalculation.Дата >= &ДатаНачалаПересчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("ДатаНачалаПересчета", НачалоПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ_СуществующиеPenaltyCalculation = РезультатЗапроса.Выгрузить();
	
	ПоследнийПересчитанныйПериод = НачалоПериода;
	
	Для каждого СтрокаТЗ Из ТЗ_СуществующиеPenaltyCalculation Цикл
	
		ПерезаполнитьИПровестиPenaltyCalculation(СтрокаТЗ.ДокументPenaltyCalculation, СтрокаТЗ.Дата);
		ПоследнийПересчитанныйПериод = СтрокаТЗ.Дата;
		
	КонецЦикла;
	
	Пока ПоследнийПересчитанныйПериод < НачалоМесяца(ТекДата) - 1 Цикл
		
		ПоследнийПересчитанныйПериод = КонецМесяца(ПоследнийПересчитанныйПериод + 1);
		ДокОбъект = Документы.PenaltyCalculation.СоздатьДокумент();
		ДокОбъект.Дата = ПоследнийПересчитанныйПериод;
		ДокОбъект.Записать();
		ПерезаполнитьИПровестиPenaltyCalculation(ДокОбъект.Ссылка, ПоследнийПересчитанныйПериод);
		
	КонецЦикла;
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПерезаполнитьИПровестиPenaltyCalculation(ДокументPenaltyCalculation, ДатаДокумента)
	
	СтруктураПараметров = Новый Структура("Ссылка");
	СтруктураПараметров.Вставить("Ссылка", ДокументPenaltyCalculation);
	СтруктураПараметров.Вставить("ПериодРасчета", ДатаДокумента);
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Документы.PenaltyCalculation.ЗаполнитьРасчетныеДанные(СтруктураПараметров, АдресХранилища);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОшибкаЗаполнения") Тогда
		ВызватьИсключение СтруктураДанных.ОшибкаЗаполнения;
	КонецЕсли;
	
	ДокОбъект = ДокументPenaltyCalculation.ПолучитьОбъект();
	
	Если СтруктураДанных.Свойство("ДанныеПоШтрафам") Тогда
		ДокОбъект.CalculationPenalty.Загрузить(СтруктураДанных.ДанныеПоШтрафам);
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДанныеПоBenefit") Тогда
		ДокОбъект.CalculationBenefit.Загрузить(СтруктураДанных.ДанныеПоBenefit);
	КонецЕсли;

	Если СтруктураДанных.Свойство("ДанныеПоOnTime") Тогда
		ДокОбъект.CalculationOnTime.Загрузить(СтруктураДанных.ДанныеПоOnTime);
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Не удалось записать """ + ДокОбъект + """! ");
		ОтменитьТранзакцию();
	КонецПопытки;
		
КонецПроцедуры

Функция ПолучитьМинимальныйУровеньНотификации(Получатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолучателиУведомленийUnbilled.Уровень КАК Уровень
		|ИЗ
		|	РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
		|ГДЕ
		|	ПолучателиУведомленийUnbilled.Получатель = &Получатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уровень";
	
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 Возврат ВыборкаДетальныеЗаписи.Уровень;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УдалитьОбработанныеЗаписиИзОчередиУведомленийUnbilled(Период, ОбработанныеПроблемы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьУведомлений.Проблема,
	|	ОчередьУведомлений.Уровень,
	|	ОчередьУведомлений.ВидУведомления
	|ИЗ
	|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	|ГДЕ
	|	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	|	И ОчередьУведомлений.Проблема В(&ОбработанныеПроблемы)";
	
	Запрос.УстановитьПараметр("ДатаУведомления", Период);
	Запрос.УстановитьПараметр("ОбработанныеПроблемы", ОбработанныеПроблемы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Проблема.Установить(Выборка.Проблема);
		НаборЗаписей.Отбор.Уровень.Установить(Выборка.Уровень);
		НаборЗаписей.Отбор.ВидУведомления.Установить(Выборка.ВидУведомления);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция _ПолучитьДанныеПоSalesOrdersДляUnbilledNotification()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ОчередьУведомлений.Проблема КАК Проблема,
	|	ОчередьУведомлений.Проблема.SalesOrder.Client КАК Client,
	|	ОчередьУведомлений.Проблема.SalesOrder.Currency КАК Currency,
	|	ОчередьУведомлений.Проблема.SalesOrder.Amount КАК Amount,
	|	ОчередьУведомлений.Проблема.SalesOrder.AmountUSD КАК AmountUSD,
	|	ОчередьУведомлений.Проблема.SalesOrder.Location.GeoMarket.Родитель КАК GeoMarket,
	|	ОчередьУведомлений.Проблема.SalesOrder.Location.GeoMarket КАК SubGeoMarket,
	|	ОчередьУведомлений.Проблема.SalesOrder.SubSubSegment.Родитель.Родитель КАК Segment,
	|	ОчередьУведомлений.ДатаУведомления,
	|	ОчередьУведомлений.Проблема.SalesOrder КАК SalesOrder,
	|	ОчередьУведомлений.Уровень
	|ИЗ
	|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	|ГДЕ
	|	ОчередьУведомлений.ДатаУведомления <= &Дата";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПоSalesOrdersДляUnbilledNotification(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder КАК SalesOrder,
	                |	SalesOrderProblemResponsibles.Responsible КАК Получатель,
	                |	ОчередьУведомлений.ДатаУведомления КАК ДатаУведомления,
	                |	ОчередьУведомлений.Проблема КАК Проблема,
	                |	0 КАК Приоритет
	                |ПОМЕСТИТЬ ВТ_SO
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SalesOrderProblem.Responsibles КАК SalesOrderProblemResponsibles
	                |		ПО ОчередьУведомлений.Проблема = SalesOrderProblemResponsibles.Ссылка
	                |			И (SalesOrderProblemResponsibles.Responsible <> ЗНАЧЕНИЕ(Справочник.LDAPUsers.ПустаяСсылка))
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема,
	                |	0
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.AU = ПолучателиУведомленийUnbilled.Идентификатор1
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема,
	                |	0
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Location = ПолучателиУведомленийUnbilled.Идентификатор1
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Client = ПолучателиУведомленийUnbilled.Идентификатор2
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема,
	                //|	1
	                |	0
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Location = ПолучателиУведомленийUnbilled.Идентификатор1
	                |			И (ПолучателиУведомленийUnbilled.Идентификатор2 = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                |				ИЛИ ПолучателиУведомленийUnbilled.Идентификатор2 = НЕОПРЕДЕЛЕНО)
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема,
	                |	0
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSMITH))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSMITH))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Location = ПолучателиУведомленийUnbilled.Идентификатор1
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSMITH)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема,
	                |	0
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Company = ПолучателиУведомленийUnbilled.Идентификатор1
	                |			И ОчередьУведомлений.Проблема.SalesOrder.CREW = ПолучателиУведомленийUnbilled.Идентификатор2
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема,
	                //|	1
	                |	0
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Company = ПолучателиУведомленийUnbilled.Идентификатор1
	                |			И (ПолучателиУведомленийUnbilled.Идентификатор2 = """"
	                |				ИЛИ ПолучателиУведомленийUnbilled.Идентификатор2 = НЕОПРЕДЕЛЕНО)
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема,
	                |	0
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Radius))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Radius))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Company = ПолучателиУведомленийUnbilled.Идентификатор1
	                |			И (ПолучателиУведомленийUnbilled.Идентификатор2 = """"
	                |				ИЛИ ПолучателиУведомленийUnbilled.Идентификатор2 = НЕОПРЕДЕЛЕНО)
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Radius)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_SO.Проблема КАК Проблема,
	                |	МИНИМУМ(ВТ_SO.Приоритет) КАК Приоритет
	                |ПОМЕСТИТЬ ВТ_Приоритет
	                |ИЗ
	                |	ВТ_SO КАК ВТ_SO
	                |ГДЕ
	                |	ВТ_SO.Получатель <> ЗНАЧЕНИЕ(Справочник.LDAPUsers.ПустаяСсылка)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВТ_SO.Проблема
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ВТ_SO.SalesOrder КАК SalesOrder,
	                |	ВТ_SO.Получатель КАК Получатель,
	                |	ВТ_SO.Проблема КАК Проблема
	                |ПОМЕСТИТЬ ВТ
	                |ИЗ
	                |	ВТ_SO КАК ВТ_SO
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ВТ_Приоритет
	                |		ПО ВТ_SO.Проблема = ВТ_Приоритет.Проблема
	                |			И ВТ_SO.Приоритет = ВТ_Приоритет.Приоритет
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ.SalesOrder.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarket,
	                |	ВТ.SalesOrder.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket КАК SubGeoMarket,
	                |	ВТ.SalesOrder.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.ManagementGeomarket КАК ManagementGeomarket,
	                |	ВТ.SalesOrder.AU.Сегмент.БазовыйЭлемент.Родитель.Родитель КАК Segment,
	                |	UnbilledARОстатки.SalesOrder.ClientID КАК CustumerId,
	                |	ВТ.SalesOrder.Client КАК Client,
	                |	ВТ.SalesOrder.Currency КАК Currency,
	                |	ЕСТЬNULL(UnbilledARОстатки.AmountОстаток, 0) КАК Amount,
	                |	ВЫРАЗИТЬ(ЕСТЬNULL(UnbilledARОстатки.AmountОстаток, 0) / ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(15, 2)) КАК AmountUSD,
	                |	ВТ.Получатель.Mail КАК Получатель,
	                |	ВТ.SalesOrder.Номер КАК InvoiceNumber,
	                |	ВТ.SalesOrder.Дата КАК InvoiceDate,
	                |	ВТ.SalesOrder.Agreement КАК Agreement,
	                |	ВТ.SalesOrder.WellData КАК WellData,
	                |	ВТ.Проблема.Reason КАК Reason,
	                |	ВТ.Проблема.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
	                |	ВТ.Проблема.EscalateTo КАК EscalateTo,
	                |	ВТ.Проблема.User КАК Responsible,
	                |	ВТ.Проблема.ResponsiblesList КАК ResponsibleList,
	                |	ВТ.SalesOrder.JobEndDate КАК JobEndDate,
	                |	ВЫБОР
	                |		КОГДА ВТ.SalesOrder.JobEndDate <> ДАТАВРЕМЯ(1, 1, 1)
	                |			ТОГДА РАЗНОСТЬДАТ(ВТ.SalesOrder.JobEndDate, &ДатаДляСравнения, ДЕНЬ)
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Ageing,
	                |	ВТ.Проблема КАК Проблема,
	                |	ВТ.Проблема.Details КАК ProblemDetails,
	                |	ВТ.Получатель КАК ПолучательLDAP
	                |ПОМЕСТИТЬ ВТ_Итог
	                |ИЗ
	                |	ВТ КАК ВТ
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаУведомления, ) КАК ВнутренниеКурсыВалютСрезПоследних
	                |		ПО ВТ.SalesOrder.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.UnbilledAR.Остатки(
	                |				&ПериодОстатков,
	                |				SalesOrder В
	                |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |						ВТ.SalesOrder
	                |					ИЗ
	                |						ВТ КАК ВТ)) КАК UnbilledARОстатки
	                |		ПО ВТ.SalesOrder = UnbilledARОстатки.SalesOrder
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_Итог.GeoMarket КАК GeoMarket,
	                |	ВТ_Итог.SubGeoMarket КАК SubGeoMarket,
	                |	ВТ_Итог.ManagementGeomarket КАК ManagementGeomarket,
	                |	ВТ_Итог.Segment КАК Segment,
	                |	ВТ_Итог.CustumerId КАК CustumerId,
	                |	ВТ_Итог.Client КАК Client,
	                |	ВТ_Итог.Currency КАК Currency,
	                |	ВТ_Итог.Amount КАК Amount,
	                |	ВТ_Итог.AmountUSD КАК AmountUSD,
	                |	ВТ_Итог.Получатель КАК Получатель,
	                |	ВТ_Итог.InvoiceNumber КАК InvoiceNumber,
	                |	ВТ_Итог.InvoiceDate КАК InvoiceDate,
	                |	ВТ_Итог.Agreement КАК Agreement,
	                |	ВТ_Итог.WellData КАК WellData,
	                |	ВТ_Итог.Reason КАК Reason,
	                |	ВТ_Итог.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
	                |	ВТ_Итог.EscalateTo КАК EscalateTo,
	                |	ВТ_Итог.Responsible КАК Responsible,
	                |	ВТ_Итог.ResponsibleList КАК ResponsibleList,
	                |	ВТ_Итог.JobEndDate КАК JobEndDate,
	                |	ВТ_Итог.Ageing КАК Ageing,
	                |	ВТ_Итог.Проблема КАК Проблема,
	                |	ВТ_Итог.ProblemDetails КАК ProblemDetails,
	                |	ВЫБОР
	                |		КОГДА ВТ_Итог.Ageing <= 30
	                |			ТОГДА ВТ_Итог.AmountUSD
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Ageing30,
	                |	ВЫБОР
	                |		КОГДА ВТ_Итог.Ageing > 30
	                |				И ВТ_Итог.Ageing <= 60
	                |			ТОГДА ВТ_Итог.AmountUSD
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Ageing3160,
	                |	ВЫБОР
	                |		КОГДА ВТ_Итог.Ageing > 60
	                |				И ВТ_Итог.Ageing <= 90
	                |			ТОГДА ВТ_Итог.AmountUSD
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Ageing6190,
	                |	ВЫБОР
	                |		КОГДА ВТ_Итог.Ageing > 90
	                |				И ВТ_Итог.Ageing <= 120
	                |			ТОГДА ВТ_Итог.AmountUSD
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Ageing91120,
	                |	ВЫБОР
	                |		КОГДА ВТ_Итог.Ageing > 120
	                |				И ВТ_Итог.Ageing <= 180
	                |			ТОГДА ВТ_Итог.AmountUSD
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Ageing121180,
	                |	ВЫБОР
	                |		КОГДА ВТ_Итог.Ageing > 180
	                |			ТОГДА ВТ_Итог.AmountUSD
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Ageing181,
	                |	1 КАК КоличествоSO,
	                |	ВТ_Итог.ПолучательLDAP КАК ПолучательLDAP
	                |ИЗ
	                |	ВТ_Итог КАК ВТ_Итог";
	
	ПериодОстатков = ?(КонецМесяца(Период) = КонецДня(Период), КонецДня(Период) + 1, НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаУведомления", Период);
	Запрос.УстановитьПараметр("ДатаДляСравнения", ПериодОстатков - 1);
	Запрос.УстановитьПараметр("ПериодОстатков", ПериодОстатков);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция _ПолучитьAttachДляUnbilledNotification(Таблица, ид)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Построитель = Новый ПостроительОтчета();
	
	ТаблицаДляAttach = ПолучитьДанныеДляAttachUnbilledNotification(Таблица.ВыгрузитьКолонку("SalesOrder"));
	
	Если ТаблицаДляAttach.Количество() > 0 Тогда
		
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДляAttach);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок );
		
		Каталог = КаталогВременныхФайлов();
		
		ИмяФайла =Каталог + "Attach_" + ид + ".xls";
		
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		ДанныеФайла = Новый ХранилищеЗначения(ИмяФайла);
		
		Возврат ДанныеФайла
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьAttachДляUnbilledNotification(Таблица)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Если Таблица.Количество() > 0 Тогда
		
		Макет = ПолучитьОбщийМакет("AttachmentSalesOrder");
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(ОбластьМакетаШапка);
		
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		
		Для Каждого Элемент Из Таблица Цикл
		
			ОбластьМакетаСтрока.Параметры.ManagementGeomarket = Элемент.ManagementGeomarket;
			ОбластьМакетаСтрока.Параметры.SubGeoMarket = Элемент.SubGeoMarket;
			ОбластьМакетаСтрока.Параметры.Segment = Элемент.Segment;
			ОбластьМакетаСтрока.Параметры.CustumerId = Элемент.CustumerId;
			ОбластьМакетаСтрока.Параметры.Client = Элемент.Client;
			ОбластьМакетаСтрока.Параметры.Currency = Элемент.Currency;
			ОбластьМакетаСтрока.Параметры.Amount = Число(Элемент.Amount);
			ОбластьМакетаСтрока.Параметры.AmountUSD = Число(Элемент.AmountUSD);
			ОбластьМакетаСтрока.Параметры.InvoiceNumber = Элемент.InvoiceNumber;
			ОбластьМакетаСтрока.Параметры.InvoiceDate = Формат(Элемент.InvoiceDate, "ДФ=dd.MM.yyyy");
			ОбластьМакетаСтрока.Параметры.Agreement = Элемент.Agreement;
			ОбластьМакетаСтрока.Параметры.WellData = Элемент.WellData;
			ОбластьМакетаСтрока.Параметры.Reason = Элемент.Reason;
			ОбластьМакетаСтрока.Параметры.ExpectedDateForInvoice = Формат(Элемент.ExpectedDateForInvoice, "ДФ=dd.MM.yyyy");
			ОбластьМакетаСтрока.Параметры.EscalateTo = Элемент.EscalateTo;
			ОбластьМакетаСтрока.Параметры.Responsible = Элемент.Responsible;
			//ОбластьМакетаСтрока.Параметры.ResponsibleList = Элемент.ResponsibleList;
			ОбластьМакетаСтрока.Параметры.JobEndDate = Формат(Элемент.JobEndDate, "ДФ=dd.MM.yyyy");
			ОбластьМакетаСтрока.Параметры.Ageing = Элемент.Ageing;
			ОбластьМакетаСтрока.Параметры.ProblemDetails = Элемент.ProblemDetails;
			
			ТабДок.Вывести(ОбластьМакетаСтрока);
		
		КонецЦикла;
		
		ДанныеФайла = Новый ХранилищеЗначения(ТабДок);
		
		Возврат ДанныеФайла;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеДляAttachUnbilledNotification(МассивОрдеров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	UnbilledARОстатки.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarket,
	|	UnbilledARОстатки.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.ManagementGeomarket КАК ManagementGeomarket,
	|	UnbilledARОстатки.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket КАК SubGeoMarket,
	|	UnbilledARОстатки.AU.Сегмент.БазовыйЭлемент.Родитель.Родитель КАК Segment,
	|	UnbilledARОстатки.Client КАК Client,
	|	UnbilledARОстатки.SalesOrder.Invoice.Номер КАК InvoiceНомер,
	|	UnbilledARОстатки.SalesOrder.Invoice.Дата КАК InvoiceДата,
	|	UnbilledARОстатки.SalesOrder.Amount КАК SalesAmount,
	|	UnbilledARОстатки.SalesOrder.AmountUSD КАК SalesAmountUSD,
	|	UnbilledARОстатки.SalesOrder.WellData КАК WellData,
	|	SalesOrdersCommentsСрезПоследних.Problem.Reason КАК Reason,
	|	SalesOrdersCommentsСрезПоследних.Problem.Billed КАК Billed,
	|	SalesOrdersCommentsСрезПоследних.Problem.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
	|	SalesOrdersCommentsСрезПоследних.Problem.EscalateTo КАК EscalateTo,
	|	SalesOrdersCommentsСрезПоследних.Problem.Details КАК Details,
	|	SalesOrdersCommentsСрезПоследних.Problem.ResponsiblesList КАК ResponsiblesList,
	|	UnbilledARОстатки.SalesOrder.JobEndDate КАК JobEndDate,
	|	ВЫБОР
	|		КОГДА UnbilledARОстатки.SalesOrder.JobEndDate <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РАЗНОСТЬДАТ(UnbilledARОстатки.SalesOrder.JobEndDate, &Дата, ДЕНЬ)
	|	КОНЕЦ КАК Ageing
	|ИЗ
	|	РегистрНакопления.UnbilledAR.Остатки(&Дата, SalesOrder В (&МассивОрдеров) {(Location.БазовыйЭлемент.GeoMarket.Родитель = &GeoMarket) КАК Поле2}) КАК UnbilledARОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrdersComments.СрезПоследних(, ) КАК SalesOrdersCommentsСрезПоследних
	|		ПО UnbilledARОстатки.SalesOrder = SalesOrdersCommentsСрезПоследних.SalesOrder
	|{ГДЕ
	|	UnbilledARОстатки.Source.*,
	|	UnbilledARОстатки.Company.*,
	|	UnbilledARОстатки.Client.*}";
	
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция СобратьПолучателейUnbilledNotification(Данные)
	
	ТаблицаПолучателейОрдеров = Новый ТаблицаЗначений;
	ТаблицаПолучателейОрдеров.Колонки.Добавить("Проблема");
	ТаблицаПолучателейОрдеров.Колонки.Добавить("SalesOrder");
	ТаблицаПолучателейОрдеров.Колонки.Добавить("Получатели");
	
	Для Каждого Строка из Данные Цикл
		
		Если ЗначениеЗаполнено(Строка.Уровень) Тогда
			
			Получатели = Строка.Уровень.Members;
			
			Для Каждого Элемент Из Получатели Цикл
				
				Email = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Member,"Mail");
				СтрокаПолучателей = ТаблицаПолучателейОрдеров.Добавить();
				СтрокаПолучателей.Проблема = Строка.Проблема;
				СтрокаПолучателей.SalesOrder = Строка.SalesOrder;
				СтрокаПолучателей.Получатели = Email;
				
			КонецЦикла;
			
		Иначе
			
			Получатели = Строка.Проблема.Responsibles;
			
			Для Каждого Элемент Из Получатели Цикл
				
				Email = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Responsible,"Mail");
				СтрокаПолучателей = ТаблицаПолучателейОрдеров.Добавить();
				СтрокаПолучателей.Проблема = Строка.Проблема;
				СтрокаПолучателей.SalesOrder = Строка.SalesOrder;
				СтрокаПолучателей.Получатели = Email;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПолучателейОрдеров;
	
КонецФункции

Процедура ЗаполнениеEscalateToДляUnbilledСО()
	
	ТекущаяДата = ТекущаяДата();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	UnbilledARОстатки.SalesOrder КАК SalesOrder,
		|	UnbilledARОстатки.SalesOrder.Дата КАК SalesDate,
		|	ВЫБОР
		|		КОГДА UnbilledARОстатки.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|			ТОГДА UnbilledARОстатки.SalesOrder.ArInvoice
		|		ИНАЧЕ UnbilledARОстатки.SalesOrder.Номер
		|	КОНЕЦ КАК SalesNo,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(SalesOrdersCommentsСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) <= &ДатаДляСравнения
		|			ТОГДА NULL
		|		ИНАЧЕ SalesOrdersCommentsСрезПоследних.Problem.Reason
		|	КОНЕЦ КАК Reason,
		|	ВЫБОР
		|		КОГДА SalesOrdersCommentsСрезПоследних.Problem.Billed ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.Unbilled)
		|		ИНАЧЕ SalesOrdersCommentsСрезПоследних.Problem.Billed
		|	КОНЕЦ КАК Status,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(SalesOrdersCommentsСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) <= &ДатаДляСравнения
		|			ТОГДА NULL
		|		ИНАЧЕ SalesOrdersCommentsСрезПоследних.Problem.ExpectedDateForInvoice
		|	КОНЕЦ КАК ExpectedDateForInvoice,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(SalesOrdersCommentsСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) <= &ДатаДляСравнения
		|			ТОГДА NULL
		|		ИНАЧЕ SalesOrdersCommentsСрезПоследних.Problem.EscalateTo
		|	КОНЕЦ КАК EscalateTo,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(SalesOrdersCommentsСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) <= &ДатаДляСравнения
		|			ТОГДА NULL
		|		ИНАЧЕ SalesOrdersCommentsСрезПоследних.Problem.Details
		|	КОНЕЦ КАК ProblemDetails,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(SalesOrdersCommentsСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) <= &ДатаДляСравнения
		|			ТОГДА NULL
		|		ИНАЧЕ SalesOrdersCommentsСрезПоследних.Problem.ResponsiblesList
		|	КОНЕЦ КАК ResponsiblesList,
		|	SalesOrderResponsiblesList.ResponsiblesList КАК ResponsibleAR,
		|	UnbilledARОстатки.AmountОстаток КАК AmountОстаток,
		|	ВЫБОР
		|		КОГДА UnbilledARОстатки.LegalEntity <> ЗНАЧЕНИЕ(Справочник.LegalEntiites.ПустаяСсылка)
		|			ТОГДА UnbilledARОстатки.LegalEntity
		|		ИНАЧЕ UnbilledARОстатки.Company.DefaultLegalEntity
		|	КОНЕЦ КАК LegalEntity,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(SalesOrdersCommentsСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) <= &ДатаДляСравнения
		|			ТОГДА NULL
		|		ИНАЧЕ SalesOrdersCommentsСрезПоследних.Период
		|	КОНЕЦ КАК DateComment,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(SalesOrdersCommentsСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) <= &ДатаДляСравнения
		|			ТОГДА NULL
		|		ИНАЧЕ SalesOrdersCommentsСрезПоследних.Problem.ActionItem
		|	КОНЕЦ КАК ActionItem,
		|	SalesOrdersCommentsСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрНакопления.UnbilledAR.Остатки(
		|			&ПериодОстатков,
		|			SalesOrder ССЫЛКА Документ.SalesOrder
		|				И ПОДСТРОКА(Account.Код, 1, 6) <> ""209000""
		|				И Account.БазовыйЭлемент = &HFMUnbilledAccount) КАК UnbilledARОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrdersComments.СрезПоследних(&ДатаКомментария, ) КАК SalesOrdersCommentsСрезПоследних
		|		ПО UnbilledARОстатки.SalesOrder = SalesOrdersCommentsСрезПоследних.SalesOrder
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКурса, ) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО UnbilledARОстатки.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrderResponsiblesList КАК SalesOrderResponsiblesList
		|		ПО UnbilledARОстатки.SalesOrder = SalesOrderResponsiblesList.SalesOrder
		|ГДЕ
		|	SalesOrdersCommentsСрезПоследних.Problem.EscalateTo = ЗНАЧЕНИЕ(Справочник.EscalationLevels.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("HFMUnbilledAccount", ПланыСчетов.HFM_GL_Accounts.НайтиПоКоду("12002"));
	Запрос.УстановитьПараметр("ДатаДляСравнения", НачалоМесяца(ТекущаяДата) - 1);
	Запрос.УстановитьПараметр("ДатаКомментария", КонецДня(ТекущаяДата));
	Запрос.УстановитьПараметр("ДатаКурса", ?(КонецДня(ТекущаяДата) = КонецМесяца(ТекущаяДата), КонецМесяца(КонецМесяца(ТекущаяДата) + 1),КонецМесяца(ТекущаяДата)));
	Запрос.УстановитьПараметр("ПериодОстатков", ?(КонецМесяца(ТекущаяДата) = КонецДня(ТекущаяДата), КонецДня(ТекущаяДата) + 1, НачалоМесяца(ТекущаяДата)));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НачалоМесТекДата = НачалоМесяца(ТекущаяДата);
	
	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	
	НЗ = РегистрыСведений.SalesOrdersComments.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(ТекущаяДата);
	
	Пока Выборка.Следующий() Цикл
		
		НЗ.Очистить();
		МассивСОБезОтветственных = Новый Массив;
		Проблема = Документы.SalesOrderProblem.СоздатьДокумент();
		Проблема.Дата = ТекущаяДата;
		Проблема.SalesOrder = Выборка.SalesOrder;
		Проблема.User = AutoUser;
		Проблема.Billed = Выборка.Status;
		Если Выборка.Период >= НачалоМесТекДата Тогда
			 Проблема.Reason = Выборка.Reason;
			 Проблема.ExpectedDateForInvoice = Выборка.ExpectedDateForInvoice;
			 Проблема.Details = Выборка.ProblemDetails;
			 Проблема.ActionItem = Выборка.ActionItem;
		КонецЕсли;
		Проблема.EscalateTo = Справочники.EscalationLevels.Level1;
		МассивОтветственных = Документы.SalesOrder.ПолучитьОтветственныхПоSO(Выборка.SalesOrder, Справочники.EscalationLevels.Level1);
		Если МассивОтветственных.Количество() = 0 Тогда
			//СообщениеОбОшибке = "For the selected Sales Order is not filled Responsible";
			//ОтменитьТранзакцию();
			//сохранить такие СО в табличку. Иван сказал не надо
			//МассивСОБезОтветственных.Добавить(Выборка.SalesOrder);
			Продолжить;
		КонецЕсли;
		Проблема.Responsibles.Очистить();
		Для каждого ТекОтветственный Из МассивОтветственных Цикл
			НоваяСтрока = Проблема.Responsibles.Добавить();
			НоваяСтрока.Responsible = ТекОтветственный;
		КонецЦикла;
		Проблема.Записать();
		
		НЗ.Очистить();
		НЗ.Отбор.SalesOrder.Установить(Выборка.SalesOrder);
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.Период = ТекущаяДата;
		ЗаписьНабора.SalesOrder = Выборка.SalesOrder;
		ЗаписьНабора.Problem = Проблема.Ссылка;
		
		НЗ.Записать();
		
	КонецЦикла;
	//
	//Тема = "МассивСОБезОтветственных";
	////ТекДата = Формат(ТекущаяДата(),"ДЛФ=DD");
	//ТелоHTML = "<HTML><HEAD>
	//|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://d349bc7e-06e3-4fc1-b24f-9709087cc83c/mdobject/id44c3769f-050d-4f0a-ae52-7c2a9e753714/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
	//|<META name=GENERATOR content=""MSHTML 11.00.9600.18525""></HEAD>
	//|<BODY>
	////|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Date: " + ТекДата +"</P>
	////|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Subject:  List of unbilled invoices.</P>
	//|<br>
	//|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Тестовая отправка письма.</P>";

	//Для каждого Элемент из МассивСОБезОтветственных Цикл
	//	ТелоHTML = ТелоHTML + "|<BR>
	//	|<P FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px??>" + Элемент +"</P>"
	//	
	//КонецЦикла;
	//ТелоHTML = ТелоHTML + "|<BR>
	//|<P FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px??>Please review and respond within the next days. If after 10 business days the issue remains unresolved, it will be escalated to GM Controller.</P>
	//|<BR>
	//|<P FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px??><STRONG>Thank you for your assistance for resolving this issue in a timely manner.</STRONG></P>
	//|<P FONT-SIZE: FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px?? 17px;><FONT size=4>ERM Team</FONT></P>
	//|<BR>
	//|<P FONT-SIZE: FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px?? 25px;><FONT size=4,5><STRONG>Do not reply to this email address</STRONG></FONT></P>
	//|<P FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: WORD-SPACING: TEXT-TRANSFORM: none; FONT-WEIGHT: COLOR: rgb(0,0,0); FONT-STYLE: ORPHANS: WIDOWS: 2; TEXT-INDENT: 0px; font-variant-ligatures: font-variant-caps: normal; -webkit-text-stroke-width: 0px??>Please contact your Area/GM/Country Accounts Receivable Lead if you encounter any issue.</P>
	//|</BODY>
	//|</HTML>";
	//ТелоHTML = СтрЗаменить(ТелоHTML, Символы.ПС, "");
	//РГСофт.ЗарегистрироватьПочтовоеСообщение("talmazova@rg-spc.ru", Тема, ТелоHTML, , ТипТекстаПочтовогоСообщения.HTML);
	//
	
КонецПроцедуры

Процедура АктуализироватьРегистрОчередьУведомлений()
	
	//ЗапросУведомления = Новый Запрос;
	//ЗапросУведомления.Текст = "ВЫБРАТЬ
	//|	ОчередьУведомлений.Проблема,
	//|	ОчередьУведомлений.Уровень,
	//|	ОчередьУведомлений.Проблема.SalesOrder КАК SalesOrder
	//|ИЗ
	//|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	//|ГДЕ
	//|	ОчередьУведомлений.ДатаУведомления <= &Дата";
	//ЗапросУведомления.УстановитьПараметр("Дата", ТекущаяДата());
	//Уведомления = ЗапросУведомления.Выполнить().Выгрузить();
	//Ордера = Уведомления.ВыгрузитьКолонку("SalesOrder");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	SalesOrdersCommentsСрезПоследних.SalesOrder,
	//|	SalesOrdersCommentsСрезПоследних.Problem
	//|ИЗ
	//|	РегистрСведений.SalesOrdersComments.СрезПоследних(, SalesOrder В (&Ордера)) КАК SalesOrdersCommentsСрезПоследних";
	//Запрос.УстановитьПараметр("Ордера", Ордера);
	//
	//РезультатПроблемы = Запрос.Выполнить().Выгрузить();
	//
	//Для Каждого Уведомление Из Уведомления Цикл
	//	
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Problem", Уведомление.Проблема);
	//	Отбор.Вставить("SalesOrder", Уведомление.SalesOrder);
	//	
	//	Строки = РезультатПроблемы.НайтиСтроки(Отбор);
	//	
	//	Если  Строки.Количество() = 0 Тогда
	//		
	//		НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Проблема.Установить(Уведомление.Проблема);
	//		НаборЗаписей.Отбор.Уровень.Установить(Уведомление.Уровень);
	//		НаборЗаписей.Записать();
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОчередьУведомлений.Проблема
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrdersComments.СрезПоследних(
		|				,
		|				SalesOrder В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВЫРАЗИТЬ(ОчередьУведомлений.Проблема КАК Документ.SalesOrderProblem).SalesOrder
		|					ИЗ
		|						РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|					ГДЕ
		|						ОчередьУведомлений.Проблема ССЫЛКА Документ.SalesOrderProblem)) КАК SalesOrdersCommentsСрезПоследних
		|		ПО (ВЫРАЗИТЬ(ОчередьУведомлений.Проблема КАК Документ.SalesOrderProblem).SalesOrder = SalesOrdersCommentsСрезПоследних.SalesOrder)
		|ГДЕ
		|	(ОчередьУведомлений.Проблема <> SalesOrdersCommentsСрезПоследних.Problem
		|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.Billed)
		|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.Canceled))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОчередьУведомлений.Проблема
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.InvoiceComments.СрезПоследних(
		|				,
		|				Invoice В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВЫРАЗИТЬ(ОчередьУведомлений.Проблема КАК Документ.InvoiceProblem).Invoice
		|					ИЗ
		|						РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|					ГДЕ
		|						ОчередьУведомлений.Проблема ССЫЛКА Документ.InvoiceProblem)) КАК InvoiceCommentsСрезПоследних
		|		ПО (ВЫРАЗИТЬ(ОчередьУведомлений.Проблема КАК Документ.InvoiceProblem).Invoice = InvoiceCommentsСрезПоследних.Invoice)
		|ГДЕ
		|	ОчередьУведомлений.Проблема <> InvoiceCommentsСрезПоследних.Problem";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НЗ = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НЗ.Отбор.Проблема.Установить(ВыборкаДетальныеЗаписи.Проблема);
		НЗ.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСправочникLDAPUsers() Экспорт
	
	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	Если ЗначениеЗаполнено(AutoUser) Тогда
		ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(AutoUser, "ЛогинДляПодключенияКLDAP, ПарольДляПодключенияКLDAP");
		Если ПараметрыПодключения <> Неопределено Тогда
			ИмяПользователяПодключения = ПараметрыПодключения.ЛогинДляПодключенияКLDAP;
			ПарольПользователяПодключения = ПараметрыПодключения.ПарольДляПодключенияКLDAP;
		КонецЕсли;
	Иначе
		ВызватьИсключение "Failed to find user 'AutoUser'";
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяПользователяПодключения", ИмяПользователяПодключения);
	СтруктураПараметров.Вставить("ПарольПользователяПодключения", ПарольПользователяПодключения);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	Обработки.UpdateLDAPUsers.ОбновитьСправочникLDAPUsers(СтруктураПараметров, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновитьСтавкуРефинансирования() Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	Обработки.ЗагрузкаСтавкиРефинансирования.ОбновитьСтавкуРефинансирования(Неопределено, АдресХранилища);
	
КонецПроцедуры

Процедура ОтправкаНотификацийRWDDeadline() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьУведомлений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	АктуализироватьРегистрОчередьУведомлений();
	
	Период = ТекущаяДата();
	РезультатЗапроса = ПолучитьДанныеПоRWDDeadline(Период);
	
	ВыборкаMail = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Тема = "TEST RWD deadline notification";
	НЗ_Очередь = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
	Календарь = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	
	Пока ВыборкаMail.Следующий() Цикл
		
		СуммаAmountUSD = 0;
		СуммаRemainingAmountUSD = 0;
		
		ТелоHTML = "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://d349bc7e-06e3-4fc1-b24f-9709087cc83c/mdobject/id44c3769f-050d-4f0a-ae52-7c2a9e753714/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
		|<META name=GENERATOR content=""MSHTML 11.00.9600.18525""></HEAD>
		|<BODY>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Dear Collector,.</P>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Please be informed that for below invoices the RWD deadline has come, please ensure that</P>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Remedial work plan is performed and update data in the Collection target.</P>
		|<TABLE border=1>
		|<TBODY>
		|<TR style=""BACKGROUND-COLOR:#A4D3EE"" align=""center"">
		|<TD>RWD Target Date</TD>
		|<TD>CRM ID</TD>
		|<TD>Client</TD>
		|<TD>Inv. No</TD>
		|<TD>Inv. Date</TD>
		|<TD>Fiscal Inv. No</TD>
		|<TD>Fiscal Inv. Date</TD>
		|<TD>Orig. currency</TD>
		|<TD>Amount, orig. currency</TD>
		|<TD>Remaining Amount, orig. currency</TD>
		|<TD>Amount, USD</TD>
		|<TD>Remaining Amount, USD</TD>
		|</TR>";
		
		ВыборкаДетальныеЗаписи = ВыборкаMail.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаВТелоСообщения = "<TR>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.RWDTargetDate), Формат(ВыборкаДетальныеЗаписи.RWDTargetDate, "ДФ=MM/dd/yyyy"), " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.CRMID), ВыборкаДетальныеЗаписи.CRMID, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Client), ВыборкаДетальныеЗаписи.Client, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.DocNumber), ВыборкаДетальныеЗаписи.DocNumber, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Дата), Формат(ВыборкаДетальныеЗаписи.Дата, "ДФ=MM/dd/yyyy"), " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.FiscalInvoiceNo), ВыборкаДетальныеЗаписи.FiscalInvoiceNo, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.FiscalInvoiceDate), Формат(ВыборкаДетальныеЗаписи.FiscalInvoiceDate, "ДФ=MM/dd/yyyy"), " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Currency), ВыборкаДетальныеЗаписи.Currency, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Amount), ВыборкаДетальныеЗаписи.Amount, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.RemainingAmount), ВыборкаДетальныеЗаписи.RemainingAmount, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.AmountUSD), ВыборкаДетальныеЗаписи.AmountUSD, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.RemainingAmountUSD), ВыборкаДетальныеЗаписи.RemainingAmountUSD, " ") + "</TD>
			|</TR>";
			ТелоHTML = ТелоHTML + СтрокаВТелоСообщения;
			
			СуммаAmountUSD = СуммаAmountUSD + ВыборкаДетальныеЗаписи.AmountUSD;
			СуммаRemainingAmountUSD = СуммаRemainingAmountUSD + ВыборкаДетальныеЗаписи.RemainingAmountUSD;
			
			// передвигаем на след дату
			НЗ_Очередь.Очистить();
			НЗ_Очередь.Отбор.Проблема.Установить(ВыборкаДетальныеЗаписи.Проблема);
			
			Если ВыборкаДетальныеЗаписи.ВидУведомления = Справочники.ВидыУведомлений.RWDDeadlinePrimary Тогда
				НЗ_Очередь.Отбор.ВидУведомления.Установить(Справочники.ВидыУведомлений.RWDDeadlinePrimary);
				НЗ_Очередь.Записать(Истина);
			КонецЕсли;
			
			НЗ_Очередь.Отбор.ВидУведомления.Установить(Справочники.ВидыУведомлений.RWDDeadline);
			
			ЗаписьОчереди = НЗ_Очередь.Добавить();
			ЗаписьОчереди.Проблема = ВыборкаДетальныеЗаписи.Проблема;
			ЗаписьОчереди.ВидУведомления = Справочники.ВидыУведомлений.RWDDeadline;
			ЗаписьОчереди.ДатаУведомления = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ВыборкаДетальныеЗаписи.ДатаУведомления, ?(ВыборкаДетальныеЗаписи.ВидУведомления = Справочники.ВидыУведомлений.RWDDeadlinePrimary, 1, 2));
			
			НЗ_Очередь.Записать();
			
		КонецЦикла;
		
		ТелоHTML = ТелоHTML + "<tr style=""BACKGROUND-COLOR:#A4D3EE"">
		|<td colspan=""10"">Grand total</td>
		|<td>" + СуммаAmountUSD + "</td>
		|<td>" + СуммаRemainingAmountUSD + "</td>
		|</tr></TABLE>
		|</TBODY>
		|</BODY></HTML>"; 
		ТелоHTML = СтрЗаменить(ТелоHTML, Символы.ПС, "");
		РГСофт.ЗарегистрироватьПочтовоеСообщение(ВыборкаMail.Mail, Тема, ТелоHTML, , ТипТекстаПочтовогоСообщения.HTML);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПолучитьДанныеПоRWDDeadline(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьУведомлений.Проблема КАК Проблема,
		|	ОчередьУведомлений.Проблема.Invoice.Client КАК Client,
		|	ОчередьУведомлений.Проблема.Invoice.DocNumber КАК DocNumber,
		|	ОчередьУведомлений.Проблема.Invoice.Дата КАК Дата,
		|	ОчередьУведомлений.Проблема.Invoice.FiscalInvoiceNo КАК FiscalInvoiceNo,
		|	ОчередьУведомлений.Проблема.Invoice.FiscalInvoiceDate КАК FiscalInvoiceDate,
		|	ОчередьУведомлений.Проблема.Invoice.Amount КАК Amount,
		|	ОчередьУведомлений.Проблема.Invoice.Client.CRMID КАК CRMID,
		|	ОчередьУведомлений.Проблема.RWDTargetDate КАК RWDTargetDate,
		|	ОчередьУведомлений.Проблема.Invoice.Currency КАК Currency,
		|	BilledARОстатки.AmountОстаток КАК RemainingAmount,
		|	Collectors.Collector КАК Collector,
		|	Collectors.Collector.ПользовательLDAP.Mail КАК Mail,
		|	ВЫРАЗИТЬ(ОчередьУведомлений.Проблема.Invoice.Amount / ВнутренниеКурсыВалютСрезПоследних.Курс * ВнутренниеКурсыВалютСрезПоследних.Кратность КАК ЧИСЛО(15, 2)) КАК AmountUSD,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(BilledARОстатки.AmountОстаток, 0) / ВнутренниеКурсыВалютСрезПоследних.Курс * ВнутренниеКурсыВалютСрезПоследних.Кратность КАК ЧИСЛО(15, 2)) КАК RemainingAmountUSD,
		|	ОчередьУведомлений.ВидУведомления КАК ВидУведомления,
		|	ОчередьУведомлений.ДатаУведомления КАК ДатаУведомления
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Collectors КАК Collectors
		|		ПО (ОчередьУведомлений.Проблема.Invoice.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.ManagementGeomarket = Collectors.ManagementGeomarket
		|				ИЛИ Collectors.ManagementGeomarket = ЗНАЧЕНИЕ(Справочник.ManagementGeography.ПустаяСсылка)
		|					И ОчередьУведомлений.Проблема.Invoice.Client = Collectors.Client)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО (ОчередьУведомлений.Проблема.Invoice.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.BilledAR.Остатки(
		|				,
		|				Invoice В
		|					(ВЫБРАТЬ
		|						ОчередьУведомлений.Проблема.Invoice
		|					ИЗ
		|						РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|					ГДЕ
		|						(ОчередьУведомлений.ВидУведомления = ЗНАЧЕНИЕ(Справочник.ВидыУведомлений.RWDDeadlinePrimary)
		|							ИЛИ ОчередьУведомлений.ВидУведомления = ЗНАЧЕНИЕ(Справочник.ВидыУведомлений.RWDDeadline))
		|						И ОчередьУведомлений.ДатаУведомления <= &ТекущаяДата)) КАК BilledARОстатки
		|		ПО (ОчередьУведомлений.Проблема.Invoice = BilledARОстатки.Invoice)
		|ГДЕ
		|	(ОчередьУведомлений.ВидУведомления = ЗНАЧЕНИЕ(Справочник.ВидыУведомлений.RWDDeadlinePrimary)
		|			ИЛИ ОчередьУведомлений.ВидУведомления = ЗНАЧЕНИЕ(Справочник.ВидыУведомлений.RWDDeadline))
		|	И ОчередьУведомлений.ДатаУведомления <= &ТекущаяДата
		|ИТОГИ ПО
		|	Mail";
	
	Запрос.УстановитьПараметр("ТекущаяДата", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ОтправкаНотификацийBrokenPromises() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьУведомлений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	АктуализироватьРегистрОчередьУведомлений();
	
	Период = ТекущаяДата();
	РезультатЗапроса = ПолучитьДанныеПоBrokenPromises(Период);
	
	ВыборкаMail = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Тема = "TEST Broken Promises notification";
	НЗ_Очередь = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
	Календарь = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	
	Пока ВыборкаMail.Следующий() Цикл
		
		СуммаAmountUSD = 0;
		СуммаRemainingAmountUSD = 0;
		
		ТелоHTML = "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://d349bc7e-06e3-4fc1-b24f-9709087cc83c/mdobject/id44c3769f-050d-4f0a-ae52-7c2a9e753714/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
		|<META name=GENERATOR content=""MSHTML 11.00.9600.18525""></HEAD>
		|<BODY>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Dear Collector,.</P>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Please be informed that for below invoices the Forecast Date has come, please ensure that</P>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Remedial work plan is performed and update data in the Collection target.</P>
		|<TABLE border=1>
		|<TBODY>
		|<TR style=""BACKGROUND-COLOR:#A4D3EE"" align=""center"">
		|<TD>Forecast Date</TD>
		|<TD>CRM ID</TD>
		|<TD>Client</TD>
		|<TD>Inv. No</TD>
		|<TD>Inv. Date</TD>
		|<TD>Fiscal Inv. No</TD>
		|<TD>Fiscal Inv. Date</TD>
		|<TD>Orig. currency</TD>
		|<TD>Amount, orig. currency</TD>
		|<TD>Remaining Amount, orig. currency</TD>
		|<TD>Amount, USD</TD>
		|<TD>Remaining Amount, USD</TD>
		|</TR>";
		
		ВыборкаДетальныеЗаписи = ВыборкаMail.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаВТелоСообщения = "<TR>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ForecastDate), Формат(ВыборкаДетальныеЗаписи.ForecastDate, "ДФ=MM/dd/yyyy"), " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.CRMID), ВыборкаДетальныеЗаписи.CRMID, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Client), ВыборкаДетальныеЗаписи.Client, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.DocNumber), ВыборкаДетальныеЗаписи.DocNumber, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Дата), Формат(ВыборкаДетальныеЗаписи.Дата, "ДФ=MM/dd/yyyy"), " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.FiscalInvoiceNo), ВыборкаДетальныеЗаписи.FiscalInvoiceNo, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.FiscalInvoiceDate), Формат(ВыборкаДетальныеЗаписи.FiscalInvoiceDate, "ДФ=MM/dd/yyyy"), " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Currency), ВыборкаДетальныеЗаписи.Currency, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Amount), ВыборкаДетальныеЗаписи.Amount, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.RemainingAmount), ВыборкаДетальныеЗаписи.RemainingAmount, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.AmountUSD), ВыборкаДетальныеЗаписи.AmountUSD, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.RemainingAmountUSD), ВыборкаДетальныеЗаписи.RemainingAmountUSD, " ") + "</TD>
			|</TR>";
			ТелоHTML = ТелоHTML + СтрокаВТелоСообщения;
			
			СуммаAmountUSD = СуммаAmountUSD + ВыборкаДетальныеЗаписи.AmountUSD;
			СуммаRemainingAmountUSD = СуммаRemainingAmountUSD + ВыборкаДетальныеЗаписи.RemainingAmountUSD;
			
			// передвигаем на след дату
			НЗ_Очередь.Очистить();
			НЗ_Очередь.Отбор.Проблема.Установить(ВыборкаДетальныеЗаписи.Проблема);
			НЗ_Очередь.Отбор.ВидУведомления.Установить(Справочники.ВидыУведомлений.BrokenPromises);
			
			ЗаписьОчереди = НЗ_Очередь.Добавить();
			ЗаписьОчереди.Проблема = ВыборкаДетальныеЗаписи.Проблема;
			ЗаписьОчереди.ВидУведомления = Справочники.ВидыУведомлений.BrokenPromises;
			ЗаписьОчереди.ДатаУведомления = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ВыборкаДетальныеЗаписи.ДатаУведомления, 2);
			
			НЗ_Очередь.Записать();
			
		КонецЦикла;
		
		ТелоHTML = ТелоHTML + "<tr style=""BACKGROUND-COLOR:#A4D3EE"">
		|<td colspan=""10"">Grand total</td>
		|<td>" + СуммаAmountUSD + "</td>
		|<td>" + СуммаRemainingAmountUSD + "</td>
		|</tr></TABLE>
		|</TBODY>
		|</BODY></HTML>"; 
		ТелоHTML = СтрЗаменить(ТелоHTML, Символы.ПС, "");
		РГСофт.ЗарегистрироватьПочтовоеСообщение(ВыборкаMail.Mail, Тема, ТелоHTML, , ТипТекстаПочтовогоСообщения.HTML);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПолучитьДанныеПоBrokenPromises(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьУведомлений.Проблема КАК Проблема,
		|	ОчередьУведомлений.Проблема.Invoice.Client КАК Client,
		|	ОчередьУведомлений.Проблема.Invoice.DocNumber КАК DocNumber,
		|	ОчередьУведомлений.Проблема.Invoice.Дата КАК Дата,
		|	ОчередьУведомлений.Проблема.Invoice.FiscalInvoiceNo КАК FiscalInvoiceNo,
		|	ОчередьУведомлений.Проблема.Invoice.FiscalInvoiceDate КАК FiscalInvoiceDate,
		|	ОчередьУведомлений.Проблема.Invoice.Amount КАК Amount,
		|	ОчередьУведомлений.Проблема.Invoice.Client.CRMID КАК CRMID,
		|	ОчередьУведомлений.Проблема.ForecastDate КАК ForecastDate,
		|	ОчередьУведомлений.Проблема.Invoice.Currency КАК Currency,
		|	BilledARОстатки.AmountОстаток КАК RemainingAmount,
		|	Collectors.Collector КАК Collector,
		|	Collectors.Collector.ПользовательLDAP.Mail КАК Mail,
		|	ВЫРАЗИТЬ(ОчередьУведомлений.Проблема.Invoice.Amount / ВнутренниеКурсыВалютСрезПоследних.Курс * ВнутренниеКурсыВалютСрезПоследних.Кратность КАК ЧИСЛО(15, 2)) КАК AmountUSD,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(BilledARОстатки.AmountОстаток, 0) / ВнутренниеКурсыВалютСрезПоследних.Курс * ВнутренниеКурсыВалютСрезПоследних.Кратность КАК ЧИСЛО(15, 2)) КАК RemainingAmountUSD,
		|	ОчередьУведомлений.ВидУведомления КАК ВидУведомления,
		|	ОчередьУведомлений.ДатаУведомления КАК ДатаУведомления
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Collectors КАК Collectors
		|		ПО (ОчередьУведомлений.Проблема.Invoice.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.ManagementGeomarket = Collectors.ManagementGeomarket
		|				ИЛИ Collectors.ManagementGeomarket = ЗНАЧЕНИЕ(Справочник.ManagementGeography.ПустаяСсылка)
		|					И ОчередьУведомлений.Проблема.Invoice.Client = Collectors.Client)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО (ОчередьУведомлений.Проблема.Invoice.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.BilledAR.Остатки(
		|				,
		|				Invoice В
		|					(ВЫБРАТЬ
		|						ОчередьУведомлений.Проблема.Invoice
		|					ИЗ
		|						РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|					ГДЕ
		|						ОчередьУведомлений.ВидУведомления = ЗНАЧЕНИЕ(Справочник.ВидыУведомлений.BrokenPromises)
		|						И ОчередьУведомлений.ДатаУведомления <= &ТекущаяДата)) КАК BilledARОстатки
		|		ПО (ОчередьУведомлений.Проблема.Invoice = BilledARОстатки.Invoice)
		|ГДЕ
		|	ОчередьУведомлений.ВидУведомления = ЗНАЧЕНИЕ(Справочник.ВидыУведомлений.BrokenPromises)
		|	И ОчередьУведомлений.ДатаУведомления <= &ТекущаяДата
		|ИТОГИ ПО
		|	Mail";
	
	Запрос.УстановитьПараметр("ТекущаяДата", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ОбработатьОчередьОбновленияSalesOrderResponsibles() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'SalesOrder Responsibles'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		,
		НСтр("ru = 'Начато обновление SalesOrder Responsibles'"));
	
	Количество = РегистрыСведений.ОчередьОбновленияSalesOrderResponsibles.ОбработатьПорцию();
	Пока Количество <> 0 Цикл
		
		Количество = РегистрыСведений.ОчередьОбновленияSalesOrderResponsibles.ОбработатьПорцию();
		
	КонецЦикла;

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'SalesOrder Responsibles'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		,
		НСтр("ru = 'Закончено обновление SalesOrder Responsibles'"));
	
КонецПроцедуры

Процедура СозданиеКорректировокПоНовымКлиентамИзCRM() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	ВалютаUSD = Константы.rgsВалютаUSD.Получить();
	СчетВыручкиHFM = rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранзакцияHOB.Ссылка КАК Транзакция,
		|	ТранзакцияHOB.CustomerNumber КАК CustomerNumber,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК КодКлиента,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника КАК Client
		|ПОМЕСТИТЬ Транзакции_С_клиентом
		|ИЗ
		|	Документ.ТранзакцияHOB КАК ТранзакцияHOB
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				,
		|				ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|					И ОбъектПриемника <> ЗНАЧЕНИЕ(Справочник.Контрагенты.GlNoName)
		|					И ОбъектПриемника <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|		ПО ТранзакцияHOB.CustomerNumber = НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор
		|			И (НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И (НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client))
		|ГДЕ
		|	НЕ ТранзакцияHOB.ПометкаУдаления
		|	И (ТранзакцияHOB.Client = ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)
		|			ИЛИ ТранзакцияHOB.Client = ЗНАЧЕНИЕ(Справочник.Контрагенты.GlNoName))
		|	И ТранзакцияHOB.CustomerNumber <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТранзакцияOracle.Ссылка,
		|	ТранзакцияOracle.CustomerNumber,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ИЗ
		|	Документ.ТранзакцияOracle КАК ТранзакцияOracle
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				,
		|				(ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith)
		|					ИЛИ ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|					И ОбъектПриемника <> ЗНАЧЕНИЕ(Справочник.Контрагенты.GlNoName)
		|					И ОбъектПриемника <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|		ПО ТранзакцияOracle.CustomerNumber = НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор
		|			И (НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client))
		|ГДЕ
		|	НЕ ТранзакцияOracle.ПометкаУдаления
		|	И (ТранзакцияOracle.Client = ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)
		|			ИЛИ ТранзакцияOracle.Client = ЗНАЧЕНИЕ(Справочник.Контрагенты.GlNoName))
		|	И ТранзакцияOracle.CustomerNumber <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Транзакции_Клиент.Транзакция,
		|	Транзакции_Клиент.Client КАК Client,
		|	DSSСвязанныеДокументы.СвязанныйОбъект КАК Документ,
		|	Транзакции_Клиент.Транзакция.Amount КАК Amount,
		|	Транзакции_Клиент.Транзакция.BaseAmount КАК BaseAmount,
		|	Транзакции_Клиент.Транзакция.Company КАК Company,
		|	Транзакции_Клиент.Транзакция.Account КАК Account,
		|	Транзакции_Клиент.Транзакция.Account.БазовыйЭлемент КАК HFMAccount,
		|	Транзакции_Клиент.Транзакция.AU КАК AU,
		|	Транзакции_Клиент.Транзакция.MNGC КАК MNGC,
		|	Транзакции_Клиент.Транзакция.Currency КАК Currency,
		|	Транзакции_Клиент.Транзакция.LegalEntity КАК LegalEntity,
		|	Транзакции_Клиент.Транзакция.Дата КАК Дата,
		|	КорректировкаТранзакции.Ссылка КАК Корректировка,
		|	DSSСвязанныеДокументы.СвязанныйОбъект.Source КАК Source,
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	DSSСвязанныеДокументы.ПроводкаDSS.CustomerNumber КАК CustomerNumber
		|ИЗ
		|	Транзакции_С_клиентом КАК Транзакции_Клиент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
		|		ПО Транзакции_Клиент.Транзакция = DSSСвязанныеДокументы.ПроводкаDSS
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаТранзакции КАК КорректировкаТранзакции
		|			ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|			ПО КорректировкаТранзакции.Ссылка = ЗадачаИсполнителя.Предмет
		|				И (НЕ ЗадачаИсполнителя.Выполнена)
		|				И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
		|				И (НЕ КорректировкаТранзакции.ПометкаУдаления)
		|		ПО Транзакции_Клиент.Транзакция = КорректировкаТранзакции.ДокументОснование
		|			И (НЕ КорректировкаТранзакции.ПометкаУдаления)";
	
	//Запрос.УстановитьПараметр("Client", ПредопределенноеЗначение("Справочник.Контрагенты.Unreconciled"));
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.Выполнить();
	
	КэшТранзакцийСКорректировками = Новый ТаблицаЗначений;
	КэшТранзакцийСКорректировками.Колонки.Добавить("Транзакция");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ ТипЗнч(ВыборкаДетальныеЗаписи.Документ) = Тип("ДокументСсылка.РучнаяКорректировка") Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Документ, "Client") <> ВыборкаДетальныеЗаписи.Client Тогда 
				ДокОбъект = ВыборкаДетальныеЗаписи.Документ.ПолучитьОбъект();
				ДокОбъект.Client = ВыборкаДетальныеЗаписи.Client;
				ДокОбъект.ClientID = ВыборкаДетальныеЗаписи.CustomerNumber;
				ДокОбъект.ОбменДанными.Загрузка = Истина;
				ДокОбъект.Записать();
			КонецЕсли
		КонецЕсли;
		
		Если КэшТранзакцийСКорректировками.Найти(ВыборкаДетальныеЗаписи.Транзакция,"Транзакция") = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Корректировка) Тогда
			
				КорректировкаТразакции = Документы.КорректировкаТранзакции.СоздатьДокумент();
				КорректировкаТразакции.Дата = ТекущаяДата;
				КорректировкаТразакции.ДокументОснование = ВыборкаДетальныеЗаписи.Транзакция;
				// { RGS Alm 25.05.2018 17:02:56 S-E-0000771
				Отказ = Ложь;
				Если ВыборкаДетальныеЗаписи.Source = Перечисления.ТипыСоответствий.HOBs Тогда
					СуммыДляПроводки = Документы.ТранзакцияHOB.ПолучитьСуммыДляПроводки(ВыборкаДетальныеЗаписи, СчетВыручкиHFM, ВалютаUSD, Отказ);
				Иначе
					СуммыДляПроводки = Документы.ТранзакцияOracle.ПолучитьСуммыДляПроводки(ВыборкаДетальныеЗаписи, СчетВыручкиHFM, ВалютаUSD, Отказ);
				КонецЕсли;
				Если Отказ Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				// } RGS Alm 25.05.2018 17:02:56 S-E-0000771
				ЗаполнитьЗначенияСвойств(КорректировкаТразакции, ВыборкаДетальныеЗаписи, "Company,Account,Currency,AU,LegalEntity");
				Если ВыборкаДетальныеЗаписи.Source = Перечисления.ТипыСоответствий.HOBs И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.MNGC) Тогда
					КорректировкаТразакции.Location = ВыборкаДетальныеЗаписи.MNGC;
				КонецЕсли;
				СтрокаТабЧасти = КорректировкаТразакции.ДетализацияПоКлиенту.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, ВыборкаДетальныеЗаписи);
				СтрокаТабЧасти.Amount = СуммыДляПроводки.Amount;
				СтрокаТабЧасти.BaseAmount = СуммыДляПроводки.BaseAmount;
				КорректировкаТразакции.Комментарий = "The document was created by the procedure for updating the client";
				КорректировкаТразакции.Ответственный = AutoUser;
				КорректировкаТразакции.Записать(РежимЗаписиДокумента.Запись);
				
				ТекДок = КорректировкаТразакции.Ссылка.ПолучитьОбъект();
				Попытка
					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Не удалось записать """ + ТекДок + """! ");
					ОтменитьТранзакцию();
				КонецПопытки;
			Иначе
				НазначитьЗадачу = ПроверитьКорректировку(ВыборкаДетальныеЗаписи.Корректировка, ВыборкаДетальныеЗаписи.Client);
				Если НазначитьЗадачу И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Задача) Тогда
					Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
					Задача.Дата = ТекущаяДата;
					Задача.Наименование = "The client in the adjustments does not match the customer transaction!(The task was created by the procedure for updating the client).";
					Задача.ОсновнойОбъектАдресации = ВыборкаДетальныеЗаписи.Source;
					Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
					//Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
					Задача.Автор = Пользователи.ТекущийПользователь();
					Задача.Предмет = ВыборкаДетальныеЗаписи.Корректировка;
					Задача.Записать();
				КонецЕсли;
			КонецЕсли;
			НоваяСтрокаКэша = КэшТранзакцийСКорректировками.Добавить();
			НоваяСтрокаКэша.Транзакция = ВыборкаДетальныеЗаписи.Транзакция;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПроверитьКорректировку(Корректировка, Клиент)
	
	Для каждого СтрокаКорректировки Из Корректировка.ДетализацияПоКлиенту Цикл
		Если СтрокаКорректировки.Client <> Клиент Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверкаНаличияКурсовВалют() Экспорт
	
	ДатаКурса = НачалоМесяца(ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта,
		|	ВнутренниеКурсыВалютСрезПоследних.Курс КАК Курс
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКурса, Период = &ДатаКурса) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО (ВнутренниеКурсыВалютСрезПоследних.Валюта = Валюты.Ссылка)
		|ГДЕ
		|	ВнутренниеКурсыВалютСрезПоследних.Валюта ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта,
		|	ВнутренниеКурсыВалютСрезПоследних.Курс КАК Курс
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКурса, Период = &ДатаКурса) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО (ВнутренниеКурсыВалютСрезПоследних.Валюта = Валюты.Ссылка)
		|ГДЕ
		|	НЕ ВнутренниеКурсыВалютСрезПоследних.Валюта ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ДатаКурса", ДатаКурса);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТЗ_ВалютыБезКурса = МассивРезультатов[0].Выгрузить();
	ТЗ_ВалютыСКурсом = МассивРезультатов[1].Выгрузить();
	
	ТелоHTML = "<HTML><HEAD>
	|<BODY>
	|<br>";
	
	Если ТЗ_ВалютыБезКурса.Количество() > 0 Тогда
		
		СЗ_Валюты = новый СписокЗначений;
		СЗ_Валюты.ЗагрузитьЗначения(ТЗ_ВалютыБезКурса.ВыгрузитьКолонку("Валюта"));
		Строка_Валюты = Строка(СЗ_Валюты);
		Строка_Валюты = СтрЗаменить(Строка_Валюты, ";", ",");
		СтрокаСообщения = "For currencies " + Строка_Валюты + " not specified Internal rates for the current month.";
		
		ТелоHTML = ТелоHTML +"<br>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">For currencies " + Строка_Валюты + " not specified Internal rates for the current month.</P>
		|<BR>"
		
	КонецЕсли;
	
	Если ТЗ_ВалютыСКурсом.Количество() > 0 Тогда
		
		ТелоHTML = ТелоHTML+"<TABLE style=""border-collapse: collapse;width:84.2%;border:solid black 1.5pt"">
		|<TBODY>
		|<TR align=""center"" style=""width:6.38%;background:#c5c5e2;padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;color:#09093a;"">
		|<TD style=""padding: 5px; border: 2px solid #000;"">Date</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Currency</TD>
		|<TD style=""padding: 5px; border: 2px solid #000;"">Rate</TD>
		|</TR>";

		
		Для Каждого СтрокаДанных из ТЗ_ВалютыСКурсом Цикл
				
			СтрокаВТелоСообщения = "<TR>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + Формат(ДатаКурса, "ДФ=MM/yyyy") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.Валюта), СтрокаДанных.Валюта, " ") + "</TD>
			|<TD style=""padding: 5px; border: 2px solid #000;"">" + ?(ЗначениеЗаполнено(СтрокаДанных.Курс), СтрокаДанных.Курс, " ") + "</TD>
			|</TR>";
			ТелоHTML = ТелоHTML + СтрокаВТелоСообщения;
				
		КонецЦикла;

		ТелоHTML = ТелоHTML + "</TABLE>
		|</BODY>
		|</HTML>";
		
	КонецЕсли;
	
	РГСофт.ЗарегистрироватьПочтовоеСообщение(Константы.ПолучателиСообщенийОбОшибкахЗагрузкиДанныхCurrency.Получить(),
		"ERM: Internal rates", ТелоHTML, , ТипТекстаПочтовогоСообщения.ПростойТекст);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЗАПРОСАМИ

Функция ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстовЗапросов, СтруктураПараметровЗапросов = Неопределено) Экспорт
	
	// Принимает структуру с текстами запросов и структуру с параметрами запросов,
	// сооружает из них пакет запросов,
	// из массива результатов формирует структуру результатов с теми же ключами, что и в структуре текстов запросов
	
	Если СтруктураТекстовЗапросов.Количество() = 0 Тогда
		Возврат Новый Структура;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	// Установим текст пакета запросов
	Запрос.Текст = "";
	ы = 0;
	Для Каждого КлючИЗначение Из СтруктураТекстовЗапросов Цикл
		
		ы = ы + 1;
		Если ы <> 1 Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|
				|";
					
		КонецЕсли;
			
		Запрос.Текст = Запрос.Текст + КлючИЗначение.Значение;
		
	КонецЦикла;
	
	// Установим параметры запросов
	Если СтруктураПараметровЗапросов <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из СтруктураПараметровЗапросов Цикл
			
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Засунем результаты в структуру
	СтруктураРезультатов = Новый Структура;	
	ы = 0;
	Для Каждого КлючИЗначение Из СтруктураТекстовЗапросов Цикл
		
		СтруктураРезультатов.Вставить(КлючИЗначение.Ключ, МассивРезультатов[ы]);
		ы = ы + 1;
		
	КонецЦикла;
	
	Возврат СтруктураРезультатов; 
	
КонецФункции

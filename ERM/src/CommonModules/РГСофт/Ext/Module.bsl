/////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ СИНХРОНИЗАЦИИ СТРОКИ ТАБЛИЦЫ ЗНАЧЕНИЙ С БАЗОЙ ДАННЫХ

Процедура СинхронизироватьСтрокиТаблицыСБазойДанных(ТаблицаБазы, ТаблицаДокумента, СправочникМенеджер, Отказ, Заголовок=Неопределено) Экспорт
	
	// синхронизирует таблицу документа с базой данных
	//
	// Параметры:
	//  ТаблицаБазы  		- ТаблицаЗначений. Обязательно присутствие реквизита Ссылка.
	//  ТаблицаДокумента	- ТаблицаЗначений. Обязательно присутствие реквизита Ссылка.
	//	СправочникМенеджер	- Справочник-менеджер для создания новых объектов. 
	//						  Например "Справочники.СтрокиИнвойса"
	
	ОписаниеТиповЧ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0));
	
	// получим и подготовим рабочую ТЗ
	ТаблицаРабочая = ТаблицаБазы.Скопировать();
	ТаблицаРабочая.Колонки.Добавить("Показатель", ОписаниеТиповЧ);
	ТаблицаРабочая.ЗаполнитьЗначения(-1, "Показатель");
	
	// объединим две таблицы
	Для каждого Стр из ТаблицаДокумента Цикл
		НовСтр = ТаблицаРабочая.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Показатель = 1;
	КонецЦикла;
	
	// подготовим имена колонок для свертки таблицы
	ИменаКолонокСвертки = "";
	Для каждого Колонка ИЗ ТаблицаБазы.Колонки Цикл
		ИменаКолонокСвертки = ИменаКолонокСвертки + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонокСвертки = Сред(ИменаКолонокСвертки, 2);
	
	// свернем вновь образованную таблицу
	ТаблицаРабочая.Свернуть(ИменаКолонокСвертки, "Показатель");
	ТаблицаРабочая.Сортировать("Показатель");
	ТаблицаРабочая.Индексы.Добавить("Ссылка");
	
	// обработаем полученную таблицу
	Для Каждого Стр Из ТаблицаРабочая Цикл
		
		Если ЗначениеЗаполнено(Стр.Ссылка) Тогда
			
			Если Стр.Показатель = 1 Тогда
				
				// строка изменилась, обработаем это
				Объект = Стр.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Объект, Стр);
				Объект.ПометкаУдаления = Ложь;
				ПопыткаЗаписиОбъекта(Объект, Отказ);
				
			ИначеЕсли Стр.Показатель = -1 Тогда
				
				// Показатель = -1, строку удалили или изменили
				// Пометим на удаление элемент справочника
				// Если его не удалили, а изменили, то пометка удаления потом снимется
				// Кажется, что в случаи изменения, помечать на удаление не надо, однако это нужно для контроля уникальности
				
				Объект = Стр.Ссылка.ПолучитьОбъект();
				Объект.ПометкаУдаления = Истина;
				ПопыткаЗаписиОбъекта(Объект, Отказ);
				
			КонецЕсли;
			
		Иначе
			
			// строка добавлена
			Объект = СправочникМенеджер.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Объект, Стр);
			ПопыткаЗаписиОбъекта(Объект, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПопыткаЗаписиОбъекта(Объект, Отказ) Экспорт
	
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Не удалось записать """ + Объект + """! См. сообщения выше.",
		Объект, , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьAccountingUnitsИзAU_master() Экспорт
	Обработки.AULoading.ЗагрузитьAccountingUnitsИзAU_master();
КонецПроцедуры

Процедура ИзменитьСтруктуруСегментов(Стр, Segment, SubSegment, SsubSegment) Экспорт
	
	//сегменты
	
	Segment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(Стр.Segment));
	
	Если Не ЗначениеЗаполнено(Segment) Тогда
		
		SegmentОбъект = Справочники.Сегменты.СоздатьГруппу();
		SegmentОбъект.Код = СокрЛП(Стр.Segment);
		SegmentОбъект.Наименование = СокрЛП(Стр.Segment);
		SegmentОбъект.Родитель = Справочники.Сегменты.ПустаяСсылка();
		SegmentОбъект.Записать();
		Segment = SegmentОбъект.Ссылка;
		
	иначе
		
		SegmentОбъект = Segment.ПолучитьОбъект();
		
		Если Не SegmentОбъект.ЭтоГруппа Тогда 
			
			//Запоминаем ссылку на текущий элемент
			УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(SegmentОбъект.Ссылка.УникальныйИдентификатор());
			
			//Создаем новый элемент - группу
			НовыйЭлемент = Справочники.Сегменты.СоздатьГруппу();    
			НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
			
			//... с такими же параметрами, что и текущий
			НовыйЭлемент.Код                 = SegmentОбъект.Код;
			НовыйЭлемент.Наименование        = SegmentОбъект.Наименование;
			НовыйЭлемент.Родитель            = Справочники.Сегменты.ПустаяСсылка();
			//НовыйЭлемент.Source              = Перечисления.ТипыСоответствий.Lawson;
			
			//Удаляем текущий
			SegmentОбъект.Удалить();
			
			//Записываем новый (группу)
			НовыйЭлемент.Записать();
			
			Segment = НовыйЭлемент.Ссылка;
			
		иначе
			
			РГСофтКлиентСервер.УстановитьЗначение(SegmentОбъект.Родитель, Справочники.Сегменты.ПустаяСсылка());
			
			Если SegmentОбъект.Модифицированность() Тогда 
				SegmentОбъект.Записать();
			КонецЕсли;  
			Segment = SegmentОбъект.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	SubSegment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(Стр.SubSegment));
	
	Если Не ЗначениеЗаполнено(SubSegment) Тогда 
		
		SubSegmentОбъект = Справочники.Сегменты.СоздатьГруппу();
		SubSegmentОбъект.Код = СокрЛП(Стр.SubSegment);
		SubSegmentОбъект.Наименование = СокрЛП(Стр.SubSegment);
		SubSegmentОбъект.Родитель = Segment;
		SubSegmentОбъект.Записать();
		SubSegment = SubSegmentОбъект.Ссылка;
		
	иначе
		
		SubSegmentОбъект = SubSegment.получитьОбъект();
		
		Если Не SubSegmentОбъект.ЭтоГруппа Тогда 
			
			//Запоминаем ссылку на текущий элемент
			УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(SubSegmentОбъект.Ссылка.УникальныйИдентификатор());
			
			//Создаем новый элемент - группу
			НовыйЭлемент = Справочники.Сегменты.СоздатьГруппу();    
			НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
			
			//... с такими же параметрами, что и текущий
			НовыйЭлемент.Код                 = SubSegmentОбъект.Код;
			НовыйЭлемент.Наименование        = SubSegmentОбъект.Наименование;
			НовыйЭлемент.Родитель            = Segment;
			//НовыйЭлемент.Source              = Перечисления.ТипыСоответствий.Lawson;
			
			//Удаляем текущий
			SubSegmentОбъект.Удалить();
			
			//Записываем новый (группу)
			НовыйЭлемент.Записать();
			
			SubSegment = НовыйЭлемент.Ссылка;
			
		иначе
			
			МассивНовыхЭлементов = Новый Массив;
			
			Если НЕ ЗначениеЗаполнено(SubSegmentОбъект.Родитель) Тогда 
				
				//сделаем все подчиненные группы - элементами, иначе будет превышение уровня элементов
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("SubSegment", SubSegmentОбъект.Ссылка);
				
				Запрос.Текст = "ВЫБРАТЬ
				|	Сегменты.Ссылка,
				|	Сегменты.Код,
				|	Сегменты.Наименование
				|ИЗ
				|	Справочник.Сегменты КАК Сегменты
				|ГДЕ
				|	Сегменты.Ссылка В ИЕРАРХИИ(&SubSegment)
				|	И Сегменты.ЭтоГруппа
				|	И Сегменты.Ссылка <> &SubSegment";
				
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗДляИзменения = ТЗ.Скопировать();
				
				Для Каждого СтрТЗДляИзменения из ТЗДляИзменения Цикл
					
					//Запоминаем ссылку на текущий элемент
					УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(СтрТЗДляИзменения.Ссылка.УникальныйИдентификатор());
					
					//Создаем новый элемент - группу
					НовыйЭлемент = Справочники.Сегменты.СоздатьЭлемент();    
					НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
					
					//... с такими же параметрами, что и текущий
					НовыйЭлемент.Код                 = СтрТЗДляИзменения.Код;
					НовыйЭлемент.Наименование        = СтрТЗДляИзменения.Наименование;
					НовыйЭлемент.Родитель            = SubSegmentОбъект.Ссылка;
					
					//Удаляем текущий
					СтрТЗДляИзменения.Ссылка.получитьОбъект().Удалить();
					
					//добавляем новый 
					МассивНовыхЭлементов.Добавить(НовыйЭлемент);
					
				КонецЦикла;
				
			КонецЕсли;
			
			РГСофтКлиентСервер.УстановитьЗначение(SubSegmentОбъект.Родитель, Segment);
			
			Если SubSegmentОбъект.Модифицированность() Тогда 
				SubSegmentОбъект.Записать();
			КонецЕсли;
			
			Для Каждого НовыйЭлемент из МассивНовыхЭлементов Цикл 
				НовыйЭлемент.Записать();
			КонецЦикла;
			
			SubSegment = SubSegmentОбъект.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	SsubSegment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(Стр.SsubSegment));
	
	Если Не ЗначениеЗаполнено(SsubSegment) Тогда 
		
		SsubSegmentОбъект = Справочники.Сегменты.СоздатьЭлемент();
		SsubSegmentОбъект.Код = СокрЛП(Стр.SsubSegment);
		SsubSegmentОбъект.Наименование = СокрЛП(Стр.SsubSegment);
		SsubSegmentОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
		SsubSegmentОбъект.Родитель = SubSegment;
		SsubSegmentОбъект.Записать();
		SsubSegment = SsubSegmentОбъект.Ссылка;
		
	иначе
		
		SsubSegmentОбъект = SsubSegment.получитьОбъект();
		
		Если SsubSegmentОбъект.ЭтоГруппа Тогда 
			
			//Запоминаем ссылку на текущий элемент                           
			УникальнаяСсылка = Справочники.Сегменты.ПолучитьСсылку(SsubSegmentОбъект.Ссылка.УникальныйИдентификатор());
			
			//Создаем новый элемент - группу
			НовыйЭлемент = Справочники.Сегменты.СоздатьЭлемент();    
			НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
			
			//... с такими же параметрами, что и текущий
			НовыйЭлемент.Код                 = SsubSegmentОбъект.Код;
			НовыйЭлемент.Наименование        = SsubSegmentОбъект.Наименование;
			НовыйЭлемент.Родитель            = SubSegment;
			
			//Удаляем текущий
			SsubSegmentОбъект.Удалить();
			
			//Записываем новый (группу)
			НовыйЭлемент.Записать();
			
			SsubSegment = НовыйЭлемент.Ссылка; 		
			
		иначе
			
			РГСофтКлиентСервер.УстановитьЗначение(SsubSegmentОбъект.Родитель, SubSegment);
			Если SsubSegmentОбъект.Модифицированность() Тогда 
				SsubSegmentОбъект.Записать();
			КонецЕсли;
			
			SsubSegment = SsubSegmentОбъект.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатуСервера() Экспорт
	Возврат ТекущаяДата();
КонецФункции

Процедура ЗарегистрироватьПочтовоеСообщение(АдресПолучателя, Тема, Тело, Вложение=Неопределено, ТипТекста = Неопределено, Копия = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.EMailQueue.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.EMail = АдресПолучателя;
	МенеджерЗаписи.Date = ТекущаяДата();
	МенеджерЗаписи.Subject = Тема;
	МенеджерЗаписи.Body = СокрЛП(Тело);
	МенеджерЗаписи.ТипТекста = ТипТекста;
	МенеджерЗаписи.Copy = Копия;
	МенеджерЗаписи.Attachment = Вложение;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура РассылкаEMail() Экспорт 
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	EMailQueue.EMail,
	|	EMailQueue.Date,
	|	EMailQueue.Subject,
	|	EMailQueue.Body,
	|	EMailQueue.Copy,
	|	EMailQueue.ТипТекста,
	|	EMailQueue.АдресОтвета,
	|	EMailQueue.Attachment
	|ИЗ
	|	РегистрСведений.EMailQueue КАК EMailQueue
	|
	|УПОРЯДОЧИТЬ ПО
	|	EMailQueue.Date";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		
		МенеджерЗаписи = РегистрыСведений.EMailQueue.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.EMail = Выборка.EMail;
		МенеджерЗаписи.Date = Выборка.Date;
		МенеджерЗаписи.Удалить();
		
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", Выборка.EMail);	
		ПараметрыПисьма.Вставить("Тема", Выборка.Subject);
		ПараметрыПисьма.Вставить("Тело", Выборка.Body);
		ПараметрыПисьма.Вставить("АдресОтвета", Выборка.АдресОтвета);
		// { RGS AGorlenko 25.12.2015 14:05:15 - поддержка различных типов текста
		//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		ПараметрыПисьма.Вставить("ТипТекста", ?(Выборка.ТипТекста.Пустая(), Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Выборка.ТипТекста));
		// } RGS AGorlenko 25.12.2015 14:05:17 - поддержка различных типов текста
		// { RGS AGorlenko 19.12.2015 0:20:27 - поддержка копий
		ПараметрыПисьма.Вставить("Копии", Выборка.Copy);
		// } RGS AGorlenko 19.12.2015 0:20:32 - поддержка копий
		
		Если Выборка.Attachment <> Неопределено Тогда 
			
			Вложения = Новый Соответствие;
			Вложение = Выборка.Attachment.Получить();	
			
			Если Вложение <> Неопределено Тогда 
				
				ИмяВложения = "";
				
				Если ТипЗнч(Вложение) = Тип("ТабличныйДокумент") Тогда  
					
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xls");
					ВременныйФайл = Новый Файл(ИмяВременногоФайла);
					
					Если СтрНайти(Выборка.Subject, "PM notification") = 0 Тогда					
						ИмяВложения = "Notification_KS_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
					Иначе
						ИмяВложения = "Notification_PM_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
					КонецЕсли;
					
					ИмяФайла = ВременныйФайл.Путь + ИмяВложения;
					
					Вложение.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
					
					Вложение = Новый Файл(ИмяФайла);
					
				КонецЕсли;
				
				Вложения.Вставить(ИмяВложения, Вложение);
				ПараметрыПисьма.Вставить("Вложения", Вложения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись, ПараметрыПисьма);
		Исключение
			
			ТекстОшибки = ИнформацияОбОшибке();
			
			Если ТекстОшибки = Неопределено Тогда
				ВызватьИсключение;
			КонецЕсли;
			
			Если ТекстОшибки.Причина = Неопределено Тогда
				ВызватьИсключение;
			КонецЕсли;
			
			Если СтрНайти(ТекстОшибки.Причина.Описание, "Recipient address rejected: User unknown in relay recipient table") > 0 
				Или СтрНайти(ТекстОшибки.Причина.Описание, "Mailbox not available (SMTP error code") > 0
				Или СтрНайти(ТекстОшибки.Причина.Описание, "Почтовый ящик не доступен (SMTP error code") > 0 Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновлениеСтатусаInvoiceNotDue() Экспорт
	
	Обработки.ОбновлениеСтатусаInvoiceNotDue.ЗаполнитьСтатусInvoiceNotDue();
	
КонецПроцедуры

Процедура _ОтправитьUnbilledNotification() Экспорт
	
	НачатьТранзакцию();
	
	АктуализироватьРегистрОчередьУведомлений();
	
	ДанныеSalesOrders = _ПолучитьДанныеПоSalesOrdersДляUnbilledNotification();
	
	Если ДанныеSalesOrders.Количество() > 0 Тогда
		
		Получатели_Ордера = СобратьПолучателейUnbilledNotification(ДанныеSalesOrders);
		
		УникальныеПолучатели = Получатели_Ордера.Скопировать();
		УникальныеПолучатели.Свернуть("Получатели");
		ид = 1;
		
		Для Каждого Получатель из УникальныеПолучатели Цикл 
			
			СуммаUSD = 0;
			Тема = "TEST Unbilled SO notification";
			
			ТелоHTML = "<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://d349bc7e-06e3-4fc1-b24f-9709087cc83c/mdobject/id44c3769f-050d-4f0a-ae52-7c2a9e753714/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
			|<META name=GENERATOR content=""MSHTML 11.00.9600.18525""></HEAD>
			|<BODY>
			|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Please be kindly informed that there are some unbilled invoices which have job end but not yet billed.</P>
			|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Your immediate actions are required in order to billed this invoices as soon as possible because you are involved in problem decision.</P>
			|<TABLE border=1>
			|<TBODY>
			|<TR style=""BACKGROUND-COLOR:#A4D3EE"" align=""center"">
			|<TD>Geomarket</TD>
			|<TD>Subgeomarket</TD>
			|<TD>Segment</TD>
			|<TD>Client</TD>
			|<TD>Orig. currency</TD>
			|<TD>Amount, orig. currency</TD>
			|<TD>Amount, USD</TD>
			|</TR>";
			
			Отбор = Новый Структура;
			Отбор.Вставить("Получатели", Получатель.Получатели);
			Ордера = Получатели_Ордера.Скопировать(Отбор);
			
			Для Каждого Ордер из Ордера Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("SalesOrder", Ордер.SalesOrder);
				ПроблемыПоОрдеру = ДанныеSalesOrders.Скопировать(Отбор);
				ПроблемыПоОрдеру.Сортировать("ДатаУведомления Возр");
				
				Для Каждого Проблема из ПроблемыПоОрдеру Цикл
					
					СтрокаВТелоСообщения = "<TR>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.GeoMarket),Проблема.GeoMarket," ")+"</TD>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.SubGeoMarket),Проблема.SubGeoMarket," ")+"</TD>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.Segment),Проблема.Segment," ")+"</TD>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.Client),Проблема.Client," ")+"</TD>
					|<TD>"+?(ЗначениеЗаполнено(Проблема.Currency),Проблема.Currency," ")+"</TD>
					|<TD>"+Проблема.Amount+"</TD>
					|<TD>"+Проблема.AmountUSD+"</TD>
					|</TR>";
					ТелоHTML = ТелоHTML + СтрокаВТелоСообщения; 
					СуммаUSD = СуммаUSD + Проблема.AmountUSD;
					
					НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Проблема.Установить(Проблема.Проблема);
					НаборЗаписей.Отбор.Уровень.Установить(Проблема.Уровень);
					НаборЗаписей.Записать();
					
				КонецЦикла;
				
			КонецЦикла;
			
			ТелоHTML = ТелоHTML + "<tr style=""BACKGROUND-COLOR:#A4D3EE"">
			|<td colspan=""6"">Grand total</td>
			|<td>"+СуммаUSD+"</td>
			|</tr></TABLE>
			|</TBODY>
			|</BODY></HTML>"; 
			ТелоHTML = СтрЗаменить(ТелоHTML, Символы.ПС, "");
			Attach = _ПолучитьAttachДляUnbilledNotification(Ордера, ид);
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Получатель.Получатели, Тема, ТелоHTML, Attach, ТипТекстаПочтовогоСообщения.HTML);
			ид = ид + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОтправитьUnbilledNotification() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьУведомлений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	АктуализироватьРегистрОчередьУведомлений();
	
	Период = ТекущаяДата();
	ДанныеSalesOrders = ПолучитьДанныеПоSalesOrdersДляUnbilledNotification(Период);
	
	ДанныеSalesOrders.Колонки.ExpectedDateForInvoice.Заголовок = "Expected date for Invoice";
	
	ДанныеSalesOrders.Индексы.Добавить("Получатель");
	МассивПолучателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеSalesOrders.ВыгрузитьКолонку("Получатель"));
	
	СтруктураОтбора = Новый Структура("Получатель");
	
	Для Каждого Получатель из МассивПолучателей Цикл 
		
		СтруктураОтбора.Получатель = Получатель;
		СуммаUSD = 0;
		Тема = "TEST Unbilled SO notification";
		
		ТелоHTML = "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://d349bc7e-06e3-4fc1-b24f-9709087cc83c/mdobject/id44c3769f-050d-4f0a-ae52-7c2a9e753714/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
		|<META name=GENERATOR content=""MSHTML 11.00.9600.18525""></HEAD>
		|<BODY>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Please be kindly informed that there are some unbilled invoices which have job end but not yet billed.</P>
		|<P style=""FONT-SIZE: 15px; FONT-FAMILY: Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px"">Your immediate actions are required in order to billed this invoices as soon as possible because you are involved in problem decision.</P>
		|<TABLE border=1>
		|<TBODY>
		|<TR style=""BACKGROUND-COLOR:#A4D3EE"" align=""center"">
		|<TD>Geomarket</TD>
		|<TD>Subgeomarket</TD>
		|<TD>Segment</TD>
		|<TD>Client</TD>
		|<TD>Orig. currency</TD>
		|<TD>Amount, orig. currency</TD>
		|<TD>Amount, USD</TD>
		|</TR>";
		
		ПолныеДанныеУведомления = ДанныеSalesOrders.Скопировать(СтруктураОтбора);
		ПолныеДанныеУведомления.Колонки.Удалить("Получатель");
		ДанныеДляТелаПисьма = ПолныеДанныеУведомления.Скопировать(, "GeoMarket, SubGeoMarket, Segment, Client, Currency, Amount, AmountUSD");
		ДанныеДляТелаПисьма.Свернуть("GeoMarket, SubGeoMarket, Segment, Client, Currency", "Amount, AmountUSD");
		
		Для Каждого СтрокаДанных из ДанныеДляТелаПисьма Цикл
				
			СтрокаВТелоСообщения = "<TR>
			|<TD>" + ?(ЗначениеЗаполнено(СтрокаДанных.GeoMarket), СтрокаДанных.GeoMarket, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(СтрокаДанных.SubGeoMarket), СтрокаДанных.SubGeoMarket, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(СтрокаДанных.Segment), СтрокаДанных.Segment, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(СтрокаДанных.Client), СтрокаДанных.Client, " ") + "</TD>
			|<TD>" + ?(ЗначениеЗаполнено(СтрокаДанных.Currency), СтрокаДанных.Currency, " ") + "</TD>
			|<TD>" + СтрокаДанных.Amount + "</TD>
			|<TD>" + СтрокаДанных.AmountUSD + "</TD>
			|</TR>";
			ТелоHTML = ТелоHTML + СтрокаВТелоСообщения;
			СуммаUSD = СуммаUSD + СтрокаДанных.AmountUSD;
			
			//НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Проблема.Установить(Проблема.Проблема);
			//НаборЗаписей.Отбор.Уровень.Установить(Проблема.Уровень);
			//НаборЗаписей.Записать();
				
		КонецЦикла;
		
		ТелоHTML = ТелоHTML + "<tr style=""BACKGROUND-COLOR:#A4D3EE"">
		|<td colspan=""6"">Grand total</td>
		|<td>"+СуммаUSD+"</td>
		|</tr></TABLE>
		|</TBODY>
		|</BODY></HTML>"; 
		ТелоHTML = СтрЗаменить(ТелоHTML, Символы.ПС, "");
		Attach = ПолучитьAttachДляUnbilledNotification(ПолныеДанныеУведомления);
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Получатель, Тема, ТелоHTML, Attach, ТипТекстаПочтовогоСообщения.HTML);
		
	КонецЦикла;
	
	УдалитьОбработанныеЗаписиИзОчередиУведомленийUnbilled(Период);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура УдалитьОбработанныеЗаписиИзОчередиУведомленийUnbilled(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьУведомлений.Проблема,
	|	ОчередьУведомлений.Уровень,
	|	ОчередьУведомлений.ВидУведомления
	|ИЗ
	|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	|ГДЕ
	|	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления";
	Запрос.УстановитьПараметр("ДатаУведомления", Период);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Проблема.Установить(Выборка.Проблема);
		НаборЗаписей.Отбор.Уровень.Установить(Выборка.Уровень);
		НаборЗаписей.Отбор.ВидУведомления.Установить(Выборка.ВидУведомления);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция _ПолучитьДанныеПоSalesOrdersДляUnbilledNotification()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ОчередьУведомлений.Проблема КАК Проблема,
	|	ОчередьУведомлений.Проблема.SalesOrder.Client КАК Client,
	|	ОчередьУведомлений.Проблема.SalesOrder.Currency КАК Currency,
	|	ОчередьУведомлений.Проблема.SalesOrder.Amount КАК Amount,
	|	ОчередьУведомлений.Проблема.SalesOrder.AmountUSD КАК AmountUSD,
	|	ОчередьУведомлений.Проблема.SalesOrder.Location.GeoMarket.Родитель КАК GeoMarket,
	|	ОчередьУведомлений.Проблема.SalesOrder.Location.GeoMarket КАК SubGeoMarket,
	|	ОчередьУведомлений.Проблема.SalesOrder.SubSubSegment.Родитель.Родитель КАК Segment,
	|	ОчередьУведомлений.ДатаУведомления,
	|	ОчередьУведомлений.Проблема.SalesOrder КАК SalesOrder,
	|	ОчередьУведомлений.Уровень
	|ИЗ
	|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	|ГДЕ
	|	ОчередьУведомлений.ДатаУведомления <= &Дата";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПоSalesOrdersДляUnbilledNotification(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder КАК SalesOrder,
	                |	SalesOrderProblemResponsibles.Responsible КАК Получатель,
	                |	ОчередьУведомлений.ДатаУведомления КАК ДатаУведомления,
	                |	ОчередьУведомлений.Проблема КАК Проблема
	                |ПОМЕСТИТЬ ВТ_SO
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SalesOrderProblem.Responsibles КАК SalesOrderProblemResponsibles
	                |		ПО ОчередьУведомлений.Проблема = SalesOrderProblemResponsibles.Ссылка
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.AU = ПолучателиУведомленийUnbilled.Идентификатор1
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Location = ПолучателиУведомленийUnbilled.Идентификатор1
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Client = ПолучателиУведомленийUnbilled.Идентификатор2
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSMITH))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSMITH))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Location = ПолучателиУведомленийUnbilled.Идентификатор1
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSMITH)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ОчередьУведомлений.Проблема.SalesOrder,
	                |	ПолучателиУведомленийUnbilled.Получатель,
	                |	ОчередьУведомлений.ДатаУведомления,
	                |	ОчередьУведомлений.Проблема
	                |ИЗ
	                |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУведомленийUnbilled КАК ПолучателиУведомленийUnbilled
	                |		ПО (ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
	                |			И (ПолучателиУведомленийUnbilled.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
	                |			И ОчередьУведомлений.Уровень = ПолучателиУведомленийUnbilled.Уровень
	                |			И ОчередьУведомлений.Проблема.SalesOrder.Company = ПолучателиУведомленийUnbilled.Идентификатор1
	                |			И ОчередьУведомлений.Проблема.SalesOrder.CREW = ПолучателиУведомленийUnbilled.Идентификатор2
	                |ГДЕ
	                |	ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
	                |	И ОчередьУведомлений.Проблема.SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	UnbilledARОстатки.Location.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarket,
	                |	UnbilledARОстатки.Location.БазовыйЭлемент.GeoMarket КАК SubGeoMarket,
	                |	UnbilledARОстатки.SubSubSegment.БазовыйЭлемент.Родитель.Родитель КАК Segment,
	                |	UnbilledARОстатки.Client КАК Client,
	                |	UnbilledARОстатки.Currency КАК Currency,
	                |	UnbilledARОстатки.AmountОстаток КАК Amount,
	                |	ВЫРАЗИТЬ(UnbilledARОстатки.AmountОстаток / ВнутренниеКурсыВалютСрезПоследних.Курс * ВнутренниеКурсыВалютСрезПоследних.Кратность КАК ЧИСЛО(15, 2)) КАК AmountUSD,
	                |	UnbilledARОстатки.Client.CRMID КАК CustumerId,
	                |	ВТ_SO.Получатель.Mail КАК Получатель,
	                |	ВТ_SO.SalesOrder.Номер КАК InvoiceNumber,
	                |	ВТ_SO.SalesOrder.Дата КАК InvoiceDate,
	                |	ВТ_SO.SalesOrder.Agreement КАК Agreement,
	                |	ВТ_SO.Проблема.Reason КАК Reason,
	                |	ВТ_SO.Проблема.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
	                |	ВТ_SO.Проблема.EscalateTo КАК EscalateTo,
	                |	ВТ_SO.Проблема.User КАК Responsible,
	                |	ВТ_SO.Проблема.ResponsiblesList КАК ResponsibleAR,
	                |	ВТ_SO.SalesOrder.JobEndDate КАК JobEndDate,
	                |	ВЫБОР
	                |		КОГДА ВТ_SO.SalesOrder.JobEndDate <> ДАТАВРЕМЯ(1, 1, 1)
	                |			ТОГДА РАЗНОСТЬДАТ(ВТ_SO.SalesOrder.JobEndDate, &ДатаУведомления, ДЕНЬ)
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Ageing
	                |ИЗ
	                |	ВТ_SO КАК ВТ_SO
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.UnbilledAR.Остатки(
	                |				&ДатаУведомления,
	                |				SalesOrder В
	                |					(ВЫБРАТЬ
	                |						ВТ.SalesOrder
	                |					ИЗ
	                |						ВТ_SO КАК ВТ)) КАК UnbilledARОстатки
	                |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаУведомления, ) КАК ВнутренниеКурсыВалютСрезПоследних
	                |			ПО UnbilledARОстатки.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
	                |		ПО ВТ_SO.SalesOrder = UnbilledARОстатки.SalesOrder";
	
	Запрос.УстановитьПараметр("ДатаУведомления", Период);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция _ПолучитьAttachДляUnbilledNotification(Таблица, ид)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Построитель = Новый ПостроительОтчета();
	
	ТаблицаДляAttach = ПолучитьДанныеДляAttachUnbilledNotification(Таблица.ВыгрузитьКолонку("SalesOrder"));
	
	Если ТаблицаДляAttach.Количество() > 0 Тогда
		
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДляAttach);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок );
		
		Каталог = КаталогВременныхФайлов();
		
		ИмяФайла =Каталог + "Attach_" + ид + ".xls";
		
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		ДанныеФайла = Новый ХранилищеЗначения(ИмяФайла);
		
		Возврат ДанныеФайла
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьAttachДляUnbilledNotification(Таблица)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Построитель = Новый ПостроительОтчета();
	
	Если Таблица.Количество() > 0 Тогда
		
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(Таблица);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок);
		
		Каталог = КаталогВременныхФайлов();
		
		ИмяФайла = Каталог + "Notification_Unbilled_Invoices_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + ".xls";
		
		ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
		ДанныеФайла = Новый ХранилищеЗначения(ИмяФайла);
		
		Возврат ДанныеФайла;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеДляAttachUnbilledNotification(МассивОрдеров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	UnbilledARОстатки.Location.GeoMarket.Родитель КАК GeoMarket,
	|	UnbilledARОстатки.Location.GeoMarket КАК SubGeoMarket,
	|	UnbilledARОстатки.SubSubSegment.Родитель.Родитель КАК Segment,
	|	UnbilledARОстатки.Client КАК Client,
	|	UnbilledARОстатки.SalesOrder.Invoice.Номер КАК InvoiceНомер,
	|	UnbilledARОстатки.SalesOrder.Invoice.Дата КАК InvoiceДата,
	|	UnbilledARОстатки.SalesOrder.Amount КАК SalesAmount,
	|	UnbilledARОстатки.SalesOrder.AmountUSD КАК SalesAmountUSD,
	|	SalesOrdersCommentsСрезПоследних.Problem.Reason КАК Reason,
	|	SalesOrdersCommentsСрезПоследних.Problem.Billed КАК Billed,
	|	SalesOrdersCommentsСрезПоследних.Problem.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
	|	SalesOrdersCommentsСрезПоследних.Problem.EscalateTo КАК EscalateTo,
	|	SalesOrdersCommentsСрезПоследних.Problem.Details КАК Details,
	|	SalesOrdersCommentsСрезПоследних.Problem.ResponsiblesList КАК ResponsiblesList,
	|	UnbilledARОстатки.SalesOrder.JobEndDate КАК JobEndDate,
	|	ВЫБОР
	|		КОГДА UnbilledARОстатки.SalesOrder.JobEndDate <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РАЗНОСТЬДАТ(UnbilledARОстатки.SalesOrder.JobEndDate, &Дата, ДЕНЬ)
	|	КОНЕЦ КАК Aging
	|ИЗ
	|	РегистрНакопления.UnbilledAR.Остатки(&Дата, SalesOrder В (&МассивОрдеров) {(Location.БазовыйЭлемент.GeoMarket.Родитель = &GeoMarket) КАК Поле2}) КАК UnbilledARОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrdersComments.СрезПоследних(, ) КАК SalesOrdersCommentsСрезПоследних
	|		ПО UnbilledARОстатки.SalesOrder = SalesOrdersCommentsСрезПоследних.SalesOrder
	|{ГДЕ
	|	UnbilledARОстатки.Source.*,
	|	UnbilledARОстатки.Company.*,
	|	UnbilledARОстатки.Client.*}";
	
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция СобратьПолучателейUnbilledNotification(Данные)
	
	ТаблицаПолучателейОрдеров = Новый ТаблицаЗначений;
	ТаблицаПолучателейОрдеров.Колонки.Добавить("Проблема");
	ТаблицаПолучателейОрдеров.Колонки.Добавить("SalesOrder");
	ТаблицаПолучателейОрдеров.Колонки.Добавить("Получатели");
	
	Для Каждого Строка из Данные Цикл
		
		Если ЗначениеЗаполнено(Строка.Уровень) Тогда
			
			Получатели = Строка.Уровень.Members;
			
			Для Каждого Элемент Из Получатели Цикл
				
				Email = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Member,"Mail");
				СтрокаПолучателей = ТаблицаПолучателейОрдеров.Добавить();
				СтрокаПолучателей.Проблема = Строка.Проблема;
				СтрокаПолучателей.SalesOrder = Строка.SalesOrder;
				СтрокаПолучателей.Получатели = Email;
				
			КонецЦикла;
			
		Иначе
			
			Получатели = Строка.Проблема.Responsibles;
			
			Для Каждого Элемент Из Получатели Цикл
				
				Email = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Responsible,"Mail");
				СтрокаПолучателей = ТаблицаПолучателейОрдеров.Добавить();
				СтрокаПолучателей.Проблема = Строка.Проблема;
				СтрокаПолучателей.SalesOrder = Строка.SalesOrder;
				СтрокаПолучателей.Получатели = Email;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПолучателейОрдеров;
	
КонецФункции

Процедура АктуализироватьРегистрОчередьУведомлений()
	
	//ЗапросУведомления = Новый Запрос;
	//ЗапросУведомления.Текст = "ВЫБРАТЬ
	//|	ОчередьУведомлений.Проблема,
	//|	ОчередьУведомлений.Уровень,
	//|	ОчередьУведомлений.Проблема.SalesOrder КАК SalesOrder
	//|ИЗ
	//|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	//|ГДЕ
	//|	ОчередьУведомлений.ДатаУведомления <= &Дата";
	//ЗапросУведомления.УстановитьПараметр("Дата", ТекущаяДата());
	//Уведомления = ЗапросУведомления.Выполнить().Выгрузить();
	//Ордера = Уведомления.ВыгрузитьКолонку("SalesOrder");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	SalesOrdersCommentsСрезПоследних.SalesOrder,
	//|	SalesOrdersCommentsСрезПоследних.Problem
	//|ИЗ
	//|	РегистрСведений.SalesOrdersComments.СрезПоследних(, SalesOrder В (&Ордера)) КАК SalesOrdersCommentsСрезПоследних";
	//Запрос.УстановитьПараметр("Ордера", Ордера);
	//
	//РезультатПроблемы = Запрос.Выполнить().Выгрузить();
	//
	//Для Каждого Уведомление Из Уведомления Цикл
	//	
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Problem", Уведомление.Проблема);
	//	Отбор.Вставить("SalesOrder", Уведомление.SalesOrder);
	//	
	//	Строки = РезультатПроблемы.НайтиСтроки(Отбор);
	//	
	//	Если  Строки.Количество() = 0 Тогда
	//		
	//		НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Проблема.Установить(Уведомление.Проблема);
	//		НаборЗаписей.Отбор.Уровень.Установить(Уведомление.Уровень);
	//		НаборЗаписей.Записать();
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОчередьУведомлений.Проблема
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrdersComments.СрезПоследних(
		|				,
		|				SalesOrder В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ОчередьУведомлений.Проблема.SalesOrder
		|					ИЗ
		|						РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений)) КАК SalesOrdersCommentsСрезПоследних
		|		ПО ОчередьУведомлений.Проблема.SalesOrder = SalesOrdersCommentsСрезПоследних.SalesOrder
		|ГДЕ
		|	ОчередьУведомлений.Проблема <> SalesOrdersCommentsСрезПоследних.Problem";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НЗ = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НЗ.Отбор.Проблема.Установить(ВыборкаДетальныеЗаписи.Проблема);
		НЗ.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСправочникLDAPUsers() Экспорт
	
	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	Если ЗначениеЗаполнено(AutoUser) Тогда
		ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(AutoUser, "ЛогинДляПодключенияКLDAP, ПарольДляПодключенияКLDAP");
		Если ПараметрыПодключения <> Неопределено Тогда
			ИмяПользователяПодключения = ПараметрыПодключения.ЛогинДляПодключенияКLDAP;
			ПарольПользователяПодключения = ПараметрыПодключения.ПарольДляПодключенияКLDAP;
		КонецЕсли;
	Иначе
		ВызватьИсключение "Failed to find user 'AutoUser'";
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяПользователяПодключения", ИмяПользователяПодключения);
	СтруктураПараметров.Вставить("ПарольПользователяПодключения", ПарольПользователяПодключения);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	Обработки.UpdateLDAPUsers.ОбновитьСправочникLDAPUsers(СтруктураПараметров, АдресХранилища);
	
КонецПроцедуры

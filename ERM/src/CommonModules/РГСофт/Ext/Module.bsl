/////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ СИНХРОНИЗАЦИИ СТРОКИ ТАБЛИЦЫ ЗНАЧЕНИЙ С БАЗОЙ ДАННЫХ
 
Процедура СинхронизироватьСтрокиТаблицыСБазойДанных(ТаблицаБазы, ТаблицаДокумента, СправочникМенеджер, Отказ, Заголовок=Неопределено) Экспорт
	
	// синхронизирует таблицу документа с базой данных
	//
	// Параметры:
	//  ТаблицаБазы  		- ТаблицаЗначений. Обязательно присутствие реквизита Ссылка.
	//  ТаблицаДокумента	- ТаблицаЗначений. Обязательно присутствие реквизита Ссылка.
	//	СправочникМенеджер	- Справочник-менеджер для создания новых объектов. 
	//						  Например "Справочники.СтрокиИнвойса"
	
	ОписаниеТиповЧ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0));
	
	// получим и подготовим рабочую ТЗ
	ТаблицаРабочая = ТаблицаБазы.Скопировать();
	ТаблицаРабочая.Колонки.Добавить("Показатель", ОписаниеТиповЧ);
	ТаблицаРабочая.ЗаполнитьЗначения(-1, "Показатель");
		
	// объединим две таблицы
	Для каждого Стр из ТаблицаДокумента Цикл
		НовСтр = ТаблицаРабочая.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Показатель = 1;
	КонецЦикла;
	
	// подготовим имена колонок для свертки таблицы
	ИменаКолонокСвертки = "";
	Для каждого Колонка ИЗ ТаблицаБазы.Колонки Цикл
		ИменаКолонокСвертки = ИменаКолонокСвертки + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонокСвертки = Сред(ИменаКолонокСвертки, 2);
	
	// свернем вновь образованную таблицу
	ТаблицаРабочая.Свернуть(ИменаКолонокСвертки, "Показатель");
	ТаблицаРабочая.Сортировать("Показатель");
	ТаблицаРабочая.Индексы.Добавить("Ссылка");
	
	// обработаем полученную таблицу
	Для Каждого Стр Из ТаблицаРабочая Цикл
		
		Если ЗначениеЗаполнено(Стр.Ссылка) Тогда
						
			Если Стр.Показатель = 1 Тогда
				
				// строка изменилась, обработаем это
				Объект = Стр.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Объект, Стр);
				Объект.ПометкаУдаления = Ложь;
				ПопыткаЗаписиОбъекта(Объект, Отказ);
				
			ИначеЕсли Стр.Показатель = -1 Тогда
				
				// Показатель = -1, строку удалили или изменили
				// Пометим на удаление элемент справочника
				// Если его не удалили, а изменили, то пометка удаления потом снимется
				// Кажется, что в случаи изменения, помечать на удаление не надо, однако это нужно для контроля уникальности
					
				Объект = Стр.Ссылка.ПолучитьОбъект();
				Объект.ПометкаУдаления = Истина;
				ПопыткаЗаписиОбъекта(Объект, Отказ);
			
			КонецЕсли;
			
		Иначе
			
			// строка добавлена
			Объект = СправочникМенеджер.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Объект, Стр);
			ПопыткаЗаписиОбъекта(Объект, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПопыткаЗаписиОбъекта(Объект, Отказ) Экспорт
	
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать """ + Объект + """! См. сообщения выше.",
			Объект, , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

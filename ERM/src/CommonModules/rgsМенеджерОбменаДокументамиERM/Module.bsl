// Конвертация ERM (documents) от 15.08.2018 17:52:03
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_Invoice_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_SalesOrder_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_crmContracts_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_LDAPUsers_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_TriggerTypes_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Получение
#Область Документ_Invoice_Получение
Процедура ДобавитьПОД_Документ_Invoice_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_Invoice_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.Invoice";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Invoice_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_SalesOrder_Получение
Процедура ДобавитьПОД_Документ_SalesOrder_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_SalesOrder_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.SalesOrder";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_SalesOrder_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_crmContracts_Получение
Процедура ДобавитьПОД_Справочник_crmContracts_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_crmContracts_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СrmContracts";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_crmContracts_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_LDAPUsers_Получение
Процедура ДобавитьПОД_Справочник_LDAPUsers_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_LDAPUsers_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_TriggerTypes_Получение
Процедура ДобавитьПОД_Справочник_TriggerTypes_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_TriggerTypes_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.TriggerTypes";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_TriggerTypes_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Получение
Процедура ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Договоры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_Invoice_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_SalesOrder_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_crmContracts_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_TriggerTypes_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Сегменты_Получение(ПравилаКонвертации);
	КонецЕсли;
КонецПроцедуры

#Область Получение
#Область Документ_Invoice_Получение
Процедура ДобавитьПКО_Документ_Invoice_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_Invoice_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.Invoice;
	ПравилоКонвертации.ОбъектФормата = "Документ.Invoice";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_Invoice_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_Invoice_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Agreement";
	НоваяСтрока.СвойствоФормата = "Agreement";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "AgreementCode";
	НоваяСтрока.СвойствоФормата = "AgreementCode";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Amount";
	НоваяСтрока.СвойствоФормата = "Amount";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Contract";
	НоваяСтрока.СвойствоФормата = "Contract";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DocID";
	НоваяСтрока.СвойствоФормата = "DocID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DocNumber";
	НоваяСтрока.СвойствоФормата = "DocNumber";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DueDateFrom";
	НоваяСтрока.СвойствоФормата = "DueDateFrom";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DueDateTo";
	НоваяСтрока.СвойствоФормата = "DueDateTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ExpectedDateOfPayment";
	НоваяСтрока.СвойствоФормата = "ExpectedDateOfPayment";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FiscalAmount";
	НоваяСтрока.СвойствоФормата = "FiscalAmount";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FiscalCurrency";
	НоваяСтрока.СвойствоФормата = "FiscalCurrency";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FiscalInvoiceDate";
	НоваяСтрока.СвойствоФормата = "FiscalInvoiceDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FiscalInvoiceNo";
	НоваяСтрока.СвойствоФормата = "FiscalInvoiceNumber";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PassedForApproval";
	НоваяСтрока.СвойствоФормата = "PassedForApproval";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PassedForApprovalDate";
	НоваяСтрока.СвойствоФормата = "PassedForApprovalDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PassedForPayment";
	НоваяСтрока.СвойствоФормата = "PassedForPayment";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PassedForPaymentDate";
	НоваяСтрока.СвойствоФормата = "PassedForPaymentDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Responsible";
	НоваяСтрока.СвойствоФормата = "Responsible";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Source";
	НоваяСтрока.СвойствоФормата = "Source";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыСоответствий_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TriggerDate";
	НоваяСтрока.СвойствоФормата = "TriggerDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВозвратаКС";
	НоваяСтрока.СвойствоФормата = "ДатаВозвратаКС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтправкиКС";
	НоваяСтрока.СвойствоФормата = "ДатаОтправкиКС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КомментарийСтатусаВозвратаКС";
	НоваяСтрока.СвойствоФормата = "КомментарийСтатусаВозвратаКС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатусВозвратаКС";
	НоваяСтрока.СвойствоФормата = "СтатусВозвратаКС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФактическаяДатаРеализации";
	НоваяСтрока.СвойствоФормата = "ФактическаяДатаРеализации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "DocIDString";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("DocID,Source,Company");
КонецПроцедуры

Процедура ПКО_Документ_Invoice_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//Если ДанныеXDTO.КлючевыеСвойства.Свойство("DocIDString") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.DocIDString) Тогда
	//	ПолученныеДанные.DocID = ДанныеXDTO.КлючевыеСвойства.DocIDString;
	//ИначеЕсли ПолученныеДанные.Source = Перечисления.ТипыСоответствий.Lawson И СтрДлина(ПолученныеДанные.DocNumber) = 10 Тогда
	//	ПолученныеДанные.DocID = СокрЛП(ПолученныеДанные.DocNumber) + "B";
	//Иначе
	//	ПолученныеДанные.DocID = ДанныеXDTO.КлючевыеСвойства.DocID;	
	//КонецЕсли;
	Если ПолученныеДанные.Source = Перечисления.ТипыСоответствий.OracleMI И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.DocID) И ТипЗнч(ДанныеXDTO.КлючевыеСвойства.DocID) = Тип("Строка") Тогда
		ПолученныеДанные.DocID = Число(ДанныеXDTO.КлючевыеСвойства.DocID);	
	КонецЕсли;
	
	//Если ПолученныеДанные.Source = Перечисления.ТипыСоответствий.OracleSmith И ДанныеXDTO.Свойство("ERMClientMappingID") И ДанныеXDTO.Свойство("LawsonCompanyCode") Тогда
	//	//LawsonCompanyCode = СтрЗаменить(Строка(ДанныеXDTO.LawsonCompanyCode), ",", "");
	//	//LawsonCompanyCode = СтрЗаменить(LawsonCompanyCode, Символы.НПП, "");
	//	LawsonCompanyCode = Формат(ДанныеXDTO.LawsonCompanyCode, "ЧРГ=' '; ЧГ=0");
	//	ПолученныеДанные.DocID = СокрЛП(ПолученныеДанные.DocNumber) + "." + ДанныеXDTO.ERMClientMappingID + "." + LawsonCompanyCode; 
	//	ПолученныеДанные.Номер = СокрЛП(ПолученныеДанные.DocNumber) + "." + ДанныеXDTO.ERMClientMappingID + "." + LawsonCompanyCode;
	//КонецЕсли;
	
	Если ДанныеXDTO.Свойство("FiscalPayments") Тогда
		FiscalPayments = ДанныеXDTO.FiscalPayments;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("FiscalPayments", FiscalPayments);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("LawsonCompanyCode") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Код = &Код
		|	И Организации.Source = &Source";
		Запрос.Установитьпараметр("Код", ДанныеXDTO.LawsonCompanyCode);
		Запрос.Установитьпараметр("Source", ПолученныеДанные.Source);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();	
			ПолученныеДанные.Company = Выборка.Организация;
		Иначе
			ПолученныеДанные.Company = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ERMClientMappingID") Тогда
		ЗапросClient = Новый Запрос;
		ЗапросClient.Текст = "ВЫБРАТЬ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника КАК ОбъектПриемника
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&ДатаИнвойса,
		|			Идентификатор = &Идентификатор
		|				И ТипСоответствия = &ТипСоответствия
		|				И ТипОбъектаВнешнейСистемы = &ТипОбъектаВнешнейСистемы) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних";
		ЗапросClient.УстановитьПараметр("ДатаИнвойса", ПолученныеДанные.Дата);
		ЗапросClient.УстановитьПараметр("Идентификатор", ДанныеXDTO.ERMClientMappingID);
		ЗапросClient.УстановитьПараметр("ТипСоответствия", ПолученныеДанные.Source);
		ЗапросClient.УстановитьПараметр("ТипОбъектаВнешнейСистемы", Перечисления.ТипыОбъектовВнешнихСистем.Client);
		РезультатClient = ЗапросClient.Выполнить();
		Если НЕ РезультатClient.Пустой() Тогда
			ВыборкаClient = РезультатClient.Выбрать();
			ВыборкаClient.Следующий();
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Client", ВыборкаClient.ОбъектПриемника);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_Invoice_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
					
		СсылкаНаИнвойс = Документы.Invoice.ПолучитьСсылку();
		ПолученныеДанные.УстановитьСсылкуНового(СсылкаНаИнвойс);
		Amount = ПолученныеДанные.Amount;
		Source = ПолученныеДанные.Source;
		Company = ПолученныеДанные.Company;
		
	Иначе
		
		СсылкаНаИнвойс = ДанныеИБ.Ссылка;
		Amount = ДанныеИБ.Amount;
		Source = ДанныеИБ.Source;
		Company = ДанныеИБ.Company;
		
	КонецЕсли;
			
	Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("FiscalPayments") ИЛИ ПолученныеДанные.ДополнительныеСвойства.FiscalPayments.Количество() = 0 Тогда
		
		Payments = РегистрыСведений.FiscalPayments.СоздатьНаборЗаписей();
		Payments.Отбор.Invoice.Установить(СсылкаНаИнвойс);
		Payments.Записать();
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//|	1
		//|ИЗ
		//|	РегистрСведений.FiscalPayments КАК FiscalPayments
		//|ГДЕ
		//|	FiscalPayments.Invoice = &Invoice";
		//Запрос.УстановитьПараметр("Invoice", СсылкаНаИнвойс);
		//Результат = Запрос.Выполнить();
		//
		////ПроверимНаУдаленные
		//Если НЕ Результат.Пустой() Тогда
		//	
		//	Payments = РегистрыСведений.FiscalPayments.СоздатьНаборЗаписей();
		//	Payments.Отбор.Invoice.Установить(СсылкаНаИнвойс);
		//	Payments.Записать();
		//	
		//	ЗапросСтатус = Новый Запрос;
		//	ЗапросСтатус.Текст = "ВЫБРАТЬ
		//	|	InvoiceCommentsСрезПоследних.Problem.Status КАК Status
		//	|ИЗ
		//	|	РегистрСведений.InvoiceComments.СрезПоследних(, Invoice = &Invoice) КАК InvoiceCommentsСрезПоследних";
		//	ЗапросСтатус.УстановитьПараметр("Invoice", СсылкаНаИнвойс);
		//	РезультатСтатус = ЗапросСтатус.Выполнить().Выбрать();
		//	
		//	Если РезультатСтатус.Количество() > 0 Тогда
		//		РезультатСтатус.Следующий();
		//		ПоследнийСтатус = РезультатСтатус.Status;
		//	Иначе
		//		ПоследнийСтатус = Неопределено;
		//	КонецЕсли;
		//	
		//	Если ПоследнийСтатус = Перечисления.InvoiceStatus.PartiallyPaid ИЛИ ПоследнийСтатус = Перечисления.InvoiceStatus.InvoicePaid Тогда
		//		
		//		НЗ = РегистрыСведений.InvoiceComments.СоздатьНаборЗаписей();
		//		
		//		СтруктураРеквизитовПроблемы = Новый Структура("Дата, Invoice, User, Status, ConfirmedBy, CustomerRepresentative, CustomerInputDetails, Comment, CustInputDate, ForecastDate, RemedialWorkPlan, RWDTargetDate, SLBAssignedTo");
		//	
		//		СтруктураРеквизитовПроблемы.Дата = ТекущаяДата();
		//		СтруктураРеквизитовПроблемы.Invoice = СсылкаНаИнвойс;
		//		СтруктураРеквизитовПроблемы.SLBAssignedTo = Новый ТаблицаЗначений;
		//		СтруктураРеквизитовПроблемы.Status = Перечисления.InvoiceStatus.ПустаяСсылка();
		//		
		//		AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
		//		Если ЗначениеЗаполнено(AutoUser)Тогда
		//			СтруктураРеквизитовПроблемы.User = AutoUser;
		//		КонецЕсли;
		//		
		//		Если КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелHOB() Тогда
		//			СтруктураРеквизитовПроблемы.Comment = "Loaded from HOB";	
		//		ИначеЕсли КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелBilling() Тогда    
		//			СтруктураРеквизитовПроблемы.Comment = "Loaded from Billing";
		//		Иначе
		//			СтруктураРеквизитовПроблемы.Comment = "Loaded from";
		//		КонецЕсли;
		//		
		//		Problem = РегистрыСведений.InvoiceComments.СоздатьInvoiceProblem(СтруктураРеквизитовПроблемы);
		//		
		//		Запись = НЗ.Добавить();
		//		Запись.Период = ТекущаяДата();
		//		Запись.Invoice = СсылкаНаИнвойс;
		//		Запись.Problem = Problem;
		//		НЗ.Записать(Ложь);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;	
		
	Иначе
		
		FiscalPayments = ПолученныеДанные.ДополнительныеСвойства.FiscalPayments;
		
		Payments = РегистрыСведений.FiscalPayments.СоздатьНаборЗаписей();
		Payments.Отбор.Invoice.Установить(СсылкаНаИнвойс);
		
		Для Каждого Строка из FiscalPayments Цикл
			
			Запись = Payments.Добавить();
			Запись.Source = Source;
			Запись.Invoice = СсылкаНаИнвойс;
			Запись.PaymentDocument = Строка.PaymentDocument;
			Запись.Company = Company;
			
			Запись.PaymentDate = Строка.PaymentDate;
			ВалютаПравило = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_Валюты_Получение", "ИмяПКО");
			Валюта = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Currency, ВалютаПравило, "ПолучитьСсылку"); 
			
			Запись.Currency = Валюта;			
			Запись.Amount = Строка.Amount;
			Запись.SettlementAmount = Строка.SettlementAmount;
			
		КонецЦикла;
		
		Payments.Записать();
		
		////Проставляем Статус
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	СУММА(FiscalPayments.SettlementAmount) КАК SettlementAmount
		//|ИЗ
		//|	РегистрСведений.FiscalPayments КАК FiscalPayments
		//|ГДЕ
		//|	FiscalPayments.Invoice = &Invoice
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	FiscalPayments.Invoice";
		//Запрос.УстановитьПараметр("Invoice", СсылкаНаИнвойс);
		//Результат = Запрос.Выполнить().Выбрать();
		//
		//Если Результат.Количество() > 0 Тогда
		//	
		//	ЗапросСтатус = Новый Запрос;
		//	ЗапросСтатус.Текст = "ВЫБРАТЬ
		//	|	InvoiceCommentsСрезПоследних.Problem.Status КАК Status
		//	|ИЗ
		//	|	РегистрСведений.InvoiceComments.СрезПоследних(, Invoice = &Invoice) КАК InvoiceCommentsСрезПоследних";
		//	ЗапросСтатус.УстановитьПараметр("Invoice", СсылкаНаИнвойс);
		//	РезультатСтатус = ЗапросСтатус.Выполнить().Выбрать();
		//	
		//	Если РезультатСтатус.Количество() > 0 Тогда
		//		РезультатСтатус.Следующий();
		//		ПоследнийСтатус = РезультатСтатус.Status;
		//	Иначе
		//		ПоследнийСтатус = Неопределено;
		//	КонецЕсли;
		//	
		//	Результат.Следующий();
		//	
		//	СтруктураРеквизитовПроблемы = Новый Структура("Дата, Invoice, User, Status, ConfirmedBy, CustomerRepresentative, CustomerInputDetails, Comment, CustInputDate, ForecastDate, RemedialWorkPlan, RWDTargetDate, SLBAssignedTo");
		//	
		//	СтруктураРеквизитовПроблемы.Дата = ТекущаяДата();
		//	СтруктураРеквизитовПроблемы.Invoice = СсылкаНаИнвойс;
		//	СтруктураРеквизитовПроблемы.SLBAssignedTo = Новый ТаблицаЗначений;
		//	СтруктураРеквизитовПроблемы.Status = Перечисления.InvoiceStatus.ПустаяСсылка();
		//	
		//	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
		//	Если ЗначениеЗаполнено(AutoUser)Тогда
		//		СтруктураРеквизитовПроблемы.User = AutoUser;
		//	КонецЕсли;
		//	
		//	Если КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелHOB() Тогда
		//		СтруктураРеквизитовПроблемы.Comment = "Loaded from HOB";	
		//	ИначеЕсли КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелBilling() Тогда    
		//		СтруктураРеквизитовПроблемы.Comment = "Loaded from Billing";
		//	Иначе
		//		СтруктураРеквизитовПроблемы.Comment = "Loaded from";
		//	КонецЕсли;			
		//	
		//	Если Результат.SettlementAmount >= Amount И ПоследнийСтатус <> Перечисления.InvoiceStatus.InvoicePaid Тогда
		//		
		//		СтруктураРеквизитовПроблемы.Status = Перечисления.InvoiceStatus.InvoicePaid;
		//		Problem = РегистрыСведений.InvoiceComments.СоздатьInvoiceProblem(СтруктураРеквизитовПроблемы);
		//		
		//		НЗ = РегистрыСведений.InvoiceComments.СоздатьНаборЗаписей();
		//		Запись = НЗ.Добавить();
		//		Запись.Период = ТекущаяДата();
		//		Запись.Invoice = СсылкаНаИнвойс;
		//		Запись.Problem = Problem;
		//		НЗ.Записать(Ложь);
		//		
		//	ИначеЕсли Результат.SettlementAmount < Amount И ПоследнийСтатус <> Перечисления.InvoiceStatus.PartiallyPaid Тогда
		//		
		//		СтруктураРеквизитовПроблемы.Status = Перечисления.InvoiceStatus.PartiallyPaid;
		//		Problem = РегистрыСведений.InvoiceComments.СоздатьInvoiceProblem(СтруктураРеквизитовПроблемы);
		//		
		//		НЗ = РегистрыСведений.InvoiceComments.СоздатьНаборЗаписей();
		//		Запись = НЗ.Добавить();
		//		Запись.Период = ТекущаяДата();
		//		Запись.Invoice = СсылкаНаИнвойс;
		//		Запись.Problem = Problem;
		//		НЗ.Записать(Ложь);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	Если РегистрыСведений.ИсточникиСЗаполнениемОплатИзОбмена.ЭтоИсточникСЗаполнениемОплатИзОбмена(Source, Company) Тогда
		Документы.Invoice.ОбновитьСтатусОплатыДокумента(СсылкаНаИнвойс, СтрШаблон("Loaded from %1", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "Наименование")));
	КонецЕсли;
	
	Если КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелHOB() Тогда
		Если ДанныеИБ <> Неопределено Тогда
			НомерВБазе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Номер");
			ПолученныеДанные.Номер = НомерВБазе;
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Client") И Source = Перечисления.ТипыСоответствий.OracleSmith Тогда
		ПолученныеДанные.Client = ПолученныеДанные.ДополнительныеСвойства.Client;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ссылка, "Номер, Client, DocID, DocNumber, Amount, Agreement, AgreementCode, PassedForApproval, PassedForApprovalDate, PassedForPayment, PassedForPaymentDate, ExpectedDateOfPayment, Дата");
			//Если Source = Перечисления.ТипыСоответствий.OracleSmith Тогда
				//ОбъектИнвойс = ДанныеИБ.Ссылка.ПолучитьОбъект();
				//ОбъектИнвойс.Номер = ПолученныеДанные.Номер;
				//ОбъектИнвойс.DocID = ПолученныеДанные.DocID;
				//Если ЗначениеЗаполнено(ПолученныеДанные.Client) Тогда
				//	ОбъектИнвойс.Client = ПолученныеДанные.Client
				//КонецЕсли;
				//ОбъектИнвойс.ОбменДанными.Загрузка = Истина;				
				//ОбъектИнвойс.Записать();
			//Иначе
		Если Source <> Перечисления.ТипыСоответствий.OracleSmith Тогда
			ПолученныеДанные.Номер = СтруктураРеквизитов.Номер;
			ПолученныеДанные.DocID = СтруктураРеквизитов.DocID;
			ПолученныеДанные.Client = СтруктураРеквизитов.Client;
		КонецЕсли;
			
		ПолученныеДанные.DocNumber = СтруктураРеквизитов.DocNumber;
		ПолученныеДанные.Дата = СтруктураРеквизитов.Дата;
		
		ПолученныеДанные.Amount = СтруктураРеквизитов.Amount;
		ПолученныеДанные.Agreement = СтруктураРеквизитов.Agreement;
		ПолученныеДанные.AgreementCode = СтруктураРеквизитов.AgreementCode;
		ПолученныеДанные.PassedForApproval = СтруктураРеквизитов.PassedForApproval;
		ПолученныеДанные.PassedForApprovalDate = СтруктураРеквизитов.PassedForApprovalDate;
		ПолученныеДанные.PassedForPayment = СтруктураРеквизитов.PassedForPayment;
		ПолученныеДанные.PassedForPaymentDate = СтруктураРеквизитов.PassedForPaymentDate;
		ПолученныеДанные.ExpectedDateOfPayment = СтруктураРеквизитов.ExpectedDateOfPayment;
	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSMITH)
		|	И Invoice.Client = &Client
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.DocNumber = &DocNumber
		|	И Invoice.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("Client", ДанныеИБ.Client);
		Запрос.УстановитьПараметр("DocNumber", ДанныеИБ.DocNumber);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТекОбъект.FiscalInvoiceNo = ПолученныеДанные.FiscalInvoiceNo;
			ТекОбъект.FiscalInvoiceDate = ПолученныеДанные.FiscalInvoiceDate;
			ТекОбъект.FiscalAmount = ПолученныеДанные.FiscalAmount;
			ТекОбъект.TriggerDate = ПолученныеДанные.TriggerDate;
			ТекОбъект.DueDateFrom = ПолученныеДанные.DueDateFrom;
			ТекОбъект.DueDateTo = ПолученныеДанные.DueDateTo;
			ТекОбъект.Contract = ПолученныеДанные.Contract;
			ТекОбъект.ОбменДанными.Загрузка = Истина;
			ТекОбъект.Записать();
			
		КонецЦикла;
		
	Иначе
		
		Если ПолученныеДанные.DocID = -1 Тогда
			ПолученныеДанные.DocID = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_SalesOrder_Получение
Процедура ДобавитьПКО_Документ_SalesOrder_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_SalesOrder_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.SalesOrder;
	ПравилоКонвертации.ОбъектФормата = "Документ.SalesOrder";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_SalesOrder_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_SalesOrder_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Agreement";
	НоваяСтрока.СвойствоФормата = "Contract";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "AgreementCode";
	НоваяСтрока.СвойствоФормата = "AgreementCode";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Amount";
	НоваяСтрока.СвойствоФормата = "Amount";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ApprovalDate";
	НоваяСтрока.СвойствоФормата = "ApprovalDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ApprovedBy";
	НоваяСтрока.СвойствоФормата = "ApprovedBy";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DocID";
	НоваяСтрока.СвойствоФормата = "DocID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ERPStatus";
	НоваяСтрока.СвойствоФормата = "ERPStatus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ExchangeRate";
	НоваяСтрока.СвойствоФормата = "ExchangeRate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "JobEndDate";
	НоваяСтрока.СвойствоФормата = "JobEndDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Responsible";
	НоваяСтрока.СвойствоФормата = "Responsible";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Source";
	НоваяСтрока.СвойствоФормата = "Source";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыСоответствий_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "WellData";
	НоваяСтрока.СвойствоФормата = "WellData";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Billed";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_SalesOrderBilledStatus_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("DocID,Source,Company");
КонецПроцедуры

Процедура ПКО_Документ_SalesOrder_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("BilledStatus", ДанныеXDTO.Billed.Значение);
	
	Если ДанныеXDTO.Свойство("LawsonCompanyCode") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Код = &Код
		|	И Организации.Source = &Source";
		Запрос.Установитьпараметр("Код", ДанныеXDTO.LawsonCompanyCode);
		Запрос.Установитьпараметр("Source", ПолученныеДанные.Source);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();	
			ПолученныеДанные.Company = Выборка.Организация;
		Иначе
			ПолученныеДанные.Company = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_SalesOrder_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда		
			СсылкаНаSalesOrder = Документы.SalesOrder.ПолучитьСсылку();
			ПолученныеДанные.УстановитьСсылкуНового(СсылкаНаSalesOrder);		
		Иначе		
			СсылкаНаSalesOrder = ДанныеИБ.Ссылка;		
		КонецЕсли;
		
		Статус = ПолученныеДанные.ДополнительныеСвойства.BilledStatus;
		Если Статус = "Unbilled" Тогда
			СтатусSalesOrder = Перечисления.SalesOrderBilledStatus.Unbilled;
		ИначеЕсли Статус = "Billed" Тогда
			СтатусSalesOrder = Перечисления.SalesOrderBilledStatus.Billed	
		ИначеЕсли Статус = "Canceled" Тогда
			СтатусSalesOrder = Перечисления.SalesOrderBilledStatus.Canceled	
		КонецЕсли;
		
		НаличиеКомментария = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	SalesOrdersCommentsСрезПоследних.SalesOrder,
		|	SalesOrdersCommentsСрезПоследних.Problem.Billed КАК Billed,
		|	SalesOrdersCommentsСрезПоследних.Problem.Reason КАК Reason,
		|	SalesOrdersCommentsСрезПоследних.Problem.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
		|	SalesOrdersCommentsСрезПоследних.Problem.EscalateTo КАК EscalateTo,
		|	SalesOrdersCommentsСрезПоследних.Problem.Details КАК Details,
		|	SalesOrdersCommentsСрезПоследних.Problem.ActionItem КАК ActionItem,
		|	SalesOrdersCommentsСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.SalesOrdersComments.СрезПоследних(, SalesOrder = &SalesOrder) КАК SalesOrdersCommentsСрезПоследних";
		Запрос.УстановитьПараметр("SalesOrder", СсылкаНаSalesOrder);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			НаличиеКомментария = Истина;
			Если Выборка.Billed = СтатусSalesOrder Тогда
				Возврат;
			Иначе
				ТекReason = Выборка.Reason;
				ТекExpectedDateForInvoice = Выборка.ExpectedDateForInvoice;
				ТекEscalateTo = Выборка.EscalateTo;
				ТекDetails = Выборка.Details;
				ТекActionItem = Выборка.ActionItem;
				ТекПериод = Выборка.Период;
			КонецЕсли;
		КонецЕсли;
		
		Период = ТекущаяДата();
		НачалоМесТекДата = НачалоМесяца(Период);
		
		НЗ = РегистрыСведений.SalesOrdersComments.СоздатьНаборЗаписей();
		
		//СтруктураРеквизитовПроблемы = Новый Структура("Дата, SalesOrder, User, Reason, Billed, ExpectedDateForInvoice, EscalateTo, Details, Responsibles");
		СтруктураРеквизитовПроблемы = Новый Структура("Дата, SalesOrder, User, Reason, Billed, ExpectedDateForInvoice, EscalateTo, Details, ActionItem, Responsibles");
		СтруктураРеквизитовПроблемы.Вставить("Дата", Период);
		СтруктураРеквизитовПроблемы.Вставить("SalesOrder", СсылкаНаSalesOrder);
		СтруктураРеквизитовПроблемы.Вставить("Billed", СтатусSalesOrder);
		СтруктураРеквизитовПроблемы.Вставить("Responsibles", Новый ТаблицаЗначений);	
		
		AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
		Если ЗначениеЗаполнено(AutoUser)Тогда
			СтруктураРеквизитовПроблемы.Вставить("User", AutoUser);	;
		КонецЕсли;
		
		//СтруктураРеквизитовПроблемы.Дата = Период;
		//СтруктураРеквизитовПроблемы.SalesOrder = СсылкаНаSalesOrder;
		Если НаличиеКомментария  И ТекПериод >= НачалоМесТекДата Тогда
			СтруктураРеквизитовПроблемы.Reason = ТекReason;
			СтруктураРеквизитовПроблемы.ExpectedDateForInvoice = ТекExpectedDateForInvoice;
			СтруктураРеквизитовПроблемы.EscalateTo = ТекEscalateTo;
			СтруктураРеквизитовПроблемы.Details = ТекDetails;
			СтруктураРеквизитовПроблемы.ActionItem = ТекActionItem;
			Если ЗначениеЗаполнено(ТекEscalateTo) Тогда
				СтруктураРеквизитовПроблемы.Responsibles.Очистить();
				МассивОтветственных = Документы.SalesOrder.ПолучитьОтветственныхПоSO(СсылкаНаSalesOrder, ТекEscalateTo);
				СтруктураРеквизитовПроблемы.Responsibles.Колонки.Добавить("Responsible", Новый ОписаниеТипов("СправочникСсылка.LDAPUsers"));
				Для каждого ТекОтветственный Из МассивОтветственных Цикл
					НоваяСтрока = СтруктураРеквизитовПроблемы.Responsibles.Добавить();
					НоваяСтрока.Responsible = ТекОтветственный;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Problem = РегистрыСведений.SalesOrdersComments.СоздатьSalesOrderProblem(СтруктураРеквизитовПроблемы);
		
		НЗ.Очистить();
		НЗ.Отбор.SalesOrder.Установить(СсылкаНаSalesOrder);
		
		Запись = НЗ.Добавить();
		Запись.Период = Период;
		Запись.SalesOrder = СсылкаНаSalesOrder;
		Запись.Problem = Problem;
		НЗ.Записать(Ложь);
КонецПроцедуры
#КонецОбласти
#Область Справочник_crmContracts_Получение
Процедура ДобавитьПКО_Справочник_crmContracts_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_crmContracts_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.crmContracts;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СrmContracts";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmBusinessSegment";
	НоваяСтрока.СвойствоФормата = "crmBusinessSegment";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmClientID";
	НоваяСтрока.СвойствоФормата = "crmClientID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmClientName";
	НоваяСтрока.СвойствоФормата = "crmClientName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractCurrency";
	НоваяСтрока.СвойствоФормата = "crmContractCurrency";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractValueUSD";
	НоваяСтрока.СвойствоФормата = "crmContractValueUSD";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmCreatedBy";
	НоваяСтрока.СвойствоФормата = "crmCreatedBy";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmCreatedDate";
	НоваяСтрока.СвойствоФормата = "crmCreatedDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmDFNName";
	НоваяСтрока.СвойствоФормата = "crmDFNName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmEffectiveDate";
	НоваяСтрока.СвойствоФормата = "crmEffectiveDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmExpiryDate";
	НоваяСтрока.СвойствоФормата = "crmExpiryDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmGeoMarket";
	НоваяСтрока.СвойствоФормата = "crmGeoMarket";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_TriggerTypes_Получение
Процедура ДобавитьПКО_Справочник_TriggerTypes_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_TriggerTypes_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.TriggerTypes;
	ПравилоКонвертации.ОбъектФормата = "Справочник.TriggerTypes";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПКО_Справочник_Валюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Amendment";
	НоваяСтрока.СвойствоФормата = "Amendment";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "AmendmentName";
	НоваяСтрока.СвойствоФормата = "AmendmentName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ChecklistRequired";
	НоваяСтрока.СвойствоФормата = "ChecklistRequired";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ContractGUID";
	НоваяСтрока.СвойствоФормата = "ContractGUID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ContractID";
	НоваяСтрока.СвойствоФормата = "ContractID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ContractID";
	НоваяСтрока.СвойствоФормата = "ContractID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractCurrency";
	НоваяСтрока.СвойствоФормата = "crmContractCurrency";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractID";
	НоваяСтрока.СвойствоФормата = "crmContractID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractName";
	НоваяСтрока.СвойствоФормата = "crmContractName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractValueUSD";
	НоваяСтрока.СвойствоФормата = "crmContractValueUSD";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmCreatedBy";
	НоваяСтрока.СвойствоФормата = "crmCreatedBy";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmCreatedDate";
	НоваяСтрока.СвойствоФормата = "crmCreatedDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmDFNName";
	НоваяСтрока.СвойствоФормата = "crmDFNName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmEffectiveDate";
	НоваяСтрока.СвойствоФормата = "crmEffectiveDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmExpiryDate";
	НоваяСтрока.СвойствоФормата = "crmExpiryDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DocumentFlowPeriodFrom";
	НоваяСтрока.СвойствоФормата = "DocumentFlowPeriodFrom";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DocumentFlowPeriodTo";
	НоваяСтрока.СвойствоФормата = "DocumentFlowPeriodTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PIC_ID";
	НоваяСтрока.СвойствоФормата = "PIC_ID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PTDaysFrom";
	НоваяСтрока.СвойствоФормата = "PTDaysFrom";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PTType";
	НоваяСтрока.СвойствоФормата = "PTType";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SourceID";
	НоваяСтрока.СвойствоФормата = "SourceID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Trigger";
	НоваяСтрока.СвойствоФормата = "Trigger";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_TriggerTypes_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыДоговоровКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокОплаты";
	НоваяСтрока.СвойствоФормата = "PTDaysTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УстановленСрокОплаты";
	НоваяСтрока.СвойствоФормата = "УстановленСрокОплаты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчетАгентскогоНДС";
	НоваяСтрока.СвойствоФормата = "УчетАгентскогоНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КодыCRMпоСегментам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КодыCRMпоСегментам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractID";
	НоваяСтрока.СвойствоФормата = "crmContractID";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PIC_ID";
	НоваяСтрока.СвойствоФормата = "PIC_ID";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Segment";
	НоваяСтрока.СвойствоФормата = "Segment";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты_Получение";

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Организация.Свойство("Код") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.Организация.Код) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КодОрганизации", ДанныеXDTO.КлючевыеСвойства.Организация.Код);
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КодОрганизации", "");
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Организация.Свойство("Source") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.Организация.Source) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("SourceОрганизации", ДанныеXDTO.КлючевыеСвойства.Организация.Source.Значение);
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("SourceОрганизации", "");
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелHOB() Тогда
		//ПолученныеДанные.crmContractName = СтруктураРеквизитов.Наименование;
		//ПолученныеДанные.crmContractCurrency = СтруктураРеквизитов.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	
	Если КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелBilling() Тогда
		ЭтоLawson = Ложь;
		Если ПолученныеДанные.ДополнительныеСвойства.SourceОрганизации = "Lawson" Тогда
			ЭтоLawson = Истина;
		КонецЕсли;
		Если ЭтоLawson Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Организации.БазовыйЭлемент КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Source = &SourceLawson
			|	И Организации.Код = &Код";
			Запрос.УстановитьПараметр("SourceLawson", Перечисления.ТипыСоответствий.Lawson);
			Запрос.УстановитьПараметр("Код", ПолученныеДанные.ДополнительныеСвойства.КодОрганизации);
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Организации.БазовыйЭлемент КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Source <> &SourceLawson
			|	И Организации.Source <> &SourceHob
			|	И Организации.Код = &Код";
			Запрос.УстановитьПараметр("SourceLawson", Перечисления.ТипыСоответствий.Lawson);
			Запрос.УстановитьПараметр("SourceHob", Перечисления.ТипыСоответствий.HOBs);
			Запрос.УстановитьПараметр("Код", ПолученныеДанные.ДополнительныеСвойства.КодОрганизации);
			
		КонецЕсли;
		
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		ПолученныеДанные.Организация = Результат.Ссылка
		
	ИначеЕсли КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелHOB() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Организации.БазовыйЭлемент КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Source <> &Source
		|	И Организации.Код = &Код";
		Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.HOBs);
		Запрос.УстановитьПараметр("Код", ПолученныеДанные.ДополнительныеСвойства.КодОрганизации);
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		ПолученныеДанные.Организация = Результат.Ссылка;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CRMID";
	НоваяСтрока.СвойствоФормата = "CRMID";

	ПравилоКонвертации.ПоляПоиска.Добавить("CRMID");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента = rgsОбменДокументамиERMПовтИспСеанс.ПолучитьУзелHOB() Тогда
	
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("ИНН") Тогда
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
				|ИЗ
				|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
				|			,
				|			Идентификатор = &ИНН
				|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
				|				И ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних";
			
			Запрос.УстановитьПараметр("ИНН", ДанныеXDTO.КлючевыеСвойства.ИНН);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				ПолученныеДанные = Выборка.ОбъектПриемника.ПолучитьОбъект();
				
			Иначе
			
				ПолученныеДанные = Справочники.Контрагенты.СоздатьЭлемент();
				
			КонецЕсли;
			
		Иначе
		
			ПолученныеДанные = Справочники.Контрагенты.СоздатьЭлемент();
		
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Source";
	НоваяСтрока.СвойствоФормата = "Source";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыСоответствий_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

	ПравилоКонвертации.ПоляПоиска.Добавить("Source,Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.LDAPUsers;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Mail";
	НоваяСтрока.СвойствоФормата = "eMail";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Mail");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Ссылка", ДанныеXDTO.КлючевыеСвойства.Ссылка)
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда		
			СсылкаLDAP_User = Справочники.LDAPUsers.ПолучитьСсылку();
			//ПолученныеДанные.УстановитьСсылкуНового(ПолученныеДанные.ДополнительныеСвойства.Ссылка);
			ПолученныеДанные.УстановитьСсылкуНового(СсылкаLDAP_User);
			ПолученныеДанные.Родитель = Справочники.LDAPUsers.НайтиПоНаименованию("HOB Users");	
		Иначе
			Если ДанныеИБ.Родитель <> Справочники.LDAPUsers.НайтиПоНаименованию("HOB Users") Тогда  		
				СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ссылка, "Наименование, Родитель, Mail");
				ПолученныеДанные.Наименование = СтруктураРеквизитов.Наименование;
				ПолученныеДанные.Родитель = СтруктураРеквизитов.Родитель;
				ПолученныеДанные.Mail = СтруктураРеквизитов.Mail;
			Иначе
				ПолученныеДанные.Родитель = Справочники.LDAPUsers.НайтиПоНаименованию("HOB Users");
			КонецЕсли;		
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Сегменты_Получение
Процедура ДобавитьПКО_Справочник_Сегменты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Сегменты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Сегменты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Сегменты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Source";
	НоваяСтрока.СвойствоФормата = "Source";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыСоответствий_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

	ПравилоКонвертации.ПоляПоиска.Добавить("Source,Код");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Получение" Тогда
		// Перечисление_SalesOrderBilledStatus_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_SalesOrderBilledStatus_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.SalesOrderBilledStatus;
		ПравилоКонвертации.ТипXDTO = "SalesOrderBilledStatus";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Billed", Перечисления.SalesOrderBilledStatus.Billed);
		ЗначенияДляПолучения.Вставить("Canceled", Перечисления.SalesOrderBilledStatus.Canceled);
		ЗначенияДляПолучения.Вставить("Unbilled", Перечисления.SalesOrderBilledStatus.Unbilled);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ВидыДоговоровКонтрагентов_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыДоговоровКонтрагентов_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
		ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
		ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ТипыСоответствий_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыСоответствий_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСоответствий;
		ПравилоКонвертации.ТипXDTO = "Source";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("HOBs", Перечисления.ТипыСоответствий.HOBs);
		ЗначенияДляПолучения.Вставить("Lawson", Перечисления.ТипыСоответствий.Lawson);
		ЗначенияДляПолучения.Вставить("OracleMI", Перечисления.ТипыСоответствий.OracleMI);
		ЗначенияДляПолучения.Вставить("OracleSmith", Перечисления.ТипыСоответствий.OracleSmith);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ЮридическоеФизическоеЛицо_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ЮридическоеФизическоеЛицо_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы



#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПКО_Документ_Invoice_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_Invoice_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Invoice_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_Invoice_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_SalesOrder_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_SalesOrder_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_SalesOrder_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_SalesOrder_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

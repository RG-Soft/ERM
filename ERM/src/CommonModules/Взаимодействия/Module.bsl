
// Получает вложения письма с непустым ИД.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с информацией о вложениях электронного письма с непустым ИД.
//
Функция ПолучитьВложенияПисьмаСНеПустымИД(Письмо) Экспорт
	
	ИмяОбъектаМетаданных = "EmailsПрисоединенныеФайлы";
	ВладелецФайлов       = Письмо;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлыПисьма.Ссылка,
	|	ПрисоединенныеФайлыПисьма.Наименование,
	|	ПрисоединенныеФайлыПисьма.Размер,
	|	ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК ПрисоединенныеФайлыПисьма
	|ГДЕ
	|	ПрисоединенныеФайлыПисьма.ВладелецФайла = &ВладелецФайлов
	|	И (НЕ ПрисоединенныеФайлыПисьма.ПометкаУдаления)
	|	И ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма <> &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("ВладелецФайлов",ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

// Обрабатывает текст HTML для помещения в форматированный документ.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//  ТекстHTML - Строка - обрабатываемый текст HTML.
//  СтруктураВложений - Структура - структура в которую помещаются картинки - вложения письма.
//
// Возвращаемое значение:
//   Число   - оценка размера письма в байтах.
//
Функция ОбработатьТекстHTMLДляФорматированногоДокумента(Письмо,ТекстHTML,СтруктураВложений) Экспорт
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		ДокументHTML = ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		
		ТаблицаФайлов = ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			Для каждого ПрисоединенныйФайл Из ТаблицаФайлов Цикл
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
						СтруктураВложений.Вставить(
							ПрисоединенныйФайл.Наименование,
							Новый Картинка(ПолучитьИзВременногоХранилища(
								ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////
//        Работа с объектом Документ HTML.

// Заменяет имена картинок в документ HTML на идентификаторы почтовых вложений.
// Параметры:
//  ДокументHTML - ДокументHTML - документ HTML в котором будет выполняться замена.
//  ТаблицаСоответствий - ТаблицаЗначений - таблица соответствий имен файлов и идентификаторов.
//
Процедура ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML,ТаблицаСоответствий) Экспорт
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		НайденнаяСтрока = ТаблицаСоответствий.Найти(АтрибутИсточникКартинки.ТекстовоеСодержимое,"ИмяФайла");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:"+НайденнаяСтрока.ИдентификаторФайлаДляHTML);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает объект ДокументHTML из текста HTML.
//
// Параметры:
//  ТекстHTML  - Строка - 
//
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML.
Функция ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML,Кодировка = Неопределено) Экспорт
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	НовыйТекстHTML = ТекстHTML;
	ПозицияОткрытиеXML = СтрНайти(НовыйТекстHTML,"<?xml");
	
	Если ПозицияОткрытиеXML > 0 Тогда
		
		ПозицияЗакрытиеXML = СтрНайти(НовыйТекстHTML,"?>");
		Если ПозицияЗакрытиеXML > 0 Тогда
			
			НовыйТекстHTML = ЛЕВ(НовыйТекстHTML,ПозицияОткрытиеXML - 1) + ПРАВ(НовыйТекстHTML,СтрДлина(НовыйТекстHTML) - ПозицияЗакрытиеXML -1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
	КонецЕсли;
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

// Получает текст HTML из объекта ДокументHTML.
//
// Параметры:
//  ДокументHTML  - ДокументHTML - документ, из которого будет извлекаться текст.
//
// Возвращаемое значение:
//   Строка   - текст HTML
//
Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML) Экспорт
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

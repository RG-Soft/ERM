
#Область Регламенты

Процедура РегламентDisputeNotifications() Экспорт
	
	ВыборкаДанныхДляНотификации = ПолучитьДанныеДляDisputeNotifications();
	
	Пока ВыборкаДанныхДляНотификации.Следующий() Цикл
		НачатьТранзакцию();
		СтароеПисьмо = ВыборкаДанныхДляНотификации.Email.ПолучитьОбъект();
		НовоеПисьмо = Документы.EMails.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовоеПисьмо, СтароеПисьмо, , "Дата, Номер, ИдентификаторСообщения, ИдентификаторОснования, ИдентификаторыОснований");
		НовоеПисьмо.ИдентификаторОснования = СтароеПисьмо.ИдентификаторСообщения;
		НовоеПисьмо.Дата = ТекущаяДата();
		НовоеПисьмо.Recipients.Загрузить(СтароеПисьмо.Recipients.Выгрузить());
		НовоеПисьмо.Copies.Загрузить(СтароеПисьмо.Copies.Выгрузить());
		НовоеПисьмо.Записать();
		ВыборкаДетальныеЗаписи = ВыборкаДанныхДляНотификации.Выбрать();
		МассивИнвойсов = Новый Массив;
		СозданныеКомментарии = Новый Массив();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивИнвойсов.Добавить(ВыборкаДетальныеЗаписи.Invoice);
			НовыйКомментарий = ДобавитьКомментарийОбЭскалации(ВыборкаДетальныеЗаписи.Проблема, НовоеПисьмо.Дата);
			СозданныеКомментарии.Добавить(НовыйКомментарий);
			УдалитьЗаписьИзОчередиDisputeNotifications(ВыборкаДетальныеЗаписи.Проблема);
		КонецЦикла;
		РегистрыСведений.EmailsObjects.ЗарегистрироватьПредметыПисьма(НовоеПисьмо.Ссылка, СозданныеКомментарии, Перечисления.ВариантОтправленияСообщения.Escalation);
		РегистрыСведений.EmailsObjects.ЗарегистрироватьПредметыПисьма(НовоеПисьмо.Ссылка, МассивИнвойсов, Перечисления.ВариантОтправленияСообщения.Escalation);
		СтруктураПараметров = Новый Структура;
		Обработки.CollectorDesktop.СформироватьВложениеПоЭкалированнымИнвойсам(СтруктураПараметров, МассивИнвойсов);
		ВложенияСтарогоПисьма = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(СтароеПисьмо.Ссылка);
		Для каждого СтрокаВложения Из ВложенияСтарогоПисьма Цикл
			Если СтрокаВложения.ИмяФайла = "Invoices.xls" Тогда
				НоваяСсылкаНаФайл = Справочники.EmailsПрисоединенныеФайлы.ПолучитьСсылку();
				НовыйФайл = Справочники.EmailsПрисоединенныеФайлы.СоздатьЭлемент();
				НовыйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
				ЗаполнитьЗначенияСвойств(НовыйФайл, СтрокаВложения.Ссылка, , "Родитель, Владелец");
				НовыйФайл.ВладелецФайла = НовоеПисьмо.Ссылка;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураПараметров.ПриложенныеФайлы[0].ДанныеФайла);
				РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
				//НовыйФайл.ФайлХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтруктураПараметров.ПриложенныеФайлы[0].ДанныеФайла), Новый СжатиеДанных(9));
				НовыйФайл.Записать();
			Иначе
				УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(НовоеПисьмо.Ссылка, СтрокаВложения.Ссылка, Новый УникальныйИдентификатор());
			КонецЕсли;
		КонецЦикла;
		НовоеПисьмо.Записать(РежимЗаписиДокумента.Проведение);
		//НовоеПисьмо.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьДанныеДляDisputeNotifications()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	EmailsObjects.Email КАК Email,
		|	ОчередьУведомлений.Проблема,
		|	ОчередьУведомлений.Проблема.Invoice КАК Invoice
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.EmailsObjects КАК EmailsObjects
		|		ПО ОчередьУведомлений.Проблема = EmailsObjects.Предмет
		|		И EmailsObjects.MailType = ЗНАЧЕНИЕ(Перечисление.ВариантОтправленияСообщения.Escalation)
		|ГДЕ
		|	ОчередьУведомлений.ВидУведомления = ЗНАЧЕНИЕ(Справочник.ВидыУведомлений.Dispute)
		|	И ОчередьУведомлений.ДатаУведомления <= &ДатаУведомления
		|ИТОГИ
		|ПО
		|	Email";
	
	Запрос.УстановитьПараметр("ДатаУведомления", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗафиксироватьТранзакцию();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Функция ДобавитьКомментарийОбЭскалации(СтарыйКомментарий, ДатаНовогоКомментария)
	
	СтарыйКомментарийОбъект = СтарыйКомментарий.ПолучитьОбъект();
	НовыйКомментарий = Документы.InvoiceProblem.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйКомментарий, СтарыйКомментарийОбъект, , "Дата, Номер");
	НовыйКомментарий.Дата = ДатаНовогоКомментария;
	НовыйКомментарий.SLBAssignedTo.Загрузить(СтарыйКомментарийОбъект.SLBAssignedTo.Выгрузить());
	МассивПолучателей = Новый Массив;
	Для каждого СтрокаПолучателя ИЗ НовыйКомментарий.SLBAssignedTo Цикл
		МассивПолучателей.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПолучателя.AssignedTo, "Наименование"));
	КонецЦикла;
	ПолучателиСтрокой = СтрСоединить(МассивПолучателей, ", ");
	НовыйКомментарий.CustomerInputDetails = Формат(НовыйКомментарий.Дата, "ДФ=M.d.yyyy") + " - " + ПолучателиСтрокой;
	НовыйКомментарий.RWDTargetDate = КалендарныеГрафики.ПолучитьДатуПоКалендарю(КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации(), НовыйКомментарий.Дата, 2);
	НовыйКомментарий.Записать();
	
	НЗ = РегистрыСведений.InvoiceComments.СоздатьНаборЗаписей();
	ЗаписьНабора = НЗ.Добавить();
	ЗаписьНабора.Период = НовыйКомментарий.Дата;
	ЗаписьНабора.Invoice = НовыйКомментарий.Invoice;
	ЗаписьНабора.Problem = НовыйКомментарий.Ссылка;
	НЗ.Записать(Ложь);
	
	Возврат НовыйКомментарий.Ссылка;
	
КонецФункции

Процедура УдалитьЗаписьИзОчередиDisputeNotifications(Проблема)

	НЗ = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
	НЗ.Отбор.Проблема.Установить(Проблема);
	НЗ.Отбор.ВидУведомления.Установить(Справочники.ВидыУведомлений.Dispute);
	НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура РегламентПолученияПисемПоDisputeNotification() Экспорт
	
	ПолученныеСообщения = Обработки.PullDisputeNotificationEmails.ПолучитьПисьма();
	ДанныеУчетнойЗаписи = rgsУправлениеЭлектроннойПочтой.ПолучитьДанныеУчетнойЗаписи(rgsНастройкаКонфигурации.ЗначениеНастройки("УчетнаяЗаписьЭП_DisputeNotifications"));
	Обработки.PullDisputeNotificationEmails.ОбработатьПисьма(ПолученныеСообщения, ДанныеУчетнойЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает имя события журнала регистрации подсистемы Получение электронной почты.
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Получение электронной почты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ПолучитьДанныеУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                                        КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                                         КАК АдресЭлектроннойПочты,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование                                                  КАК Наименование,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ) КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ИНАЧЕ УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи
	|	КОНЕЦ                                                                                       КАК ОтветственныйЗаОбработкуПисем,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере                              КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере                              КАК ОставлятьДней,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя                                               КАК ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты                                         КАК ПротоколВходящейПочты,
	|	ЕСТЬNULL(ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем, ДАТАВРЕМЯ(1, 1, 1))      КАК ДатаЗагрузкиПисем,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты = ""IMAP""
	|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОбработкаПисемВыполняетсяВДругомПочтовомКлиенте, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                                        КАК ОбработкаПисемВедетсяВДругомПочтовомКлиенте
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
	|		ПО (ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты <> """"
	|	И УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты <> """"
	|	И УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка;
	
КонецФункции

Функция ПолучитьПочтуПоПроколуIMAP(ДанныеУчетнойЗаписи, Почта, ФильтрПоЗаголовкам) Экспорт
	
	МассивИменАктивныхПапок = МассивИменАктивныхПапок(Почта);
	
	КвалификаторСтроки200 =  Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная));
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки200);
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПисьма", КвалификаторСтроки200);
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторОснования", КвалификаторСтроки200);
	ТаблицаИдентификаторов.Колонки.Добавить("Тема");
	
	ДатаЗагрузкиПисем = ТекущаяДатаСеанса();
	
	ПолученныеСообщения = Новый Массив();
	
	Для каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
			
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПараметрыОтбора = Новый Структура;
		
		Если Не ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем = Дата(1,1,1) Тогда 
			ПараметрыОтбора.Вставить("ПослеДатыОтправления", ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем);
		Иначе
			ПараметрыОтбора.Вставить("Удаленные", Ложь);
		КонецЕсли;
		
		Попытка
			ЗаголовкиПисемДляЗагрузки = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТаблицаИдентификаторов.Очистить();
		Для Каждого ЗаголовокПисьма Из ЗаголовкиПисемДляЗагрузки Цикл
			
			Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) ИЛИ НЕ ЗаголовкиСообщенияУдовлетворяютФильтру(ЗаголовокПисьма.Заголовок, ФильтрПоЗаголовкам) Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторОснования = ПолучитьЗначениеПоляИзЗаголовкаПисьма(ЗаголовокПисьма.Заголовок, "In-Reply-To");
			
			Если Не ЗначениеЗаполнено(ИдентификаторОснования) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаТаблицыИдентификаторов = ТаблицаИдентификаторов.Добавить();
			НоваяСтрокаТаблицыИдентификаторов.ИдентификаторНаСервере = ?(ЗаголовокПисьма.Идентификатор.Количество() = 0, "", ЗаголовокПисьма.Идентификатор[0]);
			НоваяСтрокаТаблицыИдентификаторов.ИдентификаторПисьма    = ЗаголовокПисьма.ИдентификаторСообщения;
			НоваяСтрокаТаблицыИдентификаторов.ИдентификаторОснования    = ПолучитьИдентификаторОснованияИзСтроки(ИдентификаторОснования);
			НоваяСтрокаТаблицыИдентификаторов.Тема = ЗаголовокПисьма.Тема;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма,
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере,
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторОснования
		|ПОМЕСТИТЬ ИдентификаторыПисемКЗагрузке
		|ИЗ
		|	&ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма,
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
		|ИЗ
		|	ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.EMails КАК ЭлектронноеПисьмоВходящее
		|		ПО ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.EMails КАК ЭлектронноеПисьмоИсходящее
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.EmailsObjects КАК EmailsObjects
		|			ПО EmailsObjects.Предмет ССЫЛКА Документ.InvoiceProblem
		|			И EmailsObjects.Email = ЭлектронноеПисьмоИсходящее.Ссылка
		|			И EmailsObjects.MailType = ЗНАЧЕНИЕ(Перечисление.ВариантОтправленияСообщения.Escalation)
		|		ПО ИдентификаторыПисемКЗагрузке.ИдентификаторОснования = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
		|ГДЕ
		|	ЭлектронноеПисьмоВходящее.Ссылка ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ИдентификаторыПисемКЗагрузке", ТаблицаИдентификаторов);
		
		ИдЗагружать = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторНаСервере");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолученныеСообщения, ПолучитьПисьмаПоМассивуИдентификаторов(Почта, ДанныеУчетнойЗаписи, ИдЗагружать)); 
		
	КонецЦикла;

	Возврат ПолученныеСообщения;

КонецФункции

Процедура ПолучитьПочтуПоПроколуPOP3(ДанныеУчетнойЗаписи, Почта, Получено, СтруктураМассивовСозданныхПисем) Экспорт

	// Получим идентификаторы сообщений на сервере.
	Идентификаторы = Почта.ПолучитьИдентификаторы();
	Если Идентификаторы.Количество() = 0 И (Не ДанныеУчетнойЗаписи.ОставлятьКопии) Тогда
		// Если на сервере сообщений нет, то удалим все записи по учетной записи в регистре сведений
		// ИдентификаторыПолученныхЭлектронныхПисем.
		УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
		Возврат;
	КонецЕсли;

	// -----------------------------------------------------------------
	// Определим какие сообщения нужно получать.
	ИдЗагружать = ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, ДанныеУчетнойЗаписи.Ссылка);
	
	ПолученоПоДаннойУчетнойЗаписи = 0;
//	ПолучитьПисьмаПоМассивуИдентификаторов(Почта,
//	                                       ДанныеУчетнойЗаписи,
//	                                       ИдЗагружать, 
//	                                       ПолученоПоДаннойУчетнойЗаписи, 
//	                                       СтруктураМассивовСозданныхПисем, 
//	                                       Идентификаторы);
	
	Получено = Получено + ПолученоПоДаннойУчетнойЗаписи;
	
	// -----------------------------------------------------------------
	// Удалим ненужные сообщения на сервере.
	Если Не ДанныеУчетнойЗаписи.ОставлятьКопии Тогда
		// удалять все
		МассивКУдалению = Идентификаторы;
		УдалятьВсе = Истина;
	Иначе
		УдалятьВсе = Ложь;
		Если ДанныеУчетнойЗаписи.ОставлятьДней > 0 Тогда
			МассивКУдалению = ПолучитьИдентификаторыПисемДляУдаленияНаСервере(
			Идентификаторы, 
			ДанныеУчетнойЗаписи.Ссылка, 
			ТекущаяДатаСеанса() - ДанныеУчетнойЗаписи.ОставлятьДней * 24 * 60 * 60);
		Иначе
			МассивКУдалению = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивКУдалению.Количество() <> 0 Тогда
		Почта.УдалитьСообщения(МассивКУдалению);
	КонецЕсли;
	
	// -----------------------------------------------------------------
	// Удалим ненужные идентификаторы в регистре сведений.
	Если УдалятьВсе Тогда
		УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
	Иначе
		УдалитьИдентификаторыРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка, Идентификаторы, МассивКУдалению);
	КонецЕсли;

КонецПроцедуры

Функция МассивИменАктивныхПапок(Почта)

	МассивИменАктивныхПапок = Новый Массив;
	 
	ИменаАктивныхПапок     = Почта.ПолучитьПочтовыеЯщикиПоПодписке();
	Если ИменаАктивныхПапок.Количество() = 0 Тогда
		ИменаАктивныхПапок = Почта.ПолучитьПочтовыеЯщики();
	КонецЕсли;
	
	Разделитель = ""; 
	Попытка
		Разделитель = Почта.СимволРазделитель;
	Исключение
		// Некоторые почтовые сервера не поддерживают эту команду.
	КонецПопытки;
	
	МассивИгнорируемыхИмен  = МассивИменПапокДляКоторыхНеВыполняетсяЗагрузкаПисем();
	
	Для Каждого ИмяАктивнойПапки Из ИменаАктивныхПапок Цикл
		
		Если Не ПустаяСтрока(Разделитель) Тогда
			
			МассивСтрокИмениПапки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИмяАктивнойПапки,Разделитель);
			Если МассивСтрокИмениПапки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяПапкиБезРазделителя = МассивСтрокИмениПапки[МассивСтрокИмениПапки.Количество()-1];
			Если ПустаяСтрока(ИмяПапкиБезРазделителя) Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(ИмяПапкиБезРазделителя,1) = "[" И Прав(ИмяПапкиБезРазделителя,1) = "]" Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивИгнорируемыхИмен.Найти(НРег(ИмяПапкиБезРазделителя)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Лев(ИмяАктивнойПапки,1) = "[" И Прав(ИмяАктивнойПапки,1) = "]" Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивИгнорируемыхИмен.Найти(НРег(ИмяАктивнойПапки)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивИменАктивныхПапок.Добавить(ИмяАктивнойПапки);
		
	КонецЦикла;

	Возврат МассивИменАктивныхПапок;
	
КонецФункции

Функция МассивИменПапокДляКоторыхНеВыполняетсяЗагрузкаПисем()

	МассивИмен = Новый Массив;
	МассивИмен.Добавить("спам");
	МассивИмен.Добавить("удаленные");
	МассивИмен.Добавить("черновики");
	МассивИмен.Добавить("корзина");
	МассивИмен.Добавить("spam");
	МассивИмен.Добавить("trash");
	МассивИмен.Добавить("drafts");
	МассивИмен.Добавить("draftBox");
	МассивИмен.Добавить("deleted");
	МассивИмен.Добавить("junk");
	МассивИмен.Добавить("bulk mail");
	Возврат МассивИмен;

КонецФункции

Процедура УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, УчетнаяЗапись)

	// Получим список сообщений которые не были раньше получены.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись",          УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись ЕСТЬ NULL ";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция СоздатьТаблицуСИдентификаторами(Идентификаторы)
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(100)));
	Для Каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Возврат ТаблицаИдентификаторов;
	
КонецФункции

Функция ПолучитьИдентификаторыПисемДляУдаленияНаСервере(Идентификаторы, УчетнаяЗапись, ДатаПоКоторуюУдалять)

	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаПоКоторуюУдалять);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.ДатаПолучения <= &ДатаПолучения";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Процедура УдалитьИдентификаторыРанееПолученныхПисем(УчетнаяЗапись, ИдентификаторыНаСервере, ИдентификаторыУдалять)
	
	// Получим список идентификаторов которые не нужно удалять.
	ИдентификаторыКУдалению = Новый Соответствие;
	Для Каждого Элемент Из ИдентификаторыУдалять Цикл
		ИдентификаторыКУдалению.Вставить(Элемент, Истина);
	КонецЦикла;
	
	ИдентификаторыОставляем = Новый Массив;
	Для Каждого Элемент Из ИдентификаторыНаСервере Цикл
		Если ИдентификаторыКУдалению.Получить(Элемент) = Неопределено Тогда
			ИдентификаторыОставляем.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	// Получим идентификаторы которые нужно удалить, те которые есть в регистре, но не нужно оставлять.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(ИдентификаторыОставляем);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ГДЕ
	|	ТаблицаИдентификаторов.Идентификатор ЕСТЬ NULL
	|	 И ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";

	МассивКУдалению = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	// Удалим все ненужные идентификаторы.
	Для Каждого Идентификатор Из МассивКУдалению Цикл
		Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		Набор.Отбор.Идентификатор.Установить(Идентификатор);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение поля из заголовка письма
Функция ПолучитьЗначениеПоляИзЗаголовкаПисьма(Знач ЗаголовокПисьма, Знач Поле) Экспорт
	
	СимволыПереводаСтроки = rgsУправлениеЭлектроннойПочтойСерверПовтИсп.ПолучитьСоответствиеСимволовПереводаСтроки();

	КоличествоСтрок = СтрЧислоСтрок(ЗаголовокПисьма);
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = СтрПолучитьСтроку(ЗаголовокПисьма, Индекс);
		Если СтрНайти(НРег(Строка), НРег(Поле) + ": ") = 1 Тогда
			Результат = Сред(Строка, СтрДлина(Поле) + 3);
			Для ВнутреннийИндекс = Индекс + 1 По КоличествоСтрок Цикл
				Строка = СтрПолучитьСтроку(ЗаголовокПисьма, ВнутреннийИндекс);
				СимволПеревода = СимволыПереводаСтроки.Получить(Лев(Строка, 1));
		
				Если СимволПеревода = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				Результат = Результат + " " + Сред(Строка, 2);
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ЗаголовкиСообщенияУдовлетворяютФильтру(Заголовки, ФильтрПоЗаголовкам)
	
	Для Каждого КлючЗначение Из ФильтрПоЗаголовкам Цикл
		
		ЗначениеЗаголовка = ПолучитьЗначениеПоляИзЗаголовкаПисьма(Заголовки, КлючЗначение.Ключ);
		Если Не ЗначениеЗаполнено(ЗначениеЗаголовка) Или ЗначениеЗаполнено(КлючЗначение.Значение) И ЗначениеЗаголовка <> КлючЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПисьмаПоМассивуИдентификаторов(Почта,
	                                            ДанныеУчетнойЗаписи,
	                                            ИдЗагружать, 
	                                            ВсеИдентификаторы = Неопределено)
	
	Получено = 0;
	ПолныйМассивСообщений = Новый Массив;
	
	Если ИдЗагружать.Количество() <> 0 Тогда
		
		КоличествоНеАктуальныхСообщений = 0;
		
		Пока ИдЗагружать.Количество() > (Получено + КоличествоНеАктуальныхСообщений) Цикл
			
			КоличествоВПорции = 0;
			МассивИдентификаторовПорцииДляЗагрузки = Новый Массив;
			
			Для Инд = Получено По ИдЗагружать.Количество() - 1 Цикл
				
				МассивИдентификаторовПорцииДляЗагрузки.Добавить(ИдЗагружать.Получить(Инд));
				КоличествоВПорции = КоличествоВПорции + 1;
				
				Если КоличествоВПорции = 10 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Получим нужные сообщения
			Сообщения = Почта.Выбрать(Ложь, 
			                          МассивИдентификаторовПорцииДляЗагрузки,
			                          ?(ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP",Ложь, Истина));
			                          
			Получено = Получено + Сообщения.Количество();
			КоличествоНеАктуальныхСообщений = КоличествоНеАктуальныхСообщений + (КоличествоВПорции - Сообщения.Количество());
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолныйМассивСообщений, Сообщения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПолныйМассивСообщений;
	
КонецФункции

Функция ИзПисьмаПолучитьИдентификаторОснования(Сообщение)

	СтрокаИдентификаторы = СокрЛП(Сообщение.ПолучитьПолеЗаголовка("In-Reply-To", "Строка"));
	
	Возврат ПолучитьИдентификаторОснованияИзСтроки(СтрокаИдентификаторы);

КонецФункции

Функция ПолучитьИдентификаторОснованияИзСтроки(СтрокаИдентификаторы)
	
	Позиция = СтрНайти(СтрокаИдентификаторы, "<");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
	КонецЕсли;
	
	Позиция = СтрНайти(СтрокаИдентификаторы, ">");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Лев(СтрокаИдентификаторы, Позиция-1);
	КонецЕсли;
	
	Возврат СтрокаИдентификаторы;
	
КонецФункции

Функция ЗаписатьЭлектронноеПисьмо(ДанныеУчетнойЗаписи, Сообщение, Исходящее = Истина) Экспорт 
	
	// Создадим документ и заполним его реквизиты на основе сообщения.
	Письмо = Документы.EMails.СоздатьДокумент();
	
	ЗаполнитьДокументЭлектронноеПисьмо(Письмо, Сообщение);
	
	Если Исходящее Тогда
		Письмо.ТипПисьма = Перечисления.EmailType.Incoming;
	Иначе
		Письмо.ТипПисьма = Перечисления.EmailType.Outgoing;
	КонецЕсли;
	
	// Запишем письмо
	Письмо.Записать();
	
	МассивИменВложений              = Новый Массив;
	МассивДублирующихсяИменВложений = Новый Массив;
	
	// Запишем вложения
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Если МассивИменВложений.Найти(Вложение.ИмяФайла) = Неопределено Тогда 
			МассивИменВложений.Добавить(Вложение.ИмяФайла);
		ИначеЕсли МассивДублирующихсяИменВложений.Найти(Вложение.ИмяФайла) = Неопределено Тогда
			МассивДублирующихсяИменВложений.Добавить(Вложение.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДублирующеесяВложение Из МассивДублирующихсяИменВложений Цикл
		ИндексВМассиве = МассивИменВложений.Найти(ДублирующеесяВложение);
		Если ИндексВМассиве <> Неопределено Тогда
			МассивИменВложений.Удалить(ИндексВМассиве);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебныйКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйКлиентСервер");
		
		СоответствиеВложенийИПодписей =
			МодульЭлектроннаяПодписьСлужебныйКлиентСервер.ИменаФайловПодписейИменФайловДанных(
				МассивИменВложений);
	Иначе
		СоответствиеВложенийИПодписей = Новый Соответствие;
		Для Каждого ИмяФайлаВложения Из МассивИменВложений Цикл
			СоответствиеВложенийИПодписей.Вставить(ИмяФайлаВложения, Новый Массив);
		КонецЦикла;
	КонецЕсли;
	
	КоличествоПустыхИменВоВложениях = 0;
	Для каждого ЭлементСоответствия Из СоответствиеВложенийИПодписей Цикл
		
		НайденноеВложение = Неопределено;
		МассивПодписей    = Новый Массив;
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			Если Вложение.ИмяФайла = ЭлементСоответствия.Ключ Тогда
				НайденноеВложение = Вложение;
				Прервать;
			КонецЕсли
		КонецЦикла;
		
		Если НайденноеВложение <> Неопределено И ЭлементСоответствия.Значение.Количество() > 0 Тогда
			Для каждого Вложение Из Сообщение.Вложения Цикл
				Если ЭлементСоответствия.Значение.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
					МассивПодписей.Добавить(Вложение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденноеВложение <> Неопределено Тогда
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьма(
				Письмо,НайденноеВложение,
				МассивПодписей,
				КоличествоПустыхИменВоВложениях);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДублирующихсяИменВложений.Количество() > 0 Тогда
		Для каждого Вложение Из Сообщение.Вложения Цикл
			Если МассивДублирующихсяИменВложений.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
				УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьма(
					Письмо,Вложение,
					Новый Массив,
					КоличествоПустыхИменВоВложениях);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Запишем идентификатор
	Если Не ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		
		УправлениеЭлектроннойПочтой.ЗаписатьИдентификаторПолученногоПисьма(ДанныеУчетнойЗаписи.Ссылка,
			Письмо.ИдентификаторНаСервере,
			Сообщение.ДатаПолучения);
		
	КонецЕсли;
	
	Возврат Письмо.Ссылка;
	
КонецФункции

Процедура ЗаполнитьДокументЭлектронноеПисьмо(Письмо, Сообщение)
	
	ОтправительАдрес = АдресОтправителяИнтернетПочтовогоСообщения(Сообщение.Отправитель);
	
	Письмо.ДатаПолучения    = Сообщение.ДатаПолучения;
	Письмо.Sender = Справочники.LDAPUsers.НайтиПоEmail(ОтправительАдрес); 
	
	Письмо.Важность = ПолучитьВажностьЭлектронногоПисьма(Сообщение.Важность);
	Письмо.Дата = ?(Сообщение.ДатаОтправления = Дата(1,1,1), ТекущаяДатаСеанса(), Сообщение.ДатаОтправления);
	Письмо.ИдентификаторНаСервере = ?(Сообщение.Идентификатор.Количество() = 0, "", Сообщение.Идентификатор[0]);
	Письмо.ИдентификаторСообщения = Сообщение.ИдентификаторСообщения;
	Письмо.Кодировка = Сообщение.Кодировка;
	
	Письмо.Subject = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Тема);
	
	УправлениеЭлектроннойПочтой.УстановитьТекстПисьма(Письмо, Сообщение);
	
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.Copies ,  Сообщение.Копии);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.Recipients, Сообщение.Получатели);
	
	Письмо.ИдентификаторОснования    = ИзПисьмаПолучитьИдентификаторОснования(Сообщение);
	Письмо.ИдентификаторыОснований   = Сообщение.ПолучитьПолеЗаголовка("References", "Строка");
	
КонецПроцедуры

Функция АдресОтправителяИнтернетПочтовогоСообщения(Отправитель)
	
	Если ТипЗнч(Отправитель) = Тип("ИнтернетПочтовыйАдрес") Тогда
		ОтправительАдрес = Отправитель.Адрес;
	Иначе
		ОтправительАдрес = Отправитель;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ОтправительАдрес, "");
	
КонецФункции

Функция ПолучитьВажностьЭлектронногоПисьма(Важность)
	
	Если (Важность = ВажностьИнтернетПочтовогоСообщения.Высокая)
		ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Наивысшая) Тогда
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Высокая;

	ИначеЕсли (Важность = ВажностьИнтернетПочтовогоСообщения.Наименьшая)
		ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Низкая) Тогда
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Низкая;

	Иначе
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		
	КонецЕсли;
	
КонецФункции

// Заполняет ИнтернетПочтовыеАдреса в объекте ИнтернетПочтовоеСообщение по переданной таблице адресов.
//
// Параметры:
//  ТабличнаяЧасть  - ИнтернетПочтовыеАдреса - адреса, которые будут заполнены в письме.
//  Адреса          - ТаблицаЗначений - таблица, содержащая адреса для указания в письме.
//
Процедура ЗаполнитьИнтернетПочтовыеАдреса(ТабличнаяЧасть, Адреса) Экспорт
	
	Для Каждого Адрес Из Адреса Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Recipient = Справочники.LDAPUsers.НайтиПоEmail(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Адрес.Адрес, ""));
	КонецЦикла;
	
КонецПроцедуры

// Получает имя объекта метаданных присоединенных файлов электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка - письмо для которого определяется имя.
//
// Возвращаемое значение:
//  Строка,Неопределено  - имя объекта метаданных присоединенных файлов электронного письма.
Функция ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо) Экспорт

	 Если ТипЗнч(Письмо) = Тип("ДокументСсылка.Emails") Тогда
		
		Возврат "EmailsПрисоединенныеФайлы";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

#КонецОбласти

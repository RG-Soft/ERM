#Область ПрограммныйИнтерфейс

// Возвращает таблицу свойств предопределенных блоков
//
// Возвращаемое значени:
//   ТаблицаЗначений - описание полей см. в методе НоваяТаблицаБлоков()
//
Функция ПредопределенныеБлоки() Экспорт
	
	ТаблицаБлоков = НоваяТаблицаБлоков();
	
	// Монитор основных показателей
	Если RWDDeadlineДоступны() Тогда
		ДобавитьRWDDeadline(ТаблицаБлоков);
	КонецЕсли;
	
	Если BrokenPromisesДоступны() Тогда
		ДобавитьBrokenPromises(ТаблицаБлоков);
	КонецЕсли;
	
	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти

#Область ДанныеИнформационнойПанели

#Область RWDDeadline

Процедура ДобавитьRWDDeadline(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаRWDDeadline(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаRWDDeadline(),
		"БлокиИнформационнойПанели.RWDDeadline",
		"БлокиИнформационнойПанели.ОбновитьRWDDeadline",
		СвойстваRWDDeadline());
	
КонецПроцедуры

Функция СвойстваRWDDeadline()
	
	// ВГраница = Количеству, т.к. последняя строка используется для итоговой записи
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.RWDDeadlineКоличествоИтогов();
	
	Свойства = "RWDDeadline_Заголовок, "
					+ "RWDDeadline_Today, "
					+ "RWDDeadline_5days, "
					+ "RWDDeadline_More5days, "
					+ "RWDDeadline_ИндексИтога";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоИтогRWDDeadline();
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьRWDDeadline(Параметры) Экспорт
	
	//РазделыМонитора = Новый Массив;
	//РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	//
	//ПараметрыЗаполнения = Новый Структура();
	//ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	//ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	//ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Ложь);
	//
	//АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Если Параметры.БыстроеОбновление Тогда
	//	МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//Иначе
	//	МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура RWDDeadline(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("RWDDeadline_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаRWDDeadline()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваRWDDeadline());
	Результат.Вставить("RWDDeadline_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаRWDDeadline()));
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекстаВажное = ЦветаСтиля.ВажноеСобытие;
	ЦветТекстаВажноеОбычное = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	ЗначенияRWDDeadline = ПолучитьЗначенияRWDDeadline(Параметры);
	
	ФорматнаяСтрокаRWDDeadline = "ЧДЦ=; ЧН=0";
	
	// RWDDeadline_Today
	RWDDeadline_Today = Новый ФорматированнаяСтрока(
		Формат(ЗначенияRWDDeadline.RWDDeadline_Today, ФорматнаяСтрокаRWDDeadline),
		Шрифт,
		?(ЗначенияRWDDeadline.RWDDeadline_Today = 0, ЦветТекстаВажноеОбычное, ЦветТекстаВажное));
	Результат.Вставить("RWDDeadline_Today", RWDDeadline_Today);
	
	// RWDDeadline_5days
	RWDDeadline_5days = Новый ФорматированнаяСтрока(
		Формат(ЗначенияRWDDeadline.RWDDeadline_5days, ФорматнаяСтрокаRWDDeadline),
		Шрифт,
		?(ЗначенияRWDDeadline.RWDDeadline_5days = 0, ЦветТекстаВажноеОбычное, ЦветТекстаВажное));
	Результат.Вставить("RWDDeadline_5days", RWDDeadline_5days);
	
	// RWDDeadline_More5days
	RWDDeadline_More5days = Новый ФорматированнаяСтрока(
		Формат(ЗначенияRWDDeadline.RWDDeadline_More5days, ФорматнаяСтрокаRWDDeadline),
		Шрифт,
		?(ЗначенияRWDDeadline.RWDDeadline_More5days = 0, ЦветТекстаВажноеОбычное, ЦветТекстаВажное));
	Результат.Вставить("RWDDeadline_More5days", RWDDeadline_More5days);
	
	
	// Итого
	Итого = Новый ФорматированнаяСтрока(
		Формат(ЗначенияRWDDeadline.RWDDeadline_Total, ФорматнаяСтрокаRWDDeadline),
		Шрифт,
		?(ЗначенияRWDDeadline.RWDDeadline_Total = 0, ЦветТекстаВажноеОбычное, ЦветТекстаВажное));
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоИтогRWDDeadline(), Итого);
	//Результат.Вставить("RWDDeadline_ИндексИтога", ИндексСтроки);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПредставлениеОстаткаДенежныхСредств(Остаток, Валюта, Выделить = Ложь)
	
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		СтроковоеПредставление = СтрШаблон("%1 %2", Формат(Остаток, ФорматнаяСтрока), Валюта);
	Иначе
		СтроковоеПредставление = Формат(Остаток, ФорматнаяСтрока);
	КонецЕсли;
	
	Шрифт      = ?(Выделить, Новый Шрифт(ШрифтыСтиля.ШрифтТекстаИнформационнойПанели,,, Истина), ШрифтыСтиля.ШрифтТекстаИнформационнойПанели);
	ЦветТекста = ?(Остаток >= 0, ЦветаСтиля.ЦветТекстаИнформационнойПанели, ЦветаСтиля.ВажноеСобытие);
	
	Возврат Новый ФорматированнаяСтрока(СтроковоеПредставление, Шрифт, ЦветТекста);
	
КонецФункции

Функция RWDDeadlineДоступны()
	
	// Блок доступен для пользователей, которым доступен отчет "Остатки денежных средств".
	// Сведения об остатках получаются из регистра "ДанныеМонитораРуководителя" в привилегированном режиме.
	//Возврат ПравоДоступа("Использование", Метаданные.Отчеты.ОстаткиДенежныхСредств);
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗначенияRWDDeadline(Параметры)
	
	Данные = Новый Структура;
	Данные.Вставить("RWDDeadline_Today", 0);
	Данные.Вставить("RWDDeadline_5days", 0);
	Данные.Вставить("RWDDeadline_More5days", 0);
	Данные.Вставить("RWDDeadline_Total", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.RWDTargetDate, &ТекущаяДата, ДЕНЬ) = 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК RWDDeadline_Today,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.RWDTargetDate, &ТекущаяДата, ДЕНЬ) > 0
		|		И РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.RWDTargetDate, &ТекущаяДата, ДЕНЬ) <= 5
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК RWDDeadline_5days,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.RWDTargetDate, &ТекущаяДата, ДЕНЬ) > 5
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК RWDDeadline_More5days,
		|	ЕСТЬNULL(СУММА(1), 0) КАК RWDDeadline_Total
		|ИЗ
		|	РегистрСведений.InvoiceComments.СрезПоследних(, Invoice.Client = &Клиент) КАК InvoiceCommentsСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Collectors КАК Collectors
		|		ПО InvoiceCommentsСрезПоследних.Invoice.Client = Collectors.Client
		|		И
		|			(InvoiceCommentsСрезПоследних.Invoice.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.ManagementGeomarket = Collectors.ManagementGeomarket
		|		ИЛИ Collectors.ManagementGeomarket = ЗНАЧЕНИЕ(Справочник.ManagementGeography.ПустаяСсылка))
		|		И Collectors.Collector = &Коллектор
		|ГДЕ
		|	InvoiceCommentsСрезПоследних.Problem.RWDTargetDate <> ДАТАВРЕМЯ(1, 1, 1)
		|	И InvoiceCommentsСрезПоследних.Problem.RWDTargetDate <= &ТекущаяДата";
	
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	Если ЗначениеЗаполнено(Параметры.Клиент) Тогда
		Запрос.УстановитьПараметр("Клиент", Параметры.Клиент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Invoice.Client = &Клиент", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Коллектор) Тогда
		Запрос.УстановитьПараметр("Коллектор", Параметры.Коллектор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Collectors.Collector = &Коллектор", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Collectors КАК Collectors", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Collectors КАК Collectors");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Данные, ВыборкаДетальныеЗаписи);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область BrokenPromises

Процедура ДобавитьBrokenPromises(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаBrokenPromises(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаBrokenPromises(),
		"БлокиИнформационнойПанели.BrokenPromises",
		"БлокиИнформационнойПанели.ОбновитьBrokenPromises",
		СвойстваBrokenPromises());
	
КонецПроцедуры

Функция СвойстваBrokenPromises()
	
	// ВГраница = Количеству, т.к. последняя строка используется для итоговой записи
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.BrokenPromisesКоличествоИтогов();
	
	Свойства = "BrokenPromises_Заголовок, "
					+ "BrokenPromises_Today, "
					+ "BrokenPromises_5days, "
					+ "BrokenPromises_More5days, "
					+ "BrokenPromises_ИндексИтога";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоИтогBrokenPromises();
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьBrokenPromises(Параметры) Экспорт
	
	//РазделыМонитора = Новый Массив;
	//РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	//
	//ПараметрыЗаполнения = Новый Структура();
	//ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	//ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	//ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Ложь);
	//
	//АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Если Параметры.БыстроеОбновление Тогда
	//	МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//Иначе
	//	МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура BrokenPromises(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("BrokenPromises_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаBrokenPromises()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваBrokenPromises());
	Результат.Вставить("BrokenPromises_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаBrokenPromises()));
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекстаВажное = ЦветаСтиля.ВажноеСобытие;
	ЦветТекстаВажноеОбычное = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	ЗначенияBrokenPromises = ПолучитьЗначенияBrokenPromises(Параметры);
	
	ФорматнаяСтрокаBrokenPromises = "ЧДЦ=; ЧН=0";
	
	// BrokenPromises_Today
	BrokenPromises_Today = Новый ФорматированнаяСтрока(
		Формат(ЗначенияBrokenPromises.BrokenPromises_Today, ФорматнаяСтрокаBrokenPromises),
		Шрифт,
		?(ЗначенияBrokenPromises.BrokenPromises_Today = 0, ЦветТекстаВажноеОбычное, ЦветТекстаВажное));
	Результат.Вставить("BrokenPromises_Today", BrokenPromises_Today);
	
	// BrokenPromises_5days
	BrokenPromises_5days = Новый ФорматированнаяСтрока(
		Формат(ЗначенияBrokenPromises.BrokenPromises_5days, ФорматнаяСтрокаBrokenPromises),
		Шрифт,
		?(ЗначенияBrokenPromises.BrokenPromises_5days = 0, ЦветТекстаВажноеОбычное, ЦветТекстаВажное));
	Результат.Вставить("BrokenPromises_5days", BrokenPromises_5days);
	
	// BrokenPromises_More5days
	BrokenPromises_More5days = Новый ФорматированнаяСтрока(
		Формат(ЗначенияBrokenPromises.BrokenPromises_More5days, ФорматнаяСтрокаBrokenPromises),
		Шрифт,
		?(ЗначенияBrokenPromises.BrokenPromises_More5days = 0, ЦветТекстаВажноеОбычное, ЦветТекстаВажное));
	Результат.Вставить("BrokenPromises_More5days", BrokenPromises_More5days);
	
	
	// Итого
	Итого = Новый ФорматированнаяСтрока(
		Формат(ЗначенияBrokenPromises.BrokenPromises_Total, ФорматнаяСтрокаBrokenPromises),
		Шрифт,
		?(ЗначенияBrokenPromises.BrokenPromises_Total = 0, ЦветТекстаВажноеОбычное, ЦветТекстаВажное));
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоИтогBrokenPromises(), Итого);
	//Результат.Вставить("RWDDeadline_ИндексИтога", ИндексСтроки);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция BrokenPromisesДоступны()
	
	// Блок доступен для пользователей, которым доступен отчет "Остатки денежных средств".
	// Сведения об остатках получаются из регистра "ДанныеМонитораРуководителя" в привилегированном режиме.
	//Возврат ПравоДоступа("Использование", Метаданные.Отчеты.ОстаткиДенежныхСредств);
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗначенияBrokenPromises(Параметры)
	
	Данные = Новый Структура;
	Данные.Вставить("BrokenPromises_Today", 0);
	Данные.Вставить("BrokenPromises_5days", 0);
	Данные.Вставить("BrokenPromises_More5days", 0);
	Данные.Вставить("BrokenPromises_Total", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.ForecastDate, &ТекущаяДата, ДЕНЬ) = 1
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК BrokenPromises_Today,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.ForecastDate, &ТекущаяДата, ДЕНЬ) > 1
		|		И РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.ForecastDate, &ТекущаяДата, ДЕНЬ) <= 5
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК BrokenPromises_5days,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.ForecastDate, &ТекущаяДата, ДЕНЬ) > 5
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК BrokenPromises_More5days,
		|	ЕСТЬNULL(СУММА(1), 0) КАК BrokenPromises_Total
		|ИЗ
		|	РегистрСведений.InvoiceComments.СрезПоследних(, Invoice.Client = &Клиент) КАК InvoiceCommentsСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Collectors КАК Collectors
		|		ПО InvoiceCommentsСрезПоследних.Invoice.Client = Collectors.Client
		|		И
		|			(InvoiceCommentsСрезПоследних.Invoice.AU.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.ManagementGeomarket = Collectors.ManagementGeomarket
		|		ИЛИ Collectors.ManagementGeomarket = ЗНАЧЕНИЕ(Справочник.ManagementGeography.ПустаяСсылка))
		|		И Collectors.Collector = &Коллектор
		|ГДЕ
		|	InvoiceCommentsСрезПоследних.Problem.ForecastDate <> ДАТАВРЕМЯ(1, 1, 1)
		|	И InvoiceCommentsСрезПоследних.Problem.Status <> ЗНАЧЕНИЕ(Перечисление.InvoiceStatus.InvoicePaid)
		|	И РАЗНОСТЬДАТ(InvoiceCommentsСрезПоследних.Problem.ForecastDate, &ТекущаяДата, ДЕНЬ) > 0";
	
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	Если ЗначениеЗаполнено(Параметры.Клиент) Тогда
		Запрос.УстановитьПараметр("Клиент", Параметры.Клиент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Invoice.Client = &Клиент", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Коллектор) Тогда
		Запрос.УстановитьПараметр("Коллектор", Параметры.Коллектор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Collectors.Collector = &Коллектор", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Collectors КАК Collectors", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Collectors КАК Collectors");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Данные, ВыборкаДетальныеЗаписи);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаБлоков()
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаБлоков.Колонки;
	
	Колонки.Добавить("Пометка",                   Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Имя",                       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Синоним",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("ПроцедураПолученияДанных",  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ПроцедураОбновленияДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("РеквизитыФормы",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ЦветФона",                  Новый ОписаниеТипов("Цвет"));
	Колонки.Добавить("Порядок",                   ОбщегоНазначения.ОписаниеТипаЧисло(3));
	
	Возврат ТаблицаБлоков;
	
КонецФункции

Процедура Добавить(ТаблицаБлоков, Имя, Синоним, ПроцедураПолученияДанных, ПроцедураОбновленияДанных, РеквизитыФормы, Порядок = 100)
	
	НовыйБлок = ТаблицаБлоков.Добавить();
	НовыйБлок.Имя                       = Имя;
	НовыйБлок.Синоним                   = Синоним;
	НовыйБлок.ПроцедураПолученияДанных  = ПроцедураПолученияДанных;
	НовыйБлок.ПроцедураОбновленияДанных = ПроцедураОбновленияДанных;
	НовыйБлок.РеквизитыФормы            = РеквизитыФормы;
	НовыйБлок.Порядок                   = Порядок;
	
КонецПроцедуры

Функция МножественноеПредставление(ПараметрыПредметаИсчисления)
	
	ПредставленияПредмета = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	
	Возврат ?(ПредставленияПредмета.Количество() >= 3, СокрЛП(ПредставленияПредмета[2]), "");
	
КонецФункции

Функция ПредставлениеСрока(ОтносительныйСрок, ОсталосьДней) Экспорт
	
	Возврат Неопределено;
	
	//Если ОтносительныйСрок = Перечисления.ОтносительныеСроки.НесколькоДней Тогда
	//	
	//	ОсталосьДнейПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
	//		ОсталосьДней, НСтр("ru = 'день, дня, дней'"));
	//		
	//	ПредставлениеСрока = СтрШаблон(НСтр("ru = 'Через %1'"), ОсталосьДнейПрописью);
	//	
	//ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Неделя Тогда
	//	
	//	ПредставлениеСрока = НСтр("ru = 'Через неделю'");
	//	
	//ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.ДвеНедели Тогда
	//	
	//	ПредставлениеСрока = НСтр("ru = 'Через 2 недели'");
	//	
	//ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.ТриНедели Тогда
	//	
	//	ПредставлениеСрока = НСтр("ru = 'Через 3 недели'");
	//	
	//ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Месяц Тогда
	//	
	//	ПредставлениеСрока = НСтр("ru = 'Через месяц'");
	//	
	//Иначе
	//	
	//	ПредставлениеСрока = Строка(ОтносительныйСрок); // Сегодня, Завтра
	//	
	//КонецЕсли;
	//
	//Возврат ПредставлениеСрока;
	
КонецФункции

Функция ПредставлениеОтклонения(Знач Отклонение)
	
	Отклонение = Окр(Отклонение, 0);
	
	Стрелка = ?(Отклонение > 0, СтрелкаВверх(), СтрелкаВниз());
	
	МодульОтклонения = Макс(Отклонение, -Отклонение);
	
	ПределОтклонения = ПределОтклонения();
	
	Если Отклонение <> 0 Тогда
		Если Отклонение < ПределОтклонения Тогда
			ПредставлениеОтклонения = Стрелка + Формат(МодульОтклонения, "ЧДЦ=") + "%";
		Иначе
			ПредставлениеОтклонения = Стрелка;
		КонецЕсли;
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтОтклоненияИнформационнойПанели;
	Если Отклонение > 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли Отклонение < 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПределОтклонения()
	
	Возврат 999;
	
КонецФункции

Функция СтрелкаВверх()
	
	Возврат Символ(9650);
	
КонецФункции

Функция СтрелкаВниз()
	
	Возврат Символ(9660);
	
КонецФункции

// Заменяет пробелы в строке на неразрывные пробелы для блокировки переносов в браузере
//
Функция СтрокаБезПереносов(ИсходнаяСтрока)
	
	// Для того чтобы строка правильно переносилась в веб-клиенте,
	// вместо запятой используем символ - U+201A:Single Low-9 Quotation Mark (Keystroke: Alt+0130)
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ",", "‚");
	Возврат СтрЗаменить(ИсходнаяСтрока, " ", Символы.НПП);
	
КонецФункции

Функция ЗаголовокБлока(ТекстЗаголовка)
	
	Шрифт = ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветЗаголовкаИнформационнойПанели;
	
	Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, Шрифт, ЦветТекста);
	
КонецФункции

#КонецОбласти

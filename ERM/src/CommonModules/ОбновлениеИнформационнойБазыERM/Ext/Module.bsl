////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы ERM.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "0.6.0.0";
	Обработчик.Процедура            = "ОбновлениеИнформационнойБазыERM.КонтактнаяИнформацияОбновлениеИБ";
	Обработчик.НачальноеЗаполнение  = Истина;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	// Код для первоначального заполнения информационной базы.
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных.
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных.
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных.
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура КонтактнаяИнформацияОбновлениеИБ() Экспорт
	
	ПараметрыПроверкиАдресаРФ = Новый Структура;
	ПараметрыПроверкиАдресаРФ.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдресаРФ.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	// КонтактныеЛица
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес для информирования контактных лиц'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Мобильный телефон контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Рабочий телефон контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес электронной почты контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Любая другая контактная информация'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец КонтактныеЛица
	
	// Контрагенты
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ПараметрыВида.Подсказка                         = НСтр("ru='Юридический адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ПараметрыВида.Подсказка                         = НСтр("ru='Фактический адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ПараметрыВида.Подсказка                         = НСтр("ru='Почтовый адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ПараметрыВида.Подсказка                         = НСтр("ru='Телефон контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
	ПараметрыВида.Подсказка                         = НСтр("ru='Факс контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес электронной почты контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
	ПараметрыВида.Подсказка                         = НСтр("ru='Любая другая контактная информация'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец Контрагенты
	
	// Организации
	Справочники.Организации.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций();
	// Конец Организации
	
КонецПроцедуры

#КонецОбласти
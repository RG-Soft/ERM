///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ДОГОВОРА

//Функция возвращает организацию по договору
//
Функция ПолучитьОрганизациюПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация");
	
КонецФункции // ПолучитьОрганизациюПоДоговору()

//Функция возвращает контрагента по договору
//
Функция ПолучитьКонтрагентаПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, РаботаСНСИКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
	
КонецФункции // ПолучитьКонтрагентаПоДоговору()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
	
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	
	ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
	
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
	
	Иначе
	
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	
	Конецесли;
	
	Возврат ВидРасчетовПоДоговору;

КонецФункции

//Функция возвращает валюту договора
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      СправочникСсылка.Валюты
Функция ВалютаВзаиморасчетов(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
КонецФункции // ВалютаВзаиморасчетов()

//Функция возвращает признак расчетов в условных единицах
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      Булево (ИСТИНА если расчеты ведутся в условных единицах)
Функция РасчетыВУсловныхЕдиницах(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
	
КонецФункции // РасчетыВУсловныхЕдиницах()

//Функция возвращает пустое значение договора
//
Функция ПолучитьПустоеЗначениеДоговора() Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции // ПолучитьПустоеЗначениеДоговора()

//Функция возвращает текст, для получения свойства ВидДоговора в запросе
//
Функция ТекстЗапросаВидДоговора(ИмяПоля) Экспорт
	
	// Для УП будет
	//
	// ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация
	
	ИмяРеквизитаВидДоговора = РаботаСНСИКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов)." + ИмяРеквизитаВидДоговора, "ПолеДоговор", ИмяПоля); 
	
КонецФункции // ТекстЗапросаВидДоговора()

//Функция возвращает текст, для получения свойства РасчетыВУсловныхЕдиницах в запросе
//
Функция ТекстЗапросаРасчетыВУЕ(ИмяПоля) Экспорт
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах", "ПолеДоговор", ИмяПоля);
	
КонецФункции // ТекстЗапросаРасчетыВУЕ()

// Функция ТекстЗапросаУчетАгентскогоНДС возвращает текст для получения свойства 
// УчетАгентскогоНДС для договора.
//
Функция ТекстЗапросаУчетАгентскогоНДС(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС";

КонецФункции // ТекстЗапросаУчетАгентскогоНДС()

// Функция ТекстЗапросаВидАгентскогоДоговора возвращает текст запроса для получения
// свойства договора ВидАгентскогоДоговора.
//
Функция ТекстЗапросаВидАгентскогоДоговора(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора";

КонецФункции // ТекстЗапросаВидАгентскогоДоговора()

// Функция ЭтоВидДоговораСПоставщиком возвращает ИСТИНА, 
// если договор с таким видом является договором с поставщиком.
//
Функция ЭтоВидДоговораСПоставщиком(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

КонецФункции // ЭтоВидДоговораСПоставщиком()

// Функция ЭтоВидДоговораСПокупателем возвращает ИСТИНА, 
// если договор с таким видом является договором с покупателем.
//
Функция ЭтоВидДоговораСПокупателем(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

КонецФункции // ЭтоВидДоговораСПокупателем()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентом(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионером(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентомНаЗакупку(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионеромНаЗакупку(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСПоставщиком возвращает значение вида договоров, 
// которые используются при расчетах с поставщиками.
//
Функция ПолучитьВидДоговораСПоставщиком() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

КонецФункции // ПолучитьВидДоговораСПоставщиком()

// Функция ПолучитьВидДоговораСПокупателем возвращает значение вида договоров, 
// которые используются при расчетах с покупателями.
//
Функция ПолучитьВидДоговораСПокупателем() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

КонецФункции // ПолучитьВидДоговораСПокупателем()

// Функция ПолучитьВидДоговораСКомиссионером возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами.
//
Функция ПолучитьВидДоговораСКомиссионером() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецФункции // ПолучитьВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСКомитентом возвращает значение вида договоров, 
// которые используются при расчетах с комитентами.
//
Функция ПолучитьВидДоговораСКомитентом() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьВидДоговораСКомиссионеромНаЗакупку возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами на закупку.
//
Функция ПолучитьВидДоговораСКомиссионеромНаЗакупку() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;

КонецФункции // ПолучитьВидДоговораСКомиссионеромНаЗакупку()

// Функция ПолучитьВидДоговораСКомитентомНаЗакупку возвращает значение вида договоров, 
// которые используются при расчетах с комитентами на закупку.
//
Функция ПолучитьВидДоговораСКомитентомНаЗакупку() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьМассивВидовДоговоров возвращает массив видов договоров
// в соответствии с переданными параметрами. Функцию можно использовать для
// сокращения числа вызова отдельных функций, возвращающих по одному значению.
//
// Параметры:
//		СПоставщиком - Булево, признак включения видов договоров с поставщиком
//		СПокупателем - Булево, признак включения видов договоров с покупателем
//		СКомитентом  - Булево, признак включения видов договоров с комитентом
//		СКомиссионером  - Булево, признак включения видов договоров с комиссионером
//
Функция ПолучитьМассивВидовДоговоров(СПоставщиком = Ложь, СПокупателем = Ложь, 
	СКомитентом = Ложь, СКомиссионером = Ложь, 
	СКомитентомНаЗакупку = Ложь, СКомиссионеромНаЗакупку = Ложь) Экспорт

	МассивВидыДоговоров = Новый Массив;
	
	Если СПоставщиком Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;

	Если СПокупателем Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;

	Если СКомитентом Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;

	Если СКомиссионером Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;

	Если СКомитентомНаЗакупку Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	КонецЕсли;

	Если СКомиссионеромНаЗакупку Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	КонецЕсли;

	Возврат МассивВидыДоговоров;

КонецФункции // ПолучитьМассивВидовДоговоров()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру с реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ВидыДоговоровКонтрагентов  (БП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		УчетАгентскогоНДС	 - Булево
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров
//		РасчетыВУсловныхЕдиницах - Булево
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Ссылка",  				Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",	Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ТипЦен",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВидДоговора",			Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("УчетАгентскогоНДС",	Ложь);
	СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",		Ложь);
	СтруктураРеквизиты.Вставить("ВидАгентскогоДоговора",Перечисления.ВидыАгентскихДоговоров.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",Ложь);

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Владелец,
																		|Организация,
																		|ТипЦен,
																		|ВидДоговора,
																		|УчетАгентскогоНДС,
																		|НДСПоСтавкам4и2,
																		|ВидАгентскогоДоговора,
																		|РасчетыВУсловныхЕдиницах");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОПРЕДЕЛЕНИЯ ТИПОВ

//Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.РегистрацииВНалоговомОргане");
		
КонецФункции // ТипыСвязанныеСОрганизацией()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ОРГАНИЗАЦИИ

//Функция возвращает значение головной организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
КонецФункции // ГоловнаяОрганизация()

//Функция возвращает признак того, что организация является обособленным
//подразделением выделенным на отдельный баланс
//
Функция ОбособленноеПодразделение(Организация) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение");
	
КонецФункции // ОбособленноеПодразделение()

// Формирует список головных организаций предприятия
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка,
	                      |	Организации.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ГоловнаяОрганизация = Организации.Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

// Формирует список обособленных структурных подразделений организации
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты, лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты, требуется для единообразия с БРУ и УП
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчета - основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ОсновнойБанковскийСчет");
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		
		БанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()

// Функция СтруктураОрганизации возвращает структуру с реквизитами организации
//
Функция СтруктураОрганизации(Организация) Экспорт

	Организации = ОбщегоНазначенияВызовСервераПовтИсп.ВсяОрганизация(Организация);
	СписокОП = Новый СписокЗначений;
	Для Каждого ЭлементМассива Из Организации Цикл
		СписокОП.Добавить(ЭлементМассива);
	КонецЦикла;

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация, ОбособленноеПодразделение, ЕстьОбособленныеПодразделения");
	
	СписокГО = Новый СписокЗначений;
	СписокГО.Добавить(РеквизитыОрганизации.ГоловнаяОрганизация);
	
	Если РеквизитыОрганизации.ЕстьОбособленныеПодразделения Тогда
		ТипОрганизации = "ГО";
	ИначеЕсли РеквизитыОрганизации.ОбособленноеПодразделение Тогда
		ТипОрганизации = "ОП";
	Иначе
		ТипОрганизации = "Простая";
	КонецЕсли;
		
	СвойстваОрганизации = Новый Структура("Тип, Организация, ГоловнаяОрганизация", ТипОрганизации, СписокОП, СписокГО);
	
	Возврат СвойстваОрганизации;
	
КонецФункции // СтруктураОрганизации()

// Возвращает перечень (массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// В перечень входят только те организации, данные по которым доступны текущему пользователю.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ ИЛИ КОНТРАГЕНТЕ

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  БанковскийСчет - банковский счет, реквизиты которого выводятся.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, Период = '20300101', Знач БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура();
	Сведения.Вставить("ЮридическоеФизическоеЛицо", 			Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	// Наименования
	Сведения.Вставить("Представление", 						"");
	Сведения.Вставить("ПолноеНаименование", 				"");
	Сведения.Вставить("СокращенноеНаименование", 			"");
	Сведения.Вставить("НаименованиеДляПечатныхФорм", 		"");
	Сведения.Вставить("ФамилияИнициалыФизлица",				""); // Фамилия И.О.
	Сведения.Вставить("ФИОФизлица",							""); // Фамилия Имя Отчество
	// Адреса и контактная информация
	Сведения.Вставить("ЮридическийАдрес", 					"");
	Сведения.Вставить("ГородПоЮридическомуАдресу", 			""); // Последний уровень населенного пункта в адресе перед улицей (город, село)
	Сведения.Вставить("ФактическийАдрес", 					""); 
	Сведения.Вставить("ГородПоФактическомуАдресу", 			""); // Последний уровень населенного пункта в адресе перед улицей (город, село)
	Сведения.Вставить("ПочтовыйАдрес", 						""); 
	Сведения.Вставить("ГородПоПочтовомуАдресу", 			""); // Последний уровень населенного пункта в адресе перед улицей (город, село)
	Сведения.Вставить("Телефоны", 							""); 
	Сведения.Вставить("Факс", 								""); 
	Сведения.Вставить("Email", 								"");
	// Регистрационные данные                                      
	Сведения.Вставить("ОГРН", 								""); // Здесь же ОГРНИП для ИП, рег. номер для иностранных контрагентов
	Сведения.Вставить("КодПоОКПО",							"");
	Сведения.Вставить("ИНН", 								"");
	Сведения.Вставить("КПП", 								""); // Только для ЮЛ
	Сведения.Вставить("СвидетельствоСерияНомер", 			""); // Только для ИП
	Сведения.Вставить("СвидетельствоДатаВыдачи", 			Дата('0001-01-01')); 	// Только для ИП
	Сведения.Вставить("Свидетельство", 						""); // Свидетельство строкой, только для ИП
	Сведения.Вставить("ДокументУдостоверяющийЛичность", 	""); // Только для физлица
	Сведения.Вставить("ИндивидуальныйПредприниматель", 		Справочники.ФизическиеЛица.ПустаяСсылка()); // Только для организаций-ИП
	Сведения.Вставить("СтранаРегистрации", 					Справочники.СтраныМира.ПустаяСсылка());
	Сведения.Вставить("НалоговыйНомерВСтранеРегистрации",	"");
	// Банковские реквизиты
	Сведения.Вставить("Банк", 								"");
	Сведения.Вставить("БИК", 								"");
	Сведения.Вставить("КоррСчет", 							"");
	Сведения.Вставить("НомерСчета", 						"");
	Сведения.Вставить("АдресБанка", 						"");
	
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		БанковскийСчет = ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИндивидуальныйПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ИндивидуальныйПредприниматель");
		Сведения.Вставить("ИндивидуальныйПредприниматель", ИндивидуальныйПредприниматель);
	Иначе
		ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",          Период);
	Запрос.УстановитьПараметр("ЮрФизЛицо",       ЮрФизЛицо);
	Запрос.УстановитьПараметр("БанковскийСчет",  БанковскийСчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияНаименованийКонтрагентов.Период) КАК Период,
	|	ИсторияНаименованийКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияНаименованийКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
	|ГДЕ
	|	ИсторияНаименованийКонтрагентов.Ссылка = &ЮрФизЛицо
	|	И ИсторияНаименованийКонтрагентов.Период <= &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияНаименованийКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияНаименованийКонтрагентов.Ссылка КАК Контрагент,
	|	ИсторияНаименованийКонтрагентов.НаименованиеПолное КАК НаименованиеПолное
	|ПОМЕСТИТЬ НаименованияКонтрагентов
	|ИЗ
	|	ЗначенияНаименованийКонтрагентов КАК ЗначенияНаименованийКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
	|		ПО ЗначенияНаименованийКонтрагентов.Ссылка = ИсторияНаименованийКонтрагентов.Ссылка
	|			И ЗначенияНаименованийКонтрагентов.Период = ИсторияНаименованийКонтрагентов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияНаименованийОрганизаций.Период) КАК Период,
	|	ИсторияНаименованийОрганизаций.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияНаименованийОрганизаций
	|ИЗ
	|	Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
	|ГДЕ
	|	ИсторияНаименованийОрганизаций.Ссылка = &ЮрФизЛицо
	|	И ИсторияНаименованийОрганизаций.Период <= &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияНаименованийОрганизаций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияНаименованийОрганизаций.Ссылка КАК Организация,
	|	ИсторияНаименованийОрганизаций.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ИсторияНаименованийОрганизаций.НаименованиеПолное КАК НаименованиеПолное,
	|	ИсторияНаименованийОрганизаций.ФамилияИП,
	|	ИсторияНаименованийОрганизаций.ИмяИП,
	|	ИсторияНаименованийОрганизаций.ОтчествоИП
	|ПОМЕСТИТЬ НаименованияОрганизаций
	|ИЗ
	|	ЗначенияНаименованийОрганизаций КАК ЗначенияНаименованийОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
	|		ПО ЗначенияНаименованийОрганизаций.Ссылка = ИсторияНаименованийОрганизаций.Ссылка
	|			И ЗначенияНаименованийОрганизаций.Период = ИсторияНаименованийОрганизаций.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Организации.Представление КАК Наименование,
	|	ЕСТЬNULL(НаименованияОрганизаций.НаименованиеПолное, Организации.НаименованиеПолное) КАК ПолноеНаименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	Организации.ОГРН КАК ОГРН,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	ЕСТЬNULL(НаименованияОрганизаций.НаименованиеСокращенное, Организации.НаименованиеСокращенное) КАК СокращенноеНаименование,
	|	ВЫБОР
	|		КОГДА Организации.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ЕСТЬNULL(НаименованияОрганизаций.НаименованиеСокращенное, Организации.НаименованиеСокращенное)
	|		ИНАЧЕ ЕСТЬNULL(НаименованияОрганизаций.НаименованиеПолное, Организации.НаименованиеПолное)
	|	КОНЕЦ КАК НаименованиеДляПечатныхФорм,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия) КАК СтранаРегистрации,
	|	НЕОПРЕДЕЛЕНО КАК ФИОСтрокой,
	|	ЕСТЬNULL(НаименованияОрганизаций.ФамилияИП, Организации.ФамилияИП) КАК Фамилия,
	|	ЕСТЬNULL(НаименованияОрганизаций.ИмяИП, Организации.ИмяИП) КАК Имя,
	|	ЕСТЬNULL(НаименованияОрганизаций.ОтчествоИП, Организации.ОтчествоИП) КАК Отчество,
	|	"""" КАК ДокументУдостоверяющийЛичность,
	|	Организации.СвидетельствоСерияНомер КАК СвидетельствоСерияНомер,
	|	Организации.СвидетельствоДатаВыдачи КАК СвидетельствоДатаВыдачи,
	|	Организации.Ссылка КАК ИсточникКонтактнойИнформации,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации) КАК ВидыКонтактнойИнформацииЮрАдрес,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации) КАК ВидыКонтактнойИнформацииФактАдрес,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации) КАК ВидыКонтактнойИнформацииПочтовыйАдрес,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации) КАК ВидыКонтактнойИнформацииТелефон,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации) КАК ВидыКонтактнойИнформацииФакс,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации) КАК ВидыКонтактнойИнформацииEmail,
	|	"""" КАК НалоговыйНомерВСтранеРегистрации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаименованияОрганизаций КАК НаименованияОрганизаций
	|		ПО (НаименованияОрганизаций.Организация = Организации.Ссылка)
	|ГДЕ
	|	Организации.Ссылка = &ЮрФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.ЮридическоеФизическоеЛицо,
	|	Контрагенты.Представление,
	|	ЕСТЬNULL(НаименованияКонтрагентов.НаименованиеПолное, Контрагенты.НаименованиеПолное),
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.РегистрационныйНомер,
	|	Контрагенты.КодПоОКПО,
	|	Контрагенты.Представление,
	|	ЕСТЬNULL(НаименованияКонтрагентов.НаименованиеПолное, Контрагенты.НаименованиеПолное),
	|	Контрагенты.СтранаРегистрации,
	|	ЕСТЬNULL(НаименованияКонтрагентов.НаименованиеПолное, Контрагенты.НаименованиеПолное),
	|	"""",
	|	"""",
	|	"""",
	|	Контрагенты.ДокументУдостоверяющийЛичность,
	|	Контрагенты.СвидетельствоСерияНомер,
	|	Контрагенты.СвидетельствоДатаВыдачи,
	|	Контрагенты.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента),
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента),
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента),
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента),
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксКонтрагенты),
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагенты),
	|	Контрагенты.НалоговыйНомер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаименованияКонтрагентов КАК НаименованияКонтрагентов
	|		ПО (НаименованияКонтрагентов.Контрагент = Контрагенты.Ссылка)
	|ГДЕ
	|	Контрагенты.Ссылка = &ЮрФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	РеквизитыБанка.Наименование КАК Банк,
	|	РеквизитыБанка.Код КАК БИК,
	|	РеквизитыБанка.КоррСчет КАК КоррСчет,
	|	РеквизитыБанка.Адрес КАК АдресБанка,
	|	РеквизитыБанкаРасчетов.Наименование КАК БанкДляРасчетов,
	|	РеквизитыБанкаРасчетов.Код КАК БИКБанкаДляРасчетов,
	|	РеквизитыБанкаРасчетов.КоррСчет КАК КоррСчетБанкаДляРасчетов,
	|	РеквизитыБанкаРасчетов.Адрес КАК АдресБанкаДляРасчетов
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК РеквизитыБанка
	|		ПО БанковскиеСчета.Банк = РеквизитыБанка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК РеквизитыБанкаРасчетов
	|		ПО БанковскиеСчета.БанкДляРасчетов = РеквизитыБанкаРасчетов.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеЮрФизЛица = Результаты[4].Выбрать();
	Если ДанныеЮрФизЛица.Следующий() Тогда
		
		Сведения.Вставить("ЮридическоеФизическоеЛицо",	 ДанныеЮрФизЛица.ЮридическоеФизическоеЛицо);
	
		Сведения.Вставить("ПолноеНаименование",          СокрЛП(ДанныеЮрФизЛица.ПолноеНаименование));
		Сведения.Вставить("СокращенноеНаименование",     СокрЛП(ДанныеЮрФизЛица.СокращенноеНаименование));
		Сведения.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(ДанныеЮрФизЛица.НаименованиеДляПечатныхФорм));
		Сведения.Вставить("Представление",               СокрЛП(ДанныеЮрФизЛица.Наименование));
		
		Сведения.Вставить("ИНН",       ДанныеЮрФизЛица.ИНН);
		Сведения.Вставить("ОГРН",      ДанныеЮрФизЛица.ОГРН);
		Сведения.Вставить("КодПоОКПО", ДанныеЮрФизЛица.КодПоОКПО);	
		Сведения.Вставить("СтранаРегистрации", ДанныеЮрФизЛица.СтранаРегистрации);
		Сведения.Вставить("НалоговыйНомерВСтранеРегистрации", ДанныеЮрФизЛица.НалоговыйНомерВСтранеРегистрации);
		
		Сведения.Вставить("РуководительФИО"                   , "");
		Сведения.Вставить("ДолжностьРуководителяПредставление", "");
		
		Если ДанныеЮрФизЛица.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			
			Сведения.Вставить("КПП", "");
			
			СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеЮрФизЛица);
			
			Сведения.Вставить("СвидетельствоСерияНомер", ДанныеЮрФизЛица.СвидетельствоСерияНомер);
			Сведения.Вставить("СвидетельствоДатаВыдачи", ДанныеЮрФизЛица.СвидетельствоДатаВыдачи);
			
			Сведения.Вставить("ФИОФизлица", ОбщегоНазначенияВызовСервера.ПолучитьФамилиюИмяОтчество(
				СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество, Ложь));
			Если ДанныеЮрФизЛица.ФИОСтрокой = Неопределено Тогда
				Сведения.Вставить("ФамилияИнициалыФизлица", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтруктураФИО));
			Иначе
				Сведения.Вставить("ФамилияИнициалыФизлица", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ДанныеЮрФизЛица.ФИОСтрокой));
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ДанныеЮрФизЛица.СвидетельствоСерияНомер) Тогда
				Сведения.Вставить("Свидетельство",СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'свидетельство %1 от %2'"),
					ДанныеЮрФизЛица.СвидетельствоСерияНомер, Формат(ДанныеЮрФизЛица.СвидетельствоДатаВыдачи, "ДЛФ=D")));
			КонецЕсли;
			
			// Документ, удостоверяющий личность, заполняется только для контрагента
			Сведения.Вставить("ДокументУдостоверяющийЛичность", ДанныеЮрФизЛица.ДокументУдостоверяющийЛичность);
			
		Иначе
			
			Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
				//Сведения.Вставить("КПП", Справочники.Контрагенты.КППНаДату(ЮрФизЛицо, Период));
			ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
				//Сведения.Вставить("КПП", Справочники.Организации.КППНаДату(ЮрФизЛицо, Период));
			КонецЕсли;
			
			Если ТипЗнч(ДанныеЮрФизЛица.ИсточникКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда
				//ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ДанныеЮрФизЛица.ИсточникКонтактнойИнформации, Период);
				//Если ЗначениеЗаполнено(ОтветственныеЛица) Тогда
				//	Сведения.Вставить("РуководительФИО"                   , ОтветственныеЛица.РуководительФИО);
				//	Сведения.Вставить("ДолжностьРуководителяПредставление", ОтветственныеЛица.РуководительДолжностьПредставление);
				//КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивОбъектовКИ = Новый Массив;
		МассивОбъектовКИ.Добавить(ДанныеЮрФизЛица.ИсточникКонтактнойИнформации);
		
		МассивВидовКИ = Новый Массив;
		МассивВидовКИ.Добавить(ДанныеЮрФизЛица.ВидыКонтактнойИнформацииЮрАдрес);
		МассивВидовКИ.Добавить(ДанныеЮрФизЛица.ВидыКонтактнойИнформацииФактАдрес);
		МассивВидовКИ.Добавить(ДанныеЮрФизЛица.ВидыКонтактнойИнформацииПочтовыйАдрес);
		МассивВидовКИ.Добавить(ДанныеЮрФизЛица.ВидыКонтактнойИнформацииТелефон);
		МассивВидовКИ.Добавить(ДанныеЮрФизЛица.ВидыКонтактнойИнформацииФакс);
		МассивВидовКИ.Добавить(ДанныеЮрФизЛица.ВидыКонтактнойИнформацииEmail);
		
		ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектовКИ, Неопределено, МассивВидовКИ);
		
		Для Каждого СтрокаТаблицыКИ Из ТаблицаКИ Цикл

			// Определяем нижний уровень населенного пункта в адресе.
			ГородНаселенныйПункт = "";
			Если СтрокаТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				СтруктураПолейАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
					СтрокаТаблицыКИ.ЗначенияПолей, СтрокаТаблицыКИ.Вид);
					
				Если СтруктураПолейАдреса.Свойство("Город") 
					И ЗначениеЗаполнено(СтруктураПолейАдреса.Город) Тогда
					ГородНаселенныйПункт = СтруктураПолейАдреса.Город;
				
				ИначеЕсли СтруктураПолейАдреса.Свойство("НаселенныйПункт") 
					И ЗначениеЗаполнено(СтруктураПолейАдреса.НаселенныйПункт) Тогда
					ГородНаселенныйПункт = СтруктураПолейАдреса.НаселенныйПункт;
				
				ИначеЕсли СтруктураПолейАдреса.Свойство("КодРегиона")
					И СтруктураПолейАдреса.Свойство("Регион")
					И (СтруктураПолейАдреса.КодРегиона = "77"		// Москва
						ИЛИ СтруктураПолейАдреса.КодРегиона = "78"	// Санкт-Петербург
						ИЛИ СтруктураПолейАдреса.КодРегиона = "92"	// Севастополь
						ИЛИ СтруктураПолейАдреса.КодРегиона = "99") // Байконур
						Тогда
					// Города федерального значения и приравненные к ним
					ГородНаселенныйПункт = СтруктураПолейАдреса.Регион;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				// Для ЮрЛица используются три типа адреса, 
				// но для ИП используется один тип для указания Юридического, фактического и почтового адреса.
				// Поэтому последовательно проверим адреса.
				Если СтрокаТаблицыКИ.Вид = ДанныеЮрФизЛица.ВидыКонтактнойИнформацииЮрАдрес Тогда
					
					Сведения.Вставить("ЮридическийАдрес"             , СтрокаТаблицыКИ.Представление);
					Сведения.Вставить("ЗначенияПолейЮридическийАдрес", СтрокаТаблицыКИ.ЗначенияПолей);
					Сведения.Вставить("ГородПоЮридическомуАдресу"    , ГородНаселенныйПункт);
					
				КонецЕсли;
				Если СтрокаТаблицыКИ.Вид = ДанныеЮрФизЛица.ВидыКонтактнойИнформацииФактАдрес Тогда
					
					Сведения.Вставить("ФактическийАдрес"             , СтрокаТаблицыКИ.Представление);
					Сведения.Вставить("ЗначенияПолейФактическийАдрес", СтрокаТаблицыКИ.ЗначенияПолей);
					Сведения.Вставить("ГородПоФактическомуАдресу"    , ГородНаселенныйПункт);
					
				КонецЕсли;
				Если СтрокаТаблицыКИ.Вид = ДанныеЮрФизЛица.ВидыКонтактнойИнформацииПочтовыйАдрес Тогда
					
					Сведения.Вставить("ПочтовыйАдрес", СтрокаТаблицыКИ.Представление);
					Сведения.Вставить("ГородПоПочтовомуАдресу", ГородНаселенныйПункт);
					Сведения.Вставить("ЗначенияПолейПочтовыйАдрес", СтрокаТаблицыКИ.ЗначенияПолей);
					
				КонецЕсли;
			Иначе
				Если СтрокаТаблицыКИ.Вид = ДанныеЮрФизЛица.ВидыКонтактнойИнформацииТелефон Тогда
					
					Сведения.Вставить("Телефоны", СтрокаТаблицыКИ.Представление);
					
				ИначеЕсли СтрокаТаблицыКИ.Вид = ДанныеЮрФизЛица.ВидыКонтактнойИнформацииФакс Тогда
					
					Сведения.Вставить("Факс", СтрокаТаблицыКИ.Представление);
					
				ИначеЕсли СтрокаТаблицыКИ.Вид = ДанныеЮрФизЛица.ВидыКонтактнойИнформацииEmail Тогда
					
					Сведения.Вставить("Email", СтрокаТаблицыКИ.Представление);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеБанковскогоСчета = Результаты[5].Выбрать();
	Если ДанныеБанковскогоСчета.Следующий() Тогда
		
		Сведения.Вставить("НомерСчета", ДанныеБанковскогоСчета.НомерСчета);
		
		Если ЗначениеЗаполнено(ДанныеБанковскогоСчета.БанкДляРасчетов) Тогда
			Сведения.Вставить("Банк",       ДанныеБанковскогоСчета.БанкДляРасчетов);
			Сведения.Вставить("БИК",        ДанныеБанковскогоСчета.БИКБанкаДляРасчетов);
			Сведения.Вставить("АдресБанка", ДанныеБанковскогоСчета.АдресБанкаДляРасчетов);
			Сведения.Вставить("КоррСчет",   ДанныеБанковскогоСчета.КоррСчетБанкаДляРасчетов);
		Иначе
			Сведения.Вставить("Банк",       ДанныеБанковскогоСчета.Банк);
			Сведения.Вставить("БИК",        ДанныеБанковскогоСчета.БИК);
			Сведения.Вставить("АдресБанка", ДанныеБанковскогоСчета.АдресБанка);
			Сведения.Вставить("КоррСчет",   ДанныеБанковскогоСчета.КоррСчет);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Сведения;

КонецФункции

// Функция возвращает ссылку на вид контактной информации EMAILКонтрагента.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - ссылка на вид контактной информации EMAILКонтрагента
//
Функция ВидКонтактнойИнформацииEMAILКонтрагента() Экспорт
	
	Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ПОДРАЗДЕЛЕНИЯ

// Функция возвращает ссылку на пустое подразделение.
//
Функция ПустоеПодразделение() Экспорт

	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()

// Функция возвращает Истина, если переданное подразделение может быть выбрано для 
// указанной организации.
//                         
Функция ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаОрганизации = РаботаСНСИКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
			Результат = (РеквизитыПодразделения[ИмяРеквизитаОрганизации] = Организация);
		Иначе
			// Если для подразделения нет явно указанного владельца, то считаем, что любое подразделение может 
			// принадлежать любой организации.
			Результат = Истина;
		КонецЕсли;
	
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПодразделениеПринадлежитОрганизации()

// Функция возвращает организацию, соответствующую переданному подразделению.
// Если передан параметр ТекущаяВыбраннаяОрганизация и его значение не противоречит 
// соответствию подразделения и организации, то возвращает значение параметра ТекущаяВыбраннаяОрганизация.
//
Функция ОрганизацияПодразделения(Подразделение, ТекущаяВыбраннаяОрганизация = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	ИмяРеквизитаОрганизации = РаботаСНСИКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
		// Если нет явно заданного владельца, то оставляем текущую организацию.
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
	Если ЗначениеЗаполнено(ТекущаяВыбраннаяОрганизация) 
		И РеквизитыПодразделения[ИмяРеквизитаОрганизации] = ТекущаяВыбраннаяОрганизация Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПодразделения[ИмяРеквизитаОрганизации]) Тогда
		Возврат РеквизитыПодразделения[ИмяРеквизитаОрганизации];
	Иначе
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;

КонецФункции // ОрганизацияПодразделения()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;
	
	Если НастройкаВРег = ВРег("ОсновнаяОрганизация") Тогда
		Возврат Справочники.Организации.ОрганизацияПоУмолчанию(Пользователь);
	//ИначеЕсли НастройкаВРег = ВРег("ОсновнойСклад") Тогда
	//	Возврат Справочники.Склады.ПолучитьСкладПоУмолчанию(Пользователь);
	КонецЕсли;
	
	Если НастройкаВРег = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		ПустоеЗначение = ПустоеПодразделение();
		ИмяОбъекта = "Справочник.ПодразделенияОрганизаций";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("РабочаяДата") Тогда
		// Для совместимости с предыдущими версиями.
		Возврат ОбщегоНазначения.РабочаяДатаПользователя(Пользователь);
	ИначеЕсли НастройкаВРег = ВРег("ВариантРабочегоСтола") Тогда
		ПустоеЗначение = "ЗадачиБухгалтера";
	//ИначеЕсли НастройкаВРег = ВРег("ПоказыватьСчетаУчетаВДокументах") Тогда
	//	ПустоеЗначение = ПоказыватьСчетаУчетаВДокументахПоУмолчанию();
	//ИначеЕсли НастройкаВРег = ВРег("ОсновнойВидНоменклатуры") Тогда
	//	ПустоеЗначение = ПустойВидНоменклатуры();
	//	ИмяОбъекта = "Справочник.ВидыНоменклатуры";
	//	НастройкаТипаСсылка = Истина;
	//ИначеЕсли НастройкаВРег = ВРег("ОсновнойВидНоменклатурыУслуга") Тогда
	//	ПустоеЗначение = ПустойВидНоменклатуры();
	//	ИмяОбъекта = "Справочник.ВидыНоменклатуры";
	//	НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ПараметрыОтправкиСкрытыхКопий") Тогда
		ПустоеЗначение = Новый Структура("ОтправлятьСкрытыеКопии, АдресПолучателяСкрытойКопии", Ложь, "");
	ИначеЕсли НастройкаВРег = ВРег("УчетнаяЗаписьЭлектроннойПочты") Тогда
		ПустоеЗначение = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		ИмяОбъекта = "Справочник.УчетныеЗаписиЭлектроннойПочты";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("Подпись") Тогда
		ПустоеЗначение = НоваяПодпись();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, Пользователь);

	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			Иначе
				Запроc = Новый Запрос;
				Запроc.УстановитьПараметр("Ссылка", ЗначениеНастройки);
				Запроc.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ЗначенияОбъекта.Ссылка
				|ИЗ
				|	" + ИмяОбъекта + " КАК ЗначенияОбъекта
				|ГДЕ
				|	ЗначенияОбъекта.Ссылка = &Ссылка";
				Результат = Запроc.Выполнить();
				Если Результат.Пустой() Тогда
					ЗначениеНастройки = ПустоеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
	
КонецФункции // ПолучитьЗначениеПоУмолчанию()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ПЕРСОНАЛЬНЫХ НАСТРОЕК ЭЛЕКТРОННОЙ ПОЧТЫ

Функция НоваяПодпись()
	
	Подпись = НСтр("ru='С уважением%1'");
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АвторизованныйПользователь, "Наименование, Служебный");
	Если ДанныеПользователя.Служебный Тогда
		ПредставлениеПользователя = ".";
		
	Иначе
		ПредставлениеПользователя = ", " + ДанныеПользователя.Наименование + ".";
		
	КонецЕсли;
	
	Подпись = СтрШаблон(Подпись, ПредставлениеПользователя);
	
	Возврат Подпись;
	
КонецФункции

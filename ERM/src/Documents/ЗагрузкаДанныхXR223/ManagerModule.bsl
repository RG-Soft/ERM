#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	ФайлДанных = СтруктураПараметров.ИсточникДанных.Получить();
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\XR223.csv";
	ФайлДанных.Записать(ПутьКФайлу);
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ "XR223.csv" +"]" 
		+ Символы.ПС + "DecimalSymbol=."
		+ Символы.ПС + "DateTimeFormat=dd/mm/yyyy");
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	
	Стр_SQL = "Select * FROM XR223.csv";
	rs.Open(Стр_SQL, Connection);
	
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	СоответствиеКолонок = Новый Соответствие;
	Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
		СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
	КонецЦикла;
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	rs.MoveFirst();
	
	ТекНомерСтроки = 0;
	
	Пока rs.EOF() = 0 Цикл
		
		ТекНомерСтроки = ТекНомерСтроки + 1;
		
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
		
		Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
			
			Попытка
				ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
			Исключение
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
			
			Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
			Иначе
				СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
		rs.MoveNext();
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяКаталога);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСтруктуруКолонокТаблицыДанных() Экспорт
	
	СтруктураКолонок = Новый ТаблицаЗначений;
	СтруктураКолонок.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	
	ЗаполнитьСтруктуруКолонокТаблицыДанных(СтруктураКолонок);
	
	Возврат СтруктураКолонок;
	
КонецФункции

Процедура ЗаполнитьСтруктуруКолонокТаблицыДанных(СтруктураКолонок)
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	
	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	
	// BatchNbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BatchNbr";
	СтрокаТЗ.ИмяКолонки = "BatchNbr";
	
	// DepositDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DepositDate";
	СтрокаТЗ.ИмяКолонки = "DepositDate";
	
	//TransactionType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransactionType";
	СтрокаТЗ.ИмяКолонки = "TransactionType";

КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.XR223SourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 14.07.2016 19:30:40 - установка статуса документа
	ДокументЗагрузки = Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.LoadedSourseData;
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 19:30:45 - установка статуса документа
	
КонецПроцедуры

Процедура ОбновитьРеквизитыInvoices(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	XR223SourceData.Invoice,
		|	XR223SourceData.BatchNbr,
		|	XR223SourceData.DepositDate,
		|	XR223SourceData.TransactionType,
		|	Организации.Ссылка КАК Company
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.XR223SourceData КАК XR223SourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО XR223SourceData.Company = Организации.Код
		|		И Организации.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|ГДЕ
		|	XR223SourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И XR223SourceData.DepositDate <> """"
		|	И XR223SourceData.TransactionType = ""I""
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеФайла.BatchNbr,
		|	CashBatch.Company,
		|	CashBatch.Prepayment,
		|	CashBatch.Ссылка КАК CashBatch
		|ПОМЕСТИТЬ ВТ_CashBatch
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО CashBatch.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|		И CashBatch.DocID = ВТ_ДанныеФайла.BatchNbr
		|		И
		|		НЕ CashBatch.ПометкаУдаления
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
		|	КлючиИнвойсов.Company,
		|	КлючиИнвойсов.Invoice
		|ПОМЕСТИТЬ ВТ_Инвойсы
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.Invoice
		|		И КлючиИнвойсов.Company = ВТ_ДанныеФайла.Company
		|		И КлючиИнвойсов.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиMemo.ArInvoice КАК ArInvoice,
		|	КлючиMemo.Company,
		|	КлючиMemo.Memo
		|ПОМЕСТИТЬ ВТ_Memo
		|ИЗ
		|	РегистрСведений.КлючиMemo КАК КлючиMemo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиMemo.ArInvoice = ВТ_ДанныеФайла.Invoice
		|		И КлючиMemo.Company = ВТ_ДанныеФайла.Company
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.DepositDate,
		|	ВТ_ДанныеФайла.TransactionType,
		|	ВТ_Инвойсы.Invoice,
		|	ВТ_CashBatch.CashBatch
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_CashBatch КАК ВТ_CashBatch
		|		ПО ВТ_ДанныеФайла.BatchNbr = ВТ_CashBatch.BatchNbr
		|		И ВТ_ДанныеФайла.Company = ВТ_CashBatch.Company
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Инвойсы КАК ВТ_Инвойсы
		|		ПО ВТ_ДанныеФайла.Invoice = ВТ_Инвойсы.ArInvoice
		|		И ВТ_ДанныеФайла.Company = ВТ_Инвойсы.Company
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Memo КАК ВТ_Memo
		|		ПО ВТ_ДанныеФайла.Invoice = ВТ_Memo.ArInvoice
		|		И ВТ_ДанныеФайла.Company = ВТ_Memo.Company
		|ГДЕ
		|	НЕ ВТ_CashBatch.CashBatch.Ссылка ЕСТЬ NULL
		|	И (НЕ ВТ_Инвойсы.Invoice.Ссылка ЕСТЬ NULL
		|	ИЛИ
		|	НЕ ВТ_Memo.Memo.Ссылка ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбновленныеInvoice = Новый ТаблицаЗначений;
	ОбновленныеInvoice.Колонки.Добавить("Invoice", Новый ОписаниеТипов("ДокументСсылка.Invoice"));

	ОбновленныеMemo = Новый ТаблицаЗначений;
	ОбновленныеMemo.Колонки.Добавить("Memo", Новый ОписаниеТипов("ДокументСсылка.Memo"));
	
	НЗ = РегистрыСведений.LawsonDepositDates.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НЗ.Очистить();
		НЗ.Отбор.CashBatch.Установить(ВыборкаДетальныеЗаписи.CashBatch);
		Если ВыборкаДетальныеЗаписи.TransactionType = "I" Тогда
			НЗ.Отбор.Invoice.Установить(ВыборкаДетальныеЗаписи.Invoice);
			НоваяЗапись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			НоваяЗапись.DepositDate = РГСофт.ПреобразоватьВДату(ВыборкаДетальныеЗаписи.DepositDate, "Date");
			НЗ.Записать();
			
			СтрокаТЗ = ОбновленныеInvoice.Добавить();
			СтрокаТЗ.Invoice = ВыборкаДетальныеЗаписи.Invoice;
		Иначе
			НЗ.Отбор.Invoice.Установить(ВыборкаДетальныеЗаписи.Memo);
			НоваяЗапись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			НоваяЗапись.Invoice = ВыборкаДетальныеЗаписи.Memo;
			НоваяЗапись.DepositDate = РГСофт.ПреобразоватьВДату(ВыборкаДетальныеЗаписи.DepositDate, "Date");
			НЗ.Записать();
			
			СтрокаТЗ = ОбновленныеMemo.Добавить();
			СтрокаТЗ.Memo = ВыборкаДетальныеЗаписи.Memo;
		КонецЕсли;

	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ОбновленныеInvoice", ОбновленныеInvoice);
	ДанныеДляЗаполнения.Вставить("ОбновленныеMemo", ОбновленныеMemo);
	ДанныеДляЗаполнения.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.UpdatedDocuments);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецЕсли
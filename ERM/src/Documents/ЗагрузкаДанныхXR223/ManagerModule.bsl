#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	ФайлДанных = СтруктураПараметров.ИсточникДанных.Получить();
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\XR223.csv";
	ФайлДанных.Записать(ПутьКФайлу);
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ "XR223.csv" +"]" 
		+ Символы.ПС + "DecimalSymbol=."
		+ Символы.ПС + "DateTimeFormat=dd/mm/yyyy");
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	
	Стр_SQL = "Select * FROM XR223.csv";
	rs.Open(Стр_SQL, Connection);
	
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	СоответствиеКолонок = Новый Соответствие;
	Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
		СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
	КонецЦикла;
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	rs.MoveFirst();
	
	ТекНомерСтроки = 0;
	
	Пока rs.EOF() = 0 Цикл
		
		ТекНомерСтроки = ТекНомерСтроки + 1;
		
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
		
		Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
			
			Попытка
				ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
			Исключение
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
			
			Если ЭлементСоответствия.Значение = "DepositDate" ИЛИ ЭлементСоответствия.Значение = "GlDate" Тогда
			
				СтрокаДанных[ЭлементСоответствия.Ключ] = РГСофт.ПреобразоватьВДату(ТекЗначение, "Date");
			
			Иначе
				
				Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
					СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
				Иначе
					СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		rs.MoveNext();
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяКаталога);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСтруктуруКолонокТаблицыДанных() Экспорт
	
	СтруктураКолонок = Новый ТаблицаЗначений;
	СтруктураКолонок.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	СтруктураКолонок.Колонки.Добавить("ТипКолонки", Новый ОписаниеТипов("ОписаниеТипов"));
	
	ЗаполнитьСтруктуруКолонокТаблицыДанных(СтруктураКолонок);
	
	Возврат СтруктураКолонок;
	
КонецФункции

Процедура ЗаполнитьСтруктуруКолонокТаблицыДанных(СтруктураКолонок)
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипДата = Новый ОписаниеТипов("Дата");
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(ТипСтрока);
	СписокТипов.Добавить(ТипДата);
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	СтрокаТЗ.ТипКолонки = ТипСтрока;

	// PaymentTransactionNum
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PaymentTransactionNum";
	СтрокаТЗ.ИмяКолонки = "PaymentTransactionNum";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// BatchNbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BatchNbr";
	СтрокаТЗ.ИмяКолонки = "BatchNbr";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	// DepositDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DepositDate";
	СтрокаТЗ.ИмяКолонки = "DepositDate";
	СтрокаТЗ.ТипКолонки = Новый ОписаниеТипов(СписокТипов);
	
	// GlDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GlDate";
	СтрокаТЗ.ИмяКолонки = "GlDate";
	СтрокаТЗ.ТипКолонки = Новый ОписаниеТипов(СписокТипов);
	
	//TransactionType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransactionType";
	СтрокаТЗ.ИмяКолонки = "TransactionType";
	СтрокаТЗ.ТипКолонки = ТипСтрока;

	//PaymentType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PaymentType";
	СтрокаТЗ.ИмяКолонки = "PaymentType";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	//OffsetCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OffsetCode";
	СтрокаТЗ.ИмяКолонки = "OffsetCode";
	СтрокаТЗ.ТипКолонки = ТипСтрока;
	
	//OrigApplicationAmt
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrigApplicationAmt";
	СтрокаТЗ.ИмяКолонки = "OrigApplicationAmt";
	СтрокаТЗ.ТипКолонки = ТипЧисло;
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля, ТекСтрокаСтруктурыКолонок.ТипКолонки);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.XR223SourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 14.07.2016 19:30:40 - установка статуса документа
	ДокументЗагрузки = Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.LoadedSourseData;
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 19:30:45 - установка статуса документа
	
КонецПроцедуры

Процедура ОбновитьРеквизитыInvoices(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	XR223SourceData.Invoice КАК Invoice,
		|	XR223SourceData.BatchNbr КАК BatchNbr,
		|	ВЫБОР
		|		КОГДА XR223SourceData.OffsetCode = ""PPRU""
		|			ТОГДА XR223SourceData.GlDate
		|		ИНАЧЕ XR223SourceData.DepositDate
		|	КОНЕЦ КАК DepositDate,
		|	XR223SourceData.TransactionType КАК TransactionType,
		|	Организации.Ссылка КАК Company,
		|	XR223SourceData.OffsetCode КАК OffsetCode
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.XR223SourceData КАК XR223SourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО XR223SourceData.Company = Организации.Код
		|			И (Организации.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|ГДЕ
		|	XR223SourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И XR223SourceData.DepositDate <> """"
		|	И (XR223SourceData.TransactionType = ""I""
		|			ИЛИ XR223SourceData.TransactionType = ""D"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеФайла.BatchNbr КАК BatchNbr,
		|	CashBatch.Company КАК Company,
		|	CashBatch.Prepayment КАК Prepayment,
		|	CashBatch.Ссылка КАК CashBatch
		|ПОМЕСТИТЬ ВТ_CashBatch
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО (CashBatch.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|			И CashBatch.DocID = ВТ_ДанныеФайла.BatchNbr
		|			И (НЕ CashBatch.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
		|	КлючиИнвойсов.Company КАК Company,
		|	КлючиИнвойсов.Invoice КАК Invoice
		|ПОМЕСТИТЬ ВТ_Инвойсы
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.Invoice
		|			И КлючиИнвойсов.Company = ВТ_ДанныеФайла.Company
		|			И (КлючиИнвойсов.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиMemo.ArInvoice КАК ArInvoice,
		|	КлючиMemo.Company КАК Company,
		|	КлючиMemo.Memo КАК Memo
		|ПОМЕСТИТЬ ВТ_Memo
		|ИЗ
		|	РегистрСведений.КлючиMemo КАК КлючиMemo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиMemo.ArInvoice = ВТ_ДанныеФайла.Invoice
		|			И КлючиMemo.Company = ВТ_ДанныеФайла.Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.DepositDate КАК DepositDate,
		|	ВТ_ДанныеФайла.TransactionType КАК TransactionType,
		|	ВТ_Инвойсы.Invoice КАК Invoice,
		|	ВТ_CashBatch.CashBatch КАК CashBatch,
		|	ВТ_Memo.Memo КАК Memo
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_CashBatch КАК ВТ_CashBatch
		|		ПО ВТ_ДанныеФайла.BatchNbr = ВТ_CashBatch.BatchNbr
		|			И ВТ_ДанныеФайла.Company = ВТ_CashBatch.Company
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Инвойсы КАК ВТ_Инвойсы
		|		ПО ВТ_ДанныеФайла.Invoice = ВТ_Инвойсы.ArInvoice
		|			И ВТ_ДанныеФайла.Company = ВТ_Инвойсы.Company
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Memo КАК ВТ_Memo
		|		ПО ВТ_ДанныеФайла.Invoice = ВТ_Memo.ArInvoice
		|			И ВТ_ДанныеФайла.Company = ВТ_Memo.Company
		|ГДЕ
		|	НЕ ВТ_CashBatch.CashBatch.Ссылка ЕСТЬ NULL
		|	И (НЕ ВТ_Инвойсы.Invoice.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ ВТ_Memo.Memo.Ссылка ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбновленныеInvoice = Новый ТаблицаЗначений;
	ОбновленныеInvoice.Колонки.Добавить("Invoice", Новый ОписаниеТипов("ДокументСсылка.Invoice"));

	ОбновленныеMemo = Новый ТаблицаЗначений;
	ОбновленныеMemo.Колонки.Добавить("Memo", Новый ОписаниеТипов("ДокументСсылка.Memo"));
	
	НЗ = РегистрыСведений.LawsonDepositDates.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НЗ.Очистить();
		НЗ.Отбор.CashBatch.Установить(ВыборкаДетальныеЗаписи.CashBatch);
		Если ВыборкаДетальныеЗаписи.TransactionType = "I" Тогда
			
			НЗ.Отбор.Invoice.Установить(ВыборкаДетальныеЗаписи.Invoice);
			НоваяЗапись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			НоваяЗапись.DepositDate = РГСофт.ПреобразоватьВДату(ВыборкаДетальныеЗаписи.DepositDate, "Date");
			НЗ.Записать();
			
			СтрокаТЗ = ОбновленныеInvoice.Добавить();
			СтрокаТЗ.Invoice = ВыборкаДетальныеЗаписи.Invoice;
			
		ИначеЕсли ВыборкаДетальныеЗаписи.TransactionType = "D" Тогда
			
			НЗ.Отбор.Invoice.Установить(ВыборкаДетальныеЗаписи.Memo);
			НоваяЗапись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			НоваяЗапись.Invoice = ВыборкаДетальныеЗаписи.Memo;
			НоваяЗапись.DepositDate = РГСофт.ПреобразоватьВДату(ВыборкаДетальныеЗаписи.DepositDate, "Date");
			НЗ.Записать();
			
			СтрокаТЗ = ОбновленныеMemo.Добавить();
			СтрокаТЗ.Memo = ВыборкаДетальныеЗаписи.Memo;
			
		КонецЕсли;

	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ОбновленныеInvoice", ОбновленныеInvoice);
	ДанныеДляЗаполнения.Вставить("ОбновленныеMemo", ОбновленныеMemo);
	ДанныеДляЗаполнения.Вставить("СтатусЗагрузки", Перечисления.СтатусыЗагрузки.UpdatedDocuments);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура СоздатьNoteAllocationПоФайлу(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	XR223SourceData.Invoice КАК CreditNoteNum,
		|	XR223SourceData.PaymentTransactionNum КАК InvoiceMemoNum,
		|	XR223SourceData.GlDate КАК GlDate,
		|	XR223SourceData.TransactionType КАК TransactionType,
		|	XR223SourceData.PaymentType КАК PaymentType,
		|	XR223SourceData.OrigApplicationAmt КАК OrigApplicationAmt,
		|	Организации.Ссылка КАК Company
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.XR223SourceData КАК XR223SourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО XR223SourceData.Company = Организации.Код
		|			И (Организации.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|ГДЕ
		|	XR223SourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И XR223SourceData.TransactionType = ""C""
		|	И (XR223SourceData.PaymentType = ""I""
		|			ИЛИ XR223SourceData.PaymentType = ""D"")
		|	И XR223SourceData.Invoice <> XR223SourceData.PaymentTransactionNum
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
		|	КлючиИнвойсов.Company КАК Company,
		|	КлючиИнвойсов.Invoice КАК CreditNote
		|ПОМЕСТИТЬ ВТ_CreditNote
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.CreditNoteNum
		|			И КлючиИнвойсов.Company = ВТ_ДанныеФайла.Company
		|			И (КлючиИнвойсов.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиMemo.ArInvoice,
		|	КлючиMemo.Company,
		|	КлючиMemo.Memo
		|ИЗ
		|	РегистрСведений.КлючиMemo КАК КлючиMemo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиMemo.ArInvoice = ВТ_ДанныеФайла.CreditNoteNum
		|			И КлючиMemo.Company = ВТ_ДанныеФайла.Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
		|	КлючиИнвойсов.Company КАК Company,
		|	КлючиИнвойсов.Invoice КАК InvoiceMemo
		|ПОМЕСТИТЬ ВТ_InvoiceMemo
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.InvoiceMemoNum
		|			И КлючиИнвойсов.Company = ВТ_ДанныеФайла.Company
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиMemo.ArInvoice,
		|	КлючиMemo.Company,
		|	КлючиMemo.Memo
		|ИЗ
		|	РегистрСведений.КлючиMemo КАК КлючиMemo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиMemo.ArInvoice = ВТ_ДанныеФайла.InvoiceMemoNum
		|			И КлючиMemo.Company = ВТ_ДанныеФайла.Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.GlDate КАК GlDate,
		|	ВТ_ДанныеФайла.TransactionType КАК TransactionType,
		|	ВТ_ДанныеФайла.PaymentType КАК PaymentType,
		|	СУММА(ВТ_ДанныеФайла.OrigApplicationAmt) КАК OrigApplicationAmt,
		|	ВТ_CreditNote.CreditNote КАК CreditNote,
		|	ВТ_InvoiceMemo.InvoiceMemo КАК InvoiceMemo
		|ПОМЕСТИТЬ ВТ_НайденныеДокументы
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_CreditNote КАК ВТ_CreditNote
		|		ПО ВТ_ДанныеФайла.CreditNoteNum = ВТ_CreditNote.ArInvoice
		|			И ВТ_ДанныеФайла.Company = ВТ_CreditNote.Company
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_InvoiceMemo КАК ВТ_InvoiceMemo
		|		ПО ВТ_ДанныеФайла.InvoiceMemoNum = ВТ_InvoiceMemo.ArInvoice
		|			И ВТ_ДанныеФайла.Company = ВТ_InvoiceMemo.Company
		|ГДЕ
		|	НЕ ВТ_CreditNote.CreditNote.Ссылка ЕСТЬ NULL
		|	И НЕ ВТ_InvoiceMemo.InvoiceMemo.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеФайла.PaymentType,
		|	ВТ_ДанныеФайла.GlDate,
		|	ВТ_CreditNote.CreditNote,
		|	ВТ_InvoiceMemo.InvoiceMemo,
		|	ВТ_ДанныеФайла.TransactionType
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_ДанныеФайла.OrigApplicationAmt) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НайденныеДокументы.GlDate КАК GlDate,
		|	ВТ_НайденныеДокументы.CreditNote КАК CreditNote,
		|	ВТ_НайденныеДокументы.InvoiceMemo КАК InvoiceMemo,
		|	ВТ_НайденныеДокументы.OrigApplicationAmt КАК Amount,
		|	BilledARОстатки.Client КАК Client,
		|	BilledARОстатки.Company КАК Company,
		|	BilledARОстатки.Source КАК Source,
		|	BilledARОстатки.Account КАК Account,
		|	BilledARОстатки.AU КАК AU,
		|	BilledARОстатки.Currency КАК Currency,
		|	BilledARОстатки.LegalEntity КАК LegalEntity,
		|	BilledARОстатки.ClientID КАК ClientID,
		|	ВЫБОР
		|		КОГДА ВТ_НайденныеДокументы.InvoiceMemo ССЫЛКА Документ.Invoice
		|				И ВТ_НайденныеДокументы.CreditNote ССЫЛКА Документ.Invoice
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийNoteAllocation.CreditNote)
		|		КОГДА ВТ_НайденныеДокументы.InvoiceMemo ССЫЛКА Документ.Memo
		|				И ВТ_НайденныеДокументы.CreditNote ССЫЛКА Документ.Invoice
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийNoteAllocation.CreditMemo)
		|		КОГДА ВТ_НайденныеДокументы.InvoiceMemo ССЫЛКА Документ.Memo
		|				И ВТ_НайденныеДокументы.CreditNote ССЫЛКА Документ.Memo
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийNoteAllocation.DebitMemo)
		|	КОНЕЦ КАК ВидОперацииNoteAllocation,
		|	ВЫБОР
		|		КОГДА ВТ_НайденныеДокументы.InvoiceMemo ССЫЛКА Документ.Invoice
		|				И ВТ_НайденныеДокументы.CreditNote ССЫЛКА Документ.Memo
		|			ТОГДА ""CreditNote with memo type and Invoice in Base document""
		|		КОГДА ВТ_НайденныеДокументы.PaymentType = ""D""
		|				И ВТ_НайденныеДокументы.InvoiceMemo ССЫЛКА Документ.Invoice
		|			ТОГДА ""Payment type D for Invoice""
		|		КОГДА ЕСТЬNULL(BilledARОстатки.AmountОстаток, 0) = 0
		|			ТОГДА ""No balance of the invoice""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СообщениеОбОшибке,
		|	BilledARОстатки.AmountОстаток КАК AmountОстаток
		|ИЗ
		|	ВТ_НайденныеДокументы КАК ВТ_НайденныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.NoteAllocation.CreditNotes КАК NoteAllocationCreditNotes
		|		ПО (НАЧАЛОПЕРИОДА(ВТ_НайденныеДокументы.GlDate, ДЕНЬ) = НАЧАЛОПЕРИОДА(NoteAllocationCreditNotes.Ссылка.Дата, ДЕНЬ))
		|			И ВТ_НайденныеДокументы.CreditNote = NoteAllocationCreditNotes.CreditNote
		|			И ВТ_НайденныеДокументы.InvoiceMemo = NoteAllocationCreditNotes.Ссылка.Invoice
		|			И (NoteAllocationCreditNotes.Ссылка.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.BilledAR.Остатки(, Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)) КАК BilledARОстатки
		|		ПО ВТ_НайденныеДокументы.CreditNote = BilledARОстатки.Invoice
		|ГДЕ
		|	NoteAllocationCreditNotes.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	МассивРезультатов = Запрос.Выполнить();
	
	ВыборкаДляNoteAllocation = МассивРезультатов.Выбрать();

	//ДокументыСДублями = МассивРезультатов[8].Выгрузить();
	
	СписокТиповДокументов = Новый Массив;
	СписокТиповДокументов.Добавить("ДокументСсылка.Invoice");
	СписокТиповДокументов.Добавить("ДокументСсылка.Memo");
	
	ПроблемныеДокументы = Новый ТаблицаЗначений;
	ПроблемныеДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов(СписокТиповДокументов));
	ПроблемныеДокументы.Колонки.Добавить("Комментарий", Новый ОписаниеТипов(СписокТиповДокументов));
	
	//ПроблемныеДокументы = ДокументыСДублями;

	СозданныеNoteAllocations = Новый ТаблицаЗначений;
	СозданныеNoteAllocations.Колонки.Добавить("NoteAllocation", Новый ОписаниеТипов("ДокументСсылка.NoteAllocation"));
	
	ТекстОшибок = "";
	
	НачатьТранзакцию();
	
	Пока ВыборкаДляNoteAllocation.Следующий() Цикл
		
		Если ВыборкаДляNoteAllocation.СообщениеОбОшибке = "" Тогда
			
			ДокументNoteAllocation = Документы.NoteAllocation.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокументNoteAllocation, ВыборкаДляNoteAllocation);
			ДокументNoteAllocation.Дата = ВыборкаДляNoteAllocation.GlDate;
			ДокументNoteAllocation.Invoice = ВыборкаДляNoteAllocation.InvoiceMemo;
			ДокументNoteAllocation.Комментарий = "Автоаллокация по документу - " + СтруктураПараметров.Ссылка;
			СтрокаТабЧасти = ДокументNoteAllocation.CreditNotes.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, ВыборкаДляNoteAllocation);
			ДокументNoteAllocation.Записать();
			
			ТекДок = ДокументNoteAllocation.Ссылка.ПолучитьОбъект();
			Попытка
				ТекДок.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибок = "NoteAllocation are not made because the problem with the documents: " + ВыборкаДляNoteAllocation.InvoiceMemo + Символы.ПС +
					ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
				ВызватьИсключение ТекстОшибок;
				ОтменитьТранзакцию();
			КонецПопытки;
			
			
			СтрокаТЗ = СозданныеNoteAllocations.Добавить();
			СтрокаТЗ.NoteAllocation = ТекДок.Ссылка;
			
		Иначе
			
			НоваяСтрокаПроблемныхДокументов = ПроблемныеДокументы.Добавить();
			НоваяСтрокаПроблемныхДокументов.Документ = ВыборкаДляNoteAllocation.CreditNote;
			НоваяСтрокаПроблемныхДокументов.Комментарий = ВыборкаДляNoteAllocation.СообщениеОбОшибке;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если СозданныеNoteAllocations.Количество() > 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "☆ NoteAllocations  created ☆ Best regards, your ERM ッ";
		Сообщение.Сообщить();;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "☆ Documents for NoteAllocation not found in file ☆ Best regards, your ERM ッ";
		Сообщение.Сообщить();
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ПроблемныеДокументы", ПроблемныеДокументы);
	ДанныеДляЗаполнения.Вставить("СозданныеNoteAllocations", СозданныеNoteAllocations);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
	
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура _СоздатьNoteAllocationПоФайлу(СтруктураПараметров, АдресХранилища) Экспорт
	
	ЗапросДата = Новый Запрос;
	ЗапросДата.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	XR223SourceData.GlDate КАК GlDate
		|ИЗ
		|	РегистрСведений.XR223SourceData КАК XR223SourceData
		|ГДЕ
		|	XR223SourceData.ДокументЗагрузки = &ДокументЗагрузки";
	
	ЗапросДата.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	РезультатЗапросаДата = ЗапросДата.Выполнить();
	
	ВыборкаДата = РезультатЗапросаДата.Выбрать();
	ВыборкаДата.Следующий();
	ДатаОстатков = КонецМесяца(ВыборкаДата.GlDate);
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	XR223SourceData.Invoice КАК CreditNoteNum,
		|	XR223SourceData.PaymentTransactionNum КАК InvoiceMemoNum,
		|	XR223SourceData.GlDate КАК GlDate,
		|	XR223SourceData.TransactionType КАК TransactionType,
		|	XR223SourceData.PaymentType КАК PaymentType,
		|	Организации.Ссылка КАК Company
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.XR223SourceData КАК XR223SourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО XR223SourceData.Company = Организации.Код
		|			И (Организации.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|ГДЕ
		|	XR223SourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И XR223SourceData.TransactionType = ""C""
		|	И (XR223SourceData.PaymentType = ""I""
		|			ИЛИ XR223SourceData.PaymentType = ""D"")
		|	И XR223SourceData.Invoice <> XR223SourceData.PaymentTransactionNum
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
		|	КлючиИнвойсов.Company КАК Company,
		|	КлючиИнвойсов.Invoice КАК CreditNote
		|ПОМЕСТИТЬ ВТ_CreditNote
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.CreditNoteNum
		|			И КлючиИнвойсов.Company = ВТ_ДанныеФайла.Company
		|			И (КлючиИнвойсов.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиMemo.ArInvoice,
		|	КлючиMemo.Company,
		|	КлючиMemo.Memo
		|ИЗ
		|	РегистрСведений.КлючиMemo КАК КлючиMemo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиMemo.ArInvoice = ВТ_ДанныеФайла.CreditNoteNum
		|			И КлючиMemo.Company = ВТ_ДанныеФайла.Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
		|	КлючиИнвойсов.Company КАК Company,
		|	КлючиИнвойсов.Invoice КАК InvoiceMemo
		|ПОМЕСТИТЬ ВТ_InvoiceMemo
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.InvoiceMemoNum
		|			И КлючиИнвойсов.Company = ВТ_ДанныеФайла.Company
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиMemo.ArInvoice,
		|	КлючиMemo.Company,
		|	КлючиMemo.Memo
		|ИЗ
		|	РегистрСведений.КлючиMemo КАК КлючиMemo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиMemo.ArInvoice = ВТ_ДанныеФайла.InvoiceMemoNum
		|			И КлючиMemo.Company = ВТ_ДанныеФайла.Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.GlDate КАК GlDate,
		|	ВТ_ДанныеФайла.TransactionType КАК TransactionType,
		|	ВТ_ДанныеФайла.PaymentType КАК PaymentType,
		|	ВТ_CreditNote.CreditNote КАК CreditNote,
		|	ВТ_InvoiceMemo.InvoiceMemo КАК InvoiceMemo
		|ПОМЕСТИТЬ ВТ_НайденныеДокументы
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_CreditNote КАК ВТ_CreditNote
		|		ПО ВТ_ДанныеФайла.CreditNoteNum = ВТ_CreditNote.ArInvoice
		|			И ВТ_ДанныеФайла.Company = ВТ_CreditNote.Company
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_InvoiceMemo КАК ВТ_InvoiceMemo
		|		ПО ВТ_ДанныеФайла.InvoiceMemoNum = ВТ_InvoiceMemo.ArInvoice
		|			И ВТ_ДанныеФайла.Company = ВТ_InvoiceMemo.Company
		|ГДЕ
		|	НЕ ВТ_CreditNote.CreditNote.Ссылка ЕСТЬ NULL
		|	И НЕ ВТ_InvoiceMemo.InvoiceMemo.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НайденныеДокументы.GlDate КАК GlDate,
		|	ВТ_НайденныеДокументы.TransactionType КАК TransactionType,
		|	ВТ_НайденныеДокументы.PaymentType КАК PaymentType,
		|	ВТ_НайденныеДокументы.InvoiceMemo КАК InvoiceMemo,
		|	ВТ_НайденныеДокументы.CreditNote КАК CreditNote,
		|	BilledARОстаткиCreditNote.AmountОстаток КАК Amount,
		|	BilledARОстаткиCreditNote.Client КАК Client,
		|	BilledARОстаткиCreditNote.Company КАК Company,
		|	BilledARОстаткиCreditNote.Source КАК Source,
		|	BilledARОстаткиCreditNote.Account КАК Account,
		|	BilledARОстаткиCreditNote.AU КАК AU,
		|	BilledARОстаткиCreditNote.Currency КАК Currency,
		|	BilledARОстаткиCreditNote.LegalEntity КАК LegalEntity,
		|	BilledARОстаткиCreditNote.ClientID КАК ClientID,
		|	""BilledAR"" КАК ИмяРегистра,
		|	ЕСТЬNULL(BilledARОстаткиInvoiceMemo.AmountОстаток, 0) КАК AmountInvoiceMemo
		|ПОМЕСТИТЬ ВТ_ДокументыСБалансами
		|ИЗ
		|	ВТ_НайденныеДокументы КАК ВТ_НайденныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.BilledAR.Остатки(&ДатаОстатков, ) КАК BilledARОстаткиCreditNote
		|		ПО ВТ_НайденныеДокументы.CreditNote = BilledARОстаткиCreditNote.Invoice
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.BilledAR.Остатки(&ДатаОстатков, ) КАК BilledARОстаткиInvoiceMemo
		|		ПО ВТ_НайденныеДокументы.InvoiceMemo = BilledARОстаткиInvoiceMemo.Invoice
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НайденныеДокументы.GlDate,
		|	ВТ_НайденныеДокументы.TransactionType,
		|	ВТ_НайденныеДокументы.PaymentType,
		|	ВТ_НайденныеДокументы.InvoiceMemo,
		|	ВТ_НайденныеДокументы.CreditNote,
		|	UnallocatedMemoОстаткиCreditNote.AmountОстаток,
		|	UnallocatedMemoОстаткиCreditNote.Client,
		|	UnallocatedMemoОстаткиCreditNote.Company,
		|	UnallocatedMemoОстаткиCreditNote.Source,
		|	UnallocatedMemoОстаткиCreditNote.Account,
		|	UnallocatedMemoОстаткиCreditNote.AU,
		|	UnallocatedMemoОстаткиCreditNote.Currency,
		|	UnallocatedMemoОстаткиCreditNote.LegalEntity,
		|	UnallocatedMemoОстаткиCreditNote.ClientID,
		|	""UnallocatedMemo"",
		|	ЕСТЬNULL(UnallocatedMemoОстаткиInvoiceMemo.AmountОстаток, 0)
		|ИЗ
		|	ВТ_НайденныеДокументы КАК ВТ_НайденныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.UnallocatedMemo.Остатки(&ДатаОстатков, ) КАК UnallocatedMemoОстаткиCreditNote
		|		ПО ВТ_НайденныеДокументы.CreditNote = UnallocatedMemoОстаткиCreditNote.Memo
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.UnallocatedMemo.Остатки(&ДатаОстатков, ) КАК UnallocatedMemoОстаткиInvoiceMemo
		|		ПО ВТ_НайденныеДокументы.InvoiceMemo = UnallocatedMemoОстаткиInvoiceMemo.Memo
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыСБалансами.GlDate КАК GlDate,
		|	ВТ_ДокументыСБалансами.TransactionType КАК TransactionType,
		|	ВТ_ДокументыСБалансами.PaymentType КАК PaymentType,
		|	ВТ_ДокументыСБалансами.InvoiceMemo КАК InvoiceMemo,
		|	ВТ_ДокументыСБалансами.CreditNote КАК CreditNote,
		|	СУММА(ВТ_ДокументыСБалансами.Amount) КАК Amount,
		|	ВТ_ДокументыСБалансами.Client КАК Client,
		|	ВТ_ДокументыСБалансами.Company КАК Company,
		|	ВТ_ДокументыСБалансами.Source КАК Source,
		|	ВТ_ДокументыСБалансами.Account КАК Account,
		|	ВТ_ДокументыСБалансами.AU КАК AU,
		|	ВТ_ДокументыСБалансами.Currency КАК Currency,
		|	ВТ_ДокументыСБалансами.LegalEntity КАК LegalEntity,
		|	ВТ_ДокументыСБалансами.ClientID КАК ClientID,
		|	МИНИМУМ(ВТ_ДокументыСБалансами.ИмяРегистра) КАК ИмяРегистра,
		|	СУММА(ВТ_ДокументыСБалансами.AmountInvoiceMemo) КАК AmountInvoiceMemo
		|ПОМЕСТИТЬ ВТ_ДокументыСБалансамиГруппировка
		|ИЗ
		|	ВТ_ДокументыСБалансами КАК ВТ_ДокументыСБалансами
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДокументыСБалансами.GlDate,
		|	ВТ_ДокументыСБалансами.TransactionType,
		|	ВТ_ДокументыСБалансами.PaymentType,
		|	ВТ_ДокументыСБалансами.InvoiceMemo,
		|	ВТ_ДокументыСБалансами.CreditNote,
		|	ВТ_ДокументыСБалансами.Client,
		|	ВТ_ДокументыСБалансами.Company,
		|	ВТ_ДокументыСБалансами.Source,
		|	ВТ_ДокументыСБалансами.Account,
		|	ВТ_ДокументыСБалансами.AU,
		|	ВТ_ДокументыСБалансами.Currency,
		|	ВТ_ДокументыСБалансами.LegalEntity,
		|	ВТ_ДокументыСБалансами.ClientID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДокументыСБалансамиГруппировка.CreditNote КАК CreditNote,
		|	КОЛИЧЕСТВО(ВТ_ДокументыСБалансамиГруппировка.InvoiceMemo) КАК InvoiceMemo
		|ПОМЕСТИТЬ ВТ_ДокументыСДублями
		|ИЗ
		|	ВТ_ДокументыСБалансамиГруппировка КАК ВТ_ДокументыСБалансамиГруппировка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДокументыСБалансамиГруппировка.CreditNote
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ВТ_ДокументыСБалансамиГруппировка.InvoiceMemo) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыСБалансамиГруппировка.GlDate КАК GlDate,
		|	ВТ_ДокументыСБалансамиГруппировка.TransactionType КАК TransactionType,
		|	ВТ_ДокументыСБалансамиГруппировка.InvoiceMemo КАК InvoiceMemo,
		|	ВТ_ДокументыСБалансамиГруппировка.CreditNote КАК CreditNote,
		|	-ВТ_ДокументыСБалансамиГруппировка.Amount КАК Amount,
		|	ВТ_ДокументыСБалансамиГруппировка.Client КАК Client,
		|	ВТ_ДокументыСБалансамиГруппировка.Company КАК Company,
		|	ВТ_ДокументыСБалансамиГруппировка.Source КАК Source,
		|	ВТ_ДокументыСБалансамиГруппировка.Account КАК Account,
		|	ВТ_ДокументыСБалансамиГруппировка.AU КАК AU,
		|	ВТ_ДокументыСБалансамиГруппировка.Currency КАК Currency,
		|	ВТ_ДокументыСБалансамиГруппировка.LegalEntity КАК LegalEntity,
		|	ВТ_ДокументыСБалансамиГруппировка.ClientID КАК ClientID,
		|	ВТ_ДокументыСБалансамиГруппировка.ИмяРегистра КАК ИмяРегистра,
		|	ВЫБОР
		|		КОГДА ВТ_ДокументыСБалансамиГруппировка.InvoiceMemo ССЫЛКА Документ.Invoice
		|				И ВТ_ДокументыСБалансамиГруппировка.CreditNote ССЫЛКА Документ.Invoice
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийNoteAllocation.CreditNote)
		|		КОГДА ВТ_ДокументыСБалансамиГруппировка.InvoiceMemo ССЫЛКА Документ.Memo
		|				И ВТ_ДокументыСБалансамиГруппировка.CreditNote ССЫЛКА Документ.Invoice
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийNoteAllocation.CreditMemo)
		|		КОГДА ВТ_ДокументыСБалансамиГруппировка.InvoiceMemo ССЫЛКА Документ.Memo
		|				И ВТ_ДокументыСБалансамиГруппировка.CreditNote ССЫЛКА Документ.Memo
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийNoteAllocation.DebitMemo)
		|	КОНЕЦ КАК ВидОперацииNoteAllocation,
		|	ВЫБОР
		|		КОГДА ВТ_ДокументыСБалансамиГруппировка.InvoiceMemo ССЫЛКА Документ.Invoice
		|				И ВТ_ДокументыСБалансамиГруппировка.CreditNote ССЫЛКА Документ.Memo
		|			ТОГДА ""CreditNote with memo type and Invoice in Base document""
		|		КОГДА ВТ_ДокументыСБалансамиГруппировка.AmountInvoiceMemo = 0
		|			ТОГДА ""Invoice without balance""
		|		КОГДА ВТ_ДокументыСБалансамиГруппировка.PaymentType = ""D""
		|				И ВТ_ДокументыСБалансамиГруппировка.InvoiceMemo ССЫЛКА Документ.Invoice
		|			ТОГДА ""Payment type D for Invoice""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СообщениеОбОшибке
		|ИЗ
		|	ВТ_ДокументыСБалансамиГруппировка КАК ВТ_ДокументыСБалансамиГруппировка
		|ГДЕ
		|	НЕ ВТ_ДокументыСБалансамиГруппировка.CreditNote В
		|				(ВЫБРАТЬ
		|					ВТ_ДокументыСДублями.CreditNote
		|				ИЗ
		|					ВТ_ДокументыСДублями КАК ВТ_ДокументыСДублями)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыСДублями.CreditNote КАК Документ,
		|	""in the XR223 this credit note applies to several invoices"" КАК Комментарий
		|ИЗ
		|	ВТ_ДокументыСДублями КАК ВТ_ДокументыСДублями";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков,ВидГраницы.Включая));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаДляNoteAllocation = МассивРезультатов[7].Выбрать();

	ДокументыСДублями = МассивРезультатов[8].Выгрузить();
	
	СписокТиповДокументов = Новый Массив;
	СписокТиповДокументов.Добавить("ДокументСсылка.Invoice");
	СписокТиповДокументов.Добавить("ДокументСсылка.Memo");
	
	ПроблемныеДокументы = Новый ТаблицаЗначений;
	ПроблемныеДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов(СписокТиповДокументов));
	ПроблемныеДокументы.Колонки.Добавить("Комментарий", Новый ОписаниеТипов(СписокТиповДокументов));
	
	ПроблемныеДокументы = ДокументыСДублями;

	СозданныеNoteAllocations = Новый ТаблицаЗначений;
	СозданныеNoteAllocations.Колонки.Добавить("NoteAllocation", Новый ОписаниеТипов("ДокументСсылка.NoteAllocation"));
	
	ТекстОшибок = "";
	
	НачатьТранзакцию();
	
	Пока ВыборкаДляNoteAllocation.Следующий() Цикл
		
		Если ВыборкаДляNoteAllocation.СообщениеОбОшибке = "" Тогда
			
			ДокументNoteAllocation = Документы.NoteAllocation.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокументNoteAllocation, ВыборкаДляNoteAllocation);
			ДокументNoteAllocation.Дата = ВыборкаДляNoteAllocation.GlDate;
			ДокументNoteAllocation.Invoice = ВыборкаДляNoteAllocation.InvoiceMemo;
			ДокументNoteAllocation.Комментарий = "Автоаллокация по документу:" + СтруктураПараметров.Ссылка;
			СтрокаТабЧасти = ДокументNoteAllocation.CreditNotes.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, ВыборкаДляNoteAllocation);
			ДокументNoteAllocation.Записать();
			
			ТекДок = ДокументNoteAllocation.Ссылка.ПолучитьОбъект();
			Попытка
				ТекДок.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибок = "NoteAllocation are not made because the problem with the documents: " + ВыборкаДляNoteAllocation.InvoiceMemo + Символы.ПС +
					ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
				ВызватьИсключение ТекстОшибок;
				ОтменитьТранзакцию();
			КонецПопытки;
			
			
			СтрокаТЗ = СозданныеNoteAllocations.Добавить();
			СтрокаТЗ.NoteAllocation = ТекДок.Ссылка;
			
		Иначе
			
			НоваяСтрокаПроблемныхДокументов = ПроблемныеДокументы.Добавить();
			НоваяСтрокаПроблемныхДокументов.Документ = ВыборкаДляNoteAllocation.CreditNote;
			НоваяСтрокаПроблемныхДокументов.Комментарий = ВыборкаДляNoteAllocation.СообщениеОбОшибке;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если СозданныеNoteAllocations.Количество() > 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "☆ NoteAllocations  created ☆ Best regards, your ERM ッ";
		Сообщение.Сообщить();;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "☆ Documents for NoteAllocation not found in file ☆ Best regards, your ERM ッ";
		Сообщение.Сообщить();
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ПроблемныеДокументы", ПроблемныеДокументы);
	ДанныеДляЗаполнения.Вставить("СозданныеNoteAllocations", СозданныеNoteAllocations);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
	
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

#КонецЕсли
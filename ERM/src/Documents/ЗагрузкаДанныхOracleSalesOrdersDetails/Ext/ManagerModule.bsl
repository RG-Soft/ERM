#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	
	ДанныеДляЗаполнения = Новый Структура();
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	ТекстОшибки = "";
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsb");
	ФайлЭксель = СтруктураПараметров.ИсточникДанных.Получить();
	ФайлЭксель.Записать(ПутьКФайлу);
	
	УдалитьШапкуФайла(ПутьКФайлу, СтруктураПараметров);
	
	rgsЗагрузкаИзExcel.ВыгрузитьЭксельВТаблицуДанныхПоИменамКолонок(ПутьКФайлу, ТаблицаДанных, ДанныеДляЗаполнения, АдресХранилища, СтруктураПараметров);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСтруктуруКолонокТаблицыДанных() Экспорт
	
	СтруктураКолонок = Новый ТаблицаЗначений;
	СтруктураКолонок.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	
	ПолучитьСтруктуруКолонокТаблицыДанныхSODetails(СтруктураКолонок);
	
	Возврат СтруктураКолонок;
	
КонецФункции

Процедура ПолучитьСтруктуруКолонокТаблицыДанныхSODetails(СтруктураКолонок)
	
	// Order Number
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "НомерSO";
	СтрокаТЗ.ИмяКолонки = "Order Number";
	//СтрокаТЗ.НомерКолонки = 1;
	
	//// YearMonth
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "YearMonth";
	//СтрокаТЗ.ИмяКолонки = "YearMonth";
	//
	//// BillingAccount
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "BillingAccount";
	//СтрокаТЗ.ИмяКолонки = "Billing Account";
	//
	//// BillingAccountID
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "BillingAccountID";
	//СтрокаТЗ.ИмяКолонки = "Billing Account ID";
	//
	// Customer Number
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerNumber";
	СтрокаТЗ.ИмяКолонки = "Customer Number";
	
	// Agreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Agreement";
	СтрокаТЗ.ИмяКолонки = "Agreement";
	
	//// AgreementName
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "AgreementName";
	//СтрокаТЗ.ИмяКолонки = "Agreement Name";
	//
	//// Agreement Status
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "AgreementStatus";
	//СтрокаТЗ.ИмяКолонки = "Agreement Status";
	//
	//// Agreement Type
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "AgreementType";
	//СтрокаТЗ.ИмяКолонки = "Agreement Type";
	//
	//// Effective Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "EffectiveDate";
	//СтрокаТЗ.ИмяКолонки = "Effective Date";
	//
	//// Expiration Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "ExpirationDate";
	//СтрокаТЗ.ИмяКолонки = "Expiration Date";
	
	// COMPANY
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "COMPANY";
	
	//// Order ID
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderID";
	//СтрокаТЗ.ИмяКолонки = "Order ID";
	
	// DOC_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_ID";
	СтрокаТЗ.ИмяКолонки = "DOC_ID";
	
	// Customer Name
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerRepresentative";
	СтрокаТЗ.ИмяКолонки = "Customer Name";
	
	// ApprovedBy
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ApprovedBy";
	СтрокаТЗ.ИмяКолонки = "ApprovedBy";
	
	// CreatedBy
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreatedBy";
	СтрокаТЗ.ИмяКолонки = "CreatedBy";
	
	//// Exchange Rate
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "ExchangeRate";
	//СтрокаТЗ.ИмяКолонки = "Exchange Rate";
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	
	//// Credit Memo Reason
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "CreditMemoReason";
	//СтрокаТЗ.ИмяКолонки = "Credit Memo Reason";
	//
	//// Dual Currency Status
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "DualCurrencyStatus";
	//СтрокаТЗ.ИмяКолонки = "Dual Currency Status";
	//
	//// Evidence Of Delivery
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "EvidenceOfDelivery";
	//СтрокаТЗ.ИмяКолонки = "Evidence Of Delivery";
	
	// FTLCreatedBy
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FTLCreatedBy";
	СтрокаТЗ.ИмяКолонки = "FTLCreatedBy";
	
	//// FTL Approver ID
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FTLApproverID";
	//СтрокаТЗ.ИмяКолонки = "FTL Approver ID";
	//
	// ERPStatus
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ERPStatus";
	СтрокаТЗ.ИмяКолонки = "ERPStatus";
	
	//// Order Currency
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderCurrencyAmount";
	//СтрокаТЗ.ИмяКолонки = "Order Currency";
	//
	//// Order (USD)
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderUSDAmount";
	//СтрокаТЗ.ИмяКолонки = "Order (USD)";
	
	//JobEndDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "JobEndDate";
	СтрокаТЗ.ИмяКолонки = "JobEndDate";
	
	// CreationDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreationDate";
	СтрокаТЗ.ИмяКолонки = "CreationDate";
	
	//// Order Job Start Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderJobStartDate";
	//СтрокаТЗ.ИмяКолонки = "Order Job Start Date";
	//
	//// Field Ticket Creation Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FieldTicketCreationDate";
	//СтрокаТЗ.ИмяКолонки = "Field Ticket Creation Date";
	//
	//// FTL Approval Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FTLApprovalDate";
	//СтрокаТЗ.ИмяКолонки = "FTL Approval Date";
	
	// FTLSubmissionDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FTLSubmissionDate";
	СтрокаТЗ.ИмяКолонки = "FTLSubmissionDate";
	
	// FirstSubmissionDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FirstSubmissionDate";
	СтрокаТЗ.ИмяКолонки = "FirstSubmissionDate";
	
	//// Request to Approve Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "RequestToApproveDate";
	//СтрокаТЗ.ИмяКолонки = "Request to Approve Date";
	//
	// ApprovalDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ApprovalDate";
	СтрокаТЗ.ИмяКолонки = "ApprovalDate";
	
	//// Accrue Flag Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "AccrueFlagDate";
	//СтрокаТЗ.ИмяКолонки = "Accrue Flag Date";
	//
	// InvoiceFlagDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceFlagDate";
	СтрокаТЗ.ИмяКолонки = "InvoiceFlagDate";
	
	//// Last Updated Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "LastUpdatedDate";
	//СтрокаТЗ.ИмяКолонки = "Last Updated Date";
	
	// FieldTicket
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FieldTicket";
	СтрокаТЗ.ИмяКолонки = "FieldTicket";
	
КонецПроцедуры

Процедура УдалитьШапкуФайла(ПутьКФайлу, СтруктураПараметров)
	
	ЭкземплярExcel = Новый COMОбъект("Excel.Application");
	Книга = ЭкземплярExcel.Application.Workbooks.Open(ПутьКФайлу);
	
	ИмяЛиста = СтруктураПараметров.ЛистФайла;
	Если Прав(ИмяЛиста, 1) = "$" Тогда
		ИмяЛиста = Лев(ИмяЛиста, СтрДлина(ИмяЛиста) - 1);
	КонецЕсли;
	
	Лист = ЭкземплярExcel.Worksheets(ИмяЛиста);
	
	// в качестве ориентиров будем использовать колонки SOURCE_SYSTEM, GL_ACCOUNT, ID_ORIG
	НомерСтрокиЗаголовка = 1;
	
	Для ТекНомерСтроки = 1 По 100 Цикл
		
		НайденаOrderNumber = Ложь;
		//НайденаGlAccount = Ложь;
		НайденаDOC_ID = Ложь;
		
		Для ТекНомерСтолбца = 1 По 100 Цикл
			
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "Order Number" Тогда
				НайденаOrderNumber = Истина;
			КонецЕсли;
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "DOC_ID" Тогда
				НайденаDOC_ID = Истина;
			КонецЕсли;
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "ID_ORIG" Тогда
				НайденаIdOrig = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденаOrderNumber И НайденаDOC_ID Тогда
			НомерСтрокиЗаголовка = ТекНомерСтроки;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерСтрокиЗаголовка > 1 Тогда
		
		СтрокиДляУдаления = Лист.Rows("1:" + Строка(НомерСтрокиЗаголовка - 1));
		СтрокиДляУдаления.Delete();
		//Книга.SaveAs(ПутьКФайлу);
		Книга.Save();
		
	КонецЕсли;
	
	ЭкземплярExcel.Quit();
	ЭкземплярExcel = Неопределено;
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.OracleSalesOrdersDetailsSourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ОбновитьРеквизитыSalesOrders(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	OracleSalesOrdersDetailsSourceData.ДокументЗагрузки КАК ДокументЗагрузки,
	|	OracleSalesOrdersDetailsSourceData.НомерSO КАК НомерSO,
	|	OracleSalesOrdersDetailsSourceData.CustomerNumber КАК CustomerNumber,
	|	OracleSalesOrdersDetailsSourceData.Agreement КАК Agreement,
	|	OracleSalesOrdersDetailsSourceData.CompanyCode КАК CompanyCode,
	|	OracleSalesOrdersDetailsSourceData.CustomerRepresentative КАК CustomerRepresentative,
	|	OracleSalesOrdersDetailsSourceData.ApprovedBy КАК ApprovedBy,
	|	OracleSalesOrdersDetailsSourceData.CreatedBy КАК CreatedBy,
	|	OracleSalesOrdersDetailsSourceData.Currency КАК Currency,
	|	OracleSalesOrdersDetailsSourceData.FTLCreatedBy КАК FTLCreatedBy,
	|	OracleSalesOrdersDetailsSourceData.ERPStatus КАК ERPStatus,
	|	OracleSalesOrdersDetailsSourceData.JobEndDate КАК JobEndDate,
	|	OracleSalesOrdersDetailsSourceData.CreationDate КАК CreationDate,
	|	OracleSalesOrdersDetailsSourceData.FTLSubmissionDate КАК FTLSubmissionDate,
	|	OracleSalesOrdersDetailsSourceData.FirstSubmissionDate КАК FirstSubmissionDate,
	|	OracleSalesOrdersDetailsSourceData.ApprovalDate КАК ApprovalDate,
	|	OracleSalesOrdersDetailsSourceData.InvoiceFlagDate КАК InvoiceFlagDate,
	|	OracleSalesOrdersDetailsSourceData.FieldTicket КАК FieldTicket,
	|	OracleSalesOrdersDetailsSourceData.DOC_ID КАК DOC_ID
	|ПОМЕСТИТЬ Исходники
	|ИЗ
	|	РегистрСведений.OracleSalesOrdersDetailsSourceData КАК OracleSalesOrdersDetailsSourceData
	|ГДЕ
	|	OracleSalesOrdersDetailsSourceData.ДокументЗагрузки = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исходники.ДокументЗагрузки КАК ДокументЗагрузки,
	|	Исходники.НомерSO КАК НомерSO,
	|	Исходники.CustomerNumber КАК CustomerNumber,
	|	Исходники.Agreement КАК Agreement,
	|	Исходники.CompanyCode КАК CompanyCode,
	|	Исходники.CustomerRepresentative КАК CustomerRepresentative,
	|	Исходники.ApprovedBy КАК ApprovedBy,
	|	Исходники.CreatedBy КАК CreatedBy,
	|	Исходники.Currency КАК Currency,
	|	Исходники.FTLCreatedBy КАК FTLCreatedBy,
	|	Исходники.ERPStatus КАК ERPStatus,
	|	Исходники.JobEndDate КАК JobEndDate,
	|	Исходники.CreationDate КАК CreationDate,
	|	Исходники.FTLSubmissionDate КАК FTLSubmissionDate,
	|	Исходники.FirstSubmissionDate КАК FirstSubmissionDate,
	|	Исходники.ApprovalDate КАК ApprovalDate,
	|	Исходники.InvoiceFlagDate КАК InvoiceFlagDate,
	|	Исходники.FieldTicket КАК FieldTicket,
	|	Исходники.DOC_ID КАК DOC_ID,
	|	ДокInvoice.Ссылка КАК СсылкаInvoice,
	|	SalesOrder.Ссылка КАК СсылкаSalesOrder,
	|	Организации.Ссылка КАК СсылкаОрганизация
	|ПОМЕСТИТЬ ИсходникиСсылки
	|ИЗ
	|	Исходники КАК Исходники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Invoice КАК ДокInvoice
	|		ПО Исходники.DOC_ID = ДокInvoice.DocID
	|			И (НЕ ДокInvoice.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SalesOrder КАК SalesOrder
	|		ПО Исходники.НомерSO = SalesOrder.Номер
	|			И Исходники.CompanyCode = SalesOrder.Company.Код
	|			И (НЕ SalesOrder.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Исходники.CompanyCode = Организации.Код
	|			И (НЕ Организации.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходникиСсылки.CustomerNumber
	|ПОМЕСТИТЬ КлиентыБезДублей
	|ИЗ
	|	ИсходникиСсылки КАК ИсходникиСсылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходникиСсылки.Currency
	|ПОМЕСТИТЬ ВалютаБезДублей
	|ИЗ
	|	ИсходникиСсылки КАК ИсходникиСсылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВалютаБезДублей.Currency,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
	|ПОМЕСТИТЬ ВалютыСсылка
	|ИЗ
	|	ВалютаБезДублей КАК ВалютаБезДублей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|		ПО ВалютаБезДублей.Currency = НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор
	|ГДЕ
	|	(НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	|			ИЛИ НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	|	И НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлиентыБезДублей.CustomerNumber,
	|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
	|ПОМЕСТИТЬ КлиентыСсылка
	|ИЗ
	|	КлиентыБезДублей КАК КлиентыБезДублей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
	|		ПО КлиентыБезДублей.CustomerNumber = НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор
	|ГДЕ
	|	(НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
	|			ИЛИ НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	|	И НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходникиСсылки.ДокументЗагрузки,
	|	ИсходникиСсылки.НомерSO,
	|	ИсходникиСсылки.CustomerNumber,
	|	ИсходникиСсылки.Agreement,
	|	ИсходникиСсылки.CompanyCode,
	|	ИсходникиСсылки.CustomerRepresentative,
	|	ИсходникиСсылки.ApprovedBy,
	|	ИсходникиСсылки.CreatedBy,
	|	ИсходникиСсылки.Currency,
	|	ИсходникиСсылки.FTLCreatedBy,
	|	ИсходникиСсылки.ERPStatus,
	|	ИсходникиСсылки.JobEndDate,
	|	ИсходникиСсылки.CreationDate,
	|	ИсходникиСсылки.FTLSubmissionDate,
	|	ИсходникиСсылки.FirstSubmissionDate,
	|	ИсходникиСсылки.ApprovalDate,
	|	ИсходникиСсылки.InvoiceFlagDate,
	|	ИсходникиСсылки.FieldTicket,
	|	ИсходникиСсылки.DOC_ID,
	|	ИсходникиСсылки.СсылкаInvoice,
	|	ИсходникиСсылки.СсылкаSalesOrder,
	|	ИсходникиСсылки.СсылкаОрганизация,
	|	ВалютыСсылка.ОбъектПриемника КАК СсылкаВалюта,
	|	КлиентыСсылка.ОбъектПриемника КАК СсылкаКлиент
	|ИЗ
	|	ИсходникиСсылки КАК ИсходникиСсылки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлиентыСсылка КАК КлиентыСсылка
	|		ПО ИсходникиСсылки.CustomerNumber = КлиентыСсылка.CustomerNumber
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютыСсылка КАК ВалютыСсылка
	|		ПО ИсходникиСсылки.Currency = ВалютыСсылка.Currency";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	Выборка = Запрос.Выполнить().Выбрать();
	ЗафиксироватьТранзакцию();
	
	ОбновленныеSO = Новый ТаблицаЗначений;
	ОбновленныеSO.Колонки.Добавить("SalesOrder", Новый ОписаниеТипов("ДокументСсылка.SalesOrder"));
	
	НенайденныеSO = Новый ТаблицаЗначений;
	НенайденныеSO.Колонки.Добавить("SalesOrderNumber", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(17)));
	
	НенайденныеInvoices = Новый ТаблицаЗначений;
	НенайденныеInvoices.Колонки.Добавить("InvoiceDOC_ID", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(12)));
	
	//ОшибкиПоискаSO = Новый ТаблицаЗначений;
	//ОшибкиПоискаSO.Колонки.Добавить("SalesOrderNumber", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(17)));
	
	ПустаяДата = '00010101';
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.СсылкаSalesOrder) Тогда
			//Если Выборка.LawsonStatus = "Closed" 
			//	ИЛИ Выборка.LawsonStatus = "Unreleased - Locked in Lawson"
			//	ИЛИ Выборка.LawsonStatus = "Unreleased in Lawson" Тогда
			//	СтрокаТЗ = ОшибкиПоискаSO.Добавить();
			//	СтрокаТЗ.SalesOrderNumber = Выборка.НомерSO;
			//Иначе
				СтрокаТЗ = НенайденныеSO.Добавить();
				СтрокаТЗ.SalesOrderNumber = Выборка.НомерSO;
			//КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.DOC_ID) И НЕ ЗначениеЗаполнено(Выборка.СсылкаInvoice) Тогда
			СтрокаТЗ = НенайденныеInvoices.Добавить();
			СтрокаТЗ.InvoiceDOC_ID = Выборка.DOC_ID;
		КонецЕсли;
		
		ТекОбъект = Выборка.СсылкаSalesOrder.ПолучитьОбъект();
		
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Дата, Выборка.CreationDate);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.AgreementCode, Выборка.Agreement);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Agreement, Выборка.AgreementName);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.AgreementStatus, Выборка.AgreementStatus);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.AgreementType, Выборка.AgreementType);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Company, Выборка.СсылкаОрганизация);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.ArInvoice, Выборка.LawsonInvoice);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Invoice, Выборка.СсылкаInvoice);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.SiebelOrderId, Выборка.OrderID);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.FieldTicket, Выборка.FieldTicket);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.JobStartDate, Выборка.OrderJobStartDate);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.ERPStatus, Выборка.ERPStatus);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.FTLCreatedBy, Выборка.FTLCreatedBy);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.FTLApproverID, Выборка.FTLApproverID);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.ApprovedBy, Выборка.ApprovedBy);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.CreatedBy, Выборка.CreatedBy);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.ExchangeRate, Выборка.ExchangeRate);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Amount, Выборка.OrderCurrencyAmount);
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.AmountUSD, Окр(Выборка.OrderCurrencyAmount / Выборка.ExchangeRate, 2));
		//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.BaseAmount, Выборка.OrderUSDAmount);
		
		// DIR Stages
		JobEndDate = Неопределено;
		FTLSubmissionDate = Неопределено;
		CreationDate = Неопределено;
		ApprovalDate = Неопределено;
		FirstSubmissionDate = Неопределено;
		InvoiceFlagDate = Выборка.InvoiceFlagDate;
		
		Если Выборка.FirstSubmissionDate = ПустаяДата Тогда
			FirstSubmissionDate = InvoiceFlagDate;
		Иначе
			FirstSubmissionDate = Выборка.FirstSubmissionDate;
		КонецЕсли;
		
		Если Выборка.ApprovalDate = ПустаяДата Тогда
			ApprovalDate = FirstSubmissionDate;
		Иначе
			ApprovalDate = Выборка.ApprovalDate;
		КонецЕсли;
		
		Если Выборка.CreationDate = ПустаяДата Тогда
			CreationDate = ApprovalDate;
		Иначе
			CreationDate = Выборка.CreationDate;
		КонецЕсли;
		
		Если Выборка.FTLSubmissionDate = ПустаяДата Тогда
			FTLSubmissionDate = CreationDate;
		Иначе
			FTLSubmissionDate = Выборка.FTLSubmissionDate;
		КонецЕсли;
		
		Если Выборка.JobEndDate = ПустаяДата Тогда
			JobEndDate = FTLSubmissionDate;
		Иначе
			JobEndDate = Выборка.JobEndDate;
		КонецЕсли;
		
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.JobEndDate, JobEndDate);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.FTLSubmissionDate, FTLSubmissionDate);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.CreationDate, CreationDate);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.ApprovalDate, ApprovalDate);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.FirstSubmissionDate, FirstSubmissionDate);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.InvoiceFlagDate, InvoiceFlagDate);
		
		Если НЕ ЗначениеЗаполнено(Выборка.СсылкаВалюта) Тогда
			ОтменитьТранзакцию();
			ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", Строка(ТекОбъект) + ": Failed to find currency!");
			ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.СсылкаКлиент) Тогда
			ОтменитьТранзакцию();
			ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", Строка(ТекОбъект) + ": Failed to find client!");
			ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
			Возврат;
		КонецЕсли;
		
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Client, Выборка.СсылкаКлиент);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Currency, Выборка.СсылкаВалюта);
		
		Если ТекОбъект.Модифицированность() Тогда
			
			Попытка
				ТекОбъект.Записать();
			Исключение
				ОтменитьТранзакцию();
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", Строка(ТекОбъект) + ": " + ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
			СтрокаТЗ = ОбновленныеSO.Добавить();
			СтрокаТЗ.SalesOrder = ТекОбъект.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ОбновленныеSO.Свернуть("SalesOrder");
	НенайденныеSO.Свернуть("SalesOrderNumber");
	НенайденныеInvoices.Свернуть("InvoiceDOC_ID");
	//ОшибкиПоискаSO.Свернуть("SalesOrderNumber");
	
	ДанныеДляЗаполнения.Вставить("ОбновленныеSO", ОбновленныеSO);
	ДанныеДляЗаполнения.Вставить("НенайденныеSO", НенайденныеSO);
	ДанныеДляЗаполнения.Вставить("НенайденныеInvoices", НенайденныеInvoices);
	//ДанныеДляЗаполнения.Вставить("ОшибкиПоискаSO", ОшибкиПоискаSO);
		
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

#КонецЕсли
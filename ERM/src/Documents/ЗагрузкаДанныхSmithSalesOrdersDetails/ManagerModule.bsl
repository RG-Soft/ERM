#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	
	ДанныеДляЗаполнения = Новый Структура();
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	ТекстОшибки = "";
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xls");
	ФайлЭксель = СтруктураПараметров.ИсточникДанных.Получить();
	ФайлЭксель.Записать(ПутьКФайлу);
	
	//УдалитьШапкуФайла(ПутьКФайлу, СтруктураПараметров);
	
	rgsЗагрузкаИзExcel.ВыгрузитьЭксельВТаблицуДанныхПоИменамКолонок(ПутьКФайлу, ТаблицаДанных, ДанныеДляЗаполнения, АдресХранилища, СтруктураПараметров);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСтруктуруКолонокТаблицыДанных() Экспорт
	
	СтруктураКолонок = Новый ТаблицаЗначений;
	СтруктураКолонок.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	
	ПолучитьСтруктуруКолонокТаблицыДанныхSODetails(СтруктураКолонок);
	
	Возврат СтруктураКолонок;
	
КонецФункции

Процедура ПолучитьСтруктуруКолонокТаблицыДанныхSODetails(СтруктураКолонок)
	
	// invoice_nbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "НомерSO";
	СтрокаТЗ.ИмяКолонки = "invoice_nbr";
	
	// DestWell
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "WellData";
	СтрокаТЗ.ИмяКолонки = "customer_po_nbr";
	
	// CustomerNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerNumber";
	СтрокаТЗ.ИмяКолонки = "customer_nbr";
	
	// contract_ref_nbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Agreement";
	СтрокаТЗ.ИмяКолонки = "contract_ref_nbr";
	
	// invoice_dt
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "JobEndDate";
	СтрокаТЗ.ИмяКолонки = "invoice_dt";
	
	// grand_total
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAmount";
	СтрокаТЗ.ИмяКолонки = "grand_total";

	// gl_dt
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceFlagDate";
	СтрокаТЗ.ИмяКолонки = "gl_dt";

	// Company_code
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "Company_code";

	// invoiced_by
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreatedBy";
	СтрокаТЗ.ИмяКолонки = "invoiced_by";
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.OracleSalesOrdersDetailsSourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ОбновитьРеквизитыSalesOrders(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	OracleSalesOrdersDetailsSourceData.ДокументЗагрузки КАК ДокументЗагрузки,
	|	OracleSalesOrdersDetailsSourceData.НомерSO КАК НомерSO,
	|	OracleSalesOrdersDetailsSourceData.WellData,
	|	OracleSalesOrdersDetailsSourceData.Agreement,
	|	OracleSalesOrdersDetailsSourceData.JobEndDate,
	|	OracleSalesOrdersDetailsSourceData.CustomerNumber,
	|	SalesOrder.Ссылка КАК СсылкаSalesOrder
	|ИЗ
	|	РегистрСведений.OracleSalesOrdersDetailsSourceData КАК OracleSalesOrdersDetailsSourceData
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SalesOrder КАК SalesOrder
	|		ПО OracleSalesOrdersDetailsSourceData.НомерSO = SalesOrder.Номер
	|			И OracleSalesOrdersDetailsSourceData.CustomerNumber = SalesOrder.ClientID
	|			И OracleSalesOrdersDetailsSourceData.CompanyCode = SalesOrder.Company.Код
	|			И (НЕ SalesOrder.ПометкаУдаления)
	|			И (SalesOrder.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	|ГДЕ
	|	OracleSalesOrdersDetailsSourceData.ДокументЗагрузки = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	OracleSalesOrdersDetailsSourceData.НомерSO КАК НомерInvoice,
	|	OracleSalesOrdersDetailsSourceData.Agreement,
	|	OracleSalesOrdersDetailsSourceData.JobEndDate,
	|	OracleSalesOrdersDetailsSourceData.InvoiceFlagDate,
	|	OracleSalesOrdersDetailsSourceData.CustomerNumber,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Invoice.Ссылка) КАК КоличестоИнвойсов,
	|	OracleSalesOrdersDetailsSourceData.InvoiceAmount,
	|	OracleSalesOrdersDetailsSourceData.CreatedBy,
	|	МАКСИМУМ(Invoice.Ссылка) КАК СсылкаInvoice,
	|	МАКСИМУМ(Invoice.Ссылка.Responsible) КАК InvoiceResponsible
	|ИЗ
	|	РегистрСведений.OracleSalesOrdersDetailsSourceData КАК OracleSalesOrdersDetailsSourceData
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Invoice КАК Invoice
	|		ПО OracleSalesOrdersDetailsSourceData.НомерSO = Invoice.DocNumber
	|			И OracleSalesOrdersDetailsSourceData.CustomerNumber = Invoice.ClientID
	|			И OracleSalesOrdersDetailsSourceData.CompanyCode = Invoice.Company.Код
	|			И (НЕ Invoice.ПометкаУдаления)
	|			И (Invoice.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
	|ГДЕ
	|	OracleSalesOrdersDetailsSourceData.ДокументЗагрузки = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	OracleSalesOrdersDetailsSourceData.Agreement,
	|	OracleSalesOrdersDetailsSourceData.НомерSO,
	|	OracleSalesOrdersDetailsSourceData.CustomerNumber,
	|	OracleSalesOrdersDetailsSourceData.JobEndDate,
	|	OracleSalesOrdersDetailsSourceData.CreatedBy,
	|	OracleSalesOrdersDetailsSourceData.InvoiceFlagDate,
	|	OracleSalesOrdersDetailsSourceData.InvoiceAmount";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	ВыборкаSO = РезультатЗапроса[0].Выбрать();
	ВыборкаInvoice = РезультатЗапроса[1].Выбрать();
	
	ОбновленныеSO = Новый ТаблицаЗначений;
	ОбновленныеSO.Колонки.Добавить("SalesOrder", Новый ОписаниеТипов("ДокументСсылка.SalesOrder"));
	
	НенайденныеSO = Новый ТаблицаЗначений;
	НенайденныеSO.Колонки.Добавить("SalesOrderNumber", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(17)));
	
	ОбновленныеInvoice = Новый ТаблицаЗначений;
	ОбновленныеInvoice.Колонки.Добавить("Invoice", Новый ОписаниеТипов("ДокументСсылка.Invoice"));

	ОбновленныеДатыDIR = Новый ТаблицаЗначений;
	ОбновленныеДатыDIR.Колонки.Добавить("Invoice", Новый ОписаниеТипов("ДокументСсылка.Invoice"));
	
	НенайденныеInvoice = Новый ТаблицаЗначений;
	НенайденныеInvoice.Колонки.Добавить("InvoiceNumber", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(17)));
	
	ОшибкиИдентификацииИнвойсов = Новый ТаблицаЗначений;
	ОшибкиИдентификацииИнвойсов.Колонки.Добавить("InvoiceNumber", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	ОшибкиИдентификацииИнвойсов.Колонки.Добавить("ClientID", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	//ОшибкиИдентификацииИнвойсов.Колонки.Добавить("InvoiceDate", Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	ПустаяДата = '00010101';
	
	НачатьТранзакцию();
	
	Пока ВыборкаInvoice.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаInvoice.СсылкаInvoice) Тогда
			
			СтрокаТЗ = НенайденныеInvoice.Добавить();
			СтрокаТЗ.InvoiceNumber = ВыборкаInvoice.НомерInvoice;
			//Продолжить;
			
		ИначеЕсли ВыборкаInvoice.КоличестоИнвойсов > 1 Тогда
			
			СтрокаТЗ = ОшибкиИдентификацииИнвойсов.Добавить();
			СтрокаТЗ.InvoiceNumber = ВыборкаInvoice.НомерInvoice;
			СтрокаТЗ.ClientID = ВыборкаInvoice.CustomerNumber;
			//СтрокаТЗ.InvoiceDate = ВыборкаInvoice.JobEndDate;
			
		Иначе
		
			ТекОбъект = ВыборкаInvoice.СсылкаInvoice.ПолучитьОбъект();
			
			РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Agreement, ВыборкаInvoice.Agreement);
			РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Amount, ВыборкаInvoice.InvoiceAmount);
			Если НЕ ЗначениеЗаполнено(ВыборкаInvoice.InvoiceResponsible) Тогда
				ТекОбъект.Responsible = ВыборкаInvoice.CreatedBy;
			КонецЕсли;
			//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.WellData, ВыборкаSO.WellData);
			
			//РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.JobEndDate, ВыборкаSO.JobEndDate);
			
			Даты = Новый Соответствие();
			Даты.Вставить("InvoiceFlagDate", ВыборкаInvoice.InvoiceFlagDate);
			Даты.Вставить("JobEndDate", ВыборкаInvoice.JobEndDate);
			РегистрыСведений.DIR.ЗаписатьДаты(ВыборкаInvoice.СсылкаInvoice, Даты);
			СтрокаТЗ = ОбновленныеДатыDIR.Добавить();
			СтрокаТЗ.Invoice = ВыборкаInvoice.СсылкаInvoice;
		
			Если ТекОбъект.Модифицированность() Тогда
				
				Попытка
					ТекОбъект.Записать();
				Исключение
					ОтменитьТранзакцию();
					ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", Строка(ТекОбъект) + ": " + ОписаниеОшибки());
					ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
					Возврат;
				КонецПопытки;
				СтрокаТЗ = ОбновленныеInvoice.Добавить();
				СтрокаТЗ.Invoice = ТекОбъект.Ссылка;
				
			КонецЕсли;
			
			// { RGS TAlmazova 23.01.2017 15:00:33 - обновление комментария для СО
			//ОбновитьСтатусСО(ВыборкаSO.СсылкаSalesOrder, ВыборкаSO.ERPStatus, ВыборкаSO.ShipmentDate, ТекстОшибки);
			Если ТекстОшибки <> "" Тогда
				ОтменитьТранзакцию();
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибки);
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецЕсли;
			// } RGS TAlmazova 23.01.2017 15:00:44 - обновление комментария для СО
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаSO.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаSO.СсылкаSalesOrder) Тогда
			
			СтрокаТЗ = НенайденныеSO.Добавить();
			СтрокаТЗ.SalesOrderNumber = ВыборкаSO.НомерSO;
			Продолжить;
			
		КонецЕсли;
		
		ТекОбъект = ВыборкаSO.СсылкаSalesOrder.ПолучитьОбъект();
		
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Agreement, ВыборкаSO.Agreement);
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.WellData, ВыборкаSO.WellData);
		
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.JobEndDate, ВыборкаSO.JobEndDate);
		
		Если ТекОбъект.Модифицированность() Тогда
			
			Попытка
				ТекОбъект.Записать();
			Исключение
				ОтменитьТранзакцию();
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", Строка(ТекОбъект) + ": " + ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
			СтрокаТЗ = ОбновленныеSO.Добавить();
			СтрокаТЗ.SalesOrder = ТекОбъект.Ссылка;
			
		КонецЕсли;
		
		// { RGS TAlmazova 23.01.2017 15:00:33 - обновление комментария для СО
		//ОбновитьСтатусСО(ВыборкаSO.СсылкаSalesOrder, ВыборкаSO.ERPStatus, ВыборкаSO.ShipmentDate, ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			ОтменитьТранзакцию();
			ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибки);
			ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
			Возврат;
		КонецЕсли;
		// } RGS TAlmazova 23.01.2017 15:00:44 - обновление комментария для СО
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ОбновленныеSO.Свернуть("SalesOrder");
	НенайденныеSO.Свернуть("SalesOrderNumber");
	ОбновленныеInvoice.Свернуть("Invoice");
	ОбновленныеДатыDIR.Свернуть("Invoice");
	НенайденныеInvoice.Свернуть("InvoiceNumber");
	ОшибкиИдентификацииИнвойсов.Свернуть("InvoiceNumber,ClientID");
	
	ДанныеДляЗаполнения.Вставить("ОбновленныеSO", ОбновленныеSO);
	ДанныеДляЗаполнения.Вставить("НенайденныеSO", НенайденныеSO);
	ДанныеДляЗаполнения.Вставить("ОбновленныеInvoice", ОбновленныеInvoice);
	ДанныеДляЗаполнения.Вставить("ОбновленныеДатыDIR", ОбновленныеДатыDIR);
	ДанныеДляЗаполнения.Вставить("НенайденныеInvoice", НенайденныеInvoice);
	ДанныеДляЗаполнения.Вставить("ОшибкиИдентификацииИнвойсов", ОшибкиИдентификацииИнвойсов);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

#КонецЕсли
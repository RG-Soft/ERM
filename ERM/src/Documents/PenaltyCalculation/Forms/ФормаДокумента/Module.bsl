&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Calculation.Количество() > 0 Тогда
	
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), "The document is filled. If you continue, the data will be lost. Continue?", РежимДиалогаВопрос.ДаНет, 10);
		
	Иначе
		
		ЗаполнитьДанныеПоШтрафамНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеПоШтрафамНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоШтрафамНаКлиенте()
	
	Результат = ЗаполнитьДанныеПоШтрафамНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	//Иначе
	//	Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПоШтрафамНаСервере()
	
	СтруктураПараметров = Новый Структура("Ссылка");
	СтруктураПараметров.Вставить("Ссылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ПериодРасчета", Объект.Дата);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.PenaltyCalculation.ЗаполнитьДанныеПоШтрафам(СтруктураПараметров, АдресХранилища);
		
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Заполнение данные по биллингу'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Документы.BillingCalculation.ЗаполнитьДанныеПоБиллингу", 
			СтруктураПараметров, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОшибкаЗаполнения") Тогда
		ВызватьИсключение СтруктураДанных.ОшибкаЗаполнения;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ManualAdjustment", Истина);
	LawsonBilling_ManualAdjustments = Объект.LawsonBilling.Выгрузить(СтруктураОтбора);
	HOBBilling_ManualAdjustments = Объект.HOBBilling.Выгрузить(СтруктураОтбора);
	OracleMIBilling_ManualAdjustments = Объект.OracleMIBilling.Выгрузить(СтруктураОтбора);
	OracleSmithBilling_ManualAdjustments = Объект.OracleSmithBilling.Выгрузить(СтруктураОтбора);
	RadiusBilling_ManualAdjustments = Объект.RadiusBilling.Выгрузить(СтруктураОтбора);
	
	Объект.LawsonBilling.Очистить();
	Объект.HOBBilling.Очистить();
	Объект.OracleMIBilling.Очистить();
	Объект.OracleSmithBilling.Очистить();
	Объект.RadiusBilling.Очистить();
	
	Если СтруктураДанных.Свойство("ДанныеПоБиллингу") Тогда
		Объект.LawsonBilling.Загрузить(СтруктураДанных.ДанныеПоБиллингу.LawsonBilling);
		Объект.HOBBilling.Загрузить(СтруктураДанных.ДанныеПоБиллингу.HOBBilling);
		Объект.OracleMIBilling.Загрузить(СтруктураДанных.ДанныеПоБиллингу.OracleMIBilling);
		Объект.OracleSmithBilling.Загрузить(СтруктураДанных.ДанныеПоБиллингу.OracleSmithBilling);
		Объект.RadiusBilling.Загрузить(СтруктураДанных.ДанныеПоБиллингу.RadiusBilling);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(LawsonBilling_ManualAdjustments, Объект.LawsonBilling);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(HOBBilling_ManualAdjustments, Объект.HOBBilling);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(OracleMIBilling_ManualAdjustments, Объект.OracleMIBilling);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(OracleSmithBilling_ManualAdjustments, Объект.OracleSmithBilling);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(RadiusBilling_ManualAdjustments, Объект.RadiusBilling);
	
	Элементы.LawsonBilling.Обновить();
	Элементы.HOBBilling.Обновить();
	Элементы.OracleMIBilling.Обновить();
	Элементы.OracleSmithBilling.Обновить();
	Элементы.RadiusBilling.Обновить();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элемент.ТекущиеДанные.ManualAdjustment Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура LawsonBillingПередНачаломИзменения(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура HOBBillingПередНачаломИзменения(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура OracleMIBillingПередНачаломИзменения(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура OracleSmithBillingПередНачаломИзменения(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура RadiusBillingПередНачаломИзменения(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура RadiusBillingПередУдалением(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура OracleSmithBillingПередУдалением(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура OracleMIBillingПередУдалением(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура HOBBillingПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ПриНачалеРедактированияСтрокиБиллинга(Элемент, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура OracleMIBillingПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ПриНачалеРедактированияСтрокиБиллинга(Элемент, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура OracleSmithBillingПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ПриНачалеРедактированияСтрокиБиллинга(Элемент, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура RadiusBillingПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ПриНачалеРедактированияСтрокиБиллинга(Элемент, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура HOBBillingПередУдалением(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура LawsonBillingПередУдалением(Элемент, Отказ)
	ПроверитьДоступностьСтрокиТЧБиллингаДляРедактирования(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиРасчетаБиллинга.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура LawsonBillingПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ПриНачалеРедактированияСтрокиБиллинга(Элемент, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияСтрокиБиллинга(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.ManualAdjustment = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьПодготовленныеДанные();
				//Прочитать();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

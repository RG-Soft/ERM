#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ЗаполнитьДанныеПоБиллингу(СтруктураПараметров, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	BilledARОстатки.Source КАК Source,
	|	BilledARОстатки.Company КАК Company,
	|	BilledARОстатки.Client КАК Client,
	|	BilledARОстатки.AU КАК AU,
	|	BilledARОстатки.Account КАК Account,
	|	BilledARОстатки.LegalEntity КАК LegalEntity,
	|	BilledARОстатки.ClientID КАК ClientID,
	|	BilledARОстатки.Invoice КАК Invoice,
	|	BilledARОстатки.Currency КАК Currency,
	|	BilledARОстатки.AmountОстаток КАК AmountОстаток
	|ПОМЕСТИТЬ ВТ_АктуальныеОстатки
	|ИЗ
	|	РегистрНакопления.BilledAR.Остатки(
	|			,
	|			Source В (&Sources)
	|				И Invoice.DueDateTo <> ДАТАВРЕМЯ(1, 1, 1)
	|				И Invoice.DueDateTo <= &КонецПериодаРасчета) КАК BilledARОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	PaymentsОбороты.Source КАК Source,
	|	PaymentsОбороты.Company КАК Company,
	|	PaymentsОбороты.Client КАК Client,
	|	PaymentsОбороты.AU КАК AU,
	|	PaymentsОбороты.Account КАК Account,
	|	PaymentsОбороты.LegalEntity КАК LegalEntity,
	|	PaymentsОбороты.ClientID КАК ClientID,
	|	PaymentsОбороты.Invoice КАК Invoice,
	|	PaymentsОбороты.Currency КАК Currency,
	|	PaymentsОбороты.AmountОборот КАК AmountОборот
	|ПОМЕСТИТЬ ВТ_ОплатыСНачалаПериодаРасчета
	|ИЗ
	|	РегистрНакопления.Payments.Обороты(
	|			&НачалоПериодаРасчета,
	|			,
	|			,
	|			Source В (&Sources)
	|				И Invoice.DueDateTo <> ДАТАВРЕМЯ(1, 1, 1)
	|				И Invoice.DueDateTo <= &КонецПериодаРасчета) КАК PaymentsОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	PaymentsОбороты.Source КАК Source,
	|	PaymentsОбороты.Company КАК Company,
	|	PaymentsОбороты.Client КАК Client,
	|	PaymentsОбороты.AU КАК AU,
	|	PaymentsОбороты.Account КАК Account,
	|	PaymentsОбороты.LegalEntity КАК LegalEntity,
	|	PaymentsОбороты.ClientID КАК ClientID,
	|	PaymentsОбороты.Invoice КАК Invoice,
	|	PaymentsОбороты.Currency КАК Currency,
	|	PaymentsОбороты.AmountОборот КАК AmountОборот,
	|	PaymentsОбороты.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ОплатыЗаПериодРасчета
	|ИЗ
	|	РегистрНакопления.Payments.Обороты(
	|			&НачалоПериодаРасчета,
	|			&КонецПериодаРасчета,
	|			День,
	|			Source В (&Sources)
	|				И Invoice.DueDateTo <> ДАТАВРЕМЯ(1, 1, 1)
	|				И Invoice.DueDateTo <= &КонецПериодаРасчета) КАК PaymentsОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	LawsonDepositDatesInv.Invoice КАК Document,
	|	МАКСИМУМ(LawsonDepositDatesInv.DepositDate) КАК DepositDate
	|ПОМЕСТИТЬ ВТ_LawsonDepositDates
	|ИЗ
	|	РегистрСведений.LawsonDepositDates КАК LawsonDepositDatesInv
	|ГДЕ
	|	LawsonDepositDatesInv.Invoice В
	|			(ВЫБРАТЬ
	|				ОплатыЗаПериодРасчета.Invoice
	|			ИЗ
	|				ВТ_ОплатыЗаПериодРасчета КАК ОплатыЗаПериодРасчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	LawsonDepositDatesInv.Invoice
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(LawsonDepositDatesInv.DepositDate) МЕЖДУ &НачалоПериодаРасчета И &КонецПериодаРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОплатыЗаПериодРасчета.Source КАК Source,
	|	ВТ_ОплатыЗаПериодРасчета.Company КАК Company,
	|	ВТ_ОплатыЗаПериодРасчета.Client КАК Client,
	|	ВТ_ОплатыЗаПериодРасчета.AU КАК AU,
	|	ВТ_ОплатыЗаПериодРасчета.Account КАК Account,
	|	ВТ_ОплатыЗаПериодРасчета.LegalEntity КАК LegalEntity,
	|	ВТ_ОплатыЗаПериодРасчета.ClientID КАК ClientID,
	|	ВТ_ОплатыЗаПериодРасчета.Invoice КАК Invoice,
	|	ВТ_ОплатыЗаПериодРасчета.Currency КАК Currency,
	|	ВТ_ОплатыЗаПериодРасчета.AmountОборот КАК AmountОборот,
	|	ЕСТЬNULL(ВТ_LawsonDepositDates.DepositDate, ВТ_ОплатыЗаПериодРасчета.Период) КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА ВТ_ОплатыЗаПериодРасчета.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|				И ВТ_LawsonDepositDates.DepositDate ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПроблемаРасчета
	|ПОМЕСТИТЬ ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты
	|ИЗ
	|	ВТ_ОплатыЗаПериодРасчета КАК ВТ_ОплатыЗаПериодРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_LawsonDepositDates КАК ВТ_LawsonDepositDates
	|		ПО ВТ_ОплатыЗаПериодРасчета.Invoice = ВТ_LawsonDepositDates.Document
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Source КАК Source,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Company КАК Company,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Client КАК Client,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.AU КАК AU,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Account КАК Account,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.LegalEntity КАК LegalEntity,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.ClientID КАК ClientID,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Invoice КАК Invoice,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Currency КАК Currency,
	|	СУММА(ВложенныйЗапросАктуальныеОстаткиБезОплат.AmountОстаток) КАК AmountОстаток,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОплаты,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Invoice.DueDateTo КАК DueDateTo,
	|	1 КАК ПриоритетОбработки,
	|	ЛОЖЬ КАК ЕстьПроблемаРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_АктуальныеОстатки.Source КАК Source,
	|		ВТ_АктуальныеОстатки.Company КАК Company,
	|		ВТ_АктуальныеОстатки.Client КАК Client,
	|		ВТ_АктуальныеОстатки.AU КАК AU,
	|		ВТ_АктуальныеОстатки.Account КАК Account,
	|		ВТ_АктуальныеОстатки.LegalEntity КАК LegalEntity,
	|		ВТ_АктуальныеОстатки.ClientID КАК ClientID,
	|		ВТ_АктуальныеОстатки.Invoice КАК Invoice,
	|		ВТ_АктуальныеОстатки.Currency КАК Currency,
	|		ВТ_АктуальныеОстатки.AmountОстаток КАК AmountОстаток
	|	ИЗ
	|		ВТ_АктуальныеОстатки КАК ВТ_АктуальныеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ОплатыСКонцаПериодаРасчета.Source,
	|		ВТ_ОплатыСКонцаПериодаРасчета.Company,
	|		ВТ_ОплатыСКонцаПериодаРасчета.Client,
	|		ВТ_ОплатыСКонцаПериодаРасчета.AU,
	|		ВТ_ОплатыСКонцаПериодаРасчета.Account,
	|		ВТ_ОплатыСКонцаПериодаРасчета.LegalEntity,
	|		ВТ_ОплатыСКонцаПериодаРасчета.ClientID,
	|		ВТ_ОплатыСКонцаПериодаРасчета.Invoice,
	|		ВТ_ОплатыСКонцаПериодаРасчета.Currency,
	|		ВТ_ОплатыСКонцаПериодаРасчета.AmountОборот
	|	ИЗ
	|		ВТ_ОплатыСНачалаПериодаРасчета КАК ВТ_ОплатыСКонцаПериодаРасчета) КАК ВложенныйЗапросАктуальныеОстаткиБезОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Source,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Company,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Client,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.AU,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Account,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.LegalEntity,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.ClientID,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Invoice,
	|	ВложенныйЗапросАктуальныеОстаткиБезОплат.Currency
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапросАктуальныеОстаткиБезОплат.AmountОстаток) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.Source,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.Company,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.Client,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.AU,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.Account,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.LegalEntity,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.ClientID,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.Invoice,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.Currency,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.AmountОборот,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.ДатаОплаты,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.Invoice.DueDateTo,
	|	2,
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты.ЕстьПроблемаРасчета
	|ИЗ
	|	ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты КАК ВТ_ОплатыЗаПериодРасчетаСДатамиОплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОбработки,
	|	ДатаОплаты
	|ИТОГИ ПО
	|	Invoice";
	
	Sources = Новый Массив;
	Sources.Добавить(Перечисления.ТипыСоответствий.Lawson);
	Sources.Добавить(Перечисления.ТипыСоответствий.OracleMI);
	Sources.Добавить(Перечисления.ТипыСоответствий.OracleSmith);
	Sources.Добавить(Перечисления.ТипыСоответствий.HOB);
	Запрос.УстановитьПараметр("Sources", Sources);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета", НачалоМесяца(СтруктураПараметров.ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериодаРасчета", КонецМесяца(СтруктураПараметров.ПериодРасчета));
	
	ДанныеПоШтрафам = Новый ТаблицаЗначений;
	ДанныеПоШтрафам.Колонки.Добавить("Company");
	ДанныеПоШтрафам.Колонки.Добавить("LegalEntity");
	ДанныеПоШтрафам.Колонки.Добавить("AU");
	ДанныеПоШтрафам.Колонки.Добавить("Client");
	ДанныеПоШтрафам.Колонки.Добавить("Contract");
	ДанныеПоШтрафам.Колонки.Добавить("Invoice");
	ДанныеПоШтрафам.Колонки.Добавить("DueDate");
	ДанныеПоШтрафам.Колонки.Добавить("Currency");
	ДанныеПоШтрафам.Колонки.Добавить("PenaltyDate");
	ДанныеПоШтрафам.Колонки.Добавить("PenaltyDate");
	ДанныеПоШтрафам.Колонки.Добавить("RemainingAmount");
	ДанныеПоШтрафам.Колонки.Добавить("RemainingAmountUSD");
	ДанныеПоШтрафам.Колонки.Добавить("OverDueDays");
	ДанныеПоШтрафам.Колонки.Добавить("Percent");
	ДанныеПоШтрафам.Колонки.Добавить("PenaltyAmount");
	
	ВыборкаИнвойс = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИнвойс.Следующий() Цикл
		ВыборкаДетальныеЗаписи = ВыборкаИнвойс.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьСтрокуДанныхПоШтрафам(ДанныеПоШтрафам.Добавить(), ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ДанныеПоБиллингу", ДанныеПоШтрафам);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДанныхПоШтрафам(СтрокаДанных, Параметры)
	
КонецПроцедуры
	
#КонецЕсли
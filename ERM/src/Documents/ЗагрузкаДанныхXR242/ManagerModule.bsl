#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	ФайлДанных = СтруктураПараметров.ИсточникДанных.Получить();
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\XR242.csv";
	ФайлДанных.Записать(ПутьКФайлу);
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ "XR242.csv" +"]" 
		+ Символы.ПС + "DecimalSymbol=."
		+ Символы.ПС + "DateTimeFormat=dd/mm/yyyy");
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	
	Стр_SQL = "Select * FROM XR242.csv";
	rs.Open(Стр_SQL, Connection);
	
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	СоответствиеКолонок = Новый Соответствие;
	Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
		СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
	КонецЦикла;
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	rs.MoveFirst();
	
	ТекНомерСтроки = 0;
	
	Пока rs.EOF() = 0 Цикл
		
		ТекНомерСтроки = ТекНомерСтроки + 1;
		
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
		
		Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
			
			Попытка
				ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
			Исключение
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
			
			Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
			Иначе
				СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
		rs.MoveNext();
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяКаталога);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСтруктуруКолонокТаблицыДанных() Экспорт
	
	СтруктураКолонок = Новый ТаблицаЗначений;
	СтруктураКолонок.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	
	ЗаполнитьСтруктуруКолонокТаблицыДанных(СтруктураКолонок);
	
	Возврат СтруктураКолонок;
	
КонецФункции

Процедура ЗаполнитьСтруктуруКолонокТаблицыДанных(СтруктураКолонок)
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	
	// CompanyName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyName";
	СтрокаТЗ.ИмяКолонки = "CompanyName";
	
	// CustomerNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerNumber";
	СтрокаТЗ.ИмяКолонки = "Customer";
	
	// CustomerName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerName";
	СтрокаТЗ.ИмяКолонки = "CustomerDesc";
	
	// Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceDate";
	СтрокаТЗ.ИмяКолонки = "InvoiceDate";
	
	// JobEndDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EndDate";
	СтрокаТЗ.ИмяКолонки = "EndDate";
	
	// ArInvoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ArInvoice";
	СтрокаТЗ.ИмяКолонки = "InvPreInvoice";
	
	
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.XR242SourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ОбновитьРеквизитыInvoices(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	XR242SourceData.ArInvoice КАК ArInvoice,
	|	XR242SourceData.InvoiceDate,
	|	XR242SourceData.EndDate,
	|	ЕСТЬNULL(Организации.Ссылка, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	РегистрСведений.XR242SourceData КАК XR242SourceData
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО XR242SourceData.Company = Организации.Код
	|		И Организации.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|ГДЕ
	|	XR242SourceData.ДокументЗагрузки = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ArInvoice, Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.ArInvoice,
	|	ВТ_ИсходныеДанные.InvoiceDate,
	|	ВТ_ИсходныеДанные.EndDate,
	|	ЕСТЬNULL(КлючиИнвойсов.Invoice, ЗНАЧЕНИЕ(Документ.Invoice.ПустаяСсылка)) КАК Invoice,
	|	ЕСТЬNULL(КлючиSalesOrders.SalesOrder, ЗНАЧЕНИЕ(Документ.SalesOrder.ПустаяСсылка)) КАК SalesOrder,
	|	ЕСТЬNULL(КлючиИнвойсовB.Invoice, ЗНАЧЕНИЕ(Документ.Invoice.ПустаяСсылка)) КАК InvoiceB,
	|	ЕСТЬNULL(КлючиSalesOrdersB.SalesOrder, ЗНАЧЕНИЕ(Документ.SalesOrder.ПустаяСсылка)) КАК SalesOrderB,
	|	ЕСТЬNULL(КлючиSalesOrders.SalesOrder.JobEndDate, ДАТАВРЕМЯ(1, 1, 1)) КАК SO_JobEndDate,
	|	ЕСТЬNULL(КлючиSalesOrdersB.SalesOrder.JobEndDate, ДАТАВРЕМЯ(1, 1, 1)) КАК SOB_JobEndDate
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
	|		ПО ВТ_ИсходныеДанные.ArInvoice = КлючиИнвойсов.ArInvoice
	|		И ВТ_ИсходныеДанные.Организация = КлючиИнвойсов.Company
	|		И КлючиИнвойсов.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrders
	|		ПО ВТ_ИсходныеДанные.ArInvoice = КлючиSalesOrders.ArInvoice
	|		И ВТ_ИсходныеДанные.Организация = КлючиSalesOrders.Company
	|		И КлючиSalesOrders.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсовB
	|		ПО ВТ_ИсходныеДанные.ArInvoice + ""B"" = КлючиИнвойсовB.ArInvoice
	|		И ВТ_ИсходныеДанные.Организация = КлючиИнвойсовB.Company
	|		И КлючиИнвойсовB.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrdersB
	|		ПО ВТ_ИсходныеДанные.ArInvoice + ""B"" = КлючиSalesOrdersB.ArInvoice
	|		И ВТ_ИсходныеДанные.Организация = КлючиSalesOrdersB.Company
	|		И КлючиSalesOrdersB.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	Выборка = Запрос.Выполнить().Выбрать();
	ЗафиксироватьТранзакцию();
	
	ОбновленныеInvoice = Новый ТаблицаЗначений;
	ОбновленныеInvoice.Колонки.Добавить("Invoice", Новый ОписаниеТипов("ДокументСсылка.Invoice"));
	
	НенайденныеInvoices = Новый ТаблицаЗначений;
	НенайденныеInvoices.Колонки.Добавить("InvoiceNumber", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(12)));

	ОбновленныеSO = Новый ТаблицаЗначений;
	ОбновленныеSO.Колонки.Добавить("SalesOrder", Новый ОписаниеТипов("ДокументСсылка.SalesOrder"));
	
	НенайденныеSO = Новый ТаблицаЗначений;
	НенайденныеSO.Колонки.Добавить("SONumber", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(12)));
	
	Даты = Новый Соответствие();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		JobEndDate = РГСофт.ПреобразоватьВДату(Выборка.EndDate, "Date");
		
		Если Не ПустаяСтрока(Выборка.ArInvoice) И НЕ ЗначениеЗаполнено(Выборка.Invoice) И НЕ ЗначениеЗаполнено(Выборка.InvoiceB) Тогда
			
			СтрокаТЗ = НенайденныеInvoices.Добавить();
			СтрокаТЗ.InvoiceNumber = Выборка.ArInvoice;
			
		Иначе

			Если ЗначениеЗаполнено(Выборка.Invoice) Тогда
				
				Если JobEndDate <> Дата(1, 1, 1) Тогда
					
					Если ЗначениеЗаполнено(Выборка.SalesOrder) Тогда
						Если НЕ ЗначениеЗаполнено(Выборка.SO_JobEndDate) Тогда
							ДозаполнитьSO(Выборка.SalesOrder, JobEndDate);
							СтрокаТЗ = ОбновленныеSO.Добавить();
							СтрокаТЗ.SalesOrder = Выборка.SalesOrder;
						КонецЕсли
					Иначе
						СтрокаТЗ = НенайденныеSO.Добавить();
						СтрокаТЗ.SONumber = Выборка.ArInvoice;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Выборка.SalesOrderB) Тогда
						Если НЕ ЗначениеЗаполнено(Выборка.SOB_JobEndDate) Тогда
							ДозаполнитьSO(Выборка.SalesOrderB, JobEndDate);
							СтрокаТЗ = ОбновленныеSO.Добавить();
							СтрокаТЗ.SalesOrder = Выборка.SalesOrderB;
						КонецЕсли
					Иначе
						СтрокаТЗ = НенайденныеSO.Добавить();
						СтрокаТЗ.SONumber = Выборка.ArInvoice + "B";
					КонецЕсли;
					
					Даты.Вставить("JobEndDate", JobEndDate);
					
				КонецЕсли;
								
				Даты.Вставить("InvoiceFlagDate", РГСофт.ПреобразоватьВДату(Выборка.InvoiceDate, "Date"));
				РегистрыСведений.DIR.ЗаписатьДаты(Выборка.Invoice, Даты);
				
				СтрокаТЗ = ОбновленныеInvoice.Добавить();
				СтрокаТЗ.Invoice = Выборка.Invoice;
				
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.InvoiceB) Тогда
				
				Если JobEndDate <> Дата(1, 1, 1) Тогда
					
					Если ЗначениеЗаполнено(Выборка.SalesOrder) Тогда
						Если НЕ ЗначениеЗаполнено(Выборка.SO_JobEndDate) Тогда
							ДозаполнитьSO(Выборка.SalesOrder, JobEndDate);
							СтрокаТЗ = ОбновленныеSO.Добавить();
							СтрокаТЗ.SalesOrder = Выборка.SalesOrder;
						КонецЕсли
					Иначе
						СтрокаТЗ = НенайденныеSO.Добавить();
						СтрокаТЗ.SONumber = Выборка.ArInvoice;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Выборка.SalesOrderB) Тогда
						Если НЕ ЗначениеЗаполнено(Выборка.SOB_JobEndDate) Тогда
							ДозаполнитьSO(Выборка.SalesOrderB, JobEndDate);
							СтрокаТЗ = ОбновленныеSO.Добавить();
							СтрокаТЗ.SalesOrder = Выборка.SalesOrderB;
						КонецЕсли
					Иначе
						СтрокаТЗ = НенайденныеSO.Добавить();
						СтрокаТЗ.SONumber = Выборка.ArInvoice + "B";
					КонецЕсли;
					
					Даты.Вставить("JobEndDate", JobEndDate);
					
				КонецЕсли;

				Даты.Вставить("InvoiceFlagDate", РГСофт.ПреобразоватьВДату(Выборка.InvoiceDate, "Date"));
				РегистрыСведений.DIR.ЗаписатьДаты(Выборка.InvoiceB, Даты);
				
				СтрокаТЗ = ОбновленныеInvoice.Добавить();
				СтрокаТЗ.Invoice = Выборка.InvoiceB;
				
			КонецЕсли;

		КонецЕсли;
						
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ОбновленныеInvoice.Свернуть("Invoice");
	НенайденныеInvoices.Свернуть("InvoiceNumber");
	ОбновленныеSO.Свернуть("SalesOrder");
	НенайденныеSO.Свернуть("SONumber");
	
	ДанныеДляЗаполнения.Вставить("ОбновленныеInvoice", ОбновленныеInvoice);
	ДанныеДляЗаполнения.Вставить("НенайденныеInvoices", НенайденныеInvoices);
	ДанныеДляЗаполнения.Вставить("ОбновленныеSO", ОбновленныеSO);
	ДанныеДляЗаполнения.Вставить("НенайденныеSO", НенайденныеSO);
		
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ДозаполнитьSO(SO, JobEndDate)
	
		SalesOrderОбъект = SO.ПолучитьОбъект();
		РГСофтКлиентСервер.УстановитьЗначение(SalesOrderОбъект.JobEndDate, JobEndDate);
		SalesOrderОбъект.ОбменДанными.Загрузка = Истина;
		SalesOrderОбъект.Записать();
	
КонецПроцедуры

#КонецЕсли
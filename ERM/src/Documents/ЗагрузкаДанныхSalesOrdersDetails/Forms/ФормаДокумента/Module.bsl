
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресВХранилище = "";
	ВыбранноеИмяФайла = "";
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект);
	
	НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресВХранилище,,, УникальныйИдентификатор);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(Результат, АдресВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		
		Объект.ИмяФайла = Файл.Имя;
		АдресФайлаВХранилище = АдресВХранилище;
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ИмяФайла = "" Тогда
		Сообщить("Файл не загружен!");
	Иначе
		СсылкаНаФайл = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "ИсточникДанных");
		ПолучитьФайл(СсылкаНаФайл, Объект.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		ТекущийОбъект.ИсточникДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Результат = ПрочитатьФайлНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьФайлНаСервере()
	
	//////////////
	//Если Объект.ТипЗагрузкиUnBilled Тогда
	//	ЗаполнитьСтруктуруКолонокПоУмолчаниюUnbilled();
	//Иначе
	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	//КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Ссылка, Дата, ИсточникДанных, ИменаКолонокВПервойСтроке, ПерваяСтрокаДанных, ПоследняяСтрокаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	СтруктураПараметров.Вставить("СтруктураКолонок", РеквизитФормыВЗначение("СтруктураКолонок"));
	СтруктураПараметров.Вставить("ИсточникДанных", РеквизитФормыВЗначение("Объект").ИсточникДанных);
	СтруктураПараметров.Вставить("Ссылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.ЗагрузкаДанныхSalesOrdersDetails.ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Sales orders details loading'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Документы.ЗагрузкаДанныхSalesOrdersDetails.ЗагрузитьДанныеИзФайла", 
			СтруктураПараметров, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОшибкаЗаполнения") Тогда
		ВызватьИсключение СтруктураДанных.ОшибкаЗаполнения;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОбновленныеSO") Тогда
		Объект.ОбновленныеSO.Загрузить(СтруктураДанных.ОбновленныеSO);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("НенайденныеSO") Тогда
		Объект.НенайденныеSO.Загрузить(СтруктураДанных.НенайденныеSO);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОбновленныеInvoice") Тогда
		Объект.ОбновленныеInvoice.Загрузить(СтруктураДанных.ОбновленныеInvoice);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("НенайденныеInvoices") Тогда
		Объект.НенайденныеInvoices.Загрузить(СтруктураДанных.НенайденныеInvoices);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОшибкиПоискаSO") Тогда
		Объект.ОшибкиПоискаSO.Загрузить(СтруктураДанных.ОшибкиПоискаSO);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьПодготовленныеДанные();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;	
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСтруктуруФайлаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияFileSettingsНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИменаКолонокВПервойСтроке", ИменаКолонокВПервойСтроке);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанных", ПерваяСтрокаДанных);
	СтруктураПараметров.Вставить("ПоследняяСтрокаДанных", ПоследняяСтрокаДанных);
	СтруктураПараметров.Вставить("СтруктураКолонок", СтруктураКолонок);
	
	ОткрытьФорму("Документ.ЗагрузкаДанныхLawson.Форма.ФормаНастройкиПараметровФайла", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ДекорацияFileSettingsЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияFileSettingsЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКолонокВПервойСтроке = Результат.ИменаКолонокВПервойСтроке;
	ПерваяСтрокаДанных = Результат.ПерваяСтрокаДанных;
	ПоследняяСтрокаДанных = Результат.ПоследняяСтрокаДанных;
	ЗагрузитьСтруктуруКолонок(Результат.СтруктураКолонок);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтруктуруКолонок(Источник)
	
	СтруктураКолонок.Загрузить(Источник.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию()
	
	ПерваяСтрокаДанных = 2;
	ИменаКолонокВПервойСтроке = Истина;
	//Если ТипЗагрузкиUnBilled Тогда
	//	ЗаполнитьСтруктуруКолонокПоУмолчаниюUnbilled();
	//Иначе
	//	ЗаполнитьСтруктуруКолонокПоУмолчанию();
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКолонокПоУмолчанию()
	
	СтруктураКолонок.Очистить();
	
	// НомерSO
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "НомерSO";
	СтрокаТЗ.ИмяКолонки = "Lawson Order #";
	//СтрокаТЗ.НомерКолонки = 1;
	
	// YearMonth
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "YearMonth";
	СтрокаТЗ.ИмяКолонки = "YearMonth";
	
	// BillingAccount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BillingAccount";
	СтрокаТЗ.ИмяКолонки = "Billing Account";
	
	// BillingAccountID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BillingAccountID";
	СтрокаТЗ.ИмяКолонки = "Billing Account ID";
	
	// LawsonCustomerCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LawsonCustomerCode";
	СтрокаТЗ.ИмяКолонки = "Lawson Customer Code";
	
	// Agreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Agreement";
	СтрокаТЗ.ИмяКолонки = "Agreement #";
	
	// AgreementName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AgreementName";
	СтрокаТЗ.ИмяКолонки = "Agreement Name";
	
	// Agreement Status
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AgreementStatus";
	СтрокаТЗ.ИмяКолонки = "Agreement Status";
	
	// Agreement Type
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AgreementType";
	СтрокаТЗ.ИмяКолонки = "Agreement Type";
	
	// Effective Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EffectiveDate";
	СтрокаТЗ.ИмяКолонки = "Effective Date";
	
	// Expiration Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ExpirationDate";
	СтрокаТЗ.ИмяКолонки = "Expiration Date";
	
	// Company (Code)
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "Company (Code)";
	
	// Order ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderID";
	СтрокаТЗ.ИмяКолонки = "Order ID";
	
	// Lawson Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LawsonInvoice";
	СтрокаТЗ.ИмяКолонки = "Lawson Invoice #";
	
	// Customer Representative
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerRepresentative";
	СтрокаТЗ.ИмяКолонки = "Customer Representative";
	
	// Approved By
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ApprovedBy";
	СтрокаТЗ.ИмяКолонки = "Approved By";
	
	// Created By
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreatedBy";
	СтрокаТЗ.ИмяКолонки = "Created By";
	
	// Exchange Rate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ExchangeRate";
	СтрокаТЗ.ИмяКолонки = "Exchange Rate";
	
	// Order Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderCurrency";
	СтрокаТЗ.ИмяКолонки = "Order Currency";
	
	// Credit Memo Reason
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreditMemoReason";
	СтрокаТЗ.ИмяКолонки = "Credit Memo Reason";
	
	// Dual Currency Status
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DualCurrencyStatus";
	СтрокаТЗ.ИмяКолонки = "Dual Currency Status";
	
	// Evidence Of Delivery
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EvidenceOfDelivery";
	СтрокаТЗ.ИмяКолонки = "Evidence Of Delivery";
	
	// FTL Created By
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FTLCreatedBy";
	СтрокаТЗ.ИмяКолонки = "FTL Created By";
	
	// FTL Approver ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FTLApproverID";
	СтрокаТЗ.ИмяКолонки = "FTL Approver ID";
	
	// Lawson Status
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LawsonStatus";
	СтрокаТЗ.ИмяКолонки = "Lawson Status";
	
	// Order Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderCurrencyAmount";
	СтрокаТЗ.ИмяКолонки = "Rev# Order Currency";
	
	// Order (USD)
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderUSDAmount";
	СтрокаТЗ.ИмяКолонки = "Order (USD)";
	
	// Order Job End Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderJobEndDate";
	СтрокаТЗ.ИмяКолонки = "Order Job End Date";
	
	// Order Creation Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderCreationDate";
	СтрокаТЗ.ИмяКолонки = "Order Creation Date";
	
	// Order Job Start Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderJobStartDate";
	СтрокаТЗ.ИмяКолонки = "Order Job Start Date";
	
	// Field Ticket Creation Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FieldTicketCreationDate";
	СтрокаТЗ.ИмяКолонки = "Field Ticket Creation Date";
	
	// FTL Approval Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FTLApprovalDate";
	СтрокаТЗ.ИмяКолонки = "FTL Approval Date";
	
	// FTL Submission Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FTLSubmissionDate";
	СтрокаТЗ.ИмяКолонки = "FTL Submission Date";
	
	// Order First Submission Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderFirstSubmissionDate";
	СтрокаТЗ.ИмяКолонки = "Order First Submission Date";
	
	// Request to Approve Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "RequestToApproveDate";
	СтрокаТЗ.ИмяКолонки = "Request to Approve Date";
	
	// Order Approval Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderApprovalDate";
	СтрокаТЗ.ИмяКолонки = "Order Approval Date";
	
	// Accrue Flag Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AccrueFlagDate";
	СтрокаТЗ.ИмяКолонки = "Accrue Flag Date";
	
	// Invoice Flag Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceFlagDate";
	СтрокаТЗ.ИмяКолонки = "Invoice Flag Date";
	
	// Last Updated Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LastUpdatedDate";
	СтрокаТЗ.ИмяКолонки = "Last Updated Date";
	
	// Field Ticket Ref #
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FieldTicket";
	СтрокаТЗ.ИмяКолонки = "Field Ticket Ref #";
	
	//WellName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "WellName";
	СтрокаТЗ.ИмяКолонки = "Well Name";
	
	// FieldName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FieldName";
	СтрокаТЗ.ИмяКолонки = "Field Name";
	
	// НомерSO
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ClientContract";
	СтрокаТЗ.ИмяКолонки = "Client Contract #";
	//СтрокаТЗ.НомерКолонки = 1;
	
КонецПроцедуры

&НаСервере
Процедура _ЗаполнитьСтруктуруКолонокПоУмолчаниюUnbilled()
	
	СтруктураКолонок.Очистить();
	
	// НомерSO
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "НомерSO";
	СтрокаТЗ.ИмяКолонки = "Lawson Order #";
	//СтрокаТЗ.НомерКолонки = 1;
	
	// YearMonth
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "YearMonth";
	СтрокаТЗ.ИмяКолонки = "YearMonth";
	
	// BillingAccount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BillingAccount";
	СтрокаТЗ.ИмяКолонки = "Billing Account";
	
	// BillingAccountID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BillingAccountID";
	СтрокаТЗ.ИмяКолонки = "Billing Account ID";
	
	// LawsonCustomerCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LawsonCustomerCode";
	СтрокаТЗ.ИмяКолонки = "Lawson Customer Code";
	
	// Agreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Agreement";
	СтрокаТЗ.ИмяКолонки = "Agreement #";
	
	// AgreementName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AgreementName";
	СтрокаТЗ.ИмяКолонки = "Agreement Name";
	
	// Agreement Status
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AgreementStatus";
	СтрокаТЗ.ИмяКолонки = "Agreement Status";
	
	// Agreement Type
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AgreementType";
	СтрокаТЗ.ИмяКолонки = "Agreement Type";
	
	// Effective Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EffectiveDate";
	СтрокаТЗ.ИмяКолонки = "Effective Date";
	
	// Expiration Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ExpirationDate";
	СтрокаТЗ.ИмяКолонки = "Expiration Date";
	
	// Company (Code)
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "Company (Code)";
	
	// Order ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderID";
	СтрокаТЗ.ИмяКолонки = "Siebel Order Id";
	
	// Lawson Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LawsonInvoice";
	СтрокаТЗ.ИмяКолонки = "Lawson Invoice #";
	
	//// Customer Representative
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "CustomerRepresentative";
	//СтрокаТЗ.ИмяКолонки = "Customer Representative";
	
	//// Approved By
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "ApprovedBy";
	//СтрокаТЗ.ИмяКолонки = "Approved By";
	//
	//// Created By
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "CreatedBy";
	//СтрокаТЗ.ИмяКолонки = "Created By";
	
	// Exchange Rate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ExchangeRate";
	СтрокаТЗ.ИмяКолонки = "Exchange Rate";
	
	// Order Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderCurrency";
	СтрокаТЗ.ИмяКолонки = "Currency (Code)";
	
	// Credit Memo Reason
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CreditMemoReason";
	СтрокаТЗ.ИмяКолонки = "Credit Memo Reason";
	
	//// Dual Currency Status
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "DualCurrencyStatus";
	//СтрокаТЗ.ИмяКолонки = "Dual Currency Status";
	//
	//// Evidence Of Delivery
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "EvidenceOfDelivery";
	//СтрокаТЗ.ИмяКолонки = "Evidence Of Delivery";
	//
	//// FTL Created By
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FTLCreatedBy";
	//СтрокаТЗ.ИмяКолонки = "FTL Created By";
	//
	//// FTL Approver ID
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FTLApproverID";
	//СтрокаТЗ.ИмяКолонки = "FTL Approver ID";
	
	// Lawson Status
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LawsonStatus";
	СтрокаТЗ.ИмяКолонки = "Lawson Status";
	
	//// Order Currency
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderCurrencyAmount";
	//СтрокаТЗ.ИмяКолонки = "Order Currency";
	
	// Order (USD)
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderUSDAmount";
	СтрокаТЗ.ИмяКолонки = "Rev# (USD)";
	
	// Order Job End Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrderJobEndDate";
	СтрокаТЗ.ИмяКолонки = "Job End Date";
	
	//// Order Creation Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderCreationDate";
	//СтрокаТЗ.ИмяКолонки = "Order Creation Date";
	//
	//// Order Job Start Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderJobStartDate";
	//СтрокаТЗ.ИмяКолонки = "Order Job Start Date";
	//
	//// Field Ticket Creation Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FieldTicketCreationDate";
	//СтрокаТЗ.ИмяКолонки = "Field Ticket Creation Date";
	//
	//// FTL Approval Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FTLApprovalDate";
	//СтрокаТЗ.ИмяКолонки = "FTL Approval Date";
	//
	//// FTL Submission Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FTLSubmissionDate";
	//СтрокаТЗ.ИмяКолонки = "FTL Submission Date";
	//
	//// Order First Submission Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderFirstSubmissionDate";
	//СтрокаТЗ.ИмяКолонки = "Order First Submission Date";
	//
	//// Request to Approve Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "RequestToApproveDate";
	//СтрокаТЗ.ИмяКолонки = "Request to Approve Date";
	//
	//// Order Approval Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "OrderApprovalDate";
	//СтрокаТЗ.ИмяКолонки = "Order Approval Date";
	//
	//// Accrue Flag Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "AccrueFlagDate";
	//СтрокаТЗ.ИмяКолонки = "Accrue Flag Date";
	//
	//// Invoice Flag Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "InvoiceFlagDate";
	//СтрокаТЗ.ИмяКолонки = "Invoice Flag Date";
	//
	//// Last Updated Date
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "LastUpdatedDate";
	//СтрокаТЗ.ИмяКолонки = "Last Updated Date";
	//
	//// Field Ticket Ref #
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "FieldTicket";
	//СтрокаТЗ.ИмяКолонки = "Field Ticket Ref #";
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТолькоПросмотр = Объект.Проведен;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТолькоПросмотр = Объект.Проведен;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьSalesOrdersНаСервере()
	
	СтруктураПараметров = Новый Структура("Ссылка,ТипЗагрузкиUnbilled");
	СтруктураПараметров.Вставить("Ссылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ТипЗагрузкиUnbilled",Объект.ТипЗагрузкиUnBilled);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.ЗагрузкаДанныхSalesOrdersDetails.ОбновитьРеквизитыSalesOrders(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Sales orders update'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Документы.ЗагрузкаДанныхSalesOrdersDetails.ОбновитьРеквизитыSalesOrders", 
			СтруктураПараметров, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьSalesOrders(Команда)
	
	Результат = ОбновитьSalesOrdersНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры


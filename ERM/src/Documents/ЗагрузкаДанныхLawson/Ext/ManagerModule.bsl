#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	ФайлДанных = СтруктураПараметров.ИсточникДанных.Получить();
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\DSS.csv";
	ФайлДанных.Записать(ПутьКФайлу);
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ "DSS.csv" +"]" + Символы.ПС + "DecimalSymbol=.");
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;		
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	
	Стр_SQL = "Select * FROM DSS.csv";
	rs.Open(Стр_SQL, Connection);
	
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	СоответствиеКолонок = Новый Соответствие;
	Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
		СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
	КонецЦикла;
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	rs.MoveFirst();
	
	Пока rs.EOF() = 0 Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		
		Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
			
			Попытка
				ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
				Если ЭлементСоответствия.Значение = "ArInvoice" и rs.Fields("System").Value <> "GL" И ТекЗначение = Null Тогда
					ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", "The column ""ArInvoice"" is not filled. Check the downloaded data.");
					ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
					Возврат;
				КонецЕсли;
			Исключение
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
			
			Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
			Иначе
				СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
		rs.MoveNext();
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяКаталога);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСтруктуруКолонокТаблицыДанных() Экспорт
	
	СтруктураКолонок = Новый ТаблицаЗначений;
	СтруктураКолонок.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	
	ПолучитьСтруктуруКолонокТаблицыДанныхLawson(СтруктураКолонок);
	
	Возврат СтруктураКолонок;
	
КонецФункции

Процедура ПолучитьСтруктуруКолонокТаблицыДанныхLawson(СтруктураКолонок)
	
	// System
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "System";
	СтрокаТЗ.ИмяКолонки = "System";
	//СтрокаТЗ.НомерКолонки = 1;
	
	// JeType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "JeType";
	СтрокаТЗ.ИмяКолонки = "JeType";
	
	// Journal
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Journal";
	СтрокаТЗ.ИмяКолонки = "Journal";
	
	// GltObjId
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GltObjId";
	СтрокаТЗ.ИмяКолонки = "GltObjId";
	
	// УчетныйПериод
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "УчетныйПериод";
	СтрокаТЗ.ИмяКолонки = "FiscalYear";
	
	// Area
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Area";
	СтрокаТЗ.ИмяКолонки = "Area";
	
	// AreaDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AreaDesc";
	СтрокаТЗ.ИмяКолонки = "AreaDesc";
	
	// Geo
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Geo";
	СтрокаТЗ.ИмяКолонки = "Geo";
	
	// GeoDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GeoDesc";
	СтрокаТЗ.ИмяКолонки = "GeoDesc";
	
	// SubGeo
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubGeo";
	СтрокаТЗ.ИмяКолонки = "SubGeo";
	
	// SubgeoDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubgeoDesc";
	СтрокаТЗ.ИмяКолонки = "SubgeoDesc";
	
	// Mgmtctry
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Mgmtctry";
	СтрокаТЗ.ИмяКолонки = "Mgmtctry";
	
	// MgmtctryDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "MgmtctryDesc";
	СтрокаТЗ.ИмяКолонки = "MgmtctryDesc";
	
	// BusSeg
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BusSeg";
	СтрокаТЗ.ИмяКолонки = "BusSeg";
	
	// SegDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SegDesc";
	СтрокаТЗ.ИмяКолонки = "SegDesc";
	
	// SubSeg
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSeg";
	СтрокаТЗ.ИмяКолонки = "SubSeg";
	
	// SubsegDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubsegDesc";
	СтрокаТЗ.ИмяКолонки = "SubsegDesc";
	
	// SubSubSeg
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSubSeg";
	СтрокаТЗ.ИмяКолонки = "SubSubSeg";
	
	// SubsubsegDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubsubsegDesc";
	СтрокаТЗ.ИмяКолонки = "SubsubsegDesc";
	
	// Company
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Company";
	СтрокаТЗ.ИмяКолонки = "Company";
	
	// Location
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Location";
	СтрокаТЗ.ИмяКолонки = "Location";
	
	// LocationDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationDesc";
	СтрокаТЗ.ИмяКолонки = "LocationDesc";
	
	// AccountUnit
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AccountUnit";
	СтрокаТЗ.ИмяКолонки = "AccountUnit";
	
	// AcctUnitDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AcctUnitDesc";
	СтрокаТЗ.ИмяКолонки = "AcctUnitDesc";
	
	//// MgmtNIS_BLSummaryAcct
	//СтрокаТЗ = СтруктураКолонок.Добавить();
	//СтрокаТЗ.ИмяПоля = "MgmtNIS_BLSummaryAcct";
	//СтрокаТЗ.ИмяКолонки = "MgmtNIS_BLSummaryAcct";
	
	// SummaryAcctDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SummaryAcctDesc";
	СтрокаТЗ.ИмяКолонки = "SummaryAcctDesc";
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	
	// SubAccount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubAccount";
	СтрокаТЗ.ИмяКолонки = "SubAccount";
	
	// AccountDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AccountDesc";
	СтрокаТЗ.ИмяКолонки = "AccountDesc";
	
	// FiscalYear
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FiscalYear";
	СтрокаТЗ.ИмяКолонки = "FiscalYear";
	
	// Date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Date";
	СтрокаТЗ.ИмяКолонки = "Date";
	
	// AccountingPeriod
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AccountingPeriod";
	СтрокаТЗ.ИмяКолонки = "AccountingPeriod";
	
	// UpdateDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "UpdateDate";
	СтрокаТЗ.ИмяКолонки = "UpdateDate";
	
	// SeqTrnsNbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SeqTrnsNbr";
	СтрокаТЗ.ИмяКолонки = "SeqTrnsNbr";
	
	// PostingDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PostingDate";
	СтрокаТЗ.ИмяКолонки = "PostingDate";
	
	// Reference
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Reference";
	СтрокаТЗ.ИмяКолонки = "Reference";
	
	// Description
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Description";
	СтрокаТЗ.ИмяКолонки = "Description";
	
	// CurrencyCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CurrencyCode";
	СтрокаТЗ.ИмяКолонки = "CurrencyCode";
	
	// TranAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TranAmount";
	СтрокаТЗ.ИмяКолонки = "TranAmount";
	
	// BaseAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseAmount";
	СтрокаТЗ.ИмяКолонки = "BaseAmount";
	
	// OrigCompany
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrigCompany";
	СтрокаТЗ.ИмяКолонки = "OrigCompany";
	
	// Activity
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Activity";
	СтрокаТЗ.ИмяКолонки = "Activity";
	
	// SourceCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SourceCode";
	СтрокаТЗ.ИмяКолонки = "SourceCode";
	
	// LineNbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LineNbr";
	СтрокаТЗ.ИмяКолонки = "LineNbr";
	
	// AutoRev
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AutoRev";
	СтрокаТЗ.ИмяКолонки = "AutoRev";
	
	// Operator
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Operator";
	СтрокаТЗ.ИмяКолонки = "Operator";
	
	// LegalFiscalFlag
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalFiscalFlag";
	СтрокаТЗ.ИмяКолонки = "LegalFiscalFlag";
	
	// Vendor
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Vendor";
	СтрокаТЗ.ИмяКолонки = "Vendor";
	
	// VendorVName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "VendorVName";
	СтрокаТЗ.ИмяКолонки = "VendorVName";
	
	// ApInvoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ApInvoice";
	СтрокаТЗ.ИмяКолонки = "ApInvoice";
	
	// TransNbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TransNbr";
	СтрокаТЗ.ИмяКолонки = "TransNbr";
	
	// OrigOperatorId
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OrigOperatorId";
	СтрокаТЗ.ИмяКолонки = "OrigOperatorId";
	
	// ProcessLevel
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ProcessLevel";
	СтрокаТЗ.ИмяКолонки = "ProcessLevel";
	
	// CashCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CashCode";
	СтрокаТЗ.ИмяКолонки = "CashCode";
	
	// PoNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PoNumber";
	СтрокаТЗ.ИмяКолонки = "PoNumber";
	
	// LineNbrIc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LineNbrIc";
	СтрокаТЗ.ИмяКолонки = "LineNbrIc";
	
	// PoCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PoCode";
	СтрокаТЗ.ИмяКолонки = "PoCode";
	
	// Asset
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Asset";
	СтрокаТЗ.ИмяКолонки = "Asset";
	
	// AssetCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AssetCode";
	СтрокаТЗ.ИмяКолонки = "AssetCode";
	
	// AstSerialNbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AstSerialNbr";
	СтрокаТЗ.ИмяКолонки = "AstSerialNbr";
	
	// ItemDescription
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ItemDescription";
	СтрокаТЗ.ИмяКолонки = "ItemDescription";
	
	// CustomerNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerNumber";
	СтрокаТЗ.ИмяКолонки = "CustomerNumber";
	
	// CustomerName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CustomerName";
	СтрокаТЗ.ИмяКолонки = "CustomerName";
	
	// ArInvoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ArInvoice";
	СтрокаТЗ.ИмяКолонки = "ArInvoice";
	
	// TaxCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TaxCode";
	СтрокаТЗ.ИмяКолонки = "TaxCode";
	
	// Item
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Item";
	СтрокаТЗ.ИмяКолонки = "Item";
	
	// DocumentNbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DocumentNbr";
	СтрокаТЗ.ИмяКолонки = "DocumentNbr";
	
	// ContractNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ContractNumber";
	СтрокаТЗ.ИмяКолонки = "ContractNumber";
	
	// AktOfAcceptance
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AktOfAcceptance";
	СтрокаТЗ.ИмяКолонки = "AktOfAcceptance";
	
	// AktDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AktDate";
	СтрокаТЗ.ИмяКолонки = "AktDate";
	
	// ApTransFormId
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ApTransFormId";
	СтрокаТЗ.ИмяКолонки = "ApTransFormId";
	
	// Urn
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Urn";
	СтрокаТЗ.ИмяКолонки = "Urn";
	
	// ArBatchNbr
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ArBatchNbr";
	СтрокаТЗ.ИмяКолонки = "ArBatchNbr";
	
	// CompanyName
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyName";
	СтрокаТЗ.ИмяКолонки = "CompanyName";
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.DSSSourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 14.07.2016 19:30:40 - установка статуса документа
	ДокументЗагрузки = Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.LoadedSourseData;
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 19:30:45 - установка статуса документа
	
КонецПроцедуры

Процедура ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	DSSSourceData.CurrencyCode КАК Идентификатор
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО (DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки)
		|			И DSSSourceData.CurrencyCode = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ DSSSourceData.CurrencyCode = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	DSSSourceData.Account
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО DSSSourceData.Account = Lawson.КодЧислом
		|			И (НЕ Lawson.ПометкаУдаления)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И DSSSourceData.Account <> 0
		|	И Lawson.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	DSSSourceData.Company
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И DSSSourceData.Company = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И DSSSourceData.Company <> 0
		|	И Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	DSSSourceData.SubSubSeg
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И DSSSourceData.SubSubSeg = Сегменты.Код
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	DSSSourceData.Location
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И DSSSourceData.Location = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	DSSSourceData.AccountUnit
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И DSSSourceData.AccountUnit = КостЦентры.Код
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И КостЦентры.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО DSSSourceData.AccountUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket,
		|	ЕСТЬNULL(HFM_Locations1.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоMgmtctry
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations1
		|		ПО DSSSourceData.Mgmtctry = HFM_Locations1.Код
		|			И (НЕ HFM_Locations1.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО DSSSourceData.AccountUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО DSSSourceData.Account = Lawson.КодЧислом
		|			И (НЕ Lawson.ПометкаУдаления)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО DSSSourceData.Company = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
			ТекОбъект.Записать();
			
		ИначеЕсли НЕ ВыборкаЛокаций.LocationПоMgmtctry.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоMgmtctry;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
		ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CheckedConflicts;
		ДокументЗагрузки.Записать();
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSSourceData.BusSeg КАК Segment,
		|	DSSSourceData.SubSeg КАК SubSegment,
		|	DSSSourceData.SubSubSeg КАК SubSubSegment,
		|	DSSSourceData.Geo КАК Geomarket,
		|	DSSSourceData.SubGeo КАК SubGeomarket,
		|	DSSSourceData.CustomerNumber,
		|	DSSSourceData.Reference,
		|	DSSSourceData.CurrencyCode КАК Currency,
		|	DSSSourceData.AccountUnit,
		|	DSSSourceData.System,
		|	DSSSourceData.JeType,
		|	DSSSourceData.Journal,
		|	DSSSourceData.GltObjId,
		|	DSSSourceData.Area,
		|	DSSSourceData.Mgmtctry,
		|	DSSSourceData.Company,
		|	DSSSourceData.Location,
		|	DSSSourceData.MgmtNIS_BLSummaryAcct,
		|	DSSSourceData.SummaryAcct,
		|	DSSSourceData.Account,
		|	DSSSourceData.SubAccount,
		|	DSSSourceData.FiscalYear,
		|	DSSSourceData.Date,
		|	DSSSourceData.AccountingPeriod,
		|	DSSSourceData.UpdateDate,
		|	DSSSourceData.SeqTrnsNbr,
		|	DSSSourceData.PostingDate,
		|	DSSSourceData.Description,
		|	DSSSourceData.TranAmount,
		|	DSSSourceData.BaseAmount,
		|	DSSSourceData.OrigCompany,
		|	DSSSourceData.Activity,
		|	DSSSourceData.SourceCode,
		|	DSSSourceData.LineNbr,
		|	DSSSourceData.AutoRev,
		|	DSSSourceData.Operator,
		|	DSSSourceData.LegalFiscalFlag,
		|	DSSSourceData.Vendor,
		|	DSSSourceData.VendorVName,
		|	DSSSourceData.ApInvoice,
		|	DSSSourceData.TransNbr,
		|	DSSSourceData.OrigOperatorId,
		|	DSSSourceData.ProcessLevel,
		|	DSSSourceData.CashCode,
		|	DSSSourceData.PoNumber,
		|	DSSSourceData.LineNbrIc,
		|	DSSSourceData.PoCode,
		|	DSSSourceData.ItemDescription,
		|	DSSSourceData.ArInvoice,
		|	DSSSourceData.TaxCode,
		|	DSSSourceData.Item,
		|	DSSSourceData.DocumentNbr,
		|	DSSSourceData.ContractNumber,
		|	DSSSourceData.AktOfAcceptance,
		|	DSSSourceData.AktDate,
		|	DSSSourceData.ApTransFormId,
		|	DSSSourceData.Urn,
		|	DSSSourceData.CustomerName,
		|	DSSSourceData.ArBatchNbr,
		|	DSSSourceData.CompanyName
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CustomerNumber
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовReference
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Reference
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Currency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеФайла.ArInvoice КАК ArInvoice,
		|	Организации.Ссылка КАК Company
		|ПОМЕСТИТЬ ВТ_КлючиПоискаInvoiceSalesOrders
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_ДанныеФайла.Company = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &Source)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ArInvoice,
		|	Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Lawson.КодЧислом,
		|	Lawson.Ссылка
		|ИЗ
		|	ПланСчетов.Lawson КАК Lawson
		|ГДЕ
		|	НЕ Lawson.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
		|	КлючиИнвойсов.Company,
		|	КлючиИнвойсов.Invoice
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice
		|			И КлючиИнвойсов.Company = ВТ_КлючиПоискаInvoiceSalesOrders.Company
		|ГДЕ
		|	КлючиИнвойсов.Source = &Source
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлючиИнвойсов.ArInvoice,
		|	КлючиИнвойсов.Company,
		|	КлючиИнвойсов.Invoice
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
		|		ПО (КлючиИнвойсов.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice + ""B"")
		|			И КлючиИнвойсов.Company = ВТ_КлючиПоискаInvoiceSalesOrders.Company
		|ГДЕ
		|	КлючиИнвойсов.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиSalesOrders.ArInvoice,
		|	КлючиSalesOrders.Company,
		|	КлючиSalesOrders.SalesOrder
		|ИЗ
		|	РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrders
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
		|		ПО КлючиSalesOrders.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice
		|			И КлючиSalesOrders.Company = ВТ_КлючиПоискаInvoiceSalesOrders.Company
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлючиSalesOrders.ArInvoice,
		|	КлючиSalesOrders.Company,
		|	КлючиSalesOrders.SalesOrder
		|ИЗ
		|	РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrders
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
		|		ПО (КлючиSalesOrders.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice + ""B"")
		|			И КлючиSalesOrders.Company = ВТ_КлючиПоискаInvoiceSalesOrders.Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.ArBatchNbr,
		|	CashBatch.Company,
		|	CashBatch.Prepayment,
		|	CashBatch.Ссылка КАК CashBatch
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО (CashBatch.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|			И CashBatch.DocID = ВТ_ДанныеФайла.ArBatchNbr
		|			И (НЕ CashBatch.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.ArBatchNbr,
		|	BatchAllocation.Company,
		|	BatchAllocation.Ссылка КАК BatchAllocation
		|ИЗ
		|	Документ.BatchAllocation КАК BatchAllocation
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО BatchAllocation.DocID = ВТ_ДанныеФайла.ArBatchNbr
		|			И (BatchAllocation.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson))
		|			И (НЕ BatchAllocation.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсключенияПриЗагрузкеDSS.System,
		|	ИсключенияПриЗагрузкеDSS.AU
		|ИЗ
		|	РегистрСведений.ИсключенияПриЗагрузкеDSS КАК ИсключенияПриЗагрузкеDSS
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Код,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Source,
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Client,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.AU,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиMemo.ArInvoice,
		|	КлючиMemo.Client,
		|	ВТ_КлючиПоискаInvoiceSalesOrders.Company,
		|	КлючиMemo.Memo
		|ИЗ
		|	РегистрСведений.КлючиMemo КАК КлючиMemo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
		|		ПО КлючиMemo.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice
		|			И КлючиMemo.Company = ВТ_КлючиПоискаInvoiceSalesOrders.Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК ClientCustomerNumber,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_СоответствиеКлиентовReference.ОбъектПриемника КАК ClientReference,
		|	ВТ_ДанныеФайла.System,
		|	ВТ_ДанныеФайла.SourceCode,
		|	ВТ_ДанныеФайла.Account,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.Date КАК Date,
		|	ВТ_ДанныеФайла.Reference,
		|	ВТ_ДанныеФайла.Description,
		|	ВТ_ДанныеФайла.TranAmount,
		|	ВТ_ДанныеФайла.PostingDate,
		|	ВТ_ДанныеФайла.Company,
		|	ВТ_ДанныеФайла.UpdateDate,
		|	ВТ_ДанныеФайла.SeqTrnsNbr,
		|	ВТ_ДанныеФайла.OrigCompany,
		|	ВТ_ДанныеФайла.Activity,
		|	ВТ_ДанныеФайла.JeType,
		|	ВТ_ДанныеФайла.Journal,
		|	ВТ_ДанныеФайла.LineNbr,
		|	ВТ_ДанныеФайла.AutoRev,
		|	ВТ_ДанныеФайла.Operator,
		|	ВТ_ДанныеФайла.LegalFiscalFlag,
		|	ВТ_ДанныеФайла.Vendor,
		|	ВТ_ДанныеФайла.VendorVName,
		|	ВТ_ДанныеФайла.ApInvoice,
		|	ВТ_ДанныеФайла.TransNbr,
		|	ВТ_ДанныеФайла.OrigOperatorId,
		|	ВТ_ДанныеФайла.ProcessLevel,
		|	ВТ_ДанныеФайла.CashCode,
		|	ВТ_ДанныеФайла.PoNumber,
		|	ВТ_ДанныеФайла.LineNbrIc,
		|	ВТ_ДанныеФайла.PoCode,
		|	ВТ_ДанныеФайла.ItemDescription,
		|	ВТ_ДанныеФайла.CustomerNumber,
		|	ВТ_ДанныеФайла.CustomerName,
		|	ВТ_ДанныеФайла.ArInvoice,
		|	ВТ_ДанныеФайла.TaxCode,
		|	ВТ_ДанныеФайла.Item,
		|	ВТ_ДанныеФайла.DocumentNbr,
		|	ВТ_ДанныеФайла.ContractNumber,
		|	ВТ_ДанныеФайла.AktOfAcceptance,
		|	ВТ_ДанныеФайла.AktDate,
		|	ВТ_ДанныеФайла.ApTransFormId,
		|	ВТ_ДанныеФайла.Urn,
		|	ЕСТЬNULL(ПроводкаDSS.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПроводкаDSS,
		|	ВТ_ДанныеФайла.GltObjId КАК GltObjId,
		|	ВТ_ДанныеФайла.FiscalYear КАК FiscalYear,
		|	ВТ_ДанныеФайла.AccountingPeriod КАК AccountingPeriod,
		|	ВТ_ДанныеФайла.CompanyName,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Ссылка КАК AU,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.SourceCode = ""RQ""
		|				ИЛИ ВТ_ДанныеФайла.SourceCode = ""RX""
		|				ИЛИ ВТ_ДанныеФайла.SourceCode = ""RL""
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет,
		|	ВТ_ДанныеФайла.ArBatchNbr
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.CustomerNumber = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовReference КАК ВТ_СоответствиеКлиентовReference
		|		ПО ВТ_ДанныеФайла.Reference = ВТ_СоответствиеКлиентовReference.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ПроводкаDSS
		|		ПО (НЕ ПроводкаDSS.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.GltObjId = ПроводкаDSS.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AccountUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	FiscalYear,
		|	AccountingPeriod,
		|	Приоритет,
		|	GltObjId";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.Lawson);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшСчетовЛоусон = РезультатЗапроса[5].Выгрузить();
	КэшСчетовЛоусон.Индексы.Добавить("КодЧислом");
	
	КэшИнвойсов = РезультатЗапроса[6].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice, Company");
	
	КэшSalesOrders = РезультатЗапроса[7].Выгрузить();
	КэшSalesOrders.Индексы.Добавить("ArInvoice, Company");
	
	КэшCashBatch = РезультатЗапроса[8].Выгрузить();
	КэшCashBatch.Индексы.Добавить("ARBatchNbr, Company, Prepayment");
	
	КэшBatchAllocation = РезультатЗапроса[9].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("ARBatchNbr, Company");
	
	ТаблицаИсключений = РезультатЗапроса[10].Выгрузить();
	ТаблицаИсключений.Индексы.Добавить("System, AU");
	
	КэшОрганизаций = РезультатЗапроса[11].Выгрузить();
	КэшОрганизаций.Индексы.Добавить("Код");
	
	КэшРучныхКоррерктировок = РезультатЗапроса[12].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency");
	//КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Location, SubSubSegment, AU, Account, Currency");
	
	КэшМемо = РезультатЗапроса[13].Выгрузить();
	КэшМемо.Индексы.Добавить("ArInvoice, Client, Company");
	
	ТаблицаДаты = РезультатЗапроса[14].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	// { RGS TAlmazova 03.07.2017 16:48:54 - проверка контрольных сумм
	ТаблицаДанных = РезультатЗапроса[15].Выгрузить();
	//СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ТаблицаДанных.Количество();
	Отбор = Новый Структура;
	Отбор.Вставить("ПроводкаDSS", Неопределено);
	ТаблицаДанныхКонтрольныеСуммы = ТаблицаДанных.Скопировать(Отбор,"AU, Account, Currency, TranAmount, BaseAmount");
	
	// { RGS AGorlenko 19.07.2017 17:06:43 - перенесено ниже
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = ТаблицаДанных.Количество();
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = ТаблицаДанныхКонтрольныеСуммы.Количество();
	//ДокументЗагрузки.Записать();
	// } RGS AGorlenko 19.07.2017 17:06:48 - перенесено ниже
	
	// { RGS AGorlenko 20.07.2017 17:05:01 - 
	//ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "TranAmount, BaseAmount");
	//ТаблицаДанныхКонтрольныеСуммы.Колонки.Account.Имя = "AccountЧислом";
	//ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Account");
	//
	//Для каждого СтрокаТаблицыДанных из ТаблицаДанныхКонтрольныеСуммы Цикл
	//	СтрокаСчетаЛоусон = КэшСчетовЛоусон.Найти(СтрокаТаблицыДанных.AccountЧислом, "КодЧислом");
	//	Если СтрокаСчетаЛоусон <> Неопределено Тогда
	//		СтрокаТаблицыДанных.Account = СтрокаСчетаЛоусон.Ссылка;
	//	КонецЕсли;
	//КонецЦикла;
	//ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	ТаблицаДанныхКонтрольныеСуммы = Новый ТаблицаЗначений;
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("AU");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Account");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Currency");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Amount");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("BaseAmount");
	// } RGS AGorlenko 20.07.2017 17:05:26 - 
	// } RGS TAlmazova 03.07.2017 16:49:00 - проверка контрольных сумм
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[15].Выбрать();
	
	НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	СтруктураПоискаИсключений = Новый Структура("System, AU");
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.Lawson);
	КоличествоТранзакцийВФайле = 0;
	СчетчикСозданныхТранзакций = 0;
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// { RGS AGorlenko 20.07.2017 17:10:04 - 
		КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле + 1;
		// } RGS AGorlenko 20.07.2017 17:10:08 - 
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПроводкаDSS) Тогда
			// TODO RGS AGorlenko 12.07.2016: убрать. Временно перезаполняем JV
			Если ВыборкаДетальныеЗаписи.System <> "GL" Тогда
				Продолжить;
			КонецЕсли;
			ПроводкаDSSОбъект = ВыборкаДетальныеЗаписи.ПроводкаDSS.ПолучитьОбъект();
		Иначе
			ПроводкаDSSОбъект = Документы.ПроводкаDSS.СоздатьДокумент();
			ПроводкаDSSОбъект.GUID = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		Если Дата(ВыборкаДетальныеЗаписи.FiscalYear, ВыборкаДетальныеЗаписи.AccountingPeriod, 1) < ДатаНачалаЗагрузки Тогда
			
			ТекОшибка = "Can't load data earlier than the start date for " + ВыборкаДетальныеЗаписи.GltObjId;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		КлиентОтсутствует = Ложь;
		ЗаполнитьПроводкуDSS(ПроводкаDSSОбъект, ВыборкаДетальныеЗаписи, КэшСчетовЛоусон, КэшОрганизаций, СтруктураПараметров.Дата, Отказ, ТекстСообщенияОбОшибках, КлиентОтсутствует);
		
		ПроводкаDSSОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если КлиентОтсутствует Тогда
			НЗ_Проблемы = РегистрыСведений.ПроблемыПриЗагрузке.СоздатьНаборЗаписей();
			НЗ_Проблемы.Отбор.Транзакция.Установить(ПроводкаDSSОбъект.Ссылка);
			НЗ_Проблемы.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
			НЗ_Проблемы.Отбор.ОписаниеПроблемы.Установить("Missing client code");
			НоваяЗапись = НЗ_Проблемы.Добавить();
			НоваяЗапись.Транзакция = ПроводкаDSSОбъект.Ссылка;
			НоваяЗапись.ДокументЗагрузки = СтруктураПараметров.Ссылка;
			НоваяЗапись.ОписаниеПроблемы = "Missing client code";
			НЗ_Проблемы.Записать(Истина);
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата = ТекущаяДата;
			Задача.Наименование = "Fill the client in the transaction " + ПроводкаDSSОбъект.Ссылка;
			Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.Lawson;
			Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйLawson;
			//Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
			Задача.Автор = Пользователи.ТекущийПользователь();
			Задача.Предмет = ПроводкаDSSОбъект.Ссылка;
			Задача.Записать();
			
		КонецЕсли;
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ПроводкаDSSОбъект, КэшИнвойсов, КэшSalesOrders, КэшCashBatch, КэшBatchAllocation, КэшОрганизаций, КэшРучныхКоррерктировок, КэшМемо, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		СтруктураПоискаИсключений.System = ПроводкаDSSОбъект.System;
		СтруктураПоискаИсключений.AU = ПроводкаDSSОбъект.AU;
		СтрокиИсключений = ТаблицаИсключений.НайтиСтроки(СтруктураПоискаИсключений);
		
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.ДокументЗагрузки = СтруктураПараметров.Ссылка;
		ЗаписьНабора.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
		ЗаписьНабора.ИгнорироватьОбработку = СтрокиИсключений.Количество() > 0;
		ЗаписьНабора.ОшибкаПриПоискеСвязанныхОбъектов = НайденаОшибкаПриПоискеСвязанныхОбъектов;
		
		// { RGS AGorlenko 20.07.2017 17:08:17 - 
		СчетчикСозданныхТранзакций = СчетчикСозданныхТранзакций + 1;
		НоваяСтрокаКонтрольныхСумм = ТаблицаДанныхКонтрольныеСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтрольныхСумм, ВыборкаДетальныеЗаписи);
		НоваяСтрокаКонтрольныхСумм.Amount = ВыборкаДетальныеЗаписи.TranAmount;
		НоваяСтрокаКонтрольныхСумм.Account = ПроводкаDSSОбъект.AccountLawson;
		// } RGS AGorlenko 20.07.2017 17:08:17 - 
		
	КонецЦикла;
	
	Если Отказ Тогда
		Сообщить(ТекстСообщенияОбОшибках);
		scr = Новый COMОбъект("WScript.Shell");
		scr.Run("timeout 2",0,1);
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	// { RGS TAlmazova 14.07.2016 18:55:05 - добавление статуса
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	// { RGS AGorlenko 19.07.2017 17:11:25 - Раньше было выше, перенесено сюда
	ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	ДокументЗагрузки.КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций;
	// } RGS AGorlenko 19.07.2017 17:11:52 - Раньше было выше, перенесено сюда
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 18:55:12 - добавление статуса
	
	НЗ.Записать(Истина);
	
	ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount, BaseAmount");
	ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	
	// { RGS TAlmazova 03.07.2017 18:09:38 - проверка контрольных сумм
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU КАК ПроводкаDSSAU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AccountLawson КАК ПроводкаDSSAccount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.BaseAmount) КАК ПроводкаDSSBaseAmount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.TranAmount) КАК ПроводкаDSSTranAmount,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency КАК ПроводкаDSSCurrency
		|ПОМЕСТИТЬ ДанныеТранзакции
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AccountLawson,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПроводкаDSSAU,
		|	ПроводкаDSSAccount,
		|	ПроводкаDSSCurrency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы КАК AU,
		|	КонтрольныеСуммыПриЗагрузке.Account КАК Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency КАК Currency,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.Amount) КАК Amount,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.BaseAmount) КАК BaseAmount
		|ПОМЕСТИТЬ КонтрольныеСуммыПриЗагрузке
		|ИЗ
		|	РегистрСведений.КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|ГДЕ
		|	КонтрольныеСуммыПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы,
		|	КонтрольныеСуммыПриЗагрузке.Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	AU,
		|	Account,
		|	Currency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.AU, ДанныеТранзакции.ПроводкаDSSAU) КАК AU,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Account, ДанныеТранзакции.ПроводкаDSSAccount) КАК Account,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSTranAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0) КАК Поле1,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0) КАК Поле2,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Currency, ДанныеТранзакции.ПроводкаDSSCurrency) КАК Currency
		|ИЗ
		|	КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеТранзакции КАК ДанныеТранзакции
		|		ПО КонтрольныеСуммыПриЗагрузке.Account = ДанныеТранзакции.ПроводкаDSSAccount
		|			И КонтрольныеСуммыПриЗагрузке.Currency = ДанныеТранзакции.ПроводкаDSSCurrency
		|			И КонтрольныеСуммыПриЗагрузке.AU = ДанныеТранзакции.ПроводкаDSSAU
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSTranAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0)
		|			ИЛИ ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0))";
		
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекОшибка = СтрШаблон("Checksums do not match for AU = %1, Account = %2, Currency = %3.", ВыборкаДетальныеЗаписи.AU, ВыборкаДетальныеЗаписи.Account, ВыборкаДетальныеЗаписи.Currency);
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Отказ = Истина;
		ВызватьИсключение ТекОшибка;
	КонецЕсли;
	// } RGS TAlmazova 03.07.2017 18:09:39 - проверка контрольных сумм
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьПроводкуDSS(ПроводкаDSSОбъект, ДанныеДляЗаполнения, КэшСчетовЛоусон, КэшОрганизаций, ПериодЗагрузки, Отказ, ТекстСообщенияОбОшибках, КлиентОтсутствует)
	
	ЗаполнитьЗначенияСвойств(ПроводкаDSSОбъект, ДанныеДляЗаполнения);
	
	Если (Найти(ДанныеДляЗаполнения.Description, "SPLIT INVC") > 0) И (Прав(ПроводкаDSSОбъект.ArInvoice, 1) <> "B") Тогда
		ПроводкаDSSОбъект.ArInvoice = ПроводкаDSSОбъект.ArInvoice + "B";
	КонецЕсли;
		
	ПроводкаDSSОбъект.Номер = ДанныеДляЗаполнения.GltObjId; 
	ПроводкаDSSОбъект.Дата = ПериодЗагрузки;
	ПроводкаDSSОбъект.Документ = ПроводкаDSSОбъект.Ссылка;
	
	ПроводкаDSSОбъект.PeriodLawson = ПреобразоватьВДату(ДанныеДляЗаполнения.PostingDate, "PostingDate");
	Если НЕ Строка(ДанныеДляЗаполнения.Date) = Строка(Дата(1,1,1)) Тогда
		ПроводкаDSSОбъект.DateLawson = ПреобразоватьВДату(ДанныеДляЗаполнения.Date, "Date");
	КонецЕсли;
	Если НЕ Строка(ДанныеДляЗаполнения.UpdateDate) = Строка(Дата(1,1,1)) Тогда
		ПроводкаDSSОбъект.UpdateDateLawson = ПреобразоватьВДату(ДанныеДляЗаполнения.UpdateDate, "UpdateDate");
	КонецЕсли;
	Если НЕ Строка(ДанныеДляЗаполнения.AktDate) = Строка(Дата(1,1,1)) Тогда
		ПроводкаDSSОбъект.AktDateLawson = ПреобразоватьВДату(ДанныеДляЗаполнения.AktDate, "AktDate");
	КонецЕсли;
	
	ПроводкаDSSОбъект.AccountingPeriod = Дата(ДанныеДляЗаполнения.FiscalYear, ДанныеДляЗаполнения.AccountingPeriod, 1);
	
	ПроводкаDSSОбъект.JournalLawson = ДанныеДляЗаполнения.Journal;
	ПроводкаDSSОбъект.SeqTrnsNbrLawson = ДанныеДляЗаполнения.SeqTrnsNbr;
	ПроводкаDSSОбъект.OrigCompanyLawson = ДанныеДляЗаполнения.OrigCompany;
	ПроводкаDSSОбъект.LineNbrLawson = ДанныеДляЗаполнения.LineNbr;
	ПроводкаDSSОбъект.JeTypeLawson = ДанныеДляЗаполнения.JeType;
	
	СтрокаСчетаЛоусон = КэшСчетовЛоусон.Найти(ДанныеДляЗаполнения.Account, "КодЧислом");
	Если СтрокаСчетаЛоусон <> Неопределено Тогда
		ПроводкаDSSОбъект.AccountLawson = СтрокаСчетаЛоусон.Ссылка;
	КонецЕсли;
	// { RGS TAlmazova 24.08.2016 9:51:18 - корректировка по счетам 120106 и 120999
	Если ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.ARClearanceControl или ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.OtherTradeReceivableBilled Тогда
		ПроводкаDSSОбъект.Currency = Константы.rgsВалютаUSD.Получить();
		ПроводкаDSSОбъект.TranAmount = ПроводкаDSSОбъект.BaseAmount;
	КонецЕсли;
	
	// } RGS TAlmazova 24.08.2016 9:51:44 - корректировка по счетам 120106 и 120999
	СтрокаОрганизации = КэшОрганизаций.Найти(ДанныеДляЗаполнения.Company, "Код");
	Если СтрокаОрганизации <> Неопределено Тогда
		ПроводкаDSSОбъект.Company = СтрокаОрганизации.Ссылка;
	Иначе
		НоваяОрганизация = Справочники.Организации.СоздатьЭлемент();
		НоваяОрганизация.Код = ДанныеДляЗаполнения.Company;
		НоваяОрганизация.Наименование = ДанныеДляЗаполнения.CompanyName;
		НоваяОрганизация.Записать();
		ПроводкаDSSОбъект.Company = НоваяОрганизация.Ссылка;
		НоваяСтрокаКэша = КэшОрганизаций.Добавить();
		НоваяСтрокаКэша.Код = ДанныеДляЗаполнения.Company;
		НоваяСтрокаКэша.Ссылка = НоваяОрганизация.Ссылка;
	КонецЕсли;
	
	ПреобразованиеСокрЛП(ПроводкаDSSОбъект);
	
	ЭтоПроводкаAPAP = (СокрЛП(ДанныеДляЗаполнения.System) = "AP" И (СокрЛП(ДанныеДляЗаполнения.SourceCode) = "AP" ИЛИ СокрЛП(ДанныеДляЗаполнения.SourceCode) = "VP"));
	Если ЭтоПроводкаAPAP Тогда
		ПроводкаDSSОбъект.ТипПроводки = ПолучитьТипПроводкиAPAP(ДанныеДляЗаполнения.TranAmount, ДанныеДляЗаполнения.Description);
		ПроводкаDSSОбъект.Ваучер = ПолучитьВаучерПоDescription(ДанныеДляЗаполнения.Description);
	КонецЕсли;
	
	Если ПроводкаDSSОбъект.System = "GL" Тогда
		
		//Если ПроводкаDSSОбъект.SourceCode = "GR" Тогда // переоценка остатков
		//	ПроводкаDSSОбъект.КонтрагентLawson = Справочники.Контрагенты.GLNoName;
		//ИначеЕсли ПроводкаDSSОбъект.SourceCode = "JE" Тогда // ручные транзакции
		//ПроводкаDSSОбъект.КонтрагентLawson = ?(ЗначениеЗаполнено(ДанныеДляЗаполнения.ClientReference), ДанныеДляЗаполнения.ClientReference, Справочники.Контрагенты.GLNoName);
		//КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ClientReference) Тогда
			ПроводкаDSSОбъект.КонтрагентLawson = ДанныеДляЗаполнения.ClientReference;
		Иначе 
			ПроводкаDSSОбъект.КонтрагентLawson = Справочники.Контрагенты.GLNoName;
			КлиентОтсутствует = Истина;
		КонецЕсли;
		
		
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ClientCustomerNumber) Тогда
			ПроводкаDSSОбъект.КонтрагентLawson = ДанныеДляЗаполнения.ClientCustomerNumber;
		// { RGS AGorlenko 08.09.2016 12:47:47 - если начинается на 2, то это нон-трейд
		ИначеЕсли Лев(ДанныеДляЗаполнения.CustomerNumber, 1) = "2" Тогда
			ПроводкаDSSОбъект.КонтрагентLawson = Справочники.Контрагенты.NonTrade;
		// } RGS AGorlenko 08.09.2016 12:48:01 - если начинается на 2, то это нон-трейд
		// { RGS AGorlenko 25.09.2016 17:02:49 - если клиент пропущен, то unreconciled
		ИначеЕсли ПустаяСтрока(ДанныеДляЗаполнения.CustomerNumber) Тогда
			ПроводкаDSSОбъект.КонтрагентLawson = Справочники.Контрагенты.Unreconciled;
		// } RGS AGorlenko 25.09.2016 17:03:18 - если клиент пропущен, то unreconciled
		Иначе
			//ВызватьИсключение "Failed to find Client " + ДанныеДляЗаполнения.CustomerNumber;
			ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразованиеСокрЛП(ПроводкаDSSОбъект)
	
	ПроводкаDSSОбъект.Reference = СокрЛП(ПроводкаDSSОбъект.Reference);
	ПроводкаDSSОбъект.Description = СокрЛП(ПроводкаDSSОбъект.Description);
	ПроводкаDSSОбъект.TransNbr = СокрЛП(ПроводкаDSSОбъект.TransNbr);
	ПроводкаDSSОбъект.Vendor = СокрЛП(ПроводкаDSSОбъект.Vendor);
	ПроводкаDSSОбъект.VendorVname = СокрЛП(ПроводкаDSSОбъект.VendorVname);
	ПроводкаDSSОбъект.CustomerNumber = СокрЛП(ПроводкаDSSОбъект.CustomerNumber);
	ПроводкаDSSОбъект.CustomerName = СокрЛП(ПроводкаDSSОбъект.CustomerName);
	ПроводкаDSSОбъект.ApInvoice = СокрЛП(ПроводкаDSSОбъект.ApInvoice);
	ПроводкаDSSОбъект.ArInvoice = СокрЛП(ПроводкаDSSОбъект.ArInvoice);
	ПроводкаDSSОбъект.PoNumber = СокрЛП(ПроводкаDSSОбъект.PoNumber);
	
КонецПроцедуры

Процедура УстановитьБулевыПоля(ПроводкаDSSОбъект, ДанныеДляЗаполнения)
	
	Если СокрЛП(ДанныеДляЗаполнения.AutoRev) = "Y" Тогда
		ПроводкаDSSОбъект.AutoRevLawson = Истина;
	КонецЕсли;
	
	Если СокрЛП(ДанныеДляЗаполнения.LegalFiscalFlag) = "Y" Тогда
		ПроводкаDSSОбъект.LegalFiscalFlagLawson = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипПроводкиAPAP(TranAmount, Description)
	
	Если TranAmount = 0
		ИЛИ СтрНайти(Description, "Gain/Loss") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.GainLoss;
		
	ИначеЕсли СтрНайти(Description, "Cash Disbursement") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.CashDisbursement;
		
	ИначеЕсли СтрНайти(Description, "Payment Accrual") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.PaymentAccrual;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВаучерПоDescription(Description)
	
	ПозицияЗвездочки = СтрНайти(Description, "*");
	Если ПозицияЗвездочки = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Ваучер = Прав(Description, СтрДлина(Description) - ПозицияЗвездочки);
	Возврат СокрЛП(Ваучер);
	
КонецФункции

Функция ПреобразоватьВДату(Знач Строчка, Знач ВидДаты)
	
	Если ТипЗнч(Строчка) = Тип("Строка") Тогда
		СтрокаДляОбработки = СокрЛП(Строчка);
		Если СтрДлина(СтрокаДляОбработки) = 7 ИЛИ СтрДлина(СтрокаДляОбработки) = 9 Тогда
			СтрокаДляОбработки = "0" + СтрокаДляОбработки;
		КонецЕсли;
		
		День = Лев(СтрокаДляОбработки, 2);
		Месяц = Сред(СтрокаДляОбработки, 3, 2);
		Год = Прав(СтрокаДляОбработки, 2);
		Если СтрНайти(Месяц, "/") ИЛИ СтрНайти(Месяц, ".") ИЛИ СтрНайти(Месяц, ",") Тогда
			Месяц = Сред(СтрокаДляОбработки, 4, 2);
		КонецЕсли;
		
		Если СтрДлина(СтрокаДляОбработки) = 10 ИЛИ СтрДлина(СтрокаДляОбработки) = 18 Тогда
			Год = Сред(СтрокаДляОбработки, 7, 4);
		Иначе	
			Год = Прав(СтрокаДляОбработки, 2);
			Попытка
				Если Число(Год) > 50 Тогда
					Год = "19" + Год;
				Иначе
					Год = "20" + Год;
				КонецЕсли;
			Исключение
				Возврат Дата(1,1,1);
			КонецПопытки;
		КонецЕсли; 
		
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Дата") Тогда
		Возврат Строчка;
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Число") Тогда 
		День = Цел(Строчка/10000);
		Месяц = Цел((Строчка - День*10000)/100);
		Год = Строчка - День*10000 - Месяц * 100;
		Попытка
			Если Число(Год) > 50 Тогда
				Год = 1900 + Год;
			Иначе
				Год = 2000 + Год;
			КонецЕсли;
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	Иначе		
		Возврат Дата(1,1,1);
	КонецЕсли;	
	Попытка 
		Возврат Дата(Год, Месяц, День);
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
	
КонецФункции

Функция СформироватьСвязанныеОбъекты(ПроводкаDSSОбъект, КэшИнвойсов, КэшSalesOrders, КэшCashBatch, КэшBatchAllocation, КэшОрганизаций, КэшРучныхКоррерктировок, КэшМемо, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков,  Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроводкаDSSОбъект.AccountLawson, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	
	СтруктураПоискаSalesOrder = Новый Структура("ArInvoice, Company");
	СтруктураПоискаInvoice = Новый Структура("ArInvoice, Company");
	СтруктураПоискаМемо = Новый Структура("ArInvoice, Client, Company");
	СтруктураПоискаBatch = Новый Структура("ARBatchNbr, Company, Prepayment");
	//СтруктураПоискаBatchAllocation = Новый Структура("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency");
	СтруктураПоискаBatchAllocation = Новый Структура("ARBatchNbr, Company");
	СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency");
	//СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Location, SubSubSegment, AU, Account, Currency");
	
	Если ПроводкаDSSОбъект.System = "BL" Тогда
		
		Если ПроводкаDSSОбъект.SourceCode = "DM" ИЛИ ПроводкаDSSОбъект.SourceCode = "CM" Тогда
			
			// Инвойс
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаInvoice, ПроводкаDSSОбъект);
			СтрокиИнвойса = КэшИнвойсов.НайтиСтроки(СтруктураПоискаInvoice);
			
			Если СтрокиИнвойса.Количество() = 0 Тогда
				
				// { RGS TAlmazova 28.02.2017 19:13:38 - поиск для случаев split currency, если создался обменом
				ТекИнвойс = НайтиИнвойсSplitCurrency(ПроводкаDSSОбъект);
				// } RGS TAlmazova 28.02.2017 19:14:21 - поиск для случаев split currency, если создался обменом
				Если ТекИнвойс = Неопределено Тогда
					ТекИнвойс = СоздатьИнвойс(ПроводкаDSSОбъект, Истина);
					НоваяСтрокаКэша = КэшИнвойсов.Добавить();
					НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
					НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
					НоваяСтрокаКэша.Invoice = ТекИнвойс;
				Иначе
					ДозаполнитьИнвойс(ТекИнвойс, ПроводкаDSSОбъект);
					ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ПроводкаDSSОбъект);
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				КонецЕсли;
			Иначе
				
				ТекИнвойс = СтрокиИнвойса[0].Invoice;
				ДозаполнитьИнвойс(ТекИнвойс, ПроводкаDSSОбъект);
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ПроводкаDSSОбъект);
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаSalesOrder, ПроводкаDSSОбъект);
			// { RGS AGorlenko 17.02.2017 13:29:44 - для случая split currency надо учесть последний символ
			Если СтрЗаканчиваетсяНа(СтруктураПоискаSalesOrder.ArInvoice, "B") Тогда
				СтруктураПоискаSalesOrder.ArInvoice = Лев(СтруктураПоискаSalesOrder.ArInvoice, СтрДлина(СтруктураПоискаSalesOrder.ArInvoice) - 1);
			КонецЕсли;
			// } RGS AGorlenko 17.02.2017 13:30:09 - для случая split currency надо учесть последний символ
			СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSalesOrder);
			
			Если СтрокиSalesOrder.Количество() = 0 Тогда
				ТекSalesOrder = СоздатьSalesOrder(ПроводкаDSSОбъект, ТекИнвойс);
				НоваяСтрокаКэша = КэшSalesOrders.Добавить();
				Если СтрЗаканчиваетсяНа(ПроводкаDSSОбъект.ArInvoice, "B") Тогда
					НоваяСтрокаКэша.ArInvoice = Лев(ПроводкаDSSОбъект.ArInvoice, СтрДлина(ПроводкаDSSОбъект.ArInvoice) - 1);
				Иначе
					НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
				КонецЕсли;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.SalesOrder = ТекSalesOrder;
			Иначе
				ТекSalesOrder = СтрокиSalesOrder[0].SalesOrder;
				ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
			КонецЕсли;
			
			ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
			
		ИначеЕсли ПроводкаDSSОбъект.SourceCode = "JE" Тогда
			
			// Sales order
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаSalesOrder, ПроводкаDSSОбъект);
			СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSalesOrder);
			
			Если СтрокиSalesOrder.Количество() = 0 Тогда
				
				// { RGS TAlmazova 27.07.2016 14:17:56 - 
				Если ПроводкаDSSОбъект.JeTypeLawson = "A" Тогда
					// { RGS TAlmazova 07.11.2016 18:24:14 - игнорим проводки в первый месяц, с типом А
					//Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков Тогда
					Если Не ЭтоПроводкаПоСчетуВыручки И (ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков И НачалоМесяца(ПроводкаDSSОбъект.AccountingPeriod) > НачалоМесяца(ДатаНачалаЗагрузки)) Тогда
					// } RGS TAlmazova 07.11.2016 18:24:41 - игнорим проводки в первый месяц, с типом А
						ТекОшибка = "Failed to find Sales Order for transaction " + ПроводкаDSSОбъект.Номер;
						Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
							ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
						КонецЕсли;
						Отказ = Истина;
					Иначе
						Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
							ОбнулитьСуммыПроводки(ПроводкаDSSОбъект);
							ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, Документы.SalesOrder.ПустаяСсылка());
						Иначе
							ТекSalesOrder = СоздатьSalesOrder(ПроводкаDSSОбъект, , Истина);
							НоваяСтрокаКэша = КэшSalesOrders.Добавить();
							НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
							НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
							НоваяСтрокаКэша.SalesOrder = ТекSalesOrder;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
				// } RGS TAlmazova 27.07.2016 14:17:57 - 
					
					ТекSalesOrder = СоздатьSalesOrder(ПроводкаDSSОбъект, , Истина);
					НоваяСтрокаКэша = КэшSalesOrders.Добавить();
					НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
					НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
					НоваяСтрокаКэша.SalesOrder = ТекSalesOrder;
				
				КонецЕсли;
				
			Иначе
				
				Если НЕ ЭтоПроводкаПоСчетуВыручки И (ПроводкаDSSОбъект.JeTypeLawson = "A" И НачалоМесяца(ПроводкаDSSОбъект.AccountingPeriod) = НачалоМесяца(ДатаНачалаЗагрузки) И Не ЭтоПроводкаПоСчетуВыручки) Тогда
					ОбнулитьСуммыПроводки(ПроводкаDSSОбъект);
				КонецЕсли;
				
				ДозаполнитьSalesOrder(СтрокиSalesOrder[0].SalesOrder, ПроводкаDSSОбъект);
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, СтрокиSalesOrder[0].SalesOrder);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПроводкаDSSОбъект.System = "AR" Тогда
		
		Если ПроводкаDSSОбъект.SourceCode = "RL" ИЛИ ПроводкаDSSОбъект.SourceCode = "RY" Тогда
			
			// Batch allocation
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаBatchAllocation, ПроводкаDSSОбъект);
			СтрокиBatchAllocation = КэшBatchAllocation.НайтиСтроки(СтруктураПоискаBatchAllocation);
			Если СтрокиBatchAllocation.Количество() = 0 Тогда
				ТекBatchAllocation = СоздатьBatchAllocation(ПроводкаDSSОбъект);
				НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
				НоваяСтрокаКэша.ARBatchNbr = ПроводкаDSSОбъект.ARBatchNbr;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.BatchAllocation = ТекBatchAllocation;
			Иначе
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, СтрокиBatchAllocation[0].BatchAllocation);
			КонецЕсли;
			
			// CASH BATCH
			
			Если ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.ReceivedNotApplied Тогда // 120102
				
				//СтруктураПоискаBatch.Prepayment = Ложь;
				//
				//СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
				//Если СтрокиCashBatch.Количество() = 0 Тогда
				//	ТекCashBatch = СоздатьCashBatch(ПроводкаDSSОбъект, Ложь);
				//	НоваяСтрокаКэша = КэшCashBatch.Добавить();
					
				//	НоваяСтрокаКэша.Source = Перечисления.ТипыСоответствий.Lawson;
				//	НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				//	НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
				//	НоваяСтрокаКэша.Location = ПроводкаDSSОбъект.Location;
				//	НоваяСтрокаКэша.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
				//	НоваяСтрокаКэша.AU = ПроводкаDSSОбъект.AU;
				//	НоваяСтрокаКэша.Account = ПроводкаDSSОбъект.AccountLawson;
				//	НоваяСтрокаКэша.Currency = ПроводкаDSSОбъект.Currency;
				
				//	НоваяСтрокаКэша.ARBatchNbr = СтруктураПоискаBatch.ARBatchNbr;
				//	НоваяСтрокаКэша.Prepayment = СтруктураПоискаBatch.Prepayment;
				//	НоваяСтрокаКэша.CashBatch = ТекCashBatch;
				//Иначе
				//	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, СтрокиCashBatch[0].CashBatch);
				//КонецЕсли;
				
			ИначеЕсли ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.AdvancesFromCustomers Тогда // 209000
				
				//СтруктураПоискаBatch.Prepayment = Истина;
				//
				//СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
				//Если СтрокиCashBatch.Количество() = 0 Тогда
				//	ТекCashBatch = СоздатьCashBatch(ПроводкаDSSОбъект, Истина);
				//	НоваяСтрокаКэша = КэшCashBatch.Добавить();
					
				//	НоваяСтрокаКэша.Source = Перечисления.ТипыСоответствий.Lawson;
				//	НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				//	НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
				//	НоваяСтрокаКэша.Location = ПроводкаDSSОбъект.Location;
				//	НоваяСтрокаКэша.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
				//	НоваяСтрокаКэша.AU = ПроводкаDSSОбъект.AU;
				//	НоваяСтрокаКэша.Account = ПроводкаDSSОбъект.AccountLawson;
				//	НоваяСтрокаКэша.Currency = ПроводкаDSSОбъект.Currency;
				
				//	НоваяСтрокаКэша.ARBatchNbr = СтруктураПоискаBatch.ARBatchNbr;
				//	НоваяСтрокаКэша.Prepayment = СтруктураПоискаBatch.Prepayment;
				//	НоваяСтрокаКэша.CashBatch = ТекCashBatch;
				//Иначе
				//	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, СтрокиCashBatch[0].CashBatch);
				//КонецЕсли;
				
			ИначеЕсли ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.TradeReceivables Тогда // 120101
				
				// для начальных этапов работы инвойса и SO может не быть, но добавить надо
				ЗаполнитьЗначенияСвойств(СтруктураПоискаInvoice, ПроводкаDSSОбъект);
				СтрокиИнвойса = КэшИнвойсов.НайтиСтроки(СтруктураПоискаInvoice);
				
				Если СтрокиИнвойса.Количество() = 0 Тогда
					// проверяем случай split currency
					Если СтрДлина(ПроводкаDSSОбъект.ArInvoice) = 11 Тогда
						СтруктураПоискаInvoice.ArInvoice = Лев(ПроводкаDSSОбъект.ArInvoice, 10);
						СтрокиИнвойса = КэшИнвойсов.НайтиСтроки(СтруктураПоискаInvoice);
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокиИнвойса.Количество() = 0 Тогда
					
					// проверим на мемо
					СтруктураПоискаМемо.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
					СтруктураПоискаМемо.Client = ПроводкаDSSОбъект.КонтрагентLawson;
					СтруктураПоискаМемо.Company = ПроводкаDSSОбъект.Company;
					СтрокиМемо = КэшМемо.НайтиСтроки(СтруктураПоискаМемо);
					
					Если СтрокиМемо.Количество() > 0 Тогда
						ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, СтрокиМемо[0].Memo);
					Иначе
						//НайденаОшибка = Истина;
						// { RGS TAlmazova 09.11.2016 10:53:28 - костыль для октября 2016
						Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков Тогда
						//Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков И НЕ(ПроводкаDSSОбъект.Номер = 6241568289 или ПроводкаDSSОбъект.Номер = 6241568290) Тогда
						//Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков И НЕ(ПроводкаDSSОбъект.Номер = 4982175128 или ПроводкаDSSОбъект.Номер = 5285945469 или ПроводкаDSSОбъект.Номер = 5285945470 или ПроводкаDSSОбъект.Номер = 5285945994 или ПроводкаDSSОбъект.Номер = 5285945995 или ПроводкаDSSОбъект.Номер = 5285945996) Тогда
						// } RGS TAlmazova 09.11.2016 10:53:36 - костыль для октября 2016
							ТекОшибка = "Failed to find Invoice for transaction " + ПроводкаDSSОбъект.Номер;
							Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
								ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
							КонецЕсли;
							Отказ = Истина;
						Иначе
							Если Не ЭтоПроводкаПоСчетуВыручки Тогда
								ОбнулитьСуммыПроводки(ПроводкаDSSОбъект);
							КонецЕсли;
							ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					ТекИнвойс = СтрокиИнвойса[0].Invoice;
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаSalesOrder, ПроводкаDSSОбъект);
				СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSalesOrder);
				
				Если СтрокиSalesOrder.Количество() > 0 Тогда
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, СтрокиSalesOrder[0].SalesOrder);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПроводкаDSSОбъект.SourceCode = "RP" Тогда
			
			// Cash batch
			СтруктураПоискаBatch.ARBatchNbr = ПроводкаDSSОбъект.ArBatchNbr;
			СтруктураПоискаBatch.Company    = ПроводкаDSSОбъект.Company;
			СтруктураПоискаBatch.Prepayment = ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.AdvancesFromCustomers;
			СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
			Если СтрокиCashBatch.Количество() = 0 Тогда
				ТекCashBatch = СоздатьCashBatch(ПроводкаDSSОбъект, СтруктураПоискаBatch.Prepayment);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.ArBatchNbr = ПроводкаDSSОбъект.ArBatchNbr;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.Prepayment = СтруктураПоискаBatch.Prepayment;
				НоваяСтрокаКэша.CashBatch = ТекCashBatch;
			Иначе
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, СтрокиCashBatch[0].CashBatch);
			КонецЕсли;
			
		ИначеЕсли ПроводкаDSSОбъект.SourceCode = "RQ" ИЛИ ПроводкаDSSОбъект.SourceCode = "RX" Тогда // рассматриваем отдельно, т.к. это должно относиться к существующему бэтчу
			
			Если ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.ReceivedNotApplied ИЛИ ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.AdvancesFromCustomers Тогда // 120102 или 209000
				СтрокаCashBatch = КэшCashBatch.Найти(ПроводкаDSSОбъект.ArBatchNbr, "ArBatchNbr");
				Если СтрокаCashBatch = Неопределено Тогда
					// { RGS TAlmazova 09.11.2016 10:53:28 - костыль для октября 2016
					Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков Тогда
					//Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков И НЕ(ПроводкаDSSОбъект.Номер = 5581333965) Тогда
						//Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков И НЕ(ПроводкаDSSОбъект.Номер = 6218680953 или ПроводкаDSSОбъект.Номер = 6218680953 или ПроводкаDSSОбъект.Номер = 6238539696 или ПроводкаDSSОбъект.Номер = 6238539697 или ПроводкаDSSОбъект.Номер = 6240204546 или ПроводкаDSSОбъект.Номер = 6240204550 или ПроводкаDSSОбъект.Номер = 6240204551 или ПроводкаDSSОбъект.Номер = 6240204552 или ПроводкаDSSОбъект.Номер = 6240204554 или ПроводкаDSSОбъект.Номер = 6248466282) Тогда
					// } RGS TAlmazova 09.11.2016 10:53:28 - костыль для октября 2016
						ТекОшибка = "Failed to find Cash Batch for transaction " + ПроводкаDSSОбъект.Номер;
						Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
							ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
						КонецЕсли;
						Отказ = Истина;
					Иначе
						Если Не ЭтоПроводкаПоСчетуВыручки Тогда
							ОбнулитьСуммыПроводки(ПроводкаDSSОбъект);
						КонецЕсли;
						ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, Документы.CashBatch.ПустаяСсылка());
					КонецЕсли;
				Иначе
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, СтрокаCashBatch.CashBatch);
				КонецЕсли;
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаInvoice, ПроводкаDSSОбъект);
				СтрокиИнвойса = КэшИнвойсов.НайтиСтроки(СтруктураПоискаInvoice);
				
				Если СтрокиИнвойса.Количество() > 0 Тогда
					
					ТекИнвойс = СтрокиИнвойса[0].Invoice;
					//ДозаполнитьИнвойс(ТекИнвойс, ПроводкаDSSОбъект);
					//ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ПроводкаDSSОбъект);
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
					
				ИначеЕсли ПроводкаDSSОбъект.BaseAmount = 0 И ПроводкаDSSОбъект.TranAmount = 0 Тогда
					
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
					
				Иначе
					// { RGS TAlmazova 20.12.2016 12:09:49 - поиск мемо
					//ТекОшибка = "Failed to find Invoice for transaction " + ПроводкаDSSОбъект.Номер;
					//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
					//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					//КонецЕсли;
					//Отказ = Истина;
					СтруктураПоискаМемо.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
					СтруктураПоискаМемо.Client = ПроводкаDSSОбъект.КонтрагентLawson;
					СтруктураПоискаМемо.Company = ПроводкаDSSОбъект.Company;
					СтрокиМемо = КэшМемо.НайтиСтроки(СтруктураПоискаМемо);
					Если СтрокиМемо.Количество() > 0 Тогда
						ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, СтрокиМемо[0].Memo);
					Иначе
						ТекОшибка = "Failed to find Invoice for transaction " + ПроводкаDSSОбъект.Номер;
						Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
							ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
						КонецЕсли;
						Отказ = Истина;
					КонецЕсли;
					// } RGS TAlmazova 20.12.2016 12:10:00 - поиск мемо
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПроводкаDSSОбъект.SourceCode = "RM" Тогда
			
			// Мемо
			СтруктураПоискаМемо.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
			СтруктураПоискаМемо.Client = ПроводкаDSSОбъект.КонтрагентLawson;
			СтруктураПоискаМемо.Company = ПроводкаDSSОбъект.Company;
			СтрокиМемо = КэшМемо.НайтиСтроки(СтруктураПоискаМемо);
			
			Если СтрокиМемо.Количество() = 0 Тогда
				ТекМемо = СоздатьМемо(ПроводкаDSSОбъект);
				НоваяСтрокаКэша = КэшМемо.Добавить();
				НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
				НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.Memo = ТекМемо;
			Иначе
				ТекМемо = СтрокиМемо[0].Memo;
			КонецЕсли;
			
			ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			
		КонецЕсли;
		
		// для начальных этапов работы инвойса и SO может не быть, но добавить надо
		// { RGS AGorlenko 12.06.2016 19:35:28 - пока будем интерпретировать как ошибку
		//Если СтрокаИнвойса = Неопределено Тогда
		//	
		//	ТекИнвойс = СоздатьИнвойс(ПроводкаDSSОбъект);
		//	НоваяСтрокаКэша = КэшИнвойсов.Добавить();
		//	НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
		//	НоваяСтрокаКэша.Invoice = ТекИнвойс;
		//	
		//Иначе
		//	
		//	ТекИнвойс = СтрокаИнвойса.Invoice;
		//	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
		//	
		//КонецЕсли;
		//
		//ЗаполнитьЗначенияСвойств(СтруктураПоискаSalesOrder, ПроводкаDSSОбъект);
		//СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSalesOrder);
		//
		//Если СтрокиSalesOrder.Количество() = 0 Тогда
		//	ТекSalesOrder = СоздатьSalesOrder(ПроводкаDSSОбъект, ТекИнвойс);
		//	НоваяСтрокаКэша = КэшSalesOrders.Добавить();
		//	НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
		//	НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
		//	НоваяСтрокаКэша.SalesOrder = ТекSalesOrder;
		//Иначе
		//	ОбновитьSalesOrder(СтрокиSalesOrder[0].SalesOrder, ТекИнвойс);
		//	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, СтрокиSalesOrder[0].SalesOrder);
		//КонецЕсли;
		// } RGS AGorlenko 12.06.2016 19:35:42 - пока будем интерпретировать как ошибку
		
	ИначеЕсли ПроводкаDSSОбъект.System = "GL" Тогда
		
		//Если ПроводкаDSSОбъект.SourceCode = "JE" Тогда
			
			СтруктураПоискаРучнойКорректировки.Source = Перечисления.ТипыСоответствий.Lawson;
			СтруктураПоискаРучнойКорректировки.Company = ПроводкаDSSОбъект.Company;
			СтруктураПоискаРучнойКорректировки.Client = ПроводкаDSSОбъект.КонтрагентLawson;
			СтруктураПоискаРучнойКорректировки.Location = ПроводкаDSSОбъект.Location;
			//СтруктураПоискаРучнойКорректировки.GeoMarket = ПроводкаDSSОбъект.GeoMarket;
			//СтруктураПоискаРучнойКорректировки.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
			//СтруктураПоискаРучнойКорректировки.Segment = ПроводкаDSSОбъект.Segment;
			//СтруктураПоискаРучнойКорректировки.SubSegment = ПроводкаDSSОбъект.SubSegment;
			СтруктураПоискаРучнойКорректировки.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
			СтруктураПоискаРучнойКорректировки.AU = ПроводкаDSSОбъект.AU;
			СтруктураПоискаРучнойКорректировки.Account = ПроводкаDSSОбъект.AccountLawson;
			СтруктураПоискаРучнойКорректировки.Currency = ПроводкаDSSОбъект.Currency;
			
			СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
			Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
				ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ПроводкаDSSОбъект);
				НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
				НоваяСтрокаКэша.Source = Перечисления.ТипыСоответствий.Lawson;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
				НоваяСтрокаКэша.Location = ПроводкаDSSОбъект.Location;
				//НоваяСтрокаКэша.GeoMarket = ПроводкаDSSОбъект.GeoMarket;
				//НоваяСтрокаКэша.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
				//НоваяСтрокаКэша.Segment = ПроводкаDSSОбъект.Segment;
				//НоваяСтрокаКэша.SubSegment = ПроводкаDSSОбъект.SubSegment;
				НоваяСтрокаКэша.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
				НоваяСтрокаКэша.AU = ПроводкаDSSОбъект.AU;
				НоваяСтрокаКэша.Account = ПроводкаDSSОбъект.AccountLawson;
				НоваяСтрокаКэша.Currency = ПроводкаDSSОбъект.Currency;
				НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
			Иначе
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
			КонецЕсли;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
КонецФункции

Процедура ОбнулитьСуммыПроводки(ПроводкаDSSОбъект)
	
	ПроводкаDSSОбъект1 = ПроводкаDSSОбъект.Ссылка.ПолучитьОбъект();
	ПроводкаDSSОбъект1.TranAmount = 0;
	ПроводкаDSSОбъект1.BaseAmount = 0;
	ПроводкаDSSОбъект1.ОбменДанными.Загрузка = Истина;
	ПроводкаDSSОбъект1.Записать();
	
КонецПроцедуры

Процедура ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, ТипОбъекта, СвязанныйОбъект)
	
	НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	НЗ.Отбор.ТипСвязанногоОбъекта.Установить(ТипОбъекта);
	НоваяЗапись = НЗ.Добавить();
	НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	НоваяЗапись.ТипСвязанногоОбъекта = ТипОбъекта;
	НоваяЗапись.СвязанныйОбъект = СвязанныйОбъект;
	НЗ.Записать(Истина);
	
КонецПроцедуры

Функция СоздатьИнвойс(ПроводкаDSSОбъект, ПолноеЗаполнение = Ложь)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Номер = ПроводкаDSSОбъект.ArInvoice;
	// { RGS TAlmazova 28.07.2016 17:12:21 - заполнение даты из проводки
	//ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Дата = ПроводкаDSSОбъект.DateLawson;
	ДокОбъект.DocNumber = ДокОбъект.Номер;
	// } RGS TAlmazova 28.07.2016 17:12:27 - заполнение даты из проводки
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	// { RGS TAlmazova 28.02.2017 19:07:47 - заполнение DocID если split currency
	Если (Найти(ПроводкаDSSОбъект.Description, "SPLIT INVC") > 0) Тогда
		ДокОбъект.DocID = ПроводкаDSSОбъект.ArInvoice;
	КонецЕсли;
	// } RGS TAlmazova 28.02.2017 19:08:28 - заполнение DocID если split currency
	Если ПолноеЗаполнение Тогда
		ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
		ДокОбъект.Amount = ПроводкаDSSОбъект.TranAmount;
	КонецЕсли;
	ДокОбъект.ClientID = ПроводкаDSSОбъект.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	//НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	//НЗ.Отбор.ТипСвязанногоОбъекта.Установить(Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice);
	//НоваяЗапись = НЗ.Добавить();
	//НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	//НоваяЗапись.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice;
	//НоваяЗапись.СвязанныйОбъект = ДокОбъект.Ссылка;
	//НЗ.Записать(Истина);
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьИнвойсИзПроводки(Инвойс, ПроводкаDSSОбъект)
	
	//Возврат;
	
	РеквизитыИнвойса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инвойс, "Company,Номер,Дата,Client,Location,SubSubSegment,AU,Account,Currency,Amount,ClientID");
	// { RGS TAlmazova 20.12.2016 1:30:26 - дозаполнение компании в регистре FiscalPayments
	Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) Тогда
		НаборЗаписей = РегистрыСведений.FiscalPayments.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Invoice.Установить(Инвойс);
		НаборЗаписей.Прочитать();
		Для Каждого Запись из НаборЗаписей Цикл
			Если Запись.Company = Справочники.Организации.ПустаяСсылка() Тогда
				Запись.Company = ПроводкаDSSОбъект.Company;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	// } RGS TAlmazova 20.12.2016 1:30:27 - дозаполнение компании в регистре FiscalPayments
	Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Номер) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Client) 
		ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Location) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.SubSubSegment) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.AU) 
		ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Account) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Currency) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Amount)
		ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) Тогда
		ИнвойсОбъект = Инвойс.ПолучитьОбъект();
		Для каждого Реквизит из РеквизитыИнвойса Цикл
			Если Реквизит.Ключ <> "Номер" И Реквизит.Ключ <> "Client" И Реквизит.Ключ <> "Account" И Реквизит.Ключ <> "Amount" И Реквизит.Ключ <> "ClientID" И  Реквизит.Ключ <> "Дата" Тогда
				Если НЕ ЗначениеЗаполнено(Реквизит.Значение) Тогда
					ИнвойсОбъект[Реквизит.Ключ] = ПроводкаDSSОбъект[Реквизит.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Номер) Тогда
			ИнвойсОбъект.Номер = ПроводкаDSSОбъект.ArInvoice;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Account) Тогда
			ИнвойсОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Client) Тогда
			ИнвойсОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
			ИнвойсОбъект.Дата = ПроводкаDSSОбъект.DateLawson;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Amount) Тогда
			ИнвойсОбъект.Amount = ПроводкаDSSОбъект.TranAmount;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) Тогда
			ИнвойсОбъект.ClientID = ПроводкаDSSОбъект.CustomerNumber;
		КонецЕсли;
		ИнвойсОбъект.ОбменДанными.Загрузка = Истина;
		ИнвойсОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьИнвойс(Инвойс, ПроводкаDSSОбъект)
	
	ДокОбъект = Инвойс.ПолучитьОбъект();
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Amount = ПроводкаDSSОбъект.TranAmount;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Функция НайтиИнвойсSplitCurrency(ПроводкаDSSОбъект)
	
	Если СтрЗаканчиваетсяНа(ПроводкаDSSОбъект.ArInvoice, "B") И (Найти(ПроводкаDSSОбъект.Description, "SPLIT INVC") > 0) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Invoice.Ссылка КАК Invoice
			|ИЗ
			|	Документ.Invoice КАК Invoice
			|ГДЕ
			|	Invoice.DocID = &DocID
			|	И Invoice.Company = &Company
			|	И Invoice.DocID <> """"
			|	И НЕ Invoice.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Company", ПроводкаDSSОбъект.Company);
		Запрос.УстановитьПараметр("DocID", ПроводкаDSSОбъект.ArInvoice);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
			ВыборкаДетальныеЗаписи.Следующий();
			ИнвойсОбъект = ВыборкаДетальныеЗаписи.Invoice.ПолучитьОбъект();
			ИнвойсОбъект.Номер =  ИнвойсОбъект.Номер + "B";
			ИнвойсОбъект.DocNumber = ИнвойсОбъект.DocNumber + "B";
			ИнвойсОбъект.ОбменДанными.Загрузка = Истина;
			ИнвойсОбъект.Записать();
			Возврат ВыборкаДетальныеЗаписи.Invoice;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

Функция СоздатьSalesOrder(ПроводкаDSSОбъект, Invoice = Неопределено, ПолноеЗаполнение = Ложь)
	
	ДатаДокумента = ТекущаяДата();
	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	
	ДокОбъект = Документы.SalesOrder.СоздатьДокумент();
	Если СтрЗаканчиваетсяНа(ПроводкаDSSОбъект.ArInvoice, "B") Тогда
		ДокОбъект.Номер = Строка(ПроводкаDSSОбъект.Company) + "_" + Лев(ПроводкаDSSОбъект.ArInvoice, СтрДлина(ПроводкаDSSОбъект.ArInvoice) - 1);
		ДокОбъект.ArInvoice = Лев(ПроводкаDSSОбъект.ArInvoice, СтрДлина(ПроводкаDSSОбъект.ArInvoice) - 1);
	Иначе
		ДокОбъект.Номер = Строка(ПроводкаDSSОбъект.Company) + "_" + ПроводкаDSSОбъект.ArInvoice;
		ДокОбъект.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
	КонецЕсли;
	ДокОбъект.Дата = ДатаДокумента;
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	//ДокОбъект.GeoMarket = ПроводкаDSSОбъект.GeoMarket;
	//ДокОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//ДокОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//ДокОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Invoice = Invoice;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	Если ПолноеЗаполнение Тогда
		ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	КонецЕсли;
	ДокОбъект.OrderType = Перечисления.SalesOrederTypes.SalesOrder;
	ДокОбъект.ClientID = ПроводкаDSSОбъект.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	// { TODO RGS TAlmazova 17.02.2017 17:43:35 - добавление статуса Unbilled для новых СО
	НЗ = РегистрыСведений.SalesOrdersComments.СоздатьНаборЗаписей();
	НЗ.Очистить();
	
	НачатьТранзакцию();
	
	Проблема = Документы.SalesOrderProblem.СоздатьДокумент();
	Проблема.Дата = ДатаДокумента;
	Проблема.SalesOrder = ДокОбъект.Ссылка;
	Проблема.User = AutoUser;
	Проблема.Billed = Перечисления.SalesOrderBilledStatus.Unbilled;
	Проблема.Записать();
	
	НЗ.Очистить();
	НЗ.Отбор.SalesOrder.Установить(ДокОбъект.Ссылка);
	ЗаписьНабора = НЗ.Добавить();
	ЗаписьНабора.Период = ДатаДокумента;
	ЗаписьНабора.SalesOrder = ДокОбъект.Ссылка;
	ЗаписьНабора.Problem = Проблема.Ссылка;
	
	НЗ.Записать();
	
	ЗафиксироватьТранзакцию();
	// } RGS TAlmazova 17.02.2017 17:43:51 - добавление статуса Unbilled для новых СО
	
	//НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	//НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	//НЗ.Отбор.ТипСвязанногоОбъекта.Установить(Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder);
	//НоваяЗапись = НЗ.Добавить();
	//НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	//НоваяЗапись.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder;
	//НоваяЗапись.СвязанныйОбъект = ДокОбъект.Ссылка;
	//НЗ.Записать(Истина);
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьSalesOrder(SalesOrder, ПроводкаDSSОбъект)
	
	ДокОбъект = SalesOrder.ПолучитьОбъект();
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура ОбновитьSalesOrder(SalesOrder, Invoice)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(SalesOrder, "Invoice") = Invoice Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = SalesOrder.ПолучитьОбъект();
	ДокОбъект.Invoice = Invoice;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Функция СоздатьМемо(ПроводкаDSSОбъект)
	
	ДокОбъект = Документы.Memo.СоздатьДокумент();
	ДокОбъект.Номер = ПроводкаDSSОбъект.ArInvoice;
	ДокОбъект.Дата = ПроводкаDSSОбъект.DateLawson;
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	//ДокОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//ДокОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//ДокОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.ClientID = ПроводкаDSSОбъект.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьCashBatch(ПроводкаDSSОбъект, Prepayment)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	//ДокОбъект.Номер = ПроводкаDSSОбъект.ArBatchNbr;
	ДокОбъект.Дата = ПроводкаDSSОбъект.DateLawson;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	ДокОбъект.DocID = ПроводкаDSSОбъект.ARBatchNbr;
	ДокОбъект.PaymentNumber = ПроводкаDSSОбъект.ARBatchNbr;
	//ДокОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//ДокОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//ДокОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Prepayment = Prepayment;
	ДокОбъект.ClientID = ПроводкаDSSОбъект.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	//НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	//НЗ.Отбор.ТипСвязанногоОбъекта.Установить(Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch);
	//НоваяЗапись = НЗ.Добавить();
	//НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	//НоваяЗапись.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch;
	//НоваяЗапись.СвязанныйОбъект = ДокОбъект.Ссылка;
	//НЗ.Записать(Истина);
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьBatchAllocation(ПроводкаDSSОбъект)
	
	ДокОбъект = Документы.BatchAllocation.СоздатьДокумент();
	//ДокОбъект.Номер = ПроводкаDSSОбъект.ArBatchNbr;
	ДокОбъект.Дата = ?(ЗначениеЗаполнено(ПроводкаDSSОбъект.DateLawson), ПроводкаDSSОбъект.DateLawson, ПроводкаDSSОбъект.AccountingPeriod);
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	//ДокОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//ДокОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//ДокОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.DocID = ПроводкаDSSОбъект.ARBatchNbr;
	ДокОбъект.ClientID = ПроводкаDSSОбъект.CustomerNumber;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	//НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	//НЗ.Отбор.ТипСвязанногоОбъекта.Установить(Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation);
	//НоваяЗапись = НЗ.Добавить();
	//НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	//НоваяЗапись.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation;
	//НоваяЗапись.СвязанныйОбъект = ДокОбъект.Ссылка;
	//НЗ.Записать(Истина);
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьРучнуюКорректировку(Client, Account)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Client = &Client
		|	И КлючиРучныхКорректировок.Account = &Account";
	
	Запрос.УстановитьПараметр("Account", Account);
	Запрос.УстановитьПараметр("Client", Client);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.РучнаяКорректировка;
	
КонецФункции

Функция СоздатьРучнуюКорректировку(ПроводкаDSSОбъект)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = ТекущаяДата();
	РучнаяКорректировкаОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	РучнаяКорректировкаОбъект.Company = ПроводкаDSSОбъект.Company;
	РучнаяКорректировкаОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	РучнаяКорректировкаОбъект.Location = ПроводкаDSSОбъект.Location;
	//РучнаяКорректировкаОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//РучнаяКорректировкаОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//РучнаяКорректировкаОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	РучнаяКорректировкаОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	РучнаяКорректировкаОбъект.AU = ПроводкаDSSОбъект.AU;
	РучнаяКорректировкаОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	РучнаяКорректировкаОбъект.Currency = ПроводкаDSSОбъект.Currency;
	РучнаяКорректировкаОбъект.ClientID = ПроводкаDSSОбъект.Reference;
	РучнаяКорректировкаОбъект.Записать();
	
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, РучнаяКорректировкаОбъект.Ссылка);
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

Процедура ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS,
		//|	ВЫБОР
		//|		КОГДА DSSСформированныеПриЗагрузке.ПроводкаDSS.SourceCode = ""RP""
		//|				ИЛИ DSSСформированныеПриЗагрузке.ПроводкаDSS.SourceCode = ""RQ""
		//|				ИЛИ DSSСформированныеПриЗагрузке.ПроводкаDSS.SourceCode = ""RU""
		//|			ТОГДА 0
		//|		ИНАЧЕ 1
		//|	КОНЕЦ КАК Приоритет
		|	ВЫБОР
		|		КОГДА DSSСформированныеПриЗагрузке.ПроводкаDSS.SourceCode = ""RP""
		|				Тогда 0
		|		Когда DSSСформированныеПриЗагрузке.ПроводкаDSS.SourceCode = ""RQ"" ИЛИ DSSСформированныеПриЗагрузке.ПроводкаDSS.SourceCode = ""RX""
		|				Тогда 1
		|		Когда DSSСформированныеПриЗагрузке.ПроводкаDSS.SourceCode = ""RU""
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ DSSСформированныеПриЗагрузке.ИгнорироватьОбработку
		|	И НЕ DSSСформированныеПриЗагрузке.ОшибкаПриПоискеСвязанныхОбъектов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Номер";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТекстОшибок = "";
	
	НачатьТранзакцию();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекДок = ВыборкаДетальныеЗаписи.ПроводкаDSS.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибок;
		КонецПопытки;
		
	КонецЦикла;
	
	//Если Не ПустаяСтрока(ТекстОшибок) Тогда
	//	ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибок);
	//Иначе
	ОбновитьСуммыИнвойсов(СтруктураПараметров.Ссылка);
	ОбновитьСтатусыSalesOrder(СтруктураПараметров.Ссылка);
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.PostedTransactions;
	ДокументЗагрузки.Записать();
	//КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновитьСтатусыSalesOrder(ДокументЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект КАК СвязанныйОбъект
	|ПОМЕСТИТЬ ВТ_Invoices
	|ИЗ
	|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
	|		ПО (DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки)
	|			И DSSСформированныеПриЗагрузке.ПроводкаDSS = DSSСвязанныеДокументы.ПроводкаDSS
	|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСпроводкойDSS.Invoice))
	|ГДЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект <> ЗНАЧЕНИЕ(Документ.Invoice.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвязанныйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	BilledARОбороты.Invoice КАК Invoice
	|ПОМЕСТИТЬ ВТ_ИнвойсыСОборотами
	|ИЗ
	|	РегистрНакопления.BilledAR.Обороты(
	|			,
	|			,
	|			,
	|			Invoice В
	|				(ВЫБРАТЬ
	|					ВТ.СвязанныйОбъект
	|				ИЗ
	|					ВТ_Invoices КАК ВТ)) КАК BilledARОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Invoice
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	SalesOrder.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_SO
	|ИЗ
	|	Документ.SalesOrder КАК SalesOrder
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнвойсыСОборотами КАК ВТ_ИнвойсыСОборотами
	|		ПО SalesOrder.Invoice = ВТ_ИнвойсыСОборотами.Invoice
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_SO.Ссылка КАК Ссылка,
	|	SalesOrdersCommentsСрезПоследних.Problem,
	|	SalesOrdersCommentsСрезПоследних.Problem.Reason КАК Reason,
	|	SalesOrdersCommentsСрезПоследних.Problem.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
	|	SalesOrdersCommentsСрезПоследних.Problem.EscalateTo КАК EscalateTo,
	|	ВЫРАЗИТЬ(SalesOrdersCommentsСрезПоследних.Problem.Details КАК СТРОКА(1024)) КАК Details,
	|	ВЫРАЗИТЬ(SalesOrdersCommentsСрезПоследних.Problem.ActionItem КАК СТРОКА(1024)) КАК ActionItem,
	|	SalesOrdersCommentsСрезПоследних.Период
	|ИЗ
	|	ВТ_SO КАК ВТ_SO
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.UnbilledAR.Остатки(
	|				,
	|				SalesOrder В
	|					(ВЫБРАТЬ
	|						ВТ_SO.Ссылка
	|					ИЗ
	|						ВТ_SO КАК ВТ_SO)) КАК UnbilledARОстатки
	|		ПО ВТ_SO.Ссылка = UnbilledARОстатки.SalesOrder
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrdersComments.СрезПоследних КАК SalesOrdersCommentsСрезПоследних
	|		ПО ВТ_SO.Ссылка = SalesOrdersCommentsСрезПоследних.SalesOrder
	|ГДЕ
	|	ЕСТЬNULL(UnbilledARОстатки.AmountОстаток, 0) = 0
	|	И (SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.Unbilled)
	|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.ПустаяСсылка)
	|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументЗагрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяДата = ТекущаяДата();
	НачалоМесТекДата = НачалоМесяца(ТекущаяДата);
	
	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	
	НЗ = РегистрыСведений.SalesOrdersComments.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(ТекущаяДата);
	
	Пока Выборка.Следующий() Цикл
		
		НЗ.Очистить();
		
		НачатьТранзакцию();
		
		Проблема = Документы.SalesOrderProblem.СоздатьДокумент();
		Проблема.Дата = ТекущаяДата;
		Проблема.SalesOrder = Выборка.Ссылка;
		Проблема.User = AutoUser;
		Проблема.Billed = Перечисления.SalesOrderBilledStatus.Billed;
		Если ЗначениеЗаполнено(Выборка.Problem) И Выборка.Период >= НачалоМесТекДата Тогда
			 Проблема.Reason = Выборка.Reason;
			 Проблема.ExpectedDateForInvoice = Выборка.ExpectedDateForInvoice;
			 Проблема.Details = Выборка.Details;
			 Проблема.ActionItem = Выборка.ActionItem;
			 Если ЗначениеЗаполнено(Выборка.EscalateTo) Тогда
				Проблема.EscalateTo = Выборка.EscalateTo;
				МассивОтветственных = Документы.SalesOrder.ПолучитьОтветственныхПоSO(Выборка.Ссылка, Выборка.EscalateTo);
				Если МассивОтветственных.Количество() = 0 Тогда
					СообщениеОбОшибке = "For the selected Sales Order is not filled Responsible";
					Прервать;
				КонецЕсли;
				Проблема.Responsibles.Очистить();
				Для каждого ТекОтветственный Из МассивОтветственных Цикл
					НоваяСтрока = Проблема.Responsibles.Добавить();
					НоваяСтрока.Responsible = ТекОтветственный;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Проблема.Записать();
		
		НЗ.Очистить();
		НЗ.Отбор.SalesOrder.Установить(Выборка.Ссылка);
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.Период = ТекущаяДата;
		ЗаписьНабора.SalesOrder = Выборка.Ссылка;
		ЗаписьНабора.Problem = Проблема.Ссылка;
		
		НЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусыОплаты(ДокументЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект КАК СвязанныйОбъект
	|ПОМЕСТИТЬ ВТ_Invoices
	|ИЗ
	|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
	|		ПО (DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки)
	|			И DSSСформированныеПриЗагрузке.ПроводкаDSS = DSSСвязанныеДокументы.ПроводкаDSS
	|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСпроводкойDSS.Invoice))
	|ГДЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект <> ЗНАЧЕНИЕ(Документ.Invoice.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвязанныйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	BilledARОбороты.Invoice КАК Invoice
	|ПОМЕСТИТЬ ВТ_ИнвойсыСОборотами
	|ИЗ
	|	РегистрНакопления.BilledAR.Обороты(
	|			,
	|			,
	|			,
	|			Invoice В
	|				(ВЫБРАТЬ
	|					ВТ.СвязанныйОбъект
	|				ИЗ
	|					ВТ_Invoices КАК ВТ)) КАК BilledARОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Invoice
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	SalesOrder.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_SO
	|ИЗ
	|	Документ.SalesOrder КАК SalesOrder
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнвойсыСОборотами КАК ВТ_ИнвойсыСОборотами
	|		ПО SalesOrder.Invoice = ВТ_ИнвойсыСОборотами.Invoice
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_SO.Ссылка КАК Ссылка,
	|	SalesOrdersCommentsСрезПоследних.Problem,
	|	SalesOrdersCommentsСрезПоследних.Problem.Reason КАК Reason,
	|	SalesOrdersCommentsСрезПоследних.Problem.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
	|	SalesOrdersCommentsСрезПоследних.Problem.EscalateTo КАК EscalateTo,
	|	ВЫРАЗИТЬ(SalesOrdersCommentsСрезПоследних.Problem.Details КАК СТРОКА(1024)) КАК Details,
	|	ВЫРАЗИТЬ(SalesOrdersCommentsСрезПоследних.Problem.ActionItem КАК СТРОКА(1024)) КАК ActionItem,
	|	SalesOrdersCommentsСрезПоследних.Период
	|ИЗ
	|	ВТ_SO КАК ВТ_SO
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.UnbilledAR.Остатки(
	|				,
	|				SalesOrder В
	|					(ВЫБРАТЬ
	|						ВТ_SO.Ссылка
	|					ИЗ
	|						ВТ_SO КАК ВТ_SO)) КАК UnbilledARОстатки
	|		ПО ВТ_SO.Ссылка = UnbilledARОстатки.SalesOrder
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrdersComments.СрезПоследних КАК SalesOrdersCommentsСрезПоследних
	|		ПО ВТ_SO.Ссылка = SalesOrdersCommentsСрезПоследних.SalesOrder
	|ГДЕ
	|	ЕСТЬNULL(UnbilledARОстатки.AmountОстаток, 0) = 0
	|	И (SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.Unbilled)
	|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.ПустаяСсылка)
	|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументЗагрузки);
	
КонецПроцедуры

Процедура ОбновитьСуммыИнвойсов(ДокументЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект
	|ИЗ
	|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
	|		ПО (DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки)
	|			И DSSСформированныеПриЗагрузке.ПроводкаDSS = DSSСвязанныеДокументы.ПроводкаDSS
	|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСпроводкойDSS.Invoice))
	|ГДЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект <> ЗНАЧЕНИЕ(Документ.Invoice.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументЗагрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Документы.Invoice.ОбновитьСуммуДокумента(Выборка.СвязанныйОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрольныеСуммы(Ссылка, ТаблицаДанныхКонтрольныеСуммы)
	
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанныхКонтрольныеСуммы.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.AU.Имя = "ИдентификаторСистемы";
	//ТаблицаДанныхКонтрольныеСуммы.Колонки.TranAmount.Имя = "Amount";
	
	
	НЗ = РегистрыСведений.КонтрольныеСуммыПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанныхКонтрольныеСуммы);
	НЗ.Записать(Истина);
	
	
КонецПроцедуры

#КонецЕсли
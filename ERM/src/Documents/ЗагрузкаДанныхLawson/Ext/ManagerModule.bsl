#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТаблицаДанных = СтруктураПараметров.ТаблицаДанных;
	ТекстОшибки = "";
	
	ФайлДанных = СтруктураПараметров.ИсточникДанных.Получить();
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = ИмяКаталога + "\DSS.csv";
	ФайлДанных.Записать(ПутьКФайлу);
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ "DSS.csv" +"]" + Символы.ПС + "DecimalSymbol=.");
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;		
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	
	Стр_SQL = "Select * FROM DSS.csv";
	rs.Open(Стр_SQL, Connection);
	
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	СоответствиеКолонок = Новый Соответствие;
	Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
		СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
	КонецЦикла;
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	rs.MoveFirst();
	
	Пока rs.EOF() = 0 Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		
		Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
			
			Попытка
				ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
			Исключение
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
			
			Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
			Иначе
				СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
		rs.MoveNext();
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяКаталога);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.DSSSourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 14.07.2016 19:30:40 - установка статуса документа
	ДокументЗагрузки = Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.LoadedSourseData;
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 19:30:45 - установка статуса документа
	
КонецПроцедуры

Процедура ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	DSSSourceData.CurrencyCode КАК Идентификатор
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО (DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки)
		|			И DSSSourceData.CurrencyCode = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ DSSSourceData.CurrencyCode = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	DSSSourceData.Account
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО DSSSourceData.Account = Lawson.КодЧислом
		|			И (НЕ Lawson.ПометкаУдаления)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И DSSSourceData.Account <> 0
		|	И Lawson.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	DSSSourceData.Company
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И DSSSourceData.Company = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И DSSSourceData.Company <> 0
		|	И Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	DSSSourceData.SubSubSeg
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И DSSSourceData.SubSubSeg = Сегменты.Код
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	DSSSourceData.Location
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И DSSSourceData.Location = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	DSSSourceData.AccountUnit
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И DSSSourceData.AccountUnit = КостЦентры.Код
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И КостЦентры.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО DSSSourceData.AccountUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket,
		|	ЕСТЬNULL(HFM_Locations1.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоMgmtctry
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations1
		|		ПО DSSSourceData.Mgmtctry = HFM_Locations1.Код
		|			И (НЕ HFM_Locations1.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО DSSSourceData.AccountUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО DSSSourceData.Account = Lawson.КодЧислом
		|			И (НЕ Lawson.ПометкаУдаления)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО DSSSourceData.Company = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[0].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
			ТекОбъект.Записать();
			
		ИначеЕсли НЕ ВыборкаЛокаций.LocationПоMgmtctry.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоMgmtctry;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.Lawson;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSSourceData.BusSeg КАК Segment,
		|	DSSSourceData.SubSeg КАК SubSegment,
		|	DSSSourceData.SubSubSeg КАК SubSubSegment,
		|	DSSSourceData.Geo КАК Geomarket,
		|	DSSSourceData.SubGeo КАК SubGeomarket,
		|	DSSSourceData.CustomerNumber,
		|	DSSSourceData.Reference,
		|	DSSSourceData.CurrencyCode КАК Currency,
		|	DSSSourceData.AccountUnit,
		|	DSSSourceData.System,
		|	DSSSourceData.JeType,
		|	DSSSourceData.Journal,
		|	DSSSourceData.GltObjId,
		|	DSSSourceData.Area,
		|	DSSSourceData.Mgmtctry,
		|	DSSSourceData.Company,
		|	DSSSourceData.Location,
		|	DSSSourceData.MgmtNIS_BLSummaryAcct,
		|	DSSSourceData.SummaryAcct,
		|	DSSSourceData.Account,
		|	DSSSourceData.SubAccount,
		|	DSSSourceData.FiscalYear,
		|	DSSSourceData.Date,
		|	DSSSourceData.AccountingPeriod,
		|	DSSSourceData.UpdateDate,
		|	DSSSourceData.SeqTrnsNbr,
		|	DSSSourceData.PostingDate,
		|	DSSSourceData.Description,
		|	DSSSourceData.TranAmount,
		|	DSSSourceData.BaseAmount,
		|	DSSSourceData.OrigCompany,
		|	DSSSourceData.Activity,
		|	DSSSourceData.SourceCode,
		|	DSSSourceData.LineNbr,
		|	DSSSourceData.AutoRev,
		|	DSSSourceData.Operator,
		|	DSSSourceData.LegalFiscalFlag,
		|	DSSSourceData.Vendor,
		|	DSSSourceData.VendorVName,
		|	DSSSourceData.ApInvoice,
		|	DSSSourceData.TransNbr,
		|	DSSSourceData.OrigOperatorId,
		|	DSSSourceData.ProcessLevel,
		|	DSSSourceData.CashCode,
		|	DSSSourceData.PoNumber,
		|	DSSSourceData.LineNbrIc,
		|	DSSSourceData.PoCode,
		|	DSSSourceData.ItemDescription,
		|	DSSSourceData.ArInvoice,
		|	DSSSourceData.TaxCode,
		|	DSSSourceData.Item,
		|	DSSSourceData.DocumentNbr,
		|	DSSSourceData.ContractNumber,
		|	DSSSourceData.AktOfAcceptance,
		|	DSSSourceData.AktDate,
		|	DSSSourceData.ApTransFormId,
		|	DSSSourceData.Urn,
		|	DSSSourceData.CustomerName,
		|	DSSSourceData.ArBatchNbr,
		|	DSSSourceData.CompanyName
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.DSSSourceData КАК DSSSourceData
		|ГДЕ
		|	DSSSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CustomerNumber
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовReference
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Reference
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Currency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеФайла.ArInvoice КАК ArInvoice,
		|	Организации.Ссылка КАК Company
		|ПОМЕСТИТЬ ВТ_КлючиПоискаInvoiceSalesOrders
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_ДанныеФайла.Company = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ArInvoice,
		|	Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Lawson.КодЧислом,
		|	Lawson.Ссылка
		|ИЗ
		|	ПланСчетов.Lawson КАК Lawson
		|ГДЕ
		|	НЕ Lawson.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиИнвойсов.ArInvoice КАК ArInvoice,
		|	КлючиИнвойсов.Invoice
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice
		|ГДЕ
		|	КлючиИнвойсов.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиSalesOrders.ArInvoice,
		|	КлючиSalesOrders.Company,
		|	КлючиSalesOrders.SalesOrder
		|ИЗ
		|	РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrders
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПоискаInvoiceSalesOrders КАК ВТ_КлючиПоискаInvoiceSalesOrders
		|		ПО КлючиSalesOrders.ArInvoice = ВТ_КлючиПоискаInvoiceSalesOrders.ArInvoice
		|			И КлючиSalesOrders.Company = ВТ_КлючиПоискаInvoiceSalesOrders.Company
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиCashBatch.Source,
		|	КлючиCashBatch.Company,
		|	КлючиCashBatch.Client,
		|	КлючиCashBatch.Location,
		|	КлючиCashBatch.SubSubSegment,
		|	КлючиCashBatch.AU,
		|	КлючиCashBatch.Account,
		|	КлючиCashBatch.Currency,
		|	КлючиCashBatch.CashBatch,
		|	КлючиCashBatch.Prepayment
		|ИЗ
		|	РегистрСведений.КлючиCashBatch КАК КлючиCashBatch
		|ГДЕ
		|	КлючиCashBatch.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиBatchAllocation.Source,
		|	КлючиBatchAllocation.Company,
		|	КлючиBatchAllocation.Client,
		|	КлючиBatchAllocation.Location,
		|	КлючиBatchAllocation.SubSubSegment,
		|	КлючиBatchAllocation.AU,
		|	КлючиBatchAllocation.Account,
		|	КлючиBatchAllocation.Currency,
		|	КлючиBatchAllocation.BatchAllocation
		|ИЗ
		|	РегистрСведений.КлючиBatchAllocation КАК КлючиBatchAllocation
		|ГДЕ
		|	КлючиBatchAllocation.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсключенияПриЗагрузкеDSS.System,
		|	ИсключенияПриЗагрузкеDSS.AU
		|ИЗ
		|	РегистрСведений.ИсключенияПриЗагрузкеDSS КАК ИсключенияПриЗагрузкеDSS
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Код,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Source,
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Client,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.AU,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиMemo.ArInvoice,
		|	КлючиMemo.Client,
		|	КлючиMemo.Memo
		|ИЗ
		|	РегистрСведений.КлючиMemo КАК КлючиMemo
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК ClientCustomerNumber,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_СоответствиеКлиентовReference.ОбъектПриемника КАК ClientReference,
		|	ВТ_ДанныеФайла.System,
		|	ВТ_ДанныеФайла.SourceCode,
		|	ВТ_ДанныеФайла.Account,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.Date,
		|	ВТ_ДанныеФайла.Reference,
		|	ВТ_ДанныеФайла.Description,
		|	ВТ_ДанныеФайла.TranAmount,
		|	ВТ_ДанныеФайла.PostingDate,
		|	ВТ_ДанныеФайла.Company,
		|	ВТ_ДанныеФайла.UpdateDate,
		|	ВТ_ДанныеФайла.SeqTrnsNbr,
		|	ВТ_ДанныеФайла.OrigCompany,
		|	ВТ_ДанныеФайла.Activity,
		|	ВТ_ДанныеФайла.JeType,
		|	ВТ_ДанныеФайла.Journal,
		|	ВТ_ДанныеФайла.LineNbr,
		|	ВТ_ДанныеФайла.AutoRev,
		|	ВТ_ДанныеФайла.Operator,
		|	ВТ_ДанныеФайла.LegalFiscalFlag,
		|	ВТ_ДанныеФайла.Vendor,
		|	ВТ_ДанныеФайла.VendorVName,
		|	ВТ_ДанныеФайла.ApInvoice,
		|	ВТ_ДанныеФайла.TransNbr,
		|	ВТ_ДанныеФайла.OrigOperatorId,
		|	ВТ_ДанныеФайла.ProcessLevel,
		|	ВТ_ДанныеФайла.CashCode,
		|	ВТ_ДанныеФайла.PoNumber,
		|	ВТ_ДанныеФайла.LineNbrIc,
		|	ВТ_ДанныеФайла.PoCode,
		|	ВТ_ДанныеФайла.ItemDescription,
		|	ВТ_ДанныеФайла.CustomerNumber,
		|	ВТ_ДанныеФайла.CustomerName,
		|	ВТ_ДанныеФайла.ArInvoice,
		|	ВТ_ДанныеФайла.TaxCode,
		|	ВТ_ДанныеФайла.Item,
		|	ВТ_ДанныеФайла.DocumentNbr,
		|	ВТ_ДанныеФайла.ContractNumber,
		|	ВТ_ДанныеФайла.AktOfAcceptance,
		|	ВТ_ДанныеФайла.AktDate,
		|	ВТ_ДанныеФайла.ApTransFormId,
		|	ВТ_ДанныеФайла.Urn,
		|	ЕСТЬNULL(ПроводкаDSS.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПроводкаDSS,
		|	ВТ_ДанныеФайла.GltObjId КАК GltObjId,
		|	ВТ_ДанныеФайла.FiscalYear,
		|	ВТ_ДанныеФайла.AccountingPeriod,
		|	ВТ_ДанныеФайла.CompanyName,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Ссылка КАК AU,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.CustomerNumber = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовReference КАК ВТ_СоответствиеКлиентовReference
		|		ПО ВТ_ДанныеФайла.Reference = ВТ_СоответствиеКлиентовReference.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ПроводкаDSS
		|		ПО (НЕ ПроводкаDSS.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.GltObjId = ПроводкаDSS.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AccountUnit = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	GltObjId";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.Lawson);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	КэшСчетовЛоусон = РезультатЗапроса[5].Выгрузить();
	КэшСчетовЛоусон.Индексы.Добавить("КодЧислом");
	
	КэшИнвойсов = РезультатЗапроса[6].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice");
	
	КэшSalesOrders = РезультатЗапроса[7].Выгрузить();
	КэшSalesOrders.Индексы.Добавить("ArInvoice, Company");
	
	КэшCashBatch = РезультатЗапроса[8].Выгрузить();
	КэшCashBatch.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency, Prepayment");
	
	КэшBatchAllocation = РезультатЗапроса[9].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency");
	
	ТаблицаИсключений = РезультатЗапроса[10].Выгрузить();
	ТаблицаИсключений.Индексы.Добавить("System, AU");
	
	КэшОрганизаций = РезультатЗапроса[11].Выгрузить();
	КэшОрганизаций.Индексы.Добавить("Код");
	
	КэшРучныхКоррерктировок = РезультатЗапроса[12].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency");
	
	КэшМемо = РезультатЗапроса[13].Выгрузить();
	КэшМемо.Индексы.Добавить("ArInvoice, Client");
	
	ТаблицаДаты = РезультатЗапроса[14].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[15].Выбрать();
	
	НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	СтруктураПоискаИсключений = Новый Структура("System, AU");
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПроводкаDSS) Тогда
			// TODO RGS AGorlenko 12.07.2016: убрать. Временно перезаполняем
			Если ВыборкаДетальныеЗаписи.System <> "GL" Тогда
				Продолжить;
			КонецЕсли;
			ПроводкаDSSОбъект = ВыборкаДетальныеЗаписи.ПроводкаDSS.ПолучитьОбъект();
		Иначе
			ПроводкаDSSОбъект = Документы.ПроводкаDSS.СоздатьДокумент();
			ПроводкаDSSОбъект.GUID = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		Если Дата(ВыборкаДетальныеЗаписи.FiscalYear, ВыборкаДетальныеЗаписи.AccountingPeriod, 1) < ДатаНачалаЗагрузки Тогда
			
			ТекОшибка = "Can't load data earlier than the start date for " + ВыборкаДетальныеЗаписи.GltObjId;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьПроводкуDSS(ПроводкаDSSОбъект, ВыборкаДетальныеЗаписи, КэшСчетовЛоусон, КэшОрганизаций, СтруктураПараметров.Дата, Отказ, ТекстСообщенияОбОшибках);
		
		ПроводкаDSSОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ПроводкаDSSОбъект, КэшИнвойсов, КэшSalesOrders, КэшCashBatch, КэшBatchAllocation, КэшОрганизаций, КэшРучныхКоррерктировок, КэшМемо, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		СтруктураПоискаИсключений.System = ПроводкаDSSОбъект.System;
		СтруктураПоискаИсключений.AU = ПроводкаDSSОбъект.AU;
		СтрокиИсключений = ТаблицаИсключений.НайтиСтроки(СтруктураПоискаИсключений);
		
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.ДокументЗагрузки = СтруктураПараметров.Ссылка;
		ЗаписьНабора.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
		ЗаписьНабора.ИгнорироватьОбработку = СтрокиИсключений.Количество() > 0;
		ЗаписьНабора.ОшибкаПриПоискеСвязанныхОбъектов = НайденаОшибкаПриПоискеСвязанныхОбъектов;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	// { RGS TAlmazova 14.07.2016 18:55:05 - добавление статуса
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 18:55:12 - добавление статуса
	
	НЗ.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьПроводкуDSS(ПроводкаDSSОбъект, ДанныеДляЗаполнения, КэшСчетовЛоусон, КэшОрганизаций, ПериодЗагрузки, Отказ, ТекстСообщенияОбОшибках)
	
	ЗаполнитьЗначенияСвойств(ПроводкаDSSОбъект, ДанныеДляЗаполнения);
	
	Если (Найти(ДанныеДляЗаполнения.Description, "SPLIT INVC") > 0) И (Прав(ПроводкаDSSОбъект.ArInvoice, 1) <> "B") Тогда
		ПроводкаDSSОбъект.ArInvoice = ПроводкаDSSОбъект.ArInvoice + "B";	
	КонецЕсли;
		
	ПроводкаDSSОбъект.Номер = ДанныеДляЗаполнения.GltObjId; 
	ПроводкаDSSОбъект.Дата = ПериодЗагрузки;
	ПроводкаDSSОбъект.Документ = ПроводкаDSSОбъект.Ссылка;
	
	ПроводкаDSSОбъект.PeriodLawson = ПреобразоватьВДату(ДанныеДляЗаполнения.PostingDate, "PostingDate");
	Если НЕ Строка(ДанныеДляЗаполнения.Date) = Строка(Дата(1,1,1)) Тогда
		ПроводкаDSSОбъект.DateLawson = ПреобразоватьВДату(ДанныеДляЗаполнения.Date, "Date");
	КонецЕсли;
	Если НЕ Строка(ДанныеДляЗаполнения.UpdateDate) = Строка(Дата(1,1,1)) Тогда
		ПроводкаDSSОбъект.UpdateDateLawson = ПреобразоватьВДату(ДанныеДляЗаполнения.UpdateDate, "UpdateDate");
	КонецЕсли;
	Если НЕ Строка(ДанныеДляЗаполнения.AktDate) = Строка(Дата(1,1,1)) Тогда
		ПроводкаDSSОбъект.AktDateLawson = ПреобразоватьВДату(ДанныеДляЗаполнения.AktDate, "AktDate");
	КонецЕсли;
	
	ПроводкаDSSОбъект.AccountingPeriod = Дата(ДанныеДляЗаполнения.FiscalYear, ДанныеДляЗаполнения.AccountingPeriod, 1);
	
	ПроводкаDSSОбъект.JournalLawson = ДанныеДляЗаполнения.Journal;
	ПроводкаDSSОбъект.SeqTrnsNbrLawson = ДанныеДляЗаполнения.SeqTrnsNbr;
	ПроводкаDSSОбъект.OrigCompanyLawson = ДанныеДляЗаполнения.OrigCompany;
	ПроводкаDSSОбъект.LineNbrLawson = ДанныеДляЗаполнения.LineNbr;
	ПроводкаDSSОбъект.JeTypeLawson = ДанныеДляЗаполнения.JeType;
	
	СтрокаСчетаЛоусон = КэшСчетовЛоусон.Найти(ДанныеДляЗаполнения.Account, "КодЧислом");
	Если СтрокаСчетаЛоусон <> Неопределено Тогда
		ПроводкаDSSОбъект.AccountLawson = СтрокаСчетаЛоусон.Ссылка;
	КонецЕсли;
	// { RGS TAlmazova 24.08.2016 9:51:18 - корректировка по счетам 120106 и 120999
	Если ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.ARClearanceControl или ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.OtherTradeReceivableBilled Тогда
		ПроводкаDSSОбъект.Currency = Константы.rgsВалютаUSD;
		ПроводкаDSSОбъект.TranAmount = ПроводкаDSSОбъект.BaseAmount;
	КонецЕсли;
	
	// } RGS TAlmazova 24.08.2016 9:51:44 - корректировка по счетам 120106 и 120999
	СтрокаОрганизации = КэшОрганизаций.Найти(ДанныеДляЗаполнения.Company, "Код");
	Если СтрокаОрганизации <> Неопределено Тогда
		ПроводкаDSSОбъект.Company = СтрокаОрганизации.Ссылка;
	Иначе
		НоваяОрганизация = Справочники.Организации.СоздатьЭлемент();
		НоваяОрганизация.Код = ДанныеДляЗаполнения.Company;
		НоваяОрганизация.Наименование = ДанныеДляЗаполнения.CompanyName;
		НоваяОрганизация.Записать();
		ПроводкаDSSОбъект.Company = НоваяОрганизация.Ссылка;
		НоваяСтрокаКэша = КэшОрганизаций.Добавить();
		НоваяСтрокаКэша.Код = ДанныеДляЗаполнения.Company;
		НоваяСтрокаКэша.Ссылка = НоваяОрганизация.Ссылка;
	КонецЕсли;
	
	ПреобразованиеСокрЛП(ПроводкаDSSОбъект);
	
	ЭтоПроводкаAPAP = (СокрЛП(ДанныеДляЗаполнения.System) = "AP" И (СокрЛП(ДанныеДляЗаполнения.SourceCode) = "AP" ИЛИ СокрЛП(ДанныеДляЗаполнения.SourceCode) = "VP"));
	Если ЭтоПроводкаAPAP Тогда
		ПроводкаDSSОбъект.ТипПроводки = ПолучитьТипПроводкиAPAP(ДанныеДляЗаполнения.TranAmount, ДанныеДляЗаполнения.Description);
		ПроводкаDSSОбъект.Ваучер = ПолучитьВаучерПоDescription(ДанныеДляЗаполнения.Description);
	КонецЕсли;
	
	Если ПроводкаDSSОбъект.System = "GL" Тогда
		
		Если ПроводкаDSSОбъект.SourceCode = "GR" Тогда // переоценка остатков
			ПроводкаDSSОбъект.КонтрагентLawson = Справочники.Контрагенты.GLNoName;
		ИначеЕсли ПроводкаDSSОбъект.SourceCode = "JE" Тогда // ручные транзакции
			ПроводкаDSSОбъект.КонтрагентLawson = ?(ЗначениеЗаполнено(ДанныеДляЗаполнения.ClientReference), ДанныеДляЗаполнения.ClientReference, Справочники.Контрагенты.GLNoName);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ClientCustomerNumber) Тогда
			ПроводкаDSSОбъект.КонтрагентLawson = ДанныеДляЗаполнения.ClientCustomerNumber;
		Иначе
			//ВызватьИсключение "Failed to find Client " + ДанныеДляЗаполнения.CustomerNumber;
			ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразованиеСокрЛП(ПроводкаDSSОбъект)
	
	ПроводкаDSSОбъект.Reference = СокрЛП(ПроводкаDSSОбъект.Reference);
	ПроводкаDSSОбъект.Description = СокрЛП(ПроводкаDSSОбъект.Description);
	ПроводкаDSSОбъект.TransNbr = СокрЛП(ПроводкаDSSОбъект.TransNbr);
	ПроводкаDSSОбъект.Vendor = СокрЛП(ПроводкаDSSОбъект.Vendor);
	ПроводкаDSSОбъект.VendorVname = СокрЛП(ПроводкаDSSОбъект.VendorVname);
	ПроводкаDSSОбъект.CustomerNumber = СокрЛП(ПроводкаDSSОбъект.CustomerNumber);
	ПроводкаDSSОбъект.CustomerName = СокрЛП(ПроводкаDSSОбъект.CustomerName);
	ПроводкаDSSОбъект.ApInvoice = СокрЛП(ПроводкаDSSОбъект.ApInvoice);
	ПроводкаDSSОбъект.ArInvoice = СокрЛП(ПроводкаDSSОбъект.ArInvoice);
	ПроводкаDSSОбъект.PoNumber = СокрЛП(ПроводкаDSSОбъект.PoNumber);
	
КонецПроцедуры

Процедура УстановитьБулевыПоля(ПроводкаDSSОбъект, ДанныеДляЗаполнения)
	
	Если СокрЛП(ДанныеДляЗаполнения.AutoRev) = "Y" Тогда
		ПроводкаDSSОбъект.AutoRevLawson = Истина;
	КонецЕсли;
	
	Если СокрЛП(ДанныеДляЗаполнения.LegalFiscalFlag) = "Y" Тогда
		ПроводкаDSSОбъект.LegalFiscalFlagLawson = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипПроводкиAPAP(TranAmount, Description)
	
	Если TranAmount = 0
		ИЛИ СтрНайти(Description, "Gain/Loss") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.GainLoss;
		
	ИначеЕсли СтрНайти(Description, "Cash Disbursement") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.CashDisbursement;
		
	ИначеЕсли СтрНайти(Description, "Payment Accrual") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.PaymentAccrual;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВаучерПоDescription(Description)
	
	ПозицияЗвездочки = СтрНайти(Description, "*");
	Если ПозицияЗвездочки = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Ваучер = Прав(Description, СтрДлина(Description) - ПозицияЗвездочки);
	Возврат СокрЛП(Ваучер);
	
КонецФункции

Функция ПреобразоватьВДату(Знач Строчка, Знач ВидДаты)
	
	Если ТипЗнч(Строчка) = Тип("Строка") Тогда
		СтрокаДляОбработки = СокрЛП(Строчка);
		Если СтрДлина(СтрокаДляОбработки) = 7 ИЛИ СтрДлина(СтрокаДляОбработки) = 9 Тогда
			СтрокаДляОбработки = "0" + СтрокаДляОбработки;
		КонецЕсли;
		
		День = Лев(СтрокаДляОбработки, 2);
		Месяц = Сред(СтрокаДляОбработки, 3, 2);
		Год = Прав(СтрокаДляОбработки, 2);
		Если СтрНайти(Месяц, "/") ИЛИ СтрНайти(Месяц, ".") ИЛИ СтрНайти(Месяц, ",") Тогда
			Месяц = Сред(СтрокаДляОбработки, 4, 2);
		КонецЕсли;
		
		Если СтрДлина(СтрокаДляОбработки) = 10 ИЛИ СтрДлина(СтрокаДляОбработки) = 18 Тогда
			Год = Сред(СтрокаДляОбработки, 7, 4);
		Иначе	
			Год = Прав(СтрокаДляОбработки, 2);
			Попытка
				Если Число(Год) > 50 Тогда
					Год = "19" + Год;
				Иначе
					Год = "20" + Год;
				КонецЕсли;
			Исключение
				Возврат Дата(1,1,1);
			КонецПопытки;
		КонецЕсли; 
		
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Дата") Тогда
		Возврат Строчка;
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Число") Тогда 
		День = Цел(Строчка/10000);
		Месяц = Цел((Строчка - День*10000)/100);
		Год = Строчка - День*10000 - Месяц * 100;
		Попытка
			Если Число(Год) > 50 Тогда
				Год = 1900 + Год;
			Иначе
				Год = 2000 + Год;
			КонецЕсли;
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	Иначе		
		Возврат Дата(1,1,1);
	КонецЕсли;	
	Попытка 
		Возврат Дата(Год, Месяц, День);
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
	
КонецФункции

Функция СформироватьСвязанныеОбъекты(ПроводкаDSSОбъект, КэшИнвойсов, КэшSalesOrders, КэшCashBatch, КэшBatchAllocation, КэшОрганизаций, КэшРучныхКоррерктировок, КэшМемо, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков,  Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	
	СтруктураПоискаSalesOrder = Новый Структура("ArInvoice, Company");
	СтруктураПоискаМемо = Новый Структура("ArInvoice, Client");
	СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency, Prepayment");
	СтруктураПоискаBatchAllocation = Новый Структура("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency");
	СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Client, Location, SubSubSegment, AU, Account, Currency");
	
	Если ПроводкаDSSОбъект.System = "BL" Тогда
		
		Если ПроводкаDSSОбъект.SourceCode = "DM" ИЛИ ПроводкаDSSОбъект.SourceCode = "CM" Тогда
			
			// Инвойс
			
			СтрокаИнвойса = КэшИнвойсов.Найти(ПроводкаDSSОбъект.ArInvoice, "ArInvoice");
			
			Если СтрокаИнвойса = Неопределено Тогда
				
				ТекИнвойс = СоздатьИнвойс(ПроводкаDSSОбъект, Истина);
				НоваяСтрокаКэша = КэшИнвойсов.Добавить();
				НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
				НоваяСтрокаКэша.Invoice = ТекИнвойс;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Invoice;
				ДозаполнитьИнвойс(ТекИнвойс, ПроводкаDSSОбъект);
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаSalesOrder, ПроводкаDSSОбъект);
			СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSalesOrder);
			
			Если СтрокиSalesOrder.Количество() = 0 Тогда
				ТекSalesOrder = СоздатьSalesOrder(ПроводкаDSSОбъект, ТекИнвойс);
				НоваяСтрокаКэша = КэшSalesOrders.Добавить();
				НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.SalesOrder = ТекSalesOrder;
			Иначе
				ТекSalesOrder = СтрокиSalesOrder[0].SalesOrder;
				ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
			КонецЕсли;
			
			ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
			
		ИначеЕсли ПроводкаDSSОбъект.SourceCode = "JE" Тогда
			
			// Sales order
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаSalesOrder, ПроводкаDSSОбъект);
			СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSalesOrder);
			
			Если СтрокиSalesOrder.Количество() = 0 Тогда
				
				// { RGS TAlmazova 27.07.2016 14:17:56 - 
				Если ПроводкаDSSОбъект.JeTypeLawson = "A" Тогда
					
					Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков Тогда
						ТекОшибка = "Failed to find Sales Order for transaction " + ПроводкаDSSОбъект.Номер;
						Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
							ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
						КонецЕсли;
						Отказ = Истина;
					Иначе
						ОбнулитьСуммыПроводки(ПроводкаDSSОбъект);
						ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, Документы.SalesOrder.ПустаяСсылка());
					КонецЕсли;
					
				Иначе
				// } RGS TAlmazova 27.07.2016 14:17:57 - 
					
					ТекSalesOrder = СоздатьSalesOrder(ПроводкаDSSОбъект, , Истина);
					НоваяСтрокаКэша = КэшSalesOrders.Добавить();
					НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
					НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
					НоваяСтрокаКэша.SalesOrder = ТекSalesOrder;
				
				КонецЕсли;
				
			Иначе
				
				//Если ПроводкаDSSОбъект.JeTypeLawson = "A" И НачалоМесяца(ПроводкаDSSОбъект.AccountingPeriod) = НачалоМесяца(ДатаНачалаЗагрузки) Тогда
				//	ОбнулитьСуммыПроводки(ПроводкаDSSОбъект);
				//КонецЕсли;
				
				ДозаполнитьSalesOrder(СтрокиSalesOrder[0].SalesOrder, ПроводкаDSSОбъект);
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, СтрокиSalesOrder[0].SalesOrder);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПроводкаDSSОбъект.System = "AR" Тогда
		
		Если ПроводкаDSSОбъект.SourceCode = "RL" ИЛИ ПроводкаDSSОбъект.SourceCode = "RY" Тогда
			
			// Batch allocation
			СтруктураПоискаBatchAllocation.Source = Перечисления.ТипыСоответствий.Lawson;
			СтруктураПоискаBatchAllocation.Company = ПроводкаDSSОбъект.Company;
			СтруктураПоискаBatchAllocation.Client = ПроводкаDSSОбъект.КонтрагентLawson;
			СтруктураПоискаBatchAllocation.Location = ПроводкаDSSОбъект.Location;
			СтруктураПоискаBatchAllocation.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
			СтруктураПоискаBatchAllocation.AU = ПроводкаDSSОбъект.AU;
			СтруктураПоискаBatchAllocation.Account = ПроводкаDSSОбъект.AccountLawson;
			СтруктураПоискаBatchAllocation.Currency = ПроводкаDSSОбъект.Currency;
			
			СтрокиBatchAllocation = КэшBatchAllocation.НайтиСтроки(СтруктураПоискаBatchAllocation);
			Если СтрокиBatchAllocation.Количество() = 0 Тогда
				ТекBatchAllocation = СоздатьBatchAllocation(ПроводкаDSSОбъект);
				НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
				НоваяСтрокаКэша.Source = Перечисления.ТипыСоответствий.Lawson;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
				НоваяСтрокаКэша.Location = ПроводкаDSSОбъект.Location;
				НоваяСтрокаКэша.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
				НоваяСтрокаКэша.AU = ПроводкаDSSОбъект.AU;
				НоваяСтрокаКэша.Account = ПроводкаDSSОбъект.AccountLawson;
				НоваяСтрокаКэша.Currency = ПроводкаDSSОбъект.Currency;
				НоваяСтрокаКэша.BatchAllocation = ТекBatchAllocation;
			Иначе
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, СтрокиBatchAllocation[0].BatchAllocation);
			КонецЕсли;
			
			// CASH BATCH
			СтруктураПоискаBatch.Source = Перечисления.ТипыСоответствий.Lawson;
			СтруктураПоискаBatch.Company = ПроводкаDSSОбъект.Company;
			СтруктураПоискаBatch.Client = ПроводкаDSSОбъект.КонтрагентLawson;
			СтруктураПоискаBatch.Location = ПроводкаDSSОбъект.Location;
			СтруктураПоискаBatch.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
			СтруктураПоискаBatch.AU = ПроводкаDSSОбъект.AU;
			СтруктураПоискаBatch.Account = ПроводкаDSSОбъект.AccountLawson;
			СтруктураПоискаBatch.Currency = ПроводкаDSSОбъект.Currency;
			
			Если ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.ReceivedNotApplied Тогда // 120102
				
				СтруктураПоискаBatch.Prepayment = Ложь;
				
				СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
				Если СтрокиCashBatch.Количество() = 0 Тогда
					ТекCashBatch = СоздатьCashBatch(ПроводкаDSSОбъект, Ложь);
					НоваяСтрокаКэша = КэшCashBatch.Добавить();
					НоваяСтрокаКэша.Source = Перечисления.ТипыСоответствий.Lawson;
					НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
					НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
					НоваяСтрокаКэша.Location = ПроводкаDSSОбъект.Location;
					НоваяСтрокаКэша.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
					НоваяСтрокаКэша.AU = ПроводкаDSSОбъект.AU;
					НоваяСтрокаКэша.Account = ПроводкаDSSОбъект.AccountLawson;
					НоваяСтрокаКэша.Currency = ПроводкаDSSОбъект.Currency;
					НоваяСтрокаКэша.CashBatch = ТекCashBatch;
				Иначе
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, СтрокиCashBatch[0].CashBatch);
				КонецЕсли;
				
			ИначеЕсли ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.AdvancesFromCustomers Тогда // 209000
				
				СтруктураПоискаBatch.Prepayment = Истина;
				
				СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
				Если СтрокиCashBatch.Количество() = 0 Тогда
					ТекCashBatch = СоздатьCashBatch(ПроводкаDSSОбъект, Истина);
					НоваяСтрокаКэша = КэшCashBatch.Добавить();
					НоваяСтрокаКэша.Source = Перечисления.ТипыСоответствий.Lawson;
					НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
					НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
					НоваяСтрокаКэша.Location = ПроводкаDSSОбъект.Location;
					НоваяСтрокаКэша.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
					НоваяСтрокаКэша.AU = ПроводкаDSSОбъект.AU;
					НоваяСтрокаКэша.Account = ПроводкаDSSОбъект.AccountLawson;
					НоваяСтрокаКэша.Currency = ПроводкаDSSОбъект.Currency;
					НоваяСтрокаКэша.CashBatch = ТекCashBatch;
				Иначе
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, СтрокиCashBatch[0].CashBatch);
				КонецЕсли;
				
			ИначеЕсли ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.TradeReceivables Тогда // 120101
				
				// для начальных этапов работы инвойса и SO может не быть, но добавить надо
				СтрокаИнвойса = КэшИнвойсов.Найти(ПроводкаDSSОбъект.ArInvoice, "ArInvoice");
				
				Если СтрокаИнвойса = Неопределено Тогда
					// проверяем случай split currency
					Если СтрДлина(ПроводкаDSSОбъект.ArInvoice) = 11 Тогда
						СтрокаИнвойса = КэшИнвойсов.Найти(Лев(ПроводкаDSSОбъект.ArInvoice, 10), "ArInvoice");
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаИнвойса = Неопределено Тогда
					
					// проверим на мемо
					СтруктураПоискаМемо.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
					СтруктураПоискаМемо.Client = ПроводкаDSSОбъект.КонтрагентLawson;
					СтрокиМемо = КэшМемо.НайтиСтроки(СтруктураПоискаМемо);
					
					Если СтрокиМемо.Количество() > 0 Тогда
						ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, СтрокиМемо[0].Memo);
					Иначе
						//НайденаОшибка = Истина;
						Если ПроводкаDSSОбъект.AccountingPeriod >= ДатаВыверенныхОстатков Тогда
							ТекОшибка = "Failed to find Invoice for transaction " + ПроводкаDSSОбъект.Номер;
							Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
								ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
							КонецЕсли;
							Отказ = Истина;
						Иначе
							ОбнулитьСуммыПроводки(ПроводкаDSSОбъект);
							ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					ТекИнвойс = СтрокаИнвойса.Invoice;
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаSalesOrder, ПроводкаDSSОбъект);
				СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSalesOrder);
				
				Если СтрокиSalesOrder.Количество() > 0 Тогда
					ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, СтрокиSalesOrder[0].SalesOrder);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПроводкаDSSОбъект.SourceCode = "RP" ИЛИ ПроводкаDSSОбъект.SourceCode = "RQ" Тогда
			
			// Cash batch
			СтруктураПоискаBatch.Source = Перечисления.ТипыСоответствий.Lawson;
			СтруктураПоискаBatch.Company = ПроводкаDSSОбъект.Company;
			СтруктураПоискаBatch.Client = ПроводкаDSSОбъект.КонтрагентLawson;
			СтруктураПоискаBatch.Location = ПроводкаDSSОбъект.Location;
			СтруктураПоискаBatch.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
			СтруктураПоискаBatch.AU = ПроводкаDSSОбъект.AU;
			СтруктураПоискаBatch.Account = ПроводкаDSSОбъект.AccountLawson;
			СтруктураПоискаBatch.Currency = ПроводкаDSSОбъект.Currency;
			
			СтруктураПоискаBatch.Prepayment = ПроводкаDSSОбъект.AccountLawson = ПланыСчетов.Lawson.AdvancesFromCustomers;
			
			СтрокиCashBatch = КэшCashBatch.НайтиСтроки(СтруктураПоискаBatch);
			Если СтрокиCashBatch.Количество() = 0 Тогда
				ТекCashBatch = СоздатьCashBatch(ПроводкаDSSОбъект, СтруктураПоискаBatch.Prepayment);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.Source = Перечисления.ТипыСоответствий.Lawson;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
				НоваяСтрокаКэша.Location = ПроводкаDSSОбъект.Location;
				НоваяСтрокаКэша.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
				НоваяСтрокаКэша.AU = ПроводкаDSSОбъект.AU;
				НоваяСтрокаКэша.Account = ПроводкаDSSОбъект.AccountLawson;
				НоваяСтрокаКэша.Currency = ПроводкаDSSОбъект.Currency;
				НоваяСтрокаКэша.CashBatch = ТекCashBatch;
			Иначе
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, СтрокиCashBatch[0].CashBatch);
			КонецЕсли;
			
		ИначеЕсли ПроводкаDSSОбъект.SourceCode = "RM" Тогда
			
			// Мемо
			СтруктураПоискаМемо.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
			СтруктураПоискаМемо.Client = ПроводкаDSSОбъект.КонтрагентLawson;
			СтрокиМемо = КэшМемо.НайтиСтроки(СтруктураПоискаМемо);
			
			Если СтрокиМемо.Количество() = 0 Тогда
				ТекМемо = СоздатьМемо(ПроводкаDSSОбъект);
				НоваяСтрокаКэша = КэшМемо.Добавить();
				НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
				НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
				НоваяСтрокаКэша.Memo = ТекМемо;
			Иначе
				ТекМемо = СтрокиМемо[0].Memo;
			КонецЕсли;
			
			ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			
		КонецЕсли;
		
		// для начальных этапов работы инвойса и SO может не быть, но добавить надо
		// { RGS AGorlenko 12.06.2016 19:35:28 - пока будем интерпретировать как ошибку
		//Если СтрокаИнвойса = Неопределено Тогда
		//	
		//	ТекИнвойс = СоздатьИнвойс(ПроводкаDSSОбъект);
		//	НоваяСтрокаКэша = КэшИнвойсов.Добавить();
		//	НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
		//	НоваяСтрокаКэша.Invoice = ТекИнвойс;
		//	
		//Иначе
		//	
		//	ТекИнвойс = СтрокаИнвойса.Invoice;
		//	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
		//	
		//КонецЕсли;
		//
		//ЗаполнитьЗначенияСвойств(СтруктураПоискаSalesOrder, ПроводкаDSSОбъект);
		//СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSalesOrder);
		//
		//Если СтрокиSalesOrder.Количество() = 0 Тогда
		//	ТекSalesOrder = СоздатьSalesOrder(ПроводкаDSSОбъект, ТекИнвойс);
		//	НоваяСтрокаКэша = КэшSalesOrders.Добавить();
		//	НоваяСтрокаКэша.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
		//	НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
		//	НоваяСтрокаКэша.SalesOrder = ТекSalesOrder;
		//Иначе
		//	ОбновитьSalesOrder(СтрокиSalesOrder[0].SalesOrder, ТекИнвойс);
		//	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, СтрокиSalesOrder[0].SalesOrder);
		//КонецЕсли;
		// } RGS AGorlenko 12.06.2016 19:35:42 - пока будем интерпретировать как ошибку
		
	ИначеЕсли ПроводкаDSSОбъект.System = "GL" Тогда
		
		//Если ПроводкаDSSОбъект.SourceCode = "JE" Тогда
			
			СтруктураПоискаРучнойКорректировки.Source = Перечисления.ТипыСоответствий.Lawson;
			СтруктураПоискаРучнойКорректировки.Company = ПроводкаDSSОбъект.Company;
			СтруктураПоискаРучнойКорректировки.Client = ПроводкаDSSОбъект.КонтрагентLawson;
			СтруктураПоискаРучнойКорректировки.Location = ПроводкаDSSОбъект.Location;
			//СтруктураПоискаРучнойКорректировки.GeoMarket = ПроводкаDSSОбъект.GeoMarket;
			//СтруктураПоискаРучнойКорректировки.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
			//СтруктураПоискаРучнойКорректировки.Segment = ПроводкаDSSОбъект.Segment;
			//СтруктураПоискаРучнойКорректировки.SubSegment = ПроводкаDSSОбъект.SubSegment;
			СтруктураПоискаРучнойКорректировки.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
			СтруктураПоискаРучнойКорректировки.AU = ПроводкаDSSОбъект.AU;
			СтруктураПоискаРучнойКорректировки.Account = ПроводкаDSSОбъект.AccountLawson;
			СтруктураПоискаРучнойКорректировки.Currency = ПроводкаDSSОбъект.Currency;
			
			СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
			Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
				ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ПроводкаDSSОбъект);
				НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
				НоваяСтрокаКэша.Source = Перечисления.ТипыСоответствий.Lawson;
				НоваяСтрокаКэша.Company = ПроводкаDSSОбъект.Company;
				НоваяСтрокаКэша.Client = ПроводкаDSSОбъект.КонтрагентLawson;
				НоваяСтрокаКэша.Location = ПроводкаDSSОбъект.Location;
				//НоваяСтрокаКэша.GeoMarket = ПроводкаDSSОбъект.GeoMarket;
				//НоваяСтрокаКэша.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
				//НоваяСтрокаКэша.Segment = ПроводкаDSSОбъект.Segment;
				//НоваяСтрокаКэша.SubSegment = ПроводкаDSSОбъект.SubSegment;
				НоваяСтрокаКэша.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
				НоваяСтрокаКэша.AU = ПроводкаDSSОбъект.AU;
				НоваяСтрокаКэша.Account = ПроводкаDSSОбъект.AccountLawson;
				НоваяСтрокаКэша.Currency = ПроводкаDSSОбъект.Currency;
				НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
			Иначе
				ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
			КонецЕсли;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
КонецФункции

Процедура ОбнулитьСуммыПроводки(ПроводкаDSSОбъект)
	
	ПроводкаDSSОбъект1 = ПроводкаDSSОбъект.Ссылка.ПолучитьОбъект();
	ПроводкаDSSОбъект1.TranAmount = 0;
	ПроводкаDSSОбъект1.BaseAmount = 0;
	ПроводкаDSSОбъект1.ОбменДанными.Загрузка = Истина;
	ПроводкаDSSОбъект1.Записать();
	
КонецПроцедуры

Процедура ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, ТипОбъекта, СвязанныйОбъект)
	
	НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	НЗ.Отбор.ТипСвязанногоОбъекта.Установить(ТипОбъекта);
	НоваяЗапись = НЗ.Добавить();
	НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	НоваяЗапись.ТипСвязанногоОбъекта = ТипОбъекта;
	НоваяЗапись.СвязанныйОбъект = СвязанныйОбъект;
	НЗ.Записать(Истина);
	
КонецПроцедуры

Функция СоздатьИнвойс(ПроводкаDSSОбъект, ПолноеЗаполнение = Ложь)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Номер = ПроводкаDSSОбъект.ArInvoice;
	// { RGS TAlmazova 28.07.2016 17:12:21 - заполнение даты из проводки
	//ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Дата = ПроводкаDSSОбъект.DateLawson;
	ДокОбъект.DocNumber = ДокОбъект.Номер;
	// } RGS TAlmazova 28.07.2016 17:12:27 - заполнение даты из проводки
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	Если ПолноеЗаполнение Тогда
		ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
		ДокОбъект.Amount = ПроводкаDSSОбъект.TranAmount;
	КонецЕсли;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	//НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	//НЗ.Отбор.ТипСвязанногоОбъекта.Установить(Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice);
	//НоваяЗапись = НЗ.Добавить();
	//НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	//НоваяЗапись.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice;
	//НоваяЗапись.СвязанныйОбъект = ДокОбъект.Ссылка;
	//НЗ.Записать(Истина);
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьИнвойс(Инвойс, ПроводкаDSSОбъект)
	
	ДокОбъект = Инвойс.ПолучитьОбъект();
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Amount = ПроводкаDSSОбъект.TranAmount;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Функция СоздатьSalesOrder(ПроводкаDSSОбъект, Invoice = Неопределено, ПолноеЗаполнение = Ложь)
	
	ДокОбъект = Документы.SalesOrder.СоздатьДокумент();
	ДокОбъект.Номер = Строка(ПроводкаDSSОбъект.Company) + "_" + ПроводкаDSSОбъект.ArInvoice;
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.ArInvoice = ПроводкаDSSОбъект.ArInvoice;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	//ДокОбъект.GeoMarket = ПроводкаDSSОбъект.GeoMarket;
	//ДокОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//ДокОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//ДокОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Invoice = Invoice;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	Если ПолноеЗаполнение Тогда
		ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	КонецЕсли;
	ДокОбъект.OrderType = Перечисления.SalesOrederTypes.SalesOrder;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	//НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	//НЗ.Отбор.ТипСвязанногоОбъекта.Установить(Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder);
	//НоваяЗапись = НЗ.Добавить();
	//НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	//НоваяЗапись.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder;
	//НоваяЗапись.СвязанныйОбъект = ДокОбъект.Ссылка;
	//НЗ.Записать(Истина);
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьSalesOrder(SalesOrder, ПроводкаDSSОбъект)
	
	ДокОбъект = SalesOrder.ПолучитьОбъект();
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура ОбновитьSalesOrder(SalesOrder, Invoice)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(SalesOrder, "Invoice") = Invoice Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = SalesOrder.ПолучитьОбъект();
	ДокОбъект.Invoice = Invoice;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Функция СоздатьМемо(ПроводкаDSSОбъект)
	
	ДокОбъект = Документы.Memo.СоздатьДокумент();
	ДокОбъект.Номер = ПроводкаDSSОбъект.ArInvoice;
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	//ДокОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//ДокОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//ДокОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьCashBatch(ПроводкаDSSОбъект, Prepayment)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	//ДокОбъект.Номер = ПроводкаDSSОбъект.ArBatchNbr;
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	//ДокОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//ДокОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//ДокОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Prepayment = Prepayment;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	//НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	//НЗ.Отбор.ТипСвязанногоОбъекта.Установить(Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch);
	//НоваяЗапись = НЗ.Добавить();
	//НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	//НоваяЗапись.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch;
	//НоваяЗапись.СвязанныйОбъект = ДокОбъект.Ссылка;
	//НЗ.Записать(Истина);
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьBatchAllocation(ПроводкаDSSОбъект)
	
	ДокОбъект = Документы.BatchAllocation.СоздатьДокумент();
	//ДокОбъект.Номер = ПроводкаDSSОбъект.ArBatchNbr;
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	ДокОбъект.Company = ПроводкаDSSОбъект.Company;
	ДокОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	ДокОбъект.Location = ПроводкаDSSОбъект.Location;
	//ДокОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//ДокОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//ДокОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	ДокОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	ДокОбъект.AU = ПроводкаDSSОбъект.AU;
	ДокОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	ДокОбъект.Currency = ПроводкаDSSОбъект.Currency;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	//НЗ.Отбор.ПроводкаDSS.Установить(ПроводкаDSSОбъект.Ссылка);
	//НЗ.Отбор.ТипСвязанногоОбъекта.Установить(Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation);
	//НоваяЗапись = НЗ.Добавить();
	//НоваяЗапись.ПроводкаDSS = ПроводкаDSSОбъект.Ссылка;
	//НоваяЗапись.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation;
	//НоваяЗапись.СвязанныйОбъект = ДокОбъект.Ссылка;
	//НЗ.Записать(Истина);
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьРучнуюКорректировку(Client, Account)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Client = &Client
		|	И КлючиРучныхКорректировок.Account = &Account";
	
	Запрос.УстановитьПараметр("Account", Account);
	Запрос.УстановитьПараметр("Client", Client);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.РучнаяКорректировка;
	
КонецФункции

Функция СоздатьРучнуюКорректировку(ПроводкаDSSОбъект)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = ТекущаяДата();
	РучнаяКорректировкаОбъект.Source = Перечисления.ТипыСоответствий.Lawson;
	РучнаяКорректировкаОбъект.Company = ПроводкаDSSОбъект.Company;
	РучнаяКорректировкаОбъект.Client = ПроводкаDSSОбъект.КонтрагентLawson;
	РучнаяКорректировкаОбъект.Location = ПроводкаDSSОбъект.Location;
	//РучнаяКорректировкаОбъект.SubGeoMarket = ПроводкаDSSОбъект.SubGeoMarket;
	//РучнаяКорректировкаОбъект.Segment = ПроводкаDSSОбъект.Segment;
	//РучнаяКорректировкаОбъект.SubSegment = ПроводкаDSSОбъект.SubSegment;
	РучнаяКорректировкаОбъект.SubSubSegment = ПроводкаDSSОбъект.SubSubSegment;
	РучнаяКорректировкаОбъект.AU = ПроводкаDSSОбъект.AU;
	РучнаяКорректировкаОбъект.Account = ПроводкаDSSОбъект.AccountLawson;
	РучнаяКорректировкаОбъект.Currency = ПроводкаDSSОбъект.Currency;
	РучнаяКорректировкаОбъект.Записать();
	
	ДобавитьСвязанныйОбъект(ПроводкаDSSОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, РучнаяКорректировкаОбъект.Ссылка);
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

Процедура ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ DSSСформированныеПриЗагрузке.ИгнорироватьОбработку
		|	И НЕ DSSСформированныеПриЗагрузке.ОшибкаПриПоискеСвязанныхОбъектов";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТекстОшибок = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекДок = ВыборкаДетальныеЗаписи.ПроводкаDSS.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибок) Тогда
		ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибок);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

#КонецЕсли
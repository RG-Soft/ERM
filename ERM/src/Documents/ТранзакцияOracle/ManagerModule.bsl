#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения            = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаПараметрыПроведения(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	ТаблицаСвязанныеДокументы = Результат[НомераТаблиц["СвязанныеДокументы"]].Выгрузить();
	
	ПараметрыПроведения.Вставить("СвязанныеДокументы", Новый Структура("SalesOrder, Invoice, CashBatch, BatchAllocation, РучнаяКорректировка, Memo"));
	
	Для каждого СтрокаСвязанногоДокумента Из ТаблицаСвязанныеДокументы Цикл
		Если СтрокаСвязанногоДокумента.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder Тогда
			ПараметрыПроведения.СвязанныеДокументы.SalesOrder = СтрокаСвязанногоДокумента.Ссылка;
		ИначеЕсли СтрокаСвязанногоДокумента.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice Тогда
			ПараметрыПроведения.СвязанныеДокументы.Invoice = СтрокаСвязанногоДокумента.Ссылка;
		ИначеЕсли СтрокаСвязанногоДокумента.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch Тогда
			ПараметрыПроведения.СвязанныеДокументы.CashBatch = СтрокаСвязанногоДокумента.Ссылка;
		ИначеЕсли СтрокаСвязанногоДокумента.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation Тогда
			ПараметрыПроведения.СвязанныеДокументы.BatchAllocation = СтрокаСвязанногоДокумента.Ссылка;
		ИначеЕсли СтрокаСвязанногоДокумента.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка Тогда
			ПараметрыПроведения.СвязанныеДокументы.РучнаяКорректировка = СтрокаСвязанногоДокумента.Ссылка;
		ИначеЕсли СтрокаСвязанногоДокумента.ТипСвязанногоОбъекта = Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo Тогда
			ПараметрыПроведения.СвязанныеДокументы.Memo = СтрокаСвязанногоДокумента.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// { RGS Alm 14.06.2018 15:09:04 S-E-0000795
	СтруктураКлиент = ПолучитьКлиента(ПараметрыПроведения.Реквизиты[0]);
	Если ПараметрыПроведения.Реквизиты[0].Client <> СтруктураКлиент.Клиент Тогда
		ПараметрыПроведения.Реквизиты[0].Client = СтруктураКлиент.Клиент;
		ПараметрыПроведения.Реквизиты[0].CustomerNumber = СтруктураКлиент.КодКлиента;
	КонецЕсли;
	// } RGS Alm 14.06.2018 15:09:04 S-E-0000795
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаПараметрыПроведения(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты",                       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СвязанныеДокументы",              НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТранзакцияOracle.Номер КАК Номер,
	|	ТранзакцияOracle.Дата КАК Дата,
	|	ТранзакцияOracle.GlSourceType КАК GlSourceType,
	|	ТранзакцияOracle.Company КАК Company,
	|	ТранзакцияOracle.Account КАК Account,
	|	ТранзакцияOracle.Location КАК Location,
	|	ТранзакцияOracle.SubSubSegment КАК SubSubSegment,
	|	ТранзакцияOracle.Currency КАК Currency,
	|	ТранзакцияOracle.ExchangeRate КАК ExchangeRate,
	|	ТранзакцияOracle.GL_Account КАК GL_Account,
	|	ТранзакцияOracle.Client КАК Client,
	|	ТранзакцияOracle.EndClient КАК EndClient,
	|	ТранзакцияOracle.Contract КАК Contract,
	|	ТранзакцияOracle.DocType КАК DocType,
	|	ТранзакцияOracle.Description КАК Description,
	|	ТранзакцияOracle.TransType КАК TransType,
	|	ТранзакцияOracle.SONum КАК SONum,
	|	ТранзакцияOracle.SODate КАК SODate,
	|	ТранзакцияOracle.ShipDateActual КАК ShipDateActual,
	|	ТранзакцияOracle.CreationDate КАК CreationDate,
	|	ТранзакцияOracle.CreatedBy КАК CreatedBy,
	|	ТранзакцияOracle.DocID КАК DocID,
	|	ТранзакцияOracle.LineID КАК LineID,
	|	ТранзакцияOracle.Amount КАК Amount,
	|	ТранзакцияOracle.BaseAmount КАК BaseAmount,
	|	ТранзакцияOracle.Source КАК Source,
	|	ТранзакцияOracle.AU КАК AU,
	|	ТранзакцияOracle.Account.БазовыйЭлемент КАК HFMAccount,
	|	ТранзакцияOracle.LegalEntity КАК LegalEntity,
	|	ТранзакцияOracle.CustomerNumber КАК CustomerNumber,
	|	ТранзакцияOracle.EndCustomerNumber КАК EndCustomerNumber,
	|	ПОДСТРОКА(ТранзакцияOracle.Account.Код, 0, 4) КАК Major,
	|	ТранзакцияOracle.ПометкаУдаления КАК ПометкаУдаления,
	|	ТранзакцияOracle.Reverse КАК Reverse
	|ИЗ
	|	Документ.ТранзакцияOracle КАК ТранзакцияOracle
	|ГДЕ
	|	ТранзакцияOracle.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DSSСвязанныеДокументы.ТипСвязанногоОбъекта КАК ТипСвязанногоОбъекта,
	|	DSSСвязанныеДокументы.СвязанныйОбъект КАК Ссылка
	|ИЗ
	|	РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
	|ГДЕ
	|	DSSСвязанныеДокументы.ПроводкаDSS = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСуммыДляПроводки(Реквизиты, СчетВыручкиHFM, ВалютаUSD, Отказ) Экспорт
	
	СуммыДляПроводки = Новый Структура("Amount,BaseAmount");	

	Если Реквизиты.HFMAccount.ПринадлежитЭлементу(СчетВыручкиHFM) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиОтображенияВалютнойСуммыВОтчетах.ИспользоватьUSDСуммуИзТранзакции
			|ИЗ
			|	РегистрСведений.НастройкиОтображенияВалютнойСуммыВОтчетах КАК НастройкиОтображенияВалютнойСуммыВОтчетах
			|ГДЕ
			|	НастройкиОтображенияВалютнойСуммыВОтчетах.Source = &Source
			|	И НастройкиОтображенияВалютнойСуммыВОтчетах.Company = &Company
			|	И НастройкиОтображенияВалютнойСуммыВОтчетах.TypeAccount = &TypeAccount
			|	И НастройкиОтображенияВалютнойСуммыВОтчетах.ИспользоватьUSDСуммуИзТранзакции";
		
		Запрос.УстановитьПараметр("Company", Реквизиты.Company);
		Запрос.УстановитьПараметр("Source", Реквизиты.Source);
		Запрос.УстановитьПараметр("TypeAccount", Перечисления.ТипСчета.Revenue);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		// { RGS TAlmazova 13.04.2018 17:12:47 - используется в двух местах, вытащила в начало
		СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьВнутреннийКурсВалюты(Реквизиты.Currency, Реквизиты.Дата);
		Если Не ЗначениеЗаполнено(СтруктураКурсаВалюты.Курс) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("No exchange rate " + Реквизиты.Currency, , , , Отказ);
		КонецЕсли;
		// } RGS TAlmazova 13.04.2018 17:13:13 - используется в двух местах, вытащила в начало
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 ИЛИ Реквизиты.Source = Перечисления.ТипыСоответствий.OracleSmith Тогда
			СуммыДляПроводки.BaseAmount = Реквизиты.BaseAmount;
		ИначеЕсли Реквизиты.Currency = ВалютаUSD Тогда
			СуммыДляПроводки.BaseAmount = Реквизиты.Amount;
		Иначе
			СуммыДляПроводки.BaseAmount = Реквизиты.Amount / СтруктураКурсаВалюты.Курс * ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
		КонецЕсли;
		// { RGS TAlmazova 13.04.2018 17:05:50 - для смитов пересчитываем сумму в валюте транзакции из суммы USD
		Если Реквизиты.Source = Перечисления.ТипыСоответствий.OracleSmith Тогда
			Если Реквизиты.Currency = ВалютаUSD Тогда
				СуммыДляПроводки.Amount = СуммыДляПроводки.BaseAmount;
			Иначе
				СуммыДляПроводки.Amount = СуммыДляПроводки.BaseAmount * СтруктураКурсаВалюты.Курс / ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
			КонецЕсли;
		Иначе
			СуммыДляПроводки.Amount = Реквизиты.Amount;
		КонецЕсли;
		// } RGS TAlmazova 13.04.2018 17:06:12 - для смитов пересчитываем сумму в валюте транзакции из суммы USD
		
	Иначе
	
		СуммыДляПроводки.Amount = Реквизиты.Amount;
		СуммыДляПроводки.BaseAmount = Реквизиты.BaseAmount;
		
	КонецЕсли;

	Возврат СуммыДляПроводки;
	
КонецФункции

Функция ПолучитьКлиента(Реквизиты) Экспорт

	Если Реквизиты.Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		СтруктураКлиент = ПолучитьКлиентаMI(Реквизиты);
	//ИначеЕсли Реквизиты.Source = Перечисления.ТипыСоответствий.OracleSmith Тогда - в Смитах Source - это FMS, "SO Accrual" и др, поэтому без проверки на источник отправляем в смит
	Иначе
		СтруктураКлиент = ПолучитьКлиентаSmith(Реквизиты);
	КонецЕсли;
	
	Возврат СтруктураКлиент;

КонецФункции

Функция ПолучитьКлиентаMI(Реквизиты)
	
	//Если НЕ ЗначениеЗаполнено(Реквизиты.Client) Тогда
	//	Если Реквизиты.GlSourceType = Перечисления.OracleGlSourceType.JV  
	//		ИЛИ Реквизиты.DocType = "CASH" И Реквизиты.TransType = "TRADE_UNID" Тогда
	//		КлиентТранзакции = Справочники.Контрагенты.Unreconciled;
	//	ИначеЕсли Реквизиты.CustomerNumber = "" Тогда
	//		КлиентТранзакции = Справочники.Контрагенты.Undefined;
	//	КонецЕсли;
	//Иначе
	//	КлиентТранзакции = Реквизиты.Client;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Client) Тогда
		
		Клиент = Реквизиты.EndClient;
		КодКлиента = Реквизиты.EndCustomerNumber;
	
	Иначе
		
		РеквизитыКлиента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Client, "Предопределенный,Intercompany");
	
		Если (РеквизитыКлиента.Предопределенный ИЛИ РеквизитыКлиента.Intercompany) И ЗначениеЗаполнено(Реквизиты.EndClient) Тогда
			
			Клиент = Реквизиты.EndClient;
			КодКлиента = Реквизиты.EndCustomerNumber;

		Иначе
			
			Клиент = Реквизиты.Client;
			КодКлиента = Реквизиты.CustomerNumber;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("Клиент,КодКлиента", Клиент, КодКлиента);
	
КонецФункции

Функция ПолучитьКлиентаSmith(Реквизиты)

	Возврат Новый Структура("Клиент,КодКлиента", Реквизиты.Client, Реквизиты.CustomerNumber);

КонецФункции

#КонецЕсли
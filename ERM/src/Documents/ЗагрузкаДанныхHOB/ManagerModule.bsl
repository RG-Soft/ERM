#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	ТекстОшибки = "";
	
	ФайлДанных = СтруктураПараметров.ИсточникДанных.Получить();
	
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ИмяКаталога);
	Если СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		ПутьКФайлу = ИмяКаталога + "\HOB_accruals.csv";
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		ПутьКФайлу = ИмяКаталога + "\HOB_JV.csv";
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		ПутьКФайлу = ИмяКаталога + "\HOB_receivables.csv";
	КонецЕсли;
	ФайлДанных.Записать(ПутьКФайлу);
	
	ПутьСхемы = ИмяКаталога+"\schema.ini";
	ФайлСхемы = Новый ТекстовыйДокумент;
	//ФайлСхемы.ДобавитьСтроку("	" + Символы.ПС + "DecimalSymbol=.");
	Если СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		ФайлСхемы.УстановитьТекст(Документы.ЗагрузкаДанныхHOB.ПолучитьМакет("AccrualsSchema").ПолучитьТекст());
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		ФайлСхемы.УстановитьТекст(Документы.ЗагрузкаДанныхHOB.ПолучитьМакет("JVSchema").ПолучитьТекст());
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		ФайлСхемы.УстановитьТекст(Документы.ЗагрузкаДанныхHOB.ПолучитьМакет("ReceivablesSchema").ПолучитьТекст());
	КонецЕсли;
	ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	
	Если СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		Стр_SQL = "Select * FROM HOB_accruals.csv";
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		Стр_SQL = "Select * FROM HOB_JV.csv";
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		Стр_SQL = "Select * FROM HOB_receivables.csv";
	КонецЕсли;
	rs.Open(Стр_SQL, Connection);
	
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	СоответствиеКолонок = Новый Соответствие;
	Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
		СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
	КонецЦикла;
	
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	
	rs.MoveFirst();
	
	ТекНомерСтроки = 0;
	
	Пока rs.EOF() = 0 Цикл
		
		ТекНомерСтроки = ТекНомерСтроки + 1;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
		
		Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
			
			Попытка
				ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
			Исключение
				ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
				ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
				Возврат;
			КонецПопытки;
			
			Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
				СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
			Иначе
				СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
		rs.MoveNext();
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяКаталога);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСтруктуруКолонокТаблицыДанных(ТипТранзакций = Неопределено) Экспорт
	
	СтруктураКолонок = Новый ТаблицаЗначений;
	СтруктураКолонок.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	
	Если ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		ПолучитьСтруктуруКолонокТаблицыДанныхReceivables(СтруктураКолонок);
	ИначеЕсли ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		ПолучитьСтруктуруКолонокТаблицыДанныхAccrual(СтруктураКолонок);
	Иначе
		ПолучитьСтруктуруКолонокТаблицыДанныхJV(СтруктураКолонок);
	КонецЕсли;
	
	Возврат СтруктураКолонок;
	
КонецФункции

Процедура ПолучитьСтруктуруКолонокТаблицыДанныхAccrual(СтруктураКолонок)
	
	// Period
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TrDate";
	СтрокаТЗ.ИмяКолонки = "Period";
	СтрокаТЗ.Обязательная = Истина;
	
	// TrNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TrNumber";
	СтрокаТЗ.ИмяКолонки = "TrNumber";
	СтрокаТЗ.Обязательная = Истина;
	
	// Document
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Document";
	СтрокаТЗ.ИмяКолонки = "Document";
	СтрокаТЗ.Обязательная = Истина;
	
	// DocumentType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DocumentType";
	СтрокаТЗ.ИмяКолонки = "DocumentType";
	СтрокаТЗ.Обязательная = Истина;
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.Обязательная = Истина;
	
	// Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Client";
	СтрокаТЗ.ИмяКолонки = "Client";
	СтрокаТЗ.Обязательная = Истина;
	
	// INN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INN";
	СтрокаТЗ.ИмяКолонки = "INN";
	СтрокаТЗ.Обязательная = Истина;
	
	// End Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EndClient";
	СтрокаТЗ.ИмяКолонки = "EndClient";
	СтрокаТЗ.Обязательная = Истина;
	
	// End Client INN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EndClientINN";
	СтрокаТЗ.ИмяКолонки = "EndClientINN";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderAgreementCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderAgreementCode";
	СтрокаТЗ.ИмяКолонки = "SalesOrderAgreementCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderAgreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderAgreement";
	СтрокаТЗ.ИмяКолонки = "SalesOrderAgreement";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrder
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrder";
	СтрокаТЗ.ИмяКолонки = "SalesOrder";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderNumber";
	СтрокаТЗ.ИмяКолонки = "SalesOrderNumber";
	СтрокаТЗ.Обязательная = Истина;
		
	// CompanyCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "CompanyCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// CompanyDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyDesc";
	СтрокаТЗ.ИмяКолонки = "CompanyDesc";
	СтрокаТЗ.Обязательная = Истина;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.Обязательная = Истина;
	
	// LocationCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationCode";
	СтрокаТЗ.ИмяКолонки = "LocationCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// LocationDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationDesc";
	СтрокаТЗ.ИмяКолонки = "LocationDesc";
	СтрокаТЗ.Обязательная = Истина;
	
	// MNGC
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "MNGC";
	СтрокаТЗ.ИмяКолонки = "MNGC";
	СтрокаТЗ.Обязательная = Истина;
	
	// Amount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Amount";
	СтрокаТЗ.ИмяКолонки = "Amount";
	СтрокаТЗ.Обязательная = Истина;
	
	// BaseAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseAmount";
	СтрокаТЗ.ИмяКолонки = "BaseAmount";
	СтрокаТЗ.Обязательная = Истина;
	
	// JobEndDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "JobEndDate";
	СтрокаТЗ.ИмяКолонки = "JobEndDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderAmount";
	СтрокаТЗ.ИмяКолонки = "SalesOrderAmount";
	СтрокаТЗ.Обязательная = Истина;
	
	// ERPStatus
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ERPStatus";
	СтрокаТЗ.ИмяКолонки = "ERPStatus";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderCurrency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderCurrency";
	СтрокаТЗ.ИмяКолонки = "SalesOrderCurrency";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderExchangeRate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderExchangeRate";
	СтрокаТЗ.ИмяКолонки = "SalesOrderExchangeRate";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderApprovalDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderApprovalDate";
	СтрокаТЗ.ИмяКолонки = "SalesOrderApprovalDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderApprovedBy
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderApprovedBy";
	СтрокаТЗ.ИмяКолонки = "SalesOrderApprovedBy";
	СтрокаТЗ.Обязательная = Истина;
	
	// AU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU";
	СтрокаТЗ.ИмяКолонки = "AU";
	СтрокаТЗ.Обязательная = Истина;
	
	// AUType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AUType";
	СтрокаТЗ.ИмяКолонки = "AUType";
	СтрокаТЗ.Обязательная = Истина;
	
	// SubSubSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSubSegment";
	СтрокаТЗ.ИмяКолонки = "SubSubSegment";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderDate";
	СтрокаТЗ.ИмяКолонки = "SalesOrderDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceDate";
	СтрокаТЗ.ИмяКолонки = "InvoiceDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceNumber";
	СтрокаТЗ.ИмяКолонки = "InvoiceNumber";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceCurrency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceCurrency";
	СтрокаТЗ.ИмяКолонки = "InvoiceCurrency";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAmount";
	СтрокаТЗ.ИмяКолонки = "InvoiceAmount";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceBilled
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceBilled";
	СтрокаТЗ.ИмяКолонки = "InvoiceBilled";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoicePassedForApproval
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoicePassedForApproval";
	СтрокаТЗ.ИмяКолонки = "InvoicePassedForApproval";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoicePassedForPayment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoicePassedForPayment";
	СтрокаТЗ.ИмяКолонки = "InvoicePassedForPayment";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoicePassedForApprovalDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoicePassedForApprovalDate";
	СтрокаТЗ.ИмяКолонки = "InvoicePassedForApprovalDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoicePassedForPaymentDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoicePassedForPaymentDate";
	СтрокаТЗ.ИмяКолонки = "InvoicePassedForPaymentDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// ExpectedDateOfPayment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ExpectedDateOfPayment";
	СтрокаТЗ.ИмяКолонки = "ExpectedDateOfPayment";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceAgreementCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAgreementCode";
	СтрокаТЗ.ИмяКолонки = "InvoiceAgreementCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceAgreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAgreement";
	СтрокаТЗ.ИмяКолонки = "InvoiceAgreement";
	СтрокаТЗ.Обязательная = Истина;
	
	// Reverse
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Reverse";
	СтрокаТЗ.ИмяКолонки = "Reverse";
	СтрокаТЗ.Обязательная = Истина;
	
	// LegalEntity
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalEntity";
	СтрокаТЗ.ИмяКолонки = "LegalEntity";
	СтрокаТЗ.Обязательная = Истина;
	
	// DocumentID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DocumentID";
	СтрокаТЗ.ИмяКолонки = "DocumentID";
	СтрокаТЗ.Обязательная = Истина;
	
	// SalesOrderID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SalesOrderID";
	СтрокаТЗ.ИмяКолонки = "SalesOrderID";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceID";
	СтрокаТЗ.ИмяКолонки = "InvoiceID";
	СтрокаТЗ.Обязательная = Истина;
	
КонецПроцедуры

Процедура ПолучитьСтруктуруКолонокТаблицыДанныхJV(СтруктураКолонок)
	
	// Period
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TrDate";
	СтрокаТЗ.ИмяКолонки = "Period";
	СтрокаТЗ.Обязательная = Истина;
	
	// TrNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TrNumber";
	СтрокаТЗ.ИмяКолонки = "TrNumber";
	СтрокаТЗ.Обязательная = Истина;
	
	// Document
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Document";
	СтрокаТЗ.ИмяКолонки = "Document";
	СтрокаТЗ.Обязательная = Истина;
	
	// DocumentType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DocumentType";
	СтрокаТЗ.ИмяКолонки = "DocumentType";
	СтрокаТЗ.Обязательная = Истина;
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.Обязательная = Истина;
	
	// Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Client";
	СтрокаТЗ.ИмяКолонки = "Client";
	СтрокаТЗ.Обязательная = Истина;
	
	// INN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INN";
	СтрокаТЗ.ИмяКолонки = "INN";
	СтрокаТЗ.Обязательная = Истина;
	
	// EndClient
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EndClient";
	СтрокаТЗ.ИмяКолонки = "EndClient";
	СтрокаТЗ.Обязательная = Истина;
	
	// EndClientINN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EndClientINN";
	СтрокаТЗ.ИмяКолонки = "EndClientINN";
	СтрокаТЗ.Обязательная = Истина;
	
	// CompanyCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "CompanyCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// CompanyDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyDesc";
	СтрокаТЗ.ИмяКолонки = "CompanyDesc";
	СтрокаТЗ.Обязательная = Истина;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.Обязательная = Истина;
	
	// LocationCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationCode";
	СтрокаТЗ.ИмяКолонки = "LocationCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// LocationDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationDesc";
	СтрокаТЗ.ИмяКолонки = "LocationDesc";
	СтрокаТЗ.Обязательная = Истина;
	
	// MNGC
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "MNGC";
	СтрокаТЗ.ИмяКолонки = "MNGC";
	СтрокаТЗ.Обязательная = Истина;
	
	// Amount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Amount";
	СтрокаТЗ.ИмяКолонки = "Amount";
	СтрокаТЗ.Обязательная = Истина;
	
	// BaseAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseAmount";
	СтрокаТЗ.ИмяКолонки = "BaseAmount";
	СтрокаТЗ.Обязательная = Истина;
	
	// AU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU";
	СтрокаТЗ.ИмяКолонки = "AU";
	СтрокаТЗ.Обязательная = Истина;
	
	// AUType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AUType";
	СтрокаТЗ.ИмяКолонки = "AUType";
	СтрокаТЗ.Обязательная = Истина;
	
	// SubSubSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSubSegment";
	СтрокаТЗ.ИмяКолонки = "SubSubSegment";
	СтрокаТЗ.Обязательная = Истина;
	
	// Reverse
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Reverse";
	СтрокаТЗ.ИмяКолонки = "Reverse";
	СтрокаТЗ.Обязательная = Истина;
	
	// LegalEntity
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalEntity";
	СтрокаТЗ.ИмяКолонки = "LegalEntity";
	СтрокаТЗ.Обязательная = Истина;
	
	// DocumentID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DocumentID";
	СтрокаТЗ.ИмяКолонки = "DocumentID";
	СтрокаТЗ.Обязательная = Истина;
	
КонецПроцедуры

Процедура ПолучитьСтруктуруКолонокТаблицыДанныхReceivables(СтруктураКолонок)
	
	// Period
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TrDate";
	СтрокаТЗ.ИмяКолонки = "Period";
	СтрокаТЗ.Обязательная = Истина;
	
	// TrNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TrNumber";
	СтрокаТЗ.ИмяКолонки = "TrNumber";
	СтрокаТЗ.Обязательная = Истина;
	
	// Document
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Document";
	СтрокаТЗ.ИмяКолонки = "Document";
	СтрокаТЗ.Обязательная = Истина;
	
	// DocumentType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DocumentType";
	СтрокаТЗ.ИмяКолонки = "DocumentType";
	СтрокаТЗ.Обязательная = Истина;
	
	// Account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Account";
	СтрокаТЗ.ИмяКолонки = "Account";
	СтрокаТЗ.Обязательная = Истина;
	
	// Client
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Client";
	СтрокаТЗ.ИмяКолонки = "Client";
	СтрокаТЗ.Обязательная = Истина;
	
	// INN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INN";
	СтрокаТЗ.ИмяКолонки = "INN";
	СтрокаТЗ.Обязательная = Истина;
	
	// EndClient
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EndClient";
	СтрокаТЗ.ИмяКолонки = "EndClient";
	СтрокаТЗ.Обязательная = Истина;
	
	// EndClientINN
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EndClientINN";
	СтрокаТЗ.ИмяКолонки = "EndClientINN";
	СтрокаТЗ.Обязательная = Истина;
	
	// CompanyCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyCode";
	СтрокаТЗ.ИмяКолонки = "CompanyCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// CompanyDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CompanyDesc";
	СтрокаТЗ.ИмяКолонки = "CompanyDesc";
	СтрокаТЗ.Обязательная = Истина;
	
	// Currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Currency";
	СтрокаТЗ.ИмяКолонки = "Currency";
	СтрокаТЗ.Обязательная = Истина;
	
	// LocationCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationCode";
	СтрокаТЗ.ИмяКолонки = "LocationCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// LocationDesc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LocationDesc";
	СтрокаТЗ.ИмяКолонки = "LocationDesc";
	СтрокаТЗ.Обязательная = Истина;
	
	// MNGC
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "MNGC";
	СтрокаТЗ.ИмяКолонки = "MNGC";
	СтрокаТЗ.Обязательная = Истина;
	
	// Amount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Amount";
	СтрокаТЗ.ИмяКолонки = "Amount";
	СтрокаТЗ.Обязательная = Истина;
	
	// BaseAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BaseAmount";
	СтрокаТЗ.ИмяКолонки = "BaseAmount";
	СтрокаТЗ.Обязательная = Истина;
	
	// AU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AU";
	СтрокаТЗ.ИмяКолонки = "AU";
	СтрокаТЗ.Обязательная = Истина;
	
	// AUType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "AUType";
	СтрокаТЗ.ИмяКолонки = "AUType";
	СтрокаТЗ.Обязательная = Истина;
	
	// SubSubSegment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SubSubSegment";
	СтрокаТЗ.ИмяКолонки = "SubSubSegment";
	СтрокаТЗ.Обязательная = Истина;
	
	// Reverse
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Reverse";
	СтрокаТЗ.ИмяКолонки = "Reverse";
	СтрокаТЗ.Обязательная = Истина;
	
	// Invoice
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "Invoice";
	СтрокаТЗ.ИмяКолонки = "Invoice";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceType";
	СтрокаТЗ.ИмяКолонки = "InvoiceType";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceNumber";
	СтрокаТЗ.ИмяКолонки = "InvoiceNumber";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceDate";
	СтрокаТЗ.ИмяКолонки = "InvoiceDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceCurrency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceCurrency";
	СтрокаТЗ.ИмяКолонки = "InvoiceCurrency";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceAmount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAmount";
	СтрокаТЗ.ИмяКолонки = "InvoiceAmount";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceAgreementCode
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAgreementCode";
	СтрокаТЗ.ИмяКолонки = "InvoiceAgreementCode";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceAgreement
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceAgreement";
	СтрокаТЗ.ИмяКолонки = "InvoiceAgreement";
	СтрокаТЗ.Обязательная = Истина;
	
	// LegalEntity
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LegalEntity";
	СтрокаТЗ.ИмяКолонки = "LegalEntity";
	СтрокаТЗ.Обязательная = Истина;
	
	// FiscalInvoiceNo
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FiscalInvoiceNo";
	СтрокаТЗ.ИмяКолонки = "FiscalInvoiceNo";
	СтрокаТЗ.Обязательная = Истина;
	
	// FiscalInvoiceDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "FiscalInvoiceDate";
	СтрокаТЗ.ИмяКолонки = "FiscalInvoiceDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceBilled
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceBilled";
	СтрокаТЗ.ИмяКолонки = "InvoiceBilled";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoicePassedForApproval
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoicePassedForApproval";
	СтрокаТЗ.ИмяКолонки = "InvoicePassedForApproval";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoicePassedForPayment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoicePassedForPayment";
	СтрокаТЗ.ИмяКолонки = "InvoicePassedForPayment";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoicePassedForApprovalDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoicePassedForApprovalDate";
	СтрокаТЗ.ИмяКолонки = "InvoicePassedForApprovalDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoicePassedForPaymentDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoicePassedForPaymentDate";
	СтрокаТЗ.ИмяКолонки = "InvoicePassedForPaymentDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// ExpectedDateOfPayment
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ExpectedDateOfPayment";
	СтрокаТЗ.ИмяКолонки = "ExpectedDateOfPayment";
	СтрокаТЗ.Обязательная = Истина;
	
	// PaymentNumber
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PaymentNumber";
	СтрокаТЗ.ИмяКолонки = "PaymentNumber";
	СтрокаТЗ.Обязательная = Истина;
	
	// PaymentDate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PaymentDate";
	СтрокаТЗ.ИмяКолонки = "PaymentDate";
	СтрокаТЗ.Обязательная = Истина;
	
	// DocumentID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DocumentID";
	СтрокаТЗ.ИмяКолонки = "DocumentID";
	СтрокаТЗ.Обязательная = Истина;
	
	// InvoiceID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "InvoiceID";
	СтрокаТЗ.ИмяКолонки = "InvoiceID";
	СтрокаТЗ.Обязательная = Истина;
	
	// ReverseDocument
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ReverseDocument";
	СтрокаТЗ.ИмяКолонки = "ReverseDocument";
	СтрокаТЗ.Обязательная = Истина;
	
	// ReverseDocumentType
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ReverseDocumentType";
	СтрокаТЗ.ИмяКолонки = "ReverseDocumentType";
	СтрокаТЗ.Обязательная = Истина;
	
	// CorAccount
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CorAccount";
	СтрокаТЗ.ИмяКолонки = "CorAccount";
	СтрокаТЗ.Обязательная = Истина;
	
КонецПроцедуры


Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(СтруктураПараметров, ТаблицаДанных)
	
	// { RGS AGorlenko 02.09.2016 12:22:28 - временное решение, убрать
	ДатаВыверенныхОстатковПоRUL = ПолучитьДатуВыверенныхОстатковПоRUL();
	// } RGS AGorlenko 02.09.2016 12:23:31 - временное решение, убрать
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(СтруктураПараметров.Ссылка, "ДокументЗагрузки");
	
	// { RGS AGorlenko 02.09.2016 12:22:28 - временное решение, убрать
	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если СтрокаДанных.TrDate < ДатаВыверенныхОстатковПоRUL И (Найти(СтрокаДанных.CompanyDesc, "НОКБ ГП") > 0 ИЛИ Найти(СтрокаДанных.CompanyDesc, "НОКБГП") > 0) И ПустаяСтрока(СтрокаДанных.AU) Тогда
			СтрокаДанных.AU = "0669532";
			СтрокаДанных.AUType = "Lawson";
		ИначеЕсли СтрокаДанных.TrDate < ДатаВыверенныхОстатковПоRUL И (Найти(СтрокаДанных.CompanyDesc, "ТОЭ ЗГП") > 0 ИЛИ Найти(СтрокаДанных.CompanyDesc, "ТОЭЗГП") > 0) И ПустаяСтрока(СтрокаДанных.AU) Тогда
			СтрокаДанных.AU = "0669533";
			СтрокаДанных.AUType = "Lawson";
		КонецЕсли;
	КонецЦикла;
	// } RGS AGorlenko 02.09.2016 12:23:31 - временное решение, убрать
	
		Если СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		НЗ = РегистрыСведений.HOBAccrualsSourceData.СоздатьНаборЗаписей();
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		НЗ = РегистрыСведений.HOBJVSourceData.СоздатьНаборЗаписей();
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		НЗ = РегистрыСведений.HOBReceivablesSourceData.СоздатьНаборЗаписей();
	КонецЕсли;
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.LoadedSourseData;
	ДокументЗагрузки.Записать();
	
КонецПроцедуры

// { RGS AGorlenko 02.09.2016 12:22:28 - временное решение, убрать
Функция ПолучитьДатуВыверенныхОстатковПоRUL()
	
	RUL = Справочники.HFM_Geomarkets.НайтиПоКоду("SL_RUL");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DataLoadingStages.ReconciledBalances
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &Source
		|	И DataLoadingStages.GeoMarket = &GeoMarket";
	
	Запрос.УстановитьПараметр("GeoMarket", RUL);
	Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.HOBs);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.ReconciledBalances;
	
КонецФункции // } RGS AGorlenko 02.09.2016 12:23:31 - временное решение, убрать

Процедура ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		ВыполнитьПроверкуНастроекСинхронизацииAccruals(СтруктураПараметров, АдресХранилища);
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		ВыполнитьПроверкуНастроекСинхронизацииJV(СтруктураПараметров, АдресХранилища);
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		ВыполнитьПроверкуНастроекСинхронизацииReceivables(СтруктураПараметров, АдресХранилища);
	Иначе
		ВызватьИсключение "Unknown type of transactions!";
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуНастроекСинхронизацииAccruals(СтруктураПараметров, АдресХранилища)
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBAccrualsSourceData.TrDate,
		|	HOBAccrualsSourceData.TrNumber,
		|	HOBAccrualsSourceData.Document,
		|	HOBAccrualsSourceData.DocumentType,
		|	HOBAccrualsSourceData.Account,
		|	HOBAccrualsSourceData.Client,
		|	HOBAccrualsSourceData.INN,
		|	HOBAccrualsSourceData.SalesOrderAgreementCode,
		|	HOBAccrualsSourceData.SalesOrderAgreement,
		|	HOBAccrualsSourceData.SalesOrder,
		|	HOBAccrualsSourceData.SalesOrderNumber,
		|	HOBAccrualsSourceData.CompanyCode,
		|	HOBAccrualsSourceData.CompanyDesc,
		|	HOBAccrualsSourceData.Currency,
		|	HOBAccrualsSourceData.LocationCode,
		|	HOBAccrualsSourceData.LocationDesc,
		|	HOBAccrualsSourceData.Amount,
		|	HOBAccrualsSourceData.BaseAmount,
		|	HOBAccrualsSourceData.JobEndDate,
		|	HOBAccrualsSourceData.SalesOrderAmount,
		|	HOBAccrualsSourceData.ERPStatus,
		|	HOBAccrualsSourceData.SalesOrderCurrency,
		|	HOBAccrualsSourceData.SalesOrderExchangeRate,
		|	HOBAccrualsSourceData.SalesOrderApprovalDate,
		|	HOBAccrualsSourceData.SalesOrderApprovedBy,
		|	HOBAccrualsSourceData.AU,
		|	HOBAccrualsSourceData.AUType,
		|	HOBAccrualsSourceData.SubSubSegment,
		|	HOBAccrualsSourceData.SalesOrderDate,
		|	HOBAccrualsSourceData.Invoice,
		|	HOBAccrualsSourceData.InvoiceDate,
		|	HOBAccrualsSourceData.InvoiceNumber,
		|	HOBAccrualsSourceData.InvoiceCurrency,
		|	HOBAccrualsSourceData.InvoiceAmount,
		|	HOBAccrualsSourceData.InvoiceBilled,
		|	HOBAccrualsSourceData.InvoicePassedForApproval,
		|	HOBAccrualsSourceData.InvoicePassedForPayment,
		|	HOBAccrualsSourceData.InvoicePassedForApprovalDate,
		|	HOBAccrualsSourceData.InvoicePassedForPaymentDate,
		|	HOBAccrualsSourceData.ExpectedDateOfPayment,
		|	HOBAccrualsSourceData.InvoiceAgreementCode,
		|	HOBAccrualsSourceData.InvoiceAgreement,
		|	HOBAccrualsSourceData.Reverse,
		|	HOBAccrualsSourceData.LegalEntity,
		|	HOBAccrualsSourceData.DocumentID,
		|	HOBAccrualsSourceData.SalesOrderID,
		|	HOBAccrualsSourceData.InvoiceID,
		|	HOBAccrualsSourceData.TrID,
		|	HOBAccrualsSourceData.EndClient,
		|	HOBAccrualsSourceData.EndClientINN,
		|	HOBAccrualsSourceData.MNGC
		|ПОМЕСТИТЬ ВТ_HOBAccrualsSourceData
		|ИЗ
		|	РегистрСведений.HOBAccrualsSourceData КАК HOBAccrualsSourceData
		|ГДЕ
		|	HOBAccrualsSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	ВТ_HOBAccrualsSourceData.Currency КАК Идентификатор
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_HOBAccrualsSourceData.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Specify the 1C object"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.SalesOrderCurrency
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_HOBAccrualsSourceData.SalesOrderCurrency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|	И ВТ_HOBAccrualsSourceData.SalesOrderCurrency <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Specify the 1C object"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.InvoiceCurrency
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_HOBAccrualsSourceData.InvoiceCurrency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|	И ВТ_HOBAccrualsSourceData.InvoiceCurrency <> """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.Account
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBAccrualsSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.CompanyCode
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBAccrualsSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
		|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.AU
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBAccrualsSourceData.AUType <> ""Lawson"")
		|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
		|	И Сегменты.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.AU
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by code"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.MNGC
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Код = ВТ_HOBAccrualsSourceData.MNGC)
		|			И (ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|ГДЕ
		|	ВТ_HOBAccrualsSourceData.MNGC <> """"
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.AU
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL
		|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	""Failed to find Legal entity"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.LegalEntity),
		|	ЗНАЧЕНИЕ(Справочник.LegalEntiites.ПустаяСсылка),
		|	ВТ_HOBAccrualsSourceData.LegalEntity
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBAccrualsSourceData.LegalEntity = LegalEntiites.Код
		|			И (НЕ LegalEntiites.ПометкаУдаления)
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	LegalEntiites.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		//|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		//|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
		|	Сегменты.Код
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО (НЕ HFM_Technology.ПометкаУдаления)
		|				И Сегменты.Код = HFM_Technology.Код
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
		|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBAccrualsSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|	И ВТ_HOBAccrualsSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО (НЕ HFM_Locations.ПометкаУдаления)
		|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBAccrualsSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBAccrualsSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBAccrualsSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBAccrualsSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО (НЕ HFM_Locations.ПометкаУдаления)
		|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И ВТ_HOBAccrualsSourceData.MNGC = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|ГДЕ
		|	ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBAccrualsSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	ВТ_HOBAccrualsSourceData КАК ВТ_HOBAccrualsSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBAccrualsSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		// { RGS AGorlenko 22.02.2018 12:05:18 - базовые элементы заполняются отдельным регламентом
		//Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
		// } RGS AGorlenko 22.02.2018 12:05:55 - базовые элементы заполняются отдельным регламентом
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		// { RGS AGorlenko 22.02.2018 12:06:16 - базовые элементы заполняются отдельным регламентом
		//Иначе
		//	
		//	ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
		//	ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
		//	ТекОбъект.Записать();
		//	
		//КонецЕсли;
		// } RGS AGorlenko 22.02.2018 12:06:17 - базовые элементы заполняются отдельным регламентом
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		// { RGS AGorlenko 22.02.2018 12:06:40 - базовые элементы заполняются отдельным регламентом
		//Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
		//	
		//	ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
		//	ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
		//	ТекОбъект.Записать();
		//	
		//Иначе
		// } RGS AGorlenko 22.02.2018 12:06:42 - базовые элементы заполняются отдельным регламентом
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		// { RGS AGorlenko 22.02.2018 12:07:32 - базовые элементы заполняются отдельным регламентом
		//КонецЕсли;
		// } RGS AGorlenko 22.02.2018 12:07:33 - базовые элементы заполняются отдельным регламентом
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[5].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
		ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CheckedConflicts;
		ДокументЗагрузки.Записать();
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ВыполнитьПроверкуНастроекСинхронизацииJV(СтруктураПараметров, АдресХранилища)
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBJVSourceData.TrDate,
		|	HOBJVSourceData.TrNumber,
		|	HOBJVSourceData.Document,
		|	HOBJVSourceData.DocumentType,
		|	HOBJVSourceData.Account,
		|	HOBJVSourceData.Client,
		|	HOBJVSourceData.INN,
		|	HOBJVSourceData.CompanyCode,
		|	HOBJVSourceData.CompanyDesc,
		|	HOBJVSourceData.Currency,
		|	HOBJVSourceData.LocationCode,
		|	HOBJVSourceData.LocationDesc,
		|	HOBJVSourceData.Amount,
		|	HOBJVSourceData.BaseAmount,
		|	HOBJVSourceData.AU,
		|	HOBJVSourceData.AUType,
		|	HOBJVSourceData.SubSubSegment,
		|	HOBJVSourceData.Reverse,
		|	HOBJVSourceData.DocumentID,
		|	HOBJVSourceData.TrID,
		|	HOBJVSourceData.LegalEntity,
		|	HOBJVSourceData.MNGC
		|ПОМЕСТИТЬ ВТ_HOBJVSourceData
		|ИЗ
		|	РегистрСведений.HOBJVSourceData КАК HOBJVSourceData
		|ГДЕ
		|	HOBJVSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	ВТ_HOBJVSourceData.Currency КАК Идентификатор
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_HOBJVSourceData.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.Account
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.CompanyCode
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBJVSourceData.AUType <> ""Lawson"")
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И Сегменты.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by code"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.MNGC
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_HOBJVSourceData.MNGC = ПодразделенияОрганизаций.Код
		|ГДЕ
		|	ВТ_HOBJVSourceData.MNGC <> """"
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.AU
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Legal entity"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.LegalEntity),
		|	ЗНАЧЕНИЕ(Справочник.LegalEntiites.ПустаяСсылка),
		|	ВТ_HOBJVSourceData.LegalEntity
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBJVSourceData.LegalEntity = LegalEntiites.Код
		|			И (НЕ LegalEntiites.ПометкаУдаления)
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	LegalEntiites.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		//|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		//|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
		|	Сегменты.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО (НЕ HFM_Technology.ПометкаУдаления)
		|				И Сегменты.Код = HFM_Technology.Код
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|	И ВТ_HOBJVSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО (НЕ HFM_Locations.ПометкаУдаления)
		|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBJVSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBJVSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBJVSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBJVSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И ВТ_HOBJVSourceData.MNGC = ПодразделенияОрганизаций.Код
		|ГДЕ
		|	ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBJVSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	ВТ_HOBJVSourceData КАК ВТ_HOBJVSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBJVSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		// { RGS AGorlenko 22.02.2018 14:15:57 - базовые элементы заполняются отдельным регламентом
		//Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
		// } RGS AGorlenko 22.02.2018 14:15:59 - базовые элементы заполняются отдельным регламентом
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		// { RGS AGorlenko 22.02.2018 14:16:17 - базовые элементы заполняются отдельным регламентом
		//Иначе
		//	
		//	ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
		//	ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
		//	ТекОбъект.Записать();
		//	
		//КонецЕсли;
		// } RGS AGorlenko 22.02.2018 14:16:18 - базовые элементы заполняются отдельным регламентом
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		// { RGS AGorlenko 22.02.2018 14:16:43 - базовые элементы заполняются отдельным регламентом
		//Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
		//	
		//	ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
		//	ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
		//	ТекОбъект.Записать();
		//	
		//Иначе
		// } RGS AGorlenko 22.02.2018 14:16:44 - базовые элементы заполняются отдельным регламентом
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		// { RGS AGorlenko 22.02.2018 14:17:03 - базовые элементы заполняются отдельным регламентом
		//КонецЕсли;
		// } RGS AGorlenko 22.02.2018 14:17:05 - базовые элементы заполняются отдельным регламентом
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[5].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
		
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
		ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CheckedConflicts;
		ДокументЗагрузки.Записать();
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ВыполнитьПроверкуНастроекСинхронизацииReceivables(СтруктураПараметров, АдресХранилища)
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBReceivablesSourceData.TrDate,
		|	HOBReceivablesSourceData.TrNumber,
		|	HOBReceivablesSourceData.Document,
		|	HOBReceivablesSourceData.DocumentType,
		|	HOBReceivablesSourceData.Account,
		|	HOBReceivablesSourceData.Client,
		|	HOBReceivablesSourceData.INN,
		|	HOBReceivablesSourceData.CompanyCode,
		|	HOBReceivablesSourceData.CompanyDesc,
		|	HOBReceivablesSourceData.Currency,
		|	HOBReceivablesSourceData.LocationCode,
		|	HOBReceivablesSourceData.LocationDesc,
		|	HOBReceivablesSourceData.Amount,
		|	HOBReceivablesSourceData.BaseAmount,
		|	HOBReceivablesSourceData.AU,
		|	HOBReceivablesSourceData.AUType,
		|	HOBReceivablesSourceData.SubSubSegment,
		|	HOBReceivablesSourceData.Invoice,
		|	HOBReceivablesSourceData.InvoiceDate,
		|	HOBReceivablesSourceData.InvoiceNumber,
		|	HOBReceivablesSourceData.InvoiceCurrency,
		|	HOBReceivablesSourceData.InvoiceAmount,
		|	HOBReceivablesSourceData.InvoiceBilled,
		|	HOBReceivablesSourceData.InvoicePassedForApproval,
		|	HOBReceivablesSourceData.InvoicePassedForPayment,
		|	HOBReceivablesSourceData.InvoicePassedForApprovalDate,
		|	HOBReceivablesSourceData.InvoicePassedForPaymentDate,
		|	HOBReceivablesSourceData.ExpectedDateOfPayment,
		|	HOBReceivablesSourceData.InvoiceAgreementCode,
		|	HOBReceivablesSourceData.InvoiceAgreement,
		|	HOBReceivablesSourceData.Reverse,
		|	HOBReceivablesSourceData.DocumentID,
		|	HOBReceivablesSourceData.InvoiceID,
		|	HOBReceivablesSourceData.TrID,
		|	HOBReceivablesSourceData.LegalEntity,
		|	HOBReceivablesSourceData.MNGC
		|ПОМЕСТИТЬ ВТ_HOBReceivablesSourceData
		|ИЗ
		|	РегистрСведений.HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|ГДЕ
		|	HOBReceivablesSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	ВТ_HOBReceivablesSourceData.Currency КАК Идентификатор
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_HOBReceivablesSourceData.Currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Specify the 1C object"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency),
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
		|	ВТ_HOBReceivablesSourceData.InvoiceCurrency
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_HOBReceivablesSourceData.InvoiceCurrency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И ВТ_HOBReceivablesSourceData.InvoiceCurrency <> """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка),
		|	ВТ_HOBReceivablesSourceData.Account
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ВТ_HOBReceivablesSourceData.CompanyCode
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBReceivablesSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
		|	И ВТ_HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	ВТ_HOBReceivablesSourceData.AU
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBReceivablesSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBReceivablesSourceData.AUType <> ""Lawson"")
		|			И (ВТ_HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	КостЦентры.Код
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И ВТ_HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by AU"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_HOBReceivablesSourceData.AU
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBReceivablesSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location by code"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_HOBReceivablesSourceData.MNGC
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|			И ВТ_HOBReceivablesSourceData.MNGC = ПодразделенияОрганизаций.Код
		|ГДЕ
		|	ВТ_HOBReceivablesSourceData.MNGC <> """"
		|	И ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Accounting Unit"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.AccountingUnit),
		|	ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка),
		|	ВТ_HOBReceivablesSourceData.AU
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.AU = КостЦентры.Код
		|			И (ВТ_HOBReceivablesSourceData.AUType = ""Lawson"")
		|ГДЕ
		|	КостЦентры.Ссылка ЕСТЬ NULL 
		|	И ВТ_HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Legal entity"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.LegalEntity),
		|	ЗНАЧЕНИЕ(Справочник.LegalEntiites.ПустаяСсылка),
		|	ВТ_HOBReceivablesSourceData.LegalEntity
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_HOBReceivablesSourceData.LegalEntity = LegalEntiites.Код
		|			И (НЕ LegalEntiites.ПометкаУдаления)
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	LegalEntiites.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.Сегмент КАК Ссылка,
		//|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент,
		|	КостЦентры.Сегмент.Код КАК Код
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО КостЦентры.Сегмент.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.Сегмент.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|	И ВТ_HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		//|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)),
		|	Сегменты.Код
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО (НЕ HFM_Technology.ПометкаУдаления)
		|				И Сегменты.Код = HFM_Technology.Код
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBReceivablesSourceData.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КостЦентры.ПодразделениеОрганизации.Ссылка КАК Ссылка,
		|	КостЦентры.ПодразделениеОрганизации.Код КАК Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО КостЦентры.ПодразделениеОрганизации.GeoMarket.Код = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (НЕ КостЦентры.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.AU = КостЦентры.Код
		|ГДЕ
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|	И ВТ_HOBReceivablesSourceData.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка))
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО (НЕ HFM_Locations.ПометкаУдаления)
		|				И ПодразделенияОрганизаций.Код = HFM_Locations.Код
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_HOBReceivablesSourceData.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_HOBReceivablesSourceData.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_HOBReceivablesSourceData.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|ГДЕ
		|	ВТ_HOBReceivablesSourceData.AUType <> ""Lawson""
		|	И ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
		|	ПодразделенияОрганизаций.Код КАК Код
		//|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК LocationПоSubGeomarket
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|			И ВТ_HOBReceivablesSourceData.MNGC = ПодразделенияОрганизаций.Код
		|ГДЕ
		|	ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Lawson.Ссылка,
		|	Lawson.Код
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_HOBReceivablesSourceData.Account = Lawson.Код
		|ГДЕ
		|	Lawson.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	ВТ_HOBReceivablesSourceData КАК ВТ_HOBReceivablesSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_HOBReceivablesSourceData.CompanyCode = Организации.Код
		|ГДЕ
		|	Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.LocationПоSubGeomarket.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.LocationПоSubGeomarket;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[5].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = Перечисления.ТипыСоответствий.HOBs;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
		
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
		ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CheckedConflicts;
		ДокументЗагрузки.Записать();
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Accrual Тогда
		СформироватьПроводкиDSSAccruals(СтруктураПараметров, АдресХранилища);
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.JV Тогда
		СформироватьПроводкиDSSJV(СтруктураПараметров, АдресХранилища);
	ИначеЕсли СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		СформироватьПроводкиDSSReceivables(СтруктураПараметров, АдресХранилища);
	Иначе
		ВызватьИсключение "Unknown type of transactions!";
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиDSSAccruals(СтруктураПараметров, АдресХранилища)
	
	// если в текущей загрузке проводки только по выручке, то отменяем проведение проводок только по выручке.
	// иначе - всех
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.HOBAccrualsSourceData КАК HOBAccrualsSourceData
		|ГДЕ
		|	HOBAccrualsSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И HOBAccrualsSourceData.Account <> """"
		|			И НЕ HOBAccrualsSourceData.Account ПОДОБНО ""4%""";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТолькоСчетаВыручки = РезультатЗапроса.Пустой();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранзакцияHOB.Ссылка КАК Ссылка,
		|	ТранзакцияHOB.Company,
		|	ТранзакцияHOB.Account,
		|	ТранзакцияHOB.Currency,
		|	ТранзакцияHOB.Client,
		|	ТранзакцияHOB.Amount,
		|	ТранзакцияHOB.BaseAmount,
		|	ТранзакцияHOB.AU,
		|	ТранзакцияHOB.LegalEntity
		|ИЗ
		|	Документ.ТранзакцияHOB КАК ТранзакцияHOB,
		|	Константа.rgsДатаЗакрытияHOB КАК rgsДатаЗакрытияHOB
		|ГДЕ
		|	ТранзакцияHOB.Дата >= rgsДатаЗакрытияHOB.Значение
		|	И НЕ ТранзакцияHOB.ПометкаУдаления
		|	И ТранзакцияHOB.TransactionType = ЗНАЧЕНИЕ(Перечисление.HOBTransactionType.Accrual)";
		
	Если ТолькоСчетаВыручки Тогда
		Запрос.Текст = Запрос.Текст + " И ТранзакцияHOB.Account.БазовыйЭлемент В ИЕРАРХИИ(&СчетВыручкиВерхнегоУровня)";
		Запрос.УстановитьПараметр("СчетВыручкиВерхнегоУровня", rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	КонецЕсли;
	
	// { RGS TAlmazova 25.07.2017 16:19:33 - сохраняем данные существующих транзакций в таблицу значений, чтобы потом сверить с перезаполненными
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаСуществующихТранзакций = РезультатЗапроса.Выгрузить();
	// } RGS TAlmazova 25.07.2017 16:20:01 - сохраняем данные существующих транзакций в таблицу значений, чтобы потом сверить с перезаполненными
	
	НачатьТранзакцию();
	
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Для каждого Транзакция Из ТаблицаСуществующихТранзакций Цикл
		
		ТекОбъект = Транзакция.Ссылка.ПолучитьОбъект();
		ТекОбъект.ДополнительныеСвойства.Вставить("РедактироватьКорректировку", Ложь);
		ТекОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBAccrualsSourceData.TrDate,
		|	HOBAccrualsSourceData.TrNumber,
		|	HOBAccrualsSourceData.Document,
		|	HOBAccrualsSourceData.DocumentType,
		|	HOBAccrualsSourceData.Account,
		|	HOBAccrualsSourceData.Client,
		|	HOBAccrualsSourceData.INN,
		|	HOBAccrualsSourceData.SalesOrderAgreementCode,
		|	HOBAccrualsSourceData.SalesOrderAgreement,
		|	HOBAccrualsSourceData.SalesOrder,
		|	HOBAccrualsSourceData.SalesOrderNumber,
		|	HOBAccrualsSourceData.CompanyCode,
		|	HOBAccrualsSourceData.CompanyDesc,
		|	HOBAccrualsSourceData.Currency,
		|	HOBAccrualsSourceData.LocationCode,
		|	HOBAccrualsSourceData.LocationDesc,
		|	HOBAccrualsSourceData.Amount,
		|	HOBAccrualsSourceData.BaseAmount,
		|	HOBAccrualsSourceData.JobEndDate,
		|	HOBAccrualsSourceData.SalesOrderAmount,
		|	HOBAccrualsSourceData.ERPStatus,
		|	HOBAccrualsSourceData.SalesOrderCurrency,
		|	HOBAccrualsSourceData.SalesOrderExchangeRate,
		|	HOBAccrualsSourceData.SalesOrderApprovalDate,
		|	HOBAccrualsSourceData.SalesOrderApprovedBy,
		|	HOBAccrualsSourceData.AU,
		|	HOBAccrualsSourceData.AUType,
		|	HOBAccrualsSourceData.SubSubSegment,
		|	HOBAccrualsSourceData.SalesOrderDate,
		|	HOBAccrualsSourceData.Invoice,
		|	HOBAccrualsSourceData.InvoiceDate,
		|	HOBAccrualsSourceData.InvoiceNumber,
		|	HOBAccrualsSourceData.InvoiceCurrency,
		|	HOBAccrualsSourceData.InvoiceAmount,
		|	HOBAccrualsSourceData.InvoiceBilled,
		|	HOBAccrualsSourceData.InvoicePassedForApproval,
		|	HOBAccrualsSourceData.InvoicePassedForPayment,
		|	HOBAccrualsSourceData.InvoicePassedForApprovalDate,
		|	HOBAccrualsSourceData.InvoicePassedForPaymentDate,
		|	HOBAccrualsSourceData.ExpectedDateOfPayment,
		|	HOBAccrualsSourceData.InvoiceAgreementCode,
		|	HOBAccrualsSourceData.InvoiceAgreement,
		|	HOBAccrualsSourceData.Reverse,
		|	HOBAccrualsSourceData.DocumentID,
		|	HOBAccrualsSourceData.SalesOrderID,
		|	HOBAccrualsSourceData.InvoiceID,
		|	HOBAccrualsSourceData.TrID,
		|	HOBAccrualsSourceData.СтрокаФайла,
		|	HOBAccrualsSourceData.LegalEntity,
		|	HOBAccrualsSourceData.EndClient,
		|	HOBAccrualsSourceData.EndClientINN,
		|	HOBAccrualsSourceData.MNGC
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.HOBAccrualsSourceData КАК HOBAccrualsSourceData
		|ГДЕ
		|	HOBAccrualsSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ HOBAccrualsSourceData.INN В
		|				(ВЫБРАТЬ
		|					HOBIgnoredClients.INN
		|				ИЗ
		|					РегистрСведений.HOBIgnoredClients КАК HOBIgnoredClients)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.INN
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.EndClientINN
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|					ГДЕ
		|						ВТ_ДанныеФайла.EndClientINN <> """")) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Currency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.SalesOrderCurrency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|					ГДЕ
		|						ВТ_ДанныеФайла.SalesOrderCurrency <> """"
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.InvoiceCurrency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|					ГДЕ
		|						ВТ_ДанныеФайла.InvoiceCurrency <> """")) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SO.DocID,
		|	SO.Ссылка
		|ИЗ
		|	Документ.SalesOrder КАК SO
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО (НЕ SO.ПометкаУдаления)
		|			И (SO.Source = &ТипВнешнейСистемы)
		|			И SO.DocID = ВТ_ДанныеФайла.SalesOrderID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	INV.DocID,
		|	INV.Ссылка
		|ИЗ
		|	Документ.Invoice КАК INV
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО INV.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ INV.ПометкаУдаления)
		|			И (INV.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.TrDate КАК Period,
		|	Организации.Ссылка КАК Company,
		|	Lawson.Ссылка КАК Account,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_ДанныеФайла.SalesOrderAgreement КАК Contract,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.DocumentID,
		|	ВТ_ДанныеФайла.TrNumber,
		|	ВТ_ДанныеФайла.Document КАК DocumentPresentation,
		|	ВТ_ДанныеФайла.TrID,
		|	ТранзакцияHOB.Ссылка КАК Транзакция,
		|	ВТ_ДанныеФайла.SalesOrderID,
		|	ВТ_ДанныеФайла.JobEndDate,
		|	ВТ_ДанныеФайла.SalesOrderAmount,
		|	ВТ_ДанныеФайла.ERPStatus,
		|	ВТ_СоответствиеCurrency2.ОбъектПриемника КАК SalesOrderCurrency,
		|	ВТ_ДанныеФайла.SalesOrderExchangeRate,
		|	ВТ_ДанныеФайла.SalesOrderApprovalDate,
		|	ВТ_ДанныеФайла.SalesOrderApprovedBy,
		|	ВТ_ДанныеФайла.SalesOrder,
		|	ВТ_ДанныеФайла.SalesOrderNumber,
		|	ВТ_ДанныеФайла.SalesOrderDate,
		|	ВТ_СоответствиеCurrency1.ОбъектПриемника КАК InvoiceCurrency,
		|	ВТ_ДанныеФайла.InvoiceAmount,
		|	ВТ_ДанныеФайла.InvoiceBilled,
		|	ВТ_ДанныеФайла.InvoicePassedForApproval,
		|	ВТ_ДанныеФайла.InvoicePassedForPayment,
		|	ВТ_ДанныеФайла.InvoicePassedForApprovalDate,
		|	ВТ_ДанныеФайла.InvoicePassedForPaymentDate,
		|	ВТ_ДанныеФайла.ExpectedDateOfPayment,
		|	ВТ_ДанныеФайла.InvoiceAgreementCode,
		|	ВТ_ДанныеФайла.InvoiceAgreement,
		|	ВТ_ДанныеФайла.Reverse,
		|	ВТ_ДанныеФайла.LocationCode КАК CREW,
		|	ВТ_ДанныеФайла.INN КАК CustomerNumber,
		|	ВТ_ДанныеФайла.SalesOrderAgreementCode,
		|	ВТ_ДанныеФайла.SalesOrderAgreement,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU КАК AUCode,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account КАК AccountCode,
		|	КостЦентры.Ссылка КАК AU,
		|	ВТ_ДанныеФайла.InvoiceID,
		|	ВТ_ДанныеФайла.InvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceNumber,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВТ_ДанныеФайла.СтрокаФайла,
		|	LegalEntiites.Ссылка КАК LegalEntity,
		|	ВТ_СоответствиеКлиентовCustomerNumber1.ОбъектПриемника КАК EndClient,
		|	ПодразделенияОрганизаций.Ссылка КАК MNGC,
		|	ВТ_ДанныеФайла.EndClientINN
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияHOB КАК ТранзакцияHOB
		|		ПО ВТ_ДанныеФайла.TrID = ТранзакцияHOB.TrID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency1
		|		ПО ВТ_ДанныеФайла.InvoiceCurrency = ВТ_СоответствиеCurrency1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency2
		|		ПО ВТ_ДанныеФайла.SalesOrderCurrency = ВТ_СоответствиеCurrency2.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber1
		|		ПО ВТ_ДанныеФайла.EndClientINN = ВТ_СоответствиеКлиентовCustomerNumber1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.MNGC = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.TrDate,
		|	Организации.Ссылка,
		|	Lawson.Ссылка,
		|	ПодразделенияОрганизаций.Ссылка,
		|	Сегменты.Ссылка,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
		|	ВТ_ДанныеФайла.SalesOrderAgreement,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.DocumentID,
		|	ВТ_ДанныеФайла.TrNumber,
		|	ВТ_ДанныеФайла.Document,
		|	ВТ_ДанныеФайла.TrID,
		|	ТранзакцияHOB.Ссылка,
		|	ВТ_ДанныеФайла.SalesOrderID,
		|	ВТ_ДанныеФайла.JobEndDate,
		|	ВТ_ДанныеФайла.SalesOrderAmount,
		|	ВТ_ДанныеФайла.ERPStatus,
		|	ВТ_СоответствиеCurrency2.ОбъектПриемника,
		|	ВТ_ДанныеФайла.SalesOrderExchangeRate,
		|	ВТ_ДанныеФайла.SalesOrderApprovalDate,
		|	ВТ_ДанныеФайла.SalesOrderApprovedBy,
		|	ВТ_ДанныеФайла.SalesOrder,
		|	ВТ_ДанныеФайла.SalesOrderNumber,
		|	ВТ_ДанныеФайла.SalesOrderDate,
		|	ВТ_СоответствиеCurrency1.ОбъектПриемника,
		|	ВТ_ДанныеФайла.InvoiceAmount,
		|	ВТ_ДанныеФайла.InvoiceBilled,
		|	ВТ_ДанныеФайла.InvoicePassedForApproval,
		|	ВТ_ДанныеФайла.InvoicePassedForPayment,
		|	ВТ_ДанныеФайла.InvoicePassedForApprovalDate,
		|	ВТ_ДанныеФайла.InvoicePassedForPaymentDate,
		|	ВТ_ДанныеФайла.ExpectedDateOfPayment,
		|	ВТ_ДанныеФайла.InvoiceAgreementCode,
		|	ВТ_ДанныеФайла.InvoiceAgreement,
		|	ВТ_ДанныеФайла.Reverse,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.INN,
		|	ВТ_ДанныеФайла.SalesOrderAgreementCode,
		|	ВТ_ДанныеФайла.SalesOrderAgreement,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)),
		|	ВТ_ДанныеФайла.InvoiceID,
		|	ВТ_ДанныеФайла.InvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceNumber,
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель,
		|	ВТ_ДанныеФайла.СтрокаФайла,
		|	LegalEntiites.Ссылка,
		|	ВТ_СоответствиеКлиентовCustomerNumber1.ОбъектПриемника,
		|	ПодразделенияОрганизаций1.Ссылка,
		|	ВТ_ДанныеФайла.EndClientINN
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияHOB КАК ТранзакцияHOB
		|		ПО ВТ_ДанныеФайла.TrID = ТранзакцияHOB.TrID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency1
		|		ПО ВТ_ДанныеФайла.InvoiceCurrency = ВТ_СоответствиеCurrency1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency2
		|		ПО ВТ_ДанныеФайла.SalesOrderCurrency = ВТ_СоответствиеCurrency2.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber1
		|		ПО ВТ_ДанныеФайла.EndClientINN = ВТ_СоответствиеКлиентовCustomerNumber1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций1
		|		ПО ВТ_ДанныеФайла.MNGC = ПодразделенияОрганизаций1.Код
		|			И (ПодразделенияОрганизаций1.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И (НЕ ПодразделенияОрганизаций1.ПометкаУдаления)
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType <> ""Lawson""
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ДанныеФайла.СтрокаФайла";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	
	//НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	//ЗафиксироватьТранзакцию();
	
	
	КэшSalesOrders = РезультатЗапроса[3].Выгрузить();
	КэшSalesOrders.Индексы.Добавить("DocID");
	
	КэшИнвойсов = РезультатЗапроса[4].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("DocID");
	
	КэшAU = Новый Соответствие;
	
	ТаблицаДаты = РезультатЗапроса[5].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	// { RGS TAlmazova 06.07.2017 14:36:48 - проверка контрольных сумм
	//ТаблицаДанных = РезультатЗапроса[6].Выгрузить();
	////Отбор = Новый Структура;
	////Отбор.Вставить("Транзакция", Документы.ТранзакцияOracle.ПустаяСсылка());
	//ТаблицаДанныхКонтрольныеСуммы = ТаблицаДанных.Скопировать(,"AU, Account, Currency, Amount, BaseAmount");
	//
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = ТаблицаДанных.Количество();
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = ТаблицаДанныхКонтрольныеСуммы.Количество();
	//ДокументЗагрузки.Записать();
	//
	//ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount, BaseAmount");
	//ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	// } RGS TAlmazova 06.07.2017 14:36:54 - проверка контрольных сумм
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[6].Выбрать();
	
	НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	//НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	ТаблицаИсключенийАналитики = РегистрыСведений.AnalyticsExceptions.ПолучитьТаблицуИсключенийАналитики(Перечисления.ТипыСоответствий.HOBs);
	
	ТаблицаДанныхКонтрольныеСуммы = Новый ТаблицаЗначений;
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("AU");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Account");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Currency");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Amount");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("BaseAmount");
	КоличествоТранзакцийВФайле = 0;
	СчетчикСозданныхТранзакций = 0;
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.HOBs);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле + 1;
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Транзакция) Тогда
			//Продолжить;
			ТранзакцияHOBОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
			Если ТранзакцияHOBОбъект.ПометкаУдаления Тогда
				ТранзакцияHOBОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
		Иначе
			ТранзакцияHOBОбъект = Документы.ТранзакцияHOB.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьТранзакцию(СтруктураПараметров, ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, , ТаблицаИсключенийАналитики, Отказ, ТекстСообщенияОбОшибках, , КэшAU);
		
		ТранзакцияHOBОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, КэшSalesOrders, КэшИнвойсов, Неопределено, Неопределено, Неопределено, Неопределено, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.ДокументЗагрузки = СтруктураПараметров.Ссылка;
		ЗаписьНабора.ПроводкаDSS = ТранзакцияHOBОбъект.Ссылка;
		ЗаписьНабора.ОшибкаПриПоискеСвязанныхОбъектов = НайденаОшибкаПриПоискеСвязанныхОбъектов;
		
		СчетчикСозданныхТранзакций = СчетчикСозданныхТранзакций + 1;
		НоваяСтрокаКонтрольныхСумм = ТаблицаДанныхКонтрольныеСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтрольныхСумм, ТранзакцияHOBОбъект);
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	// { RGS AGorlenko 19.07.2017 18:34:26 - было ниже, перенесли сюда
	ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	ДокументЗагрузки.КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций;
	// } RGS AGorlenko 19.07.2017 18:34:36 - было ниже, перенесли сюда
	ДокументЗагрузки.Записать();
	
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 03.07.2017 18:09:38 - проверка контрольных сумм
	
	// { RGS AGorlenko 19.07.2017 18:34:05 - перенесено выше
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	//ДокументЗагрузки.Записать();
	// } RGS AGorlenko 19.07.2017 18:34:11 - перенесено выше
	
	ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount, BaseAmount");
	ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU КАК ПроводкаDSSAU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account КАК ПроводкаDSSAccount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.BaseAmount) КАК ПроводкаDSSBaseAmount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.Amount) КАК ПроводкаDSSAmount,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency КАК ПроводкаDSSCurrency
		|ПОМЕСТИТЬ ДанныеТранзакции
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПроводкаDSSAU,
		|	ПроводкаDSSAccount,
		|	ПроводкаDSSCurrency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы КАК AU,
		|	КонтрольныеСуммыПриЗагрузке.Account КАК Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency КАК Currency,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.Amount) КАК Amount,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.BaseAmount) КАК BaseAmount
		|ПОМЕСТИТЬ КонтрольныеСуммыПриЗагрузке
		|ИЗ
		|	РегистрСведений.КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|ГДЕ
		|	КонтрольныеСуммыПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы,
		|	КонтрольныеСуммыПриЗагрузке.Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	AU,
		|	Account,
		|	Currency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.AU, ДанныеТранзакции.ПроводкаDSSAU) КАК AU,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Account, ДанныеТранзакции.ПроводкаDSSAccount) КАК Account,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0) КАК Поле1,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0) КАК Поле2,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Currency, ДанныеТранзакции.ПроводкаDSSCurrency) КАК Currency
		|ИЗ
		|	КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеТранзакции КАК ДанныеТранзакции
		|		ПО КонтрольныеСуммыПриЗагрузке.Account = ДанныеТранзакции.ПроводкаDSSAccount
		|			И КонтрольныеСуммыПриЗагрузке.Currency = ДанныеТранзакции.ПроводкаDSSCurrency
		|			И КонтрольныеСуммыПриЗагрузке.AU = ДанныеТранзакции.ПроводкаDSSAU
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0)
		|			ИЛИ ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0))";
		
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекОшибка = СтрШаблон("Checksums do not match for AU = %1, Account = %2, Currency = %3.", ВыборкаДетальныеЗаписи.AU, ВыборкаДетальныеЗаписи.Account, ВыборкаДетальныеЗаписи.Currency);
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Отказ = Истина;
		ВызватьИсключение ТекОшибка;
	КонецЕсли;
	
	// } RGS TAlmazova 03.07.2017 18:09:39 - проверка контрольных сумм
	Если ТаблицаСуществующихТранзакций.Количество() > 0 Тогда
		
		НеактуальныеКорректировкиПометитьНаУдаление(ТаблицаСуществующихТранзакций, СтруктураПараметров.Ссылка);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура СформироватьПроводкиDSSJV(СтруктураПараметров, АдресХранилища)
	
	ТекущаяДата = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранзакцияHOB.Ссылка КАК Ссылка,
		|	ТранзакцияHOB.Company,
		|	ТранзакцияHOB.Account,
		|	ТранзакцияHOB.Currency,
		|	ТранзакцияHOB.Client,
		|	ТранзакцияHOB.Amount,
		|	ТранзакцияHOB.BaseAmount,
		|	ТранзакцияHOB.TrID,
		|	ТранзакцияHOB.AU,
		|	ТранзакцияHOB.LegalEntity
		|ИЗ
		|	Документ.ТранзакцияHOB КАК ТранзакцияHOB,
		|	Константа.rgsДатаЗакрытияHOB КАК rgsДатаЗакрытияHOB
		|ГДЕ
		|	ТранзакцияHOB.Дата >= rgsДатаЗакрытияHOB.Значение
		|	И НЕ ТранзакцияHOB.ПометкаУдаления
		|	И ТранзакцияHOB.TransactionType = ЗНАЧЕНИЕ(Перечисление.HOBTransactionType.JV)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// { RGS TAlmazova 25.07.2017 16:19:33 - сохраняем данные существующих транзакций в таблицу значений, чтобы потом сверить с перезаполненными
	ТаблицаСуществующихТранзакций = РезультатЗапроса.Выгрузить();
	// } RGS TAlmazova 25.07.2017 16:20:01 - сохраняем данные существующих транзакций в таблицу значений, чтобы потом сверить с перезаполненными
	
	НачатьТранзакцию();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Для каждого Транзакция Из ТаблицаСуществующихТранзакций Цикл
		
		ТекОбъект = Транзакция.Ссылка.ПолучитьОбъект();
		ТекОбъект.ДополнительныеСвойства.Вставить("РедактироватьКорректировку", Ложь);
		ТекОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBJVSourceData.TrDate,
		|	HOBJVSourceData.TrNumber,
		|	HOBJVSourceData.Document,
		|	HOBJVSourceData.DocumentType,
		|	HOBJVSourceData.Account,
		|	HOBJVSourceData.Client,
		|	HOBJVSourceData.CompanyCode,
		|	HOBJVSourceData.CompanyDesc,
		|	HOBJVSourceData.Currency,
		|	HOBJVSourceData.LocationCode,
		|	HOBJVSourceData.LocationDesc,
		|	HOBJVSourceData.Amount,
		|	HOBJVSourceData.BaseAmount,
		|	HOBJVSourceData.AU,
		|	HOBJVSourceData.AUType,
		|	HOBJVSourceData.SubSubSegment,
		|	HOBJVSourceData.Reverse,
		|	HOBJVSourceData.DocumentID,
		|	HOBJVSourceData.TrID,
		|	HOBJVSourceData.СтрокаФайла,
		|	HOBJVSourceData.LegalEntity,
		|	HOBJVSourceData.INN,
		|	HOBJVSourceData.EndClientINN,
		|	HOBJVSourceData.MNGC
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.HOBJVSourceData КАК HOBJVSourceData
		|ГДЕ
		|	HOBJVSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Currency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.INN
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.EndClientINN
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|					ГДЕ
		|						ВТ_ДанныеФайла.EndClientINN <> """")) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Client,
		|	КлючиРучныхКорректировок.Location,
		//|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.AU,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.TrDate КАК Period,
		|	Организации.Ссылка КАК Company,
		|	Lawson.Ссылка КАК Account,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.DocumentID,
		|	ВТ_ДанныеФайла.TrNumber,
		|	ВТ_ДанныеФайла.Document КАК DocumentPresentation,
		|	ВТ_ДанныеФайла.TrID,
		|	ТранзакцияHOB.Ссылка КАК Транзакция,
		|	ВТ_ДанныеФайла.Reverse,
		|	ВТ_ДанныеФайла.LocationCode КАК CREW,
		|	ВТ_ДанныеФайла.INN КАК CustomerNumber,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU КАК AUCode,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account КАК AccountCode,
		|	КостЦентры.Ссылка КАК AU,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВТ_ДанныеФайла.СтрокаФайла КАК СтрокаФайла,
		|	LegalEntiites.Ссылка КАК LegalEntity,
		|	ВТ_СоответствиеКлиентовCustomerNumber1.ОбъектПриемника КАК EndClient,
		|	ПодразделенияОрганизаций.Ссылка КАК MNGC,
		|	ВТ_ДанныеФайла.EndClientINN КАК EndCustomerNumber
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияHOB КАК ТранзакцияHOB
		|		ПО ВТ_ДанныеФайла.TrID = ТранзакцияHOB.TrID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber1
		|		ПО ВТ_ДанныеФайла.EndClientINN = ВТ_СоответствиеКлиентовCustomerNumber1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.MNGC = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.TrDate,
		|	Организации.Ссылка,
		|	Lawson.Ссылка,
		|	ПодразделенияОрганизаций.Ссылка,
		|	Сегменты.Ссылка,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.DocumentID,
		|	ВТ_ДанныеФайла.TrNumber,
		|	ВТ_ДанныеФайла.Document,
		|	ВТ_ДанныеФайла.TrID,
		|	ТранзакцияHOB.Ссылка,
		|	ВТ_ДанныеФайла.Reverse,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.INN,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)),
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель,
		|	ВТ_ДанныеФайла.СтрокаФайла,
		|	LegalEntiites.Ссылка,
		|	ВТ_СоответствиеКлиентовCustomerNumber1.ОбъектПриемника,
		|	ПодразделенияОрганизаций1.Ссылка,
		|	ВТ_ДанныеФайла.EndClientINN
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияHOB КАК ТранзакцияHOB
		|		ПО ВТ_ДанныеФайла.TrID = ТранзакцияHOB.TrID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber1
		|		ПО ВТ_ДанныеФайла.EndClientINN = ВТ_СоответствиеКлиентовCustomerNumber1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций1
		|		ПО ВТ_ДанныеФайла.MNGC = ПодразделенияОрганизаций1.Код
		|			И (НЕ ПодразделенияОрганизаций1.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций1.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType <> ""Lawson""
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокаФайла";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	
	//НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	//ЗафиксироватьТранзакцию();
	
	КэшРучныхКоррерктировок = РезультатЗапроса[3].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Company, Client, Location, SubSubSegment, Account, Currency");
	//КэшРучныхКоррерктировок.Индексы.Добавить("Company, Location, SubSubSegment, Account, Currency");
	
	КэшAU = Новый Соответствие;
	
	ТаблицаДаты = РезультатЗапроса[4].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	// { RGS TAlmazova 06.07.2017 14:36:48 - проверка контрольных сумм
	//ТаблицаДанных = РезультатЗапроса[5].Выгрузить();
	//Отбор = Новый Структура;
	//Отбор.Вставить("Транзакция", Документы.ТранзакцияOracle.ПустаяСсылка());
	//ТаблицаДанныхКонтрольныеСуммы = ТаблицаДанных.Скопировать(,"AU, Account, Currency, Amount, BaseAmount");
	//
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = ТаблицаДанных.Количество();
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = ТаблицаДанныхКонтрольныеСуммы.Количество();
	//ДокументЗагрузки.Записать();
	//
	//ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount, BaseAmount");
	//ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	// } RGS TAlmazova 06.07.2017 14:36:54 - проверка контрольных сумм
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[5].Выбрать();
	
	НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	//НачатьТранзакцию();
	
	ТаблицаИсключенийАналитики = РегистрыСведений.AnalyticsExceptions.ПолучитьТаблицуИсключенийАналитики(Перечисления.ТипыСоответствий.HOBs);
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	ТаблицаДанныхКонтрольныеСуммы = Новый ТаблицаЗначений;
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("AU");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Account");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Currency");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Amount");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("BaseAmount");
	КоличествоТранзакцийВФайле = 0;
	СчетчикСозданныхТранзакций = 0;
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.HOBs);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле + 1;
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Транзакция) Тогда
			//Продолжить;
			ТранзакцияHOBОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
			Если ТранзакцияHOBОбъект.ПометкаУдаления Тогда
				ТранзакцияHOBОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
		Иначе
			ТранзакцияHOBОбъект = Документы.ТранзакцияHOB.СоздатьДокумент();
		КонецЕсли;
		
		КлиентОтсутствует = Ложь;
		
		ЗаполнитьТранзакцию(СтруктураПараметров, ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, , ТаблицаИсключенийАналитики, Отказ, ТекстСообщенияОбОшибках, КлиентОтсутствует, КэшAU);
		
		ЭтоНоваяТранзакция = ТранзакцияHOBОбъект.ЭтоНовый();
		
		ТранзакцияHOBОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если КлиентОтсутствует И ЭтоНоваяТранзакция Тогда
			НЗ_Проблемы = РегистрыСведений.ПроблемыПриЗагрузке.СоздатьНаборЗаписей();
			НЗ_Проблемы.Отбор.Транзакция.Установить(ТранзакцияHOBОбъект.Ссылка);
			НЗ_Проблемы.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
			НЗ_Проблемы.Отбор.ОписаниеПроблемы.Установить("Missing client code");
			НоваяЗапись = НЗ_Проблемы.Добавить();
			НоваяЗапись.Транзакция = ТранзакцияHOBОбъект.Ссылка;
			НоваяЗапись.ДокументЗагрузки = СтруктураПараметров.Ссылка;
			НоваяЗапись.ОписаниеПроблемы = "Missing client code";
			НЗ_Проблемы.Записать(Истина);
			
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата = ТекущаяДата;
			Задача.Наименование = "Fill the client in the transaction " + ТранзакцияHOBОбъект.Ссылка;
			Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.HOBs;
			Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
			//Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
			Задача.Автор = Пользователи.ТекущийПользователь();
			Задача.Предмет = ТранзакцияHOBОбъект.Ссылка;
			Задача.Записать();
			
		КонецЕсли;
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, , , КэшРучныхКоррерктировок, Неопределено, Неопределено, Неопределено, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.ДокументЗагрузки = СтруктураПараметров.Ссылка;
		ЗаписьНабора.ПроводкаDSS = ТранзакцияHOBОбъект.Ссылка;
		ЗаписьНабора.ОшибкаПриПоискеСвязанныхОбъектов = НайденаОшибкаПриПоискеСвязанныхОбъектов;
		
		СчетчикСозданныхТранзакций = СчетчикСозданныхТранзакций + 1;
		НоваяСтрокаКонтрольныхСумм = ТаблицаДанныхКонтрольныеСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтрольныхСумм, ТранзакцияHOBОбъект);
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	// { RGS AGorlenko 19.07.2017 18:39:55 - было ниже, перенесено сюда
	ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	ДокументЗагрузки.КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций;
	// } RGS AGorlenko 19.07.2017 18:40:06 - было ниже, перенесено сюда
	ДокументЗагрузки.Записать();
	
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 03.07.2017 18:09:38 - проверка контрольных сумм
	
	// { RGS AGorlenko 19.07.2017 18:39:30 - перенесено выше
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	//ДокументЗагрузки.Записать();
	// } RGS AGorlenko 19.07.2017 18:39:39 - перенесено выше
	
	ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount, BaseAmount");
	ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU КАК ПроводкаDSSAU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account КАК ПроводкаDSSAccount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.BaseAmount) КАК ПроводкаDSSBaseAmount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.Amount) КАК ПроводкаDSSAmount,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency КАК ПроводкаDSSCurrency
		|ПОМЕСТИТЬ ДанныеТранзакции
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПроводкаDSSAU,
		|	ПроводкаDSSAccount,
		|	ПроводкаDSSCurrency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы КАК AU,
		|	КонтрольныеСуммыПриЗагрузке.Account КАК Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency КАК Currency,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.Amount) КАК Amount,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.BaseAmount) КАК BaseAmount
		|ПОМЕСТИТЬ КонтрольныеСуммыПриЗагрузке
		|ИЗ
		|	РегистрСведений.КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|ГДЕ
		|	КонтрольныеСуммыПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы,
		|	КонтрольныеСуммыПриЗагрузке.Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	AU,
		|	Account,
		|	Currency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.AU, ДанныеТранзакции.ПроводкаDSSAU) КАК AU,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Account, ДанныеТранзакции.ПроводкаDSSAccount) КАК Account,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0) КАК Поле1,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0) КАК Поле2,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Currency, ДанныеТранзакции.ПроводкаDSSCurrency) КАК Currency
		|ИЗ
		|	КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеТранзакции КАК ДанныеТранзакции
		|		ПО КонтрольныеСуммыПриЗагрузке.Account = ДанныеТранзакции.ПроводкаDSSAccount
		|			И КонтрольныеСуммыПриЗагрузке.Currency = ДанныеТранзакции.ПроводкаDSSCurrency
		|			И КонтрольныеСуммыПриЗагрузке.AU = ДанныеТранзакции.ПроводкаDSSAU
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0)
		|			ИЛИ ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0))";
		
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекОшибка = СтрШаблон("Checksums do not match for AU = %1, Account = %2, Currency = %3.", ВыборкаДетальныеЗаписи.AU, ВыборкаДетальныеЗаписи.Account, ВыборкаДетальныеЗаписи.Currency);
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Отказ = Истина;
		ВызватьИсключение ТекОшибка;
	КонецЕсли;
	
	// } RGS TAlmazova 03.07.2017 18:09:39 - проверка контрольных сумм
	
	// { RGS TAlmazova 25.07.2017 17:28:41 - Пометка на удаление корректировок, если данные в транзакции поменялись - вынесла в отдельную процедуру
	Если ТаблицаСуществующихТранзакций.Количество() > 0 Тогда
		
		НеактуальныеКорректировкиПометитьНаУдаление(ТаблицаСуществующихТранзакций, СтруктураПараметров.Ссылка);
		
	КонецЕсли;
	// } RGS TAlmazova 25.07.2017 17:29:16 - Пометка на удаление корректировок, если данные в транзакции поменялись
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура СформироватьПроводкиDSSReceivables(СтруктураПараметров, АдресХранилища)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранзакцияHOB.Ссылка КАК Ссылка,
		|	ТранзакцияHOB.Company,
		|	ТранзакцияHOB.Account,
		|	ТранзакцияHOB.Currency,
		|	ТранзакцияHOB.Client,
		|	ТранзакцияHOB.Amount,
		|	ТранзакцияHOB.BaseAmount,
		|	ТранзакцияHOB.AU,
		|	ТранзакцияHOB.LegalEntity
		|ИЗ
		|	Документ.ТранзакцияHOB КАК ТранзакцияHOB,
		|	Константа.rgsДатаЗакрытияHOB КАК rgsДатаЗакрытияHOB
		|ГДЕ
		|	ТранзакцияHOB.Дата >= rgsДатаЗакрытияHOB.Значение
		|	И НЕ ТранзакцияHOB.ПометкаУдаления
		|	И ТранзакцияHOB.TransactionType = ЗНАЧЕНИЕ(Перечисление.HOBTransactionType.Receivables)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// { RGS TAlmazova 25.07.2017 16:19:33 - сохраняем данные существующих транзакций в таблицу значений, чтобы потом сверить с перезаполненными
	ТаблицаСуществующихТранзакций = РезультатЗапроса.Выгрузить();
	// } RGS TAlmazova 25.07.2017 16:20:01 - сохраняем данные существующих транзакций в таблицу значений, чтобы потом сверить с перезаполненными
	
	НачатьТранзакцию();
		
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Для каждого Транзакция Из ТаблицаСуществующихТранзакций Цикл
		
		ТекОбъект = Транзакция.Ссылка.ПолучитьОбъект();
		ТекОбъект.ДополнительныеСвойства.Вставить("РедактироватьКорректировку", Ложь);
		ТекОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HOBReceivablesSourceData.TrDate,
		|	HOBReceivablesSourceData.TrNumber,
		|	HOBReceivablesSourceData.Document,
		|	HOBReceivablesSourceData.DocumentType,
		|	HOBReceivablesSourceData.Account,
		|	HOBReceivablesSourceData.Client,
		|	HOBReceivablesSourceData.INN,
		|	HOBReceivablesSourceData.CompanyCode,
		|	HOBReceivablesSourceData.CompanyDesc,
		|	HOBReceivablesSourceData.Currency,
		|	HOBReceivablesSourceData.LocationCode,
		|	HOBReceivablesSourceData.LocationDesc,
		|	HOBReceivablesSourceData.Amount,
		|	HOBReceivablesSourceData.BaseAmount,
		|	HOBReceivablesSourceData.AU,
		|	HOBReceivablesSourceData.AUType,
		|	HOBReceivablesSourceData.SubSubSegment,
		|	HOBReceivablesSourceData.Reverse,
		|	HOBReceivablesSourceData.DocumentID,
		|	HOBReceivablesSourceData.InvoiceID,
		|	HOBReceivablesSourceData.TrID,
		|	HOBReceivablesSourceData.InvoiceCurrency,
		|	HOBReceivablesSourceData.InvoiceType,
		|	HOBReceivablesSourceData.Invoice,
		|	HOBReceivablesSourceData.InvoiceNumber,
		|	HOBReceivablesSourceData.InvoiceDate,
		|	HOBReceivablesSourceData.InvoiceAmount,
		|	HOBReceivablesSourceData.InvoiceAgreementCode,
		|	HOBReceivablesSourceData.InvoiceAgreement,
		|	HOBReceivablesSourceData.FiscalInvoiceNo,
		|	HOBReceivablesSourceData.FiscalInvoiceDate,
		|	HOBReceivablesSourceData.InvoiceBilled,
		|	HOBReceivablesSourceData.InvoicePassedForApproval,
		|	HOBReceivablesSourceData.InvoicePassedForPayment,
		|	HOBReceivablesSourceData.InvoicePassedForApprovalDate,
		|	HOBReceivablesSourceData.InvoicePassedForPaymentDate,
		|	HOBReceivablesSourceData.ExpectedDateOfPayment,
		|	HOBReceivablesSourceData.PaymentNumber,
		|	HOBReceivablesSourceData.PaymentDate,
		|	HOBReceivablesSourceData.СтрокаФайла,
		|	HOBReceivablesSourceData.LegalEntity,
		|	HOBReceivablesSourceData.CorAccount,
		|	HOBReceivablesSourceData.ReverseDocument,
		|	HOBReceivablesSourceData.ReverseDocumentType,
		|	HOBReceivablesSourceData.EndClientINN,
		|	HOBReceivablesSourceData.MNGC
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.HOBReceivablesSourceData КАК HOBReceivablesSourceData
		|ГДЕ
		|	HOBReceivablesSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ HOBReceivablesSourceData.INN В
		|				(ВЫБРАТЬ
		|					HOBIgnoredClients.INN
		|				ИЗ
		|					РегистрСведений.HOBIgnoredClients КАК HOBIgnoredClients)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.INN
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.EndClientINN
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|					ГДЕ
		|						ВТ_ДанныеФайла.EndClientINN <> """")) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs)
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.Currency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.InvoiceCurrency
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	INV.DocID,
		|	INV.Ссылка
		|ИЗ
		|	Документ.Invoice КАК INV
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО INV.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ INV.ПометкаУдаления)
		|			И (INV.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Cash.DocID,
		|	Cash.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК Cash
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Cash.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ Cash.ПометкаУдаления)
		|			И (Cash.Source = &ТипВнешнейСистемы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Cash.DocID,
		|	Cash.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК Cash
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Cash.DocID = ВТ_ДанныеФайла.DocumentID
		|			И (НЕ Cash.ПометкаУдаления)
		|			И (Cash.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BatchAllocation.DocID,
		|	BatchAllocation.Ссылка
		|ИЗ
		|	Документ.BatchAllocation КАК BatchAllocation
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО BatchAllocation.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ BatchAllocation.ПометкаУдаления)
		|			И (BatchAllocation.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Memo.DocID,
		|	Memo.Ссылка
		|ИЗ
		|	Документ.Memo КАК Memo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Memo.DocID = ВТ_ДанныеФайла.InvoiceID
		|			И (НЕ Memo.ПометкаУдаления)
		|			И (Memo.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.TrDate КАК Period,
		|	Организации.Ссылка КАК Company,
		|	Lawson.Ссылка КАК Account,
		|	КостЦентры.ПодразделениеОрганизации КАК Location,
		|	КостЦентры.Сегмент КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.DocumentID,
		|	ВТ_ДанныеФайла.TrNumber,
		|	ВТ_ДанныеФайла.Document КАК DocumentPresentation,
		|	ВТ_ДанныеФайла.TrID,
		|	ТранзакцияHOB.Ссылка КАК Транзакция,
		|	ВТ_ДанныеФайла.Reverse,
		|	ВТ_ДанныеФайла.LocationCode КАК CREW,
		|	ВТ_ДанныеФайла.INN КАК CustomerNumber,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU КАК AUCode,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account КАК AccountCode,
		|	КостЦентры.Ссылка КАК AU,
		|	КостЦентры.ПодразделениеОрганизации.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВТ_СоответствиеCurrency1.ОбъектПриемника КАК InvoiceCurrency,
		|	ВТ_ДанныеФайла.DocumentType,
		|	ВТ_ДанныеФайла.InvoiceType,
		|	ВТ_ДанныеФайла.InvoiceID,
		|	ВТ_ДанныеФайла.InvoiceNumber,
		|	ВТ_ДанныеФайла.InvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceAmount,
		|	ВТ_ДанныеФайла.InvoiceAgreementCode,
		|	ВТ_ДанныеФайла.InvoiceAgreement,
		|	ВТ_ДанныеФайла.FiscalInvoiceNo,
		|	ВТ_ДанныеФайла.FiscalInvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceBilled,
		|	ВТ_ДанныеФайла.InvoicePassedForApproval,
		|	ВТ_ДанныеФайла.InvoicePassedForPayment,
		|	ВТ_ДанныеФайла.InvoicePassedForApprovalDate,
		|	ВТ_ДанныеФайла.InvoicePassedForPaymentDate,
		|	ВТ_ДанныеФайла.ExpectedDateOfPayment,
		|	ВТ_ДанныеФайла.PaymentNumber,
		|	ВТ_ДанныеФайла.PaymentDate,
		|	ВТ_ДанныеФайла.СтрокаФайла КАК СтрокаФайла,
		|	LegalEntiites.Ссылка КАК LegalEntity,
		|	ВТ_ДанныеФайла.CorAccount,
		|	ВТ_ДанныеФайла.ReverseDocument,
		|	ВТ_ДанныеФайла.ReverseDocumentType,
		|	ВТ_СоответствиеКлиентовCustomerNumber1.ОбъектПриемника КАК EndClient,
		|	ПодразделенияОрганизаций.Ссылка КАК MNGC,
		|	ВТ_ДанныеФайла.EndClientINN КАК EndCustomerNumber
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияHOB КАК ТранзакцияHOB
		|		ПО ВТ_ДанныеФайла.TrID = ТранзакцияHOB.TrID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency1
		|		ПО ВТ_ДанныеФайла.InvoiceCurrency = ВТ_СоответствиеCurrency1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber1
		|		ПО ВТ_ДанныеФайла.EndClientINN = ВТ_СоответствиеКлиентовCustomerNumber1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.MNGC = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType = ""Lawson""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.TrDate,
		|	Организации.Ссылка,
		|	Lawson.Ссылка,
		|	ПодразделенияОрганизаций.Ссылка,
		|	Сегменты.Ссылка,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника,
		|	ВТ_ДанныеФайла.Amount,
		|	ВТ_ДанныеФайла.BaseAmount,
		|	ВТ_ДанныеФайла.DocumentID,
		|	ВТ_ДанныеФайла.TrNumber,
		|	ВТ_ДанныеФайла.Document,
		|	ВТ_ДанныеФайла.TrID,
		|	ТранзакцияHOB.Ссылка,
		|	ВТ_ДанныеФайла.Reverse,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.INN,
		|	ВТ_ДанныеФайла.CompanyCode,
		|	ВТ_ДанныеФайла.AU,
		|	ВТ_ДанныеФайла.LocationCode,
		|	ВТ_ДанныеФайла.Account,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)),
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель,
		|	ВТ_СоответствиеCurrency1.ОбъектПриемника,
		|	ВТ_ДанныеФайла.DocumentType,
		|	ВТ_ДанныеФайла.InvoiceType,
		|	ВТ_ДанныеФайла.InvoiceID,
		|	ВТ_ДанныеФайла.InvoiceNumber,
		|	ВТ_ДанныеФайла.InvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceAmount,
		|	ВТ_ДанныеФайла.InvoiceAgreementCode,
		|	ВТ_ДанныеФайла.InvoiceAgreement,
		|	ВТ_ДанныеФайла.FiscalInvoiceNo,
		|	ВТ_ДанныеФайла.FiscalInvoiceDate,
		|	ВТ_ДанныеФайла.InvoiceBilled,
		|	ВТ_ДанныеФайла.InvoicePassedForApproval,
		|	ВТ_ДанныеФайла.InvoicePassedForPayment,
		|	ВТ_ДанныеФайла.InvoicePassedForApprovalDate,
		|	ВТ_ДанныеФайла.InvoicePassedForPaymentDate,
		|	ВТ_ДанныеФайла.ExpectedDateOfPayment,
		|	ВТ_ДанныеФайла.PaymentNumber,
		|	ВТ_ДанныеФайла.PaymentDate,
		|	ВТ_ДанныеФайла.СтрокаФайла,
		|	LegalEntiites.Ссылка,
		|	ВТ_ДанныеФайла.CorAccount,
		|	ВТ_ДанныеФайла.ReverseDocument,
		|	ВТ_ДанныеФайла.ReverseDocumentType,
		|	ВТ_СоответствиеКлиентовCustomerNumber1.ОбъектПриемника,
		|	ПодразделенияОрганизаций1.Ссылка,
		|	ВТ_ДанныеФайла.EndClientINN
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = Организации.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Lawson КАК Lawson
		|		ПО (НЕ Lawson.ПометкаУдаления)
		|			И ВТ_ДанныеФайла.Account = Lawson.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияHOB КАК ТранзакцияHOB
		|		ПО ВТ_ДанныеФайла.TrID = ТранзакцияHOB.TrID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.Currency = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.INN = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency1
		|		ПО ВТ_ДанныеФайла.InvoiceCurrency = ВТ_СоответствиеCurrency1.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 8, 3) = Сегменты.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И Сегменты.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПОДСТРОКА(ВТ_ДанныеФайла.AU, 1, 6) = ПодразделенияОрганизаций.Код)
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И ПодразделенияОрганизаций.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.LegalEntiites КАК LegalEntiites
		|		ПО ВТ_ДанныеФайла.LegalEntity = LegalEntiites.Код
		|			И (LegalEntiites.Source = &ТипВнешнейСистемы)
		|			И ВТ_ДанныеФайла.CompanyCode = LegalEntiites.Владелец.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (ВТ_ДанныеФайла.AUType = ""Oracle MI""
		|					И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleMI)
		|				ИЛИ ВТ_ДанныеФайла.AUType = ""Oracle SII""
		|					И КостЦентры.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.OracleSmith))
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber1
		|		ПО ВТ_ДанныеФайла.EndClientINN = ВТ_СоответствиеКлиентовCustomerNumber1.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций1
		|		ПО ВТ_ДанныеФайла.MNGC = ПодразделенияОрганизаций1.Код
		|			И (ПодразделенияОрганизаций1.Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.HOBs))
		|			И (НЕ ПодразделенияОрганизаций1.ПометкаУдаления)
		|ГДЕ
		|	ВТ_ДанныеФайла.AUType <> ""Lawson""
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокаФайла";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	
	//НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	//ЗафиксироватьТранзакцию();
	
	КэшИнвойсов = РезультатЗапроса[3].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("DocID");
	
	КэшCashBatch = РезультатЗапроса[4].Выгрузить();
	КэшCashBatch.Индексы.Добавить("DocID");
	
	КэшBatchAllocation = РезультатЗапроса[5].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("DocID");
	
	КэшMemo = РезультатЗапроса[6].Выгрузить();
	КэшMemo.Индексы.Добавить("DocID");
	
	КэшAU = Новый Соответствие;
	
	ТаблицаДаты = РезультатЗапроса[7].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	//// { RGS TAlmazova 06.07.2017 14:36:48 - проверка контрольных сумм
	//ТаблицаДанных = РезультатЗапроса[8].Выгрузить();
	////Отбор = Новый Структура;
	////Отбор.Вставить("Транзакция", Документы.ТранзакцияOracle.ПустаяСсылка());
	//ТаблицаДанныхКонтрольныеСуммы = ТаблицаДанных.Скопировать(,"AU, Account, Currency, Amount, BaseAmount");
	//
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = ТаблицаДанных.Количество();
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = ТаблицаДанныхКонтрольныеСуммы.Количество();
	//ДокументЗагрузки.Записать();
	//
	//ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount, BaseAmount");
	//ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	// } RGS TAlmazova 06.07.2017 14:36:54 - проверка контрольных сумм
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[8].Выбрать();
	
	НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	//НачатьТранзакцию();
	
	ТаблицаИсключенийАналитики = РегистрыСведений.AnalyticsExceptions.ПолучитьТаблицуИсключенийАналитики(Перечисления.ТипыСоответствий.HOBs);
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	ТаблицаДанныхКонтрольныеСуммы = Новый ТаблицаЗначений;
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("AU");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Account");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Currency");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Amount");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("BaseAmount");
	КоличествоТранзакцийВФайле = 0;
	СчетчикСозданныхТранзакций = 0;
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.HOBs);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле + 1;
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Транзакция) Тогда
			//Продолжить;
			ТранзакцияHOBОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
			Если ТранзакцияHOBОбъект.ПометкаУдаления Тогда
				ТранзакцияHOBОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
		Иначе
			ТранзакцияHOBОбъект = Документы.ТранзакцияHOB.СоздатьДокумент();
		КонецЕсли;
		
		КэшПредставленийТипов = Новый Соответствие;
		
		ЗаполнитьТранзакцию(СтруктураПараметров, ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, КэшПредставленийТипов, ТаблицаИсключенийАналитики, Отказ, ТекстСообщенияОбОшибках, , КэшAU);
		
		ТранзакцияHOBОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ТранзакцияHOBОбъект, ВыборкаДетальныеЗаписи, , КэшИнвойсов, Неопределено, КэшCashBatch, КэшBatchAllocation, КэшMemo, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.ДокументЗагрузки = СтруктураПараметров.Ссылка;
		ЗаписьНабора.ПроводкаDSS = ТранзакцияHOBОбъект.Ссылка;
		ЗаписьНабора.ОшибкаПриПоискеСвязанныхОбъектов = НайденаОшибкаПриПоискеСвязанныхОбъектов;
		
		СчетчикСозданныхТранзакций = СчетчикСозданныхТранзакций + 1;
		НоваяСтрокаКонтрольныхСумм = ТаблицаДанныхКонтрольныеСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтрольныхСумм, ТранзакцияHOBОбъект);
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	// { RGS AGorlenko 19.07.2017 18:41:54 - было ниже, перенесено сюда
	ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	ДокументЗагрузки.КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций;
	// } RGS AGorlenko 19.07.2017 18:42:05 - было ниже, перенесено сюда
	ДокументЗагрузки.Записать();
	
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 03.07.2017 18:09:38 - проверка контрольных сумм
	
	// { RGS AGorlenko 19.07.2017 18:41:34 - перенесено выше
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	//ДокументЗагрузки.Записать();
	// } RGS AGorlenko 19.07.2017 18:41:40 - перенесено выше
	
	ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount, BaseAmount");
	ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU КАК ПроводкаDSSAU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account КАК ПроводкаDSSAccount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.BaseAmount) КАК ПроводкаDSSBaseAmount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.Amount) КАК ПроводкаDSSAmount,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency КАК ПроводкаDSSCurrency
		|ПОМЕСТИТЬ ДанныеТранзакции
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПроводкаDSSAU,
		|	ПроводкаDSSAccount,
		|	ПроводкаDSSCurrency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы КАК AU,
		|	КонтрольныеСуммыПриЗагрузке.Account КАК Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency КАК Currency,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.Amount) КАК Amount,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.BaseAmount) КАК BaseAmount
		|ПОМЕСТИТЬ КонтрольныеСуммыПриЗагрузке
		|ИЗ
		|	РегистрСведений.КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|ГДЕ
		|	КонтрольныеСуммыПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы,
		|	КонтрольныеСуммыПриЗагрузке.Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	AU,
		|	Account,
		|	Currency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.AU, ДанныеТранзакции.ПроводкаDSSAU) КАК AU,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Account, ДанныеТранзакции.ПроводкаDSSAccount) КАК Account,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0) КАК Поле1,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0) КАК Поле2,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Currency, ДанныеТранзакции.ПроводкаDSSCurrency) КАК Currency
		|ИЗ
		|	КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеТранзакции КАК ДанныеТранзакции
		|		ПО КонтрольныеСуммыПриЗагрузке.Account = ДанныеТранзакции.ПроводкаDSSAccount
		|			И КонтрольныеСуммыПриЗагрузке.Currency = ДанныеТранзакции.ПроводкаDSSCurrency
		|			И КонтрольныеСуммыПриЗагрузке.AU = ДанныеТранзакции.ПроводкаDSSAU
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0)
		|			ИЛИ ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0))";
		
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекОшибка = СтрШаблон("Checksums do not match for AU = %1, Account = %2, Currency = %3.", ВыборкаДетальныеЗаписи.AU, ВыборкаДетальныеЗаписи.Account, ВыборкаДетальныеЗаписи.Currency);
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Отказ = Истина;
		ВызватьИсключение ТекОшибка;
	КонецЕсли;
	
	// } RGS TAlmazova 03.07.2017 18:09:39 - проверка контрольных сумм
	Если ТаблицаСуществующихТранзакций.Количество() > 0 Тогда
		
		НеактуальныеКорректировкиПометитьНаУдаление(ТаблицаСуществующихТранзакций, СтруктураПараметров.Ссылка);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьТранзакцию(СтруктураПараметров, ТранзакцияHOBОбъект, ДанныеДляЗаполнения, КэшПредставленийТипов, ТаблицаИсключенийАналитики, Отказ, ТекстСообщенияОбОшибках, КлиентОтсутствует = Ложь, КэшAU)
	
	ЗаполнитьЗначенияСвойств(ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
	
	ТранзакцияHOBОбъект.Дата = ДанныеДляЗаполнения.Period;
	
	ТранзакцияHOBОбъект.TransactionType = СтруктураПараметров.ТипТранзакций;
	
	ПреобразованиеСокрЛП(ТранзакцияHOBОбъект);
	
	Если СтруктураПараметров.ТипТранзакций = Перечисления.HOBTransactionType.Receivables Тогда
		
		ТранзакцияHOBОбъект.HOBDocumentType = ПолучитьТипДокумента(ДанныеДляЗаполнения.DocumentType, КэшПредставленийТипов);
		ТранзакцияHOBОбъект.HOBInvoiceType = ПолучитьТипДокумента(ДанныеДляЗаполнения.InvoiceType, КэшПредставленийТипов);
		ТранзакцияHOBОбъект.HOBReverseType = ПолучитьТипДокумента(ДанныеДляЗаполнения.ReverseDocumentType, КэшПредставленийТипов);
		
		Если НЕ ЗначениеЗаполнено(ТранзакцияHOBОбъект.HOBDocumentType) Тогда
			ТекОшибка = "Unrecognized document type " + ДанныеДляЗаполнения.DocumentType;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТранзакцияHOBОбъект.HOBInvoiceType) Тогда
			ТекОшибка = "Unrecognized document type " + ДанныеДляЗаполнения.InvoiceType;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТранзакцияHOBОбъект.Client) Тогда
		// { RGS AGorlenko 15.09.2016 17:04:20 - по JV клиента нет
		////Если ТранзакцияOracleОбъект.DocType = "JV" 
		////	ИЛИ ТранзакцияOracleОбъект.DocType = "CASH" И ТранзакцияOracleОбъект.TransType = "TRADE_UNID" Тогда
		////	ТранзакцияOracleОбъект.Client = Справочники.Контрагенты.GLNoName;
		////Иначе
		//	//ВызватьИсключение "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
		//	ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
		//	Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
		//		ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
		//	КонецЕсли;
		//	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to find client " + ДанныеДляЗаполнения.CustomerNumber,,,, Отказ);
		//	Отказ = Истина;
		////КонецЕсли;
		Если ТранзакцияHOBОбъект.TransactionType = Перечисления.HOBTransactionType.JV Тогда
			КлиентОтсутствует = Истина;
			ТранзакцияHOBОбъект.Client = Справочники.Контрагенты.Unreconciled;
		Иначе
			ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		// } RGS AGorlenko 15.09.2016 17:04:27 - по JV клиента нет
	КонецЕсли;
	
	// { RGS AGorlenko 22.02.2018 12:40:03 - добавление конечного клиента, он заполнен не везде
	Если Не ЗначениеЗаполнено(ТранзакцияHOBОбъект.EndClient) И ЗначениеЗаполнено(ТранзакцияHOBОбъект.EndCustomerNumber) Тогда
		Если ТранзакцияHOBОбъект.TransactionType = Перечисления.HOBTransactionType.JV Тогда
			КлиентОтсутствует = Истина;
			ТранзакцияHOBОбъект.EndClient = Справочники.Контрагенты.Unreconciled;
		Иначе
			ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.EndCustomerNumber;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
			
	КонецЕсли;
	// } RGS AGorlenko 22.02.2018 12:40:28 - добавление конечного клиента, он заполнен не везде
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаполнения.AU) Тогда
		
		Если КэшAU[ДанныеДляЗаполнения.AUCode] = Неопределено Тогда
			
			НовыйКостЦентр = Справочники.КостЦентры.СоздатьЭлемент();
			НовыйКостЦентр.Source = Перечисления.ТипыСоответствий.OracleMI;
			НовыйКостЦентр.Код = ДанныеДляЗаполнения.AUCode;
			НовыйКостЦентр.Наименование = ДанныеДляЗаполнения.AUCode;
			НовыйКостЦентр.Сегмент = ДанныеДляЗаполнения.SubSubSegment;
			НовыйКостЦентр.ПодразделениеОрганизации = ДанныеДляЗаполнения.Location;
			НовыйКостЦентр.ОбменДанными.Загрузка = Истина;
			НовыйКостЦентр.Записать();
			
			КэшAU.Вставить(ДанныеДляЗаполнения.AUCode, НовыйКостЦентр.Ссылка);
			
		КонецЕсли;
		
		AU = КэшAU[ДанныеДляЗаполнения.AUCode];
		
	Иначе
		
		AU = ДанныеДляЗаполнения.AU;
		
	КонецЕсли;
	
	ТранзакцияHOBОбъект.AU = AU;
	
	СтруктураПоискаИсключенийАналитики = Новый Структура("Company, AU");
	ЗаполнитьЗначенияСвойств(СтруктураПоискаИсключенийАналитики, ТранзакцияHOBОбъект);
	НайденныеСтроки = ТаблицаИсключенийАналитики.НайтиСтроки(СтруктураПоискаИсключенийАналитики);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТранзакцияHOBОбъект.SubSubSegment = НайденныеСтроки[0].SubSubSegment;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипДокумента(ПредставлениеТипа, КэшПредставленийТипов)
	
	ТипИзКэша = КэшПредставленийТипов[ПредставлениеТипа];
	
	Если ТипИзКэша <> Неопределено Тогда
		Возврат ТипИзКэша;
	КонецЕсли;
	
	Если ПредставлениеТипа = "Операция международная" ИЛИ ПредставлениеТипа = "Операция (бухгалтерский и налоговый учет)" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.Операция;
	ИначеЕсли ПредставлениеТипа = "Сторнирование произвольного документа" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.Сторно;
	ИначеЕсли ПредставлениеТипа = "Платежное поручение входящее" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПлатежноеПоручениеВходящее;
	ИначеЕсли ПредставлениеТипа = "Акт об оказании производственных услуг" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг;
	ИначеЕсли ПредставлениеТипа = "Корректировка долга" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.КорректировкаДолга;
	ИначеЕсли ПредставлениеТипа = "Корректировка реализации" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.КорректировкаРеализации;
	ИначеЕсли ПредставлениеТипа = "Реализация товаров и услуг" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг;
	ИначеЕсли ПредставлениеТипа = "Платежное поручение исходящее" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПлетежноеПоручениеИсходящее;
	ИначеЕсли ПредставлениеТипа = "Передача ОС" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПередачаОС;
	ИначеЕсли ПредставлениеТипа = "Прочие затраты" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПрочиеЗатраты;
	ИначеЕсли ПредставлениеТипа = "Реализация услуг по переработке" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке;
	ИначеЕсли ПредставлениеТипа = "Корректировка записей регистров" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.КорректировкаЗаписейРегистров;
	ИначеЕсли ПредставлениеТипа = "Отражение зарплаты в регл учете" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ОтражениеЗарплатыВРеглУчете;
	ИначеЕсли ПредставлениеТипа = "Переоценка валютных статей (международный)" Тогда
		ЗначениеТипа = Перечисления.HOBDocumentTypes.ПереоценкаВалютныхСтатей;
	КонецЕсли;
	
	КэшПредставленийТипов.Вставить(ПредставлениеТипа, ЗначениеТипа);
	
	Возврат ЗначениеТипа;
	
КонецФункции

Процедура ПреобразованиеСокрЛП(ТранзакцияHOBОбъект)
	
	ТранзакцияHOBОбъект.Contract = СокрЛП(ТранзакцияHOBОбъект.Contract);
	
КонецПроцедуры

Функция СформироватьСвязанныеОбъекты(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, КэшSalesOrders, КэшИнвойсов, КэшРучныхКоррерктировок, КэшCashBatch, КэшBatchAllocation, КэшMemo, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияHOBОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Company, Client, Location, SubSubSegment, AU, Account, Currency");
	//СтруктураПоискаРучнойКорректировки = Новый Структура("Company, Location, SubSubSegment, AU, Account, Currency");
	//СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	Если ТранзакцияHOBОбъект.TransactionType = Перечисления.HOBTransactionType.Accrual Тогда
		
		СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.SalesOrderID, "DocID");
		
		Если СтрокаSalesOrder = Неопределено Тогда

			// { RGS TAlmazova 25.10.2016 13:05:36 - обнулять только реверс в первый месяц загрузки
			//Если НЕ ТранзакцияHOBОбъект.Reverse Тогда
			Если НЕ ТранзакцияHOBОбъект.Reverse ИЛИ НачалоМесяца(ТранзакцияHOBОбъект.Дата) > НачалоМесяца(ДатаНачалаЗагрузки) Тогда
			// } RGS TAlmazova 25.10.2016 13:05:49 - обнулять только реверс в первый месяц загрузки
				
				ТекSalesOrder = СоздатьSalesOrder(ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшSalesOrders.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.SalesOrderID;
				НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
				
			Иначе
				
				Если Не ЭтоПроводкаПоСчетуВыручки И ТранзакцияHOBОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Sales Order for transaction " + ТранзакцияHOBОбъект.Номер + " (" + ТранзакцияHOBОбъект.TrID +")";
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					Если Не ЭтоПроводкаПоСчетуВыручки Тогда
						ОбнулитьСуммыПроводки(ТранзакцияHOBОбъект);
						ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, Документы.SalesOrder.ПустаяСсылка());
					Иначе
						ТекSalesOrder = СоздатьSalesOrder(ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
						НоваяСтрокаКэша = КэшSalesOrders.Добавить();
						НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.SalesOrderID;
						НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекSalesOrder = СтрокаSalesOrder.Ссылка;
			//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
			//	ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder,ТранзакцияHOBОбъект,ДанныеДляЗаполнения);
			//КонецЕсли;
			ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder,ТранзакцияHOBОбъект,ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
			ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
		
		КонецЕсли;
		
		Если Не ПустаяСтрока(ДанныеДляЗаполнения.InvoiceID) Тогда
			
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.InvoiceID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				ТекИнвойс = СоздатьИнвойс(ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшИнвойсов.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.InvoiceID;
				НоваяСтрокаКэша.Ссылка = ТекИнвойс;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Ссылка;
				//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
				//	ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
				//КонецЕсли;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияHOBОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			
			КонецЕсли;
			// { RGS TAlmazova 14.12.2016 16:48:02 - дозаполнение InvoiceID
			Если ТекSalesOrder.Invoice <> ТекИнвойс Тогда
				ТекSalesOrderОбъект = ТекSalesOrder.ПолучитьОбъект();
				ТекSalesOrderОбъект.Invoice = ТекИнвойс;
				ТекSalesOrderОбъект.ОбменДанными.Загрузка = Истина;
				ТекSalesOrderОбъект.Записать();
			КонецЕсли;
			// } RGS TAlmazova 14.12.2016 16:48:14 - дозаполнение InvoiceID
		КонецЕсли;
		
	ИначеЕсли ТранзакцияHOBОбъект.TransactionType = Перечисления.HOBTransactionType.JV Тогда
		
		СтруктураПоискаРучнойКорректировки.Company = ТранзакцияHOBОбъект.Company;
		СтруктураПоискаРучнойКорректировки.Client = ТранзакцияHOBОбъект.Client;
		СтруктураПоискаРучнойКорректировки.Location = ТранзакцияHOBОбъект.Location;
		//СтруктураПоискаРучнойКорректировки.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
		СтруктураПоискаРучнойКорректировки.AU = ТранзакцияHOBОбъект.AU;
		СтруктураПоискаРучнойКорректировки.Account = ТранзакцияHOBОбъект.Account;
		СтруктураПоискаРучнойКорректировки.Currency = ТранзакцияHOBОбъект.Currency;
		
		СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
		Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
			ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
			НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
			НоваяСтрокаКэша.Company = ТранзакцияHOBОбъект.Company;
			НоваяСтрокаКэша.Client = ТранзакцияHOBОбъект.Client;
			НоваяСтрокаКэша.Location = ТранзакцияHOBОбъект.Location;
			//НоваяСтрокаКэша.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
			НоваяСтрокаКэша.AU = ТранзакцияHOBОбъект.AU;
			НоваяСтрокаКэша.Account = ТранзакцияHOBОбъект.Account;
			НоваяСтрокаКэша.Currency = ТранзакцияHOBОбъект.Currency;
			НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
		КонецЕсли;
		
	ИначеЕсли ТранзакцияHOBОбъект.TransactionType = Перечисления.HOBTransactionType.Receivables Тогда
		
		Если ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.ПлатежноеПоручениеВходящее Тогда // действия с авансами
			
			СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.InvoiceID, "DocID");
			
			Если СтрокаCashBatch = Неопределено Тогда

				ТекCashBatch = СоздатьCashBatch(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, ДанныеДляЗаполнения.InvoiceID, Истина);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.InvoiceID;
				НоваяСтрокаКэша.Ссылка = ТекCashBatch;
				
			Иначе
				
				ТекCashBatch = СтрокаCashBatch.Ссылка;
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			
			КонецЕсли;
			
		ИначеЕсли ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаДолга
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.ПлетежноеПоручениеИсходящее Тогда // исходящий платеж, это странно, но он по идее должен закрыться, если и встретится
			
			СтрокаМемо = КэшMemo.Найти(ДанныеДляЗаполнения.InvoiceID, "DocID");
			
			Если СтрокаМемо = Неопределено Тогда

				ТекМемо = СоздатьМемо(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, ДанныеДляЗаполнения.InvoiceID);
				НоваяСтрокаКэша = КэшMemo.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.InvoiceID;
				НоваяСтрокаКэша.Ссылка = ТекМемо;
				
			Иначе
				
				ТекМемо = СтрокаМемо.Ссылка;
				Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
					ДозаполнитьМемоИзПроводки(ТекМемо, ТранзакцияHOBОбъект);
				КонецЕсли;
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			
			КонецЕсли;
			
		ИначеЕсли ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаРеализации
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.ПередачаОС
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке
			ИЛИ ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.ПрочиеЗатраты Тогда
			
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.InvoiceID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				// { RGS TAlmazova 25.10.2016 13:36:58 - обнуляем только в первый месяц загрузки
				//Если НЕ (ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг
				//	ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг
				//	ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке
				//	ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.ПередачаОС
				//	ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.КорректировкаРеализации И ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаРеализации) Тогда
				Если НЕ (ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.АктОбОказанииПроизводственныхУслуг
					ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.РеализацияТоваровУслуг
					ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.РеализацияУслугПоПереработке
					ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.ПередачаОС
					ИЛИ ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.КорректировкаРеализации И ТранзакцияHOBОбъект.HOBInvoiceType = Перечисления.HOBDocumentTypes.КорректировкаРеализации)
					И НачалоМесяца(ТранзакцияHOBОбъект.Дата) = НачалоМесяца(ДатаНачалаЗагрузки) Тогда
				// } RGS TAlmazova 25.10.2016 13:37:16 - обнуляем только в первый месяц загрузки
					
					Если ТранзакцияHOBОбъект.Дата >= ДатаВыверенныхОстатков Тогда
						ТекОшибка = "Failed to find Invoice for transaction " + ТранзакцияHOBОбъект.Номер + " (" + ТранзакцияHOBОбъект.TrID +")";
						Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
							ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
						КонецЕсли;
						Отказ = Истина;
					Иначе
						Если Не ЭтоПроводкаПоСчетуВыручки Тогда
							ОбнулитьСуммыПроводки(ТранзакцияHOBОбъект);
						КонецЕсли;
						ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
					КонецЕсли;
					
				Иначе
					
					ТекИнвойс = СоздатьИнвойс(ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
					НоваяСтрокаКэша = КэшИнвойсов.Добавить();
					НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.InvoiceID;
					НоваяСтрокаКэша.Ссылка = ТекИнвойс;
					
				КонецЕсли;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Ссылка;
				//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
				//	ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияHOBОбъект, ДанныеДляЗаполнения);
				//КонецЕсли;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияHOBОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			
			КонецЕсли;
			
		Иначе
			
			ТекОшибка = "Unexpected invoice type " + ТранзакцияHOBОбъект.Номер + " (" + ТранзакцияHOBОбъект.TrID +")";
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ТранзакцияHOBОбъект.HOBDocumentType = Перечисления.HOBDocumentTypes.ПлатежноеПоручениеВходящее Тогда
			
			СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.DocumentID, "DocID");
			
			Если СтрокаCashBatch = Неопределено Тогда

				ТекCashBatch = СоздатьCashBatch(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, ДанныеДляЗаполнения.DocumentID);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocumentID;
				НоваяСтрокаКэша.Ссылка = ТекCashBatch;
				
			Иначе
				
				ТекCashBatch = СтрокаCashBatch.Ссылка;
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			
			КонецЕсли;
			
			СтрокаBatchAllocation = КэшBatchAllocation.Найти(ДанныеДляЗаполнения.DocumentID, "DocID");
			
			Если СтрокаBatchAllocation = Неопределено Тогда

				ТекBatchAllocation = СоздатьBatchAllocation(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, ДанныеДляЗаполнения.DocumentID);
				НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocumentID;
				НоваяСтрокаКэша.Ссылка = ТекBatchAllocation;
				
			Иначе
				
				ТекBatchAllocation = СтрокаBatchAllocation.Ссылка;
				ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ТекBatchAllocation);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
КонецФункции

Процедура ОбнулитьСуммыПроводки(ТранзакцияHOBОбъект)
	
	//ТранзакцияHOBОбъект1 = ТранзакцияHOBОбъект.Ссылка.ПолучитьОбъект();
	ТранзакцияHOBОбъект.Amount = 0;
	ТранзакцияHOBОбъект.BaseAmount = 0;
	ТранзакцияHOBОбъект.ОбменДанными.Загрузка = Истина;
	ТранзакцияHOBОбъект.Записать();
	
КонецПроцедуры

Процедура ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, ТипОбъекта, СвязанныйОбъект)
	
	НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	НЗ.Отбор.ПроводкаDSS.Установить(ТранзакцияHOBОбъект.Ссылка);
	НЗ.Отбор.ТипСвязанногоОбъекта.Установить(ТипОбъекта);
	НоваяЗапись = НЗ.Добавить();
	НоваяЗапись.ПроводкаDSS = ТранзакцияHOBОбъект.Ссылка;
	НоваяЗапись.ТипСвязанногоОбъекта = ТипОбъекта;
	НоваяЗапись.СвязанныйОбъект = СвязанныйОбъект;
	НЗ.Записать(Истина);
	
КонецПроцедуры

Функция СоздатьSalesOrder(ТранзакцияHOBОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.SalesOrder.СоздатьДокумент();
	
	ДокОбъект.Номер = ДанныеДляЗаполнения.SalesOrderNumber;
	ДокОбъект.Дата = ДанныеДляЗаполнения.SalesOrderDate;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	ДокОбъект.Currency = ДанныеДляЗаполнения.SalesOrderCurrency;
	ДокОбъект.ExchangeRate = ДанныеДляЗаполнения.SalesOrderExchangeRate;
	ДокОбъект.ApprovalDate = ДанныеДляЗаполнения.SalesOrderApprovalDate;
	ДокОбъект.ApprovedBy = ДанныеДляЗаполнения.SalesOrderApprovedBy;
	ДокОбъект.DocID = ДанныеДляЗаполнения.SalesOrderID;
	ДокОбъект.JobEndDate = ДанныеДляЗаполнения.JobEndDate;
	ДокОбъект.AgreementCode = ДанныеДляЗаполнения.SalesOrderAgreementCode;
	ДокОбъект.Agreement = ДанныеДляЗаполнения.SalesOrderAgreement;
	ДокОбъект.ERPStatus = ДанныеДляЗаполнения.ERPStatus;
	ДокОбъект.OrderType = Перечисления.SalesOrederTypes.SalesOrder;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияHOBОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
		ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
		ДокОбъект.Amount = ДанныеДляЗаполнения.SalesOrderAmount;
	КонецЕсли;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	Если НЕ ТранзакцияHOBОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	//ДокОбъект.SubGeoMarket = ТранзакцияHOBОбъект.SubGeoMarket;
	ДокОбъект.CREW = ДанныеДляЗаполнения.LocationCode;
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДатаДокумента = ТекущаяДата();
	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	
	НЗ = РегистрыСведений.SalesOrdersComments.СоздатьНаборЗаписей();
	НЗ.Очистить();
	
	НачатьТранзакцию();
	
	Проблема = Документы.SalesOrderProblem.СоздатьДокумент();
	Проблема.Дата = ДатаДокумента;
	Проблема.SalesOrder = ДокОбъект.Ссылка;
	Проблема.User = AutoUser;
	Проблема.Billed = Перечисления.SalesOrderBilledStatus.Unbilled;
	Проблема.Записать();
	
	НЗ.Очистить();
	НЗ.Отбор.SalesOrder.Установить(ДокОбъект.Ссылка);
	ЗаписьНабора = НЗ.Добавить();
	ЗаписьНабора.Период = ДатаДокумента;
	ЗаписьНабора.SalesOrder = ДокОбъект.Ссылка;
	ЗаписьНабора.Problem = Проблема.Ссылка;
	
	НЗ.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьSalesOrderИзПроводки(SalesOrder, ТранзакцияHOBОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки)
	
	РеквизитыSalesOrder = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(SalesOrder, "Client,Company,Currency,AU,Account,Location,SubSubSegment,ClientID,CREW,OriginalAnalytics,Amount");
	
	Если ЭтоПроводкаПоСчетуВыручки Тогда
		SalesOrderОбъект = SalesOrder.ПолучитьОбъект();
		SalesOrderОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
		SalesOrderОбъект.ОбменДанными.Загрузка = Истина;
		SalesOrderОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Если НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Client) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Company) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.AU) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Account) ИЛИ
			НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Location) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.SubSubSegment) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.ClientID) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.CREW) ИЛИ 
			НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Currency) ИЛИ РеквизитыSalesOrder.Amount <> ДанныеДляЗаполнения.SalesOrderAmount Тогда
			SalesOrderОбъект = SalesOrder.ПолучитьОбъект();
			Для каждого Реквизит из РеквизитыSalesOrder Цикл
				Если Реквизит.Ключ <> "CREW" И Реквизит.Ключ <> "ClientID" И Реквизит.Ключ <> "OriginalAnalytics" И Реквизит.Ключ <> "Amount" Тогда
					Если НЕ ЗначениеЗаполнено(Реквизит.Значение) Тогда
						SalesOrderОбъект[Реквизит.Ключ] = ТранзакцияHOBОбъект[Реквизит.Ключ];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.CREW) Тогда
				SalesOrderОбъект.CREW = ДанныеДляЗаполнения.LocationCode;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.ClientID) И НЕ РеквизитыSalesOrder.Client.Предопределенный Тогда
				SalesOrderОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
			КонецЕсли;
			Если РеквизитыSalesOrder.Amount <> ДанныеДляЗаполнения.SalesOrderAmount Тогда
				SalesOrderОбъект.Amount = ДанныеДляЗаполнения.SalesOrderAmount;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.OriginalAnalytics) Тогда
				SalesOrderОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
			КонецЕсли;
			SalesOrderОбъект.ОбменДанными.Загрузка = Истина;
			SalesOrderОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция СоздатьИнвойс(ТранзакцияHOBОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	//ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNumber;
	//ДокОбъект.DocNumber = ?(ПустаяСтрока(ТранзакцияHOBОбъект.DocNumber2), ТранзакцияHOBОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2);
	ДокОбъект.DocNumber = ДанныеДляЗаполнения.InvoiceNumber;
	ДокОбъект.Дата = ДанныеДляЗаполнения.InvoiceDate;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияHOBОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
		ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
		ДокОбъект.Amount = ДанныеДляЗаполнения.InvoiceAmount;
	КонецЕсли;
	ДокОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияHOBОбъект.InvoiceID;
	ДокОбъект.Agreement = ДанныеДляЗаполнения.InvoiceAgreement;
	ДокОбъект.AgreementCode = ДанныеДляЗаполнения.InvoiceAgreementCode;
	ДокОбъект.FiscalInvoiceNo = ДанныеДляЗаполнения.InvoiceNumber;
	ДокОбъект.FiscalInvoiceDate = ДанныеДляЗаполнения.InvoiceDate;
	ДокОбъект.PassedForApproval = ДанныеДляЗаполнения.InvoicePassedForApproval;
	ДокОбъект.PassedForApprovalDate = ДанныеДляЗаполнения.InvoicePassedForApprovalDate;
	ДокОбъект.PassedForPayment = ДанныеДляЗаполнения.InvoicePassedForPayment;
	ДокОбъект.PassedForPaymentDate = ДанныеДляЗаполнения.InvoicePassedForPaymentDate;
	ДокОбъект.ExpectedDateOfPayment = ДанныеДляЗаполнения.ExpectedDateOfPayment;
	Если НЕ ТранзакцияHOBОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьИнвойсИзПроводки(Инвойс, ТранзакцияHOBОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки)
	
	//Возврат;
	
	РеквизитыИнвойса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инвойс, "Company,DocID,Client,Location,SubSubSegment,AU,Account,Currency,ClientID,Amount");
	
	Если ЭтоПроводкаПоСчетуВыручки Тогда
		ИнвойсОбъект = Инвойс.ПолучитьОбъект();
		ИнвойсОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
		ИнвойсОбъект.ОбменДанными.Загрузка = Истина;
		ИнвойсОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		// { RGS TAlmazova 20.12.2016 1:30:26 - дозаполнение компании в регистре FiscalPayments
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) Тогда
			НаборЗаписей = РегистрыСведений.FiscalPayments.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Invoice.Установить(Инвойс);
			НаборЗаписей.Прочитать();
			Для Каждого Запись из НаборЗаписей Цикл
				Если Запись.Company = Справочники.Организации.ПустаяСсылка() Тогда
					Запись.Company = ТранзакцияHOBОбъект.Company;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		// } RGS TAlmazova 20.12.2016 1:30:27 - дозаполнение компании в регистре FiscalPayments
		
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocID) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Client) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Location) ИЛИ
			НЕ ЗначениеЗаполнено(РеквизитыИнвойса.SubSubSegment) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.AU) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Account) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Currency) 
			ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) ИЛИ РеквизитыИнвойса.Amount <> ДанныеДляЗаполнения.InvoiceAmount Тогда
			ИнвойсОбъект = Инвойс.ПолучитьОбъект();
			Для каждого Реквизит из РеквизитыИнвойса Цикл
				Если Реквизит.Ключ <> "DocID" И Реквизит.Ключ <> "ClientID" И Реквизит.Ключ <> "Amount" Тогда
					Если НЕ ЗначениеЗаполнено(Реквизит.Значение) Тогда
						ИнвойсОбъект[Реквизит.Ключ] = ТранзакцияHOBОбъект[Реквизит.Ключ];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если РеквизитыИнвойса.Amount <> ДанныеДляЗаполнения.InvoiceAmount Тогда
				ИнвойсОбъект.Amount = ДанныеДляЗаполнения.InvoiceAmount;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocID) Тогда
				ИнвойсОбъект.DocID = ТранзакцияHOBОбъект.InvoiceID;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) И НЕ РеквизитыИнвойса.Client.Предопределенный Тогда
				ИнвойсОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
			КонецЕсли;
			ИнвойсОбъект.ОбменДанными.Загрузка = Истина;
			ИнвойсОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьРучнуюКорректировку(ТранзакцияHOBОбъект, ДанныеДляЗаполнения)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = ТекущаяДата();
	РучнаяКорректировкаОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	РучнаяКорректировкаОбъект.Company = ТранзакцияHOBОбъект.Company;
	РучнаяКорректировкаОбъект.Client = ТранзакцияHOBОбъект.Client;
	Если НЕ ТранзакцияHOBОбъект.Client.Предопределенный Тогда
		РучнаяКорректировкаОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	РучнаяКорректировкаОбъект.Location = ТранзакцияHOBОбъект.Location;
	РучнаяКорректировкаОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	РучнаяКорректировкаОбъект.AU = ТранзакцияHOBОбъект.AU;
	РучнаяКорректировкаОбъект.Account = ТранзакцияHOBОбъект.Account;
	РучнаяКорректировкаОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	РучнаяКорректировкаОбъект.Записать();
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, РучнаяКорректировкаОбъект.Ссылка);
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

Функция СоздатьCashBatch(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, DocID, Prepayment = Ложь)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	ДокОбъект.Дата = ДанныеДляЗаполнения.InvoiceDate;
	//ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNumber;
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
	ДокОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	ДокОбъект.DocID = DocID;
	ДокОбъект.Prepayment = Prepayment;
	ДокОбъект.PaymentDate = ДанныеДляЗаполнения.PaymentDate;
	ДокОбъект.PaymentNumber = ДанныеДляЗаполнения.PaymentNumber;
	Если НЕ ТранзакцияHOBОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	// { RGS TAlmazova 30.12.2016 0:16:23 - заполнение Amount
	ДокОбъект.Amount = ДанныеДляЗаполнения.InvoiceAmount;
	// } RGS TAlmazova 30.12.2016 0:16:36 - заполнение Amount
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьBatchAllocation(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, DocID)
	
	ДокОбъект = Документы.BatchAllocation.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
	ДокОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	ДокОбъект.DocID = DocID;
	Если НЕ ТранзакцияHOBОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьМемо(ТранзакцияHOBОбъект, ДанныеДляЗаполнения, DocID)
	
	ДокОбъект = Документы.Memo.СоздатьДокумент();
	ДокОбъект.Source = Перечисления.ТипыСоответствий.HOBs;
	ДокОбъект.Номер = ДанныеДляЗаполнения.InvoiceNumber;
	ДокОбъект.Дата = ДанныеДляЗаполнения.InvoiceDate;
	ДокОбъект.Client = ТранзакцияHOBОбъект.Client;
	ДокОбъект.Company = ТранзакцияHOBОбъект.Company;
	ДокОбъект.Location = ТранзакцияHOBОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияHOBОбъект.SubSubSegment;
	ДокОбъект.AU = ТранзакцияHOBОбъект.AU;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияHOBОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
		ДокОбъект.Account = ТранзакцияHOBОбъект.Account;
	КонецЕсли;
	ДокОбъект.Currency = ТранзакцияHOBОбъект.Currency;
	ДокОбъект.DocID = DocID;
	Если НЕ ТранзакцияHOBОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.OriginalAnalytics = Формат(ДанныеДляЗаполнения.CompanyCode, "ЧГ=0") + "." + ДанныеДляЗаполнения.AUCode + "." + ДанныеДляЗаполнения.LocationCode + "." + ДанныеДляЗаполнения.AccountCode;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияHOBОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьМемоИзПроводки(Мемо, ТранзакцияHOBОбъект)
	
	РеквизитыМемо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мемо, "Account");
	Если НЕ ЗначениеЗаполнено(РеквизитыМемо.Account) Тогда
		МемоОбъект = Мемо.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(РеквизитыМемо.Account) Тогда
			МемоОбъект.Account = ТранзакцияHOBОбъект.Account;
		КонецЕсли;
		МемоОбъект.ОбменДанными.Загрузка = Истина;
		МемоОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ DSSСформированныеПриЗагрузке.ИгнорироватьОбработку
		|	И НЕ DSSСформированныеПриЗагрузке.ОшибкаПриПоискеСвязанныхОбъектов";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТекстОшибок = "";
	
	НачатьТранзакцию();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекДок = ВыборкаДетальныеЗаписи.ПроводкаDSS.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьСтатусыОплаты(СтруктураПараметров.Ссылка);
	ОтметитьВыполнениеЗадачи(СтруктураПараметров.Ссылка);
	
	Если Не ПустаяСтрока(ТекстОшибок) Тогда
		ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибок);
	Иначе
		ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
		ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.PostedTransactions;
		ДокументЗагрузки.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура УстановитьСтатусыОплаты(ДокументЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект КАК СвязанныйОбъект
	|ИЗ
	|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
	|		ПО (DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки)
	|			И DSSСформированныеПриЗагрузке.ПроводкаDSS = DSSСвязанныеДокументы.ПроводкаDSS
	|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСпроводкойDSS.Invoice))
	|ГДЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект <> ЗНАЧЕНИЕ(Документ.Invoice.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументЗагрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Комментарий = "DSS loading: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки);
	
	Пока Выборка.Следующий() Цикл
		
		Документы.Invoice.ОбновитьСтатусОплатыДокумента(Выборка.СвязанныйОбъект, Комментарий);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьВыполнениеЗадачи(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Предмет", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		 ВыборкаДетальныеЗаписи.Следующий();
		 ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		 ЗадачаОбъект.Выполнена = Истина;
		 ЗадачаОбъект.Записать();
	КонецЕсли;;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрольныеСуммы(Ссылка, ТаблицаДанныхКонтрольныеСуммы)
	
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанныхКонтрольныеСуммы.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.AU.Имя = "ИдентификаторСистемы";
	
	
	НЗ = РегистрыСведений.КонтрольныеСуммыПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанныхКонтрольныеСуммы);
	НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура НеактуальныеКорректировкиПометитьНаУдаление(ТаблицаСуществующихТранзакций, ДокументОснование)
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСуществующихТранзакций.Ссылка КАК Ссылка,
		|	ТаблицаСуществующихТранзакций.Company,
		|	ТаблицаСуществующихТранзакций.Account,
		|	ТаблицаСуществующихТранзакций.Currency,
		|	ТаблицаСуществующихТранзакций.Client,
		|	ТаблицаСуществующихТранзакций.Amount,
		|	ТаблицаСуществующихТранзакций.BaseAmount,
		|	ТаблицаСуществующихТранзакций.AU,
		|	ТаблицаСуществующихТранзакций.LegalEntity
		|ПОМЕСТИТЬ ВТ_ДанныеТранзакцийДоЗагрузки
		|ИЗ
		|	&ТаблицаСуществующихТранзакций КАК ТаблицаСуществующихТранзакций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеТранзакцийДоЗагрузки.Ссылка КАК СсылкаТранзакция,
		|	КорректировкаТранзакции.Ссылка КАК СсылкаКорректировка,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Client КАК ТранзакцияПослеЗагрузкиClient,
		|	ВТ_ДанныеТранзакцийДоЗагрузки.Client КАК ТранзакцияДоЗагрузкиClient
		|ИЗ
		|	ВТ_ДанныеТранзакцийДоЗагрузки КАК ВТ_ДанныеТранзакцийДоЗагрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|		ПО ВТ_ДанныеТранзакцийДоЗагрузки.Ссылка = DSSСформированныеПриЗагрузке.ПроводкаDSS.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаТранзакции КАК КорректировкаТранзакции
		|		ПО ВТ_ДанныеТранзакцийДоЗагрузки.Ссылка = КорректировкаТранзакции.ДокументОснование
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|	И (DSSСформированныеПриЗагрузке.ПроводкаDSS.Client = ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Client = ЗНАЧЕНИЕ(Справочник.Контрагенты.Unreconciled)
		|			ИЛИ НЕ КорректировкаТранзакции.Ссылка ЕСТЬ NULL
		|				И НЕ КорректировкаТранзакции.ПометкаУдаления)
		|	И (ВТ_ДанныеТранзакцийДоЗагрузки.Company <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Company
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Account <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Account
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Currency <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Client <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Client
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Amount <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Amount
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.BaseAmount <> DSSСформированныеПриЗагрузке.ПроводкаDSS.BaseAmount
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.AU <> DSSСформированныеПриЗагрузке.ПроводкаDSS.AU
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.LegalEntity <> DSSСформированныеПриЗагрузке.ПроводкаDSS.LegalEntity)";
	Запрос.УстановитьПараметр("ТаблицаСуществующихТранзакций", ТаблицаСуществующихТранзакций);
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СсылкаКорректировка) Тогда
			
			КорректировкаОбъект = ВыборкаДетальныеЗаписи.СсылкаКорректировка.ПолучитьОбъект();
			КорректировкаОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.ТранзакцияПослеЗагрузкиClient = Справочники.Контрагенты.Unreconciled Тогда
			
			НЗ_Проблемы = РегистрыСведений.ПроблемыПриЗагрузке.СоздатьНаборЗаписей();
			НЗ_Проблемы.Отбор.Транзакция.Установить(ВыборкаДетальныеЗаписи.СсылкаТранзакция);
			НЗ_Проблемы.Отбор.ДокументЗагрузки.Установить(ДокументОснование);
			НЗ_Проблемы.Отбор.ОписаниеПроблемы.Установить("Missing client code");
			НоваяЗапись = НЗ_Проблемы.Добавить();
			НоваяЗапись.Транзакция = ВыборкаДетальныеЗаписи.СсылкаТранзакция;
			НоваяЗапись.ДокументЗагрузки = ДокументОснование;
			НоваяЗапись.ОписаниеПроблемы = "Missing client code";
			НЗ_Проблемы.Записать(Истина);
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата = ТекущаяДата;
			Задача.Наименование = "Fill the client in the transaction " + ВыборкаДетальныеЗаписи.СсылкаТранзакция;
			Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.HOBs;
			Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
			//Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
			Задача.Автор = Пользователи.ТекущийПользователь();
			Задача.Предмет = ВыборкаДетальныеЗаписи.СсылкаТранзакция;
			Задача.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	ТекстОшибки = "";
	
	ФайлЭксель = СтруктураПараметров.ИсточникДанных.Получить();
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	rgsЗагрузкаИзExcel.ВыгрузитьЭксельВТаблицуДанныхПоИменамКолонок(ПутьКФайлу, ТаблицаДанных, ДанныеДляЗаполнения, АдресХранилища, СтруктураПараметров);
		
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура УдалитьШапкуФайла(ПутьКФайлу, СтруктураПараметров)
	
	ЭкземплярExcel = Новый COMОбъект("Excel.Application");
	Книга = ЭкземплярExcel.Application.Workbooks.Open(ПутьКФайлу);
	
	ИмяЛиста = СтруктураПараметров.ЛистФайла;
	Если Прав(ИмяЛиста, 1) = "$" Тогда
		ИмяЛиста = Лев(ИмяЛиста, СтрДлина(ИмяЛиста) - 1);
	КонецЕсли;
	
	Лист = ЭкземплярExcel.Worksheets(ИмяЛиста);
	
	// в качестве ориентиров будем использовать колонки SOURCE_SYSTEM, GL_ACCOUNT, ID_ORIG
	НомерСтрокиЗаголовка = 1;
	
	Для ТекНомерСтроки = 1 По 100 Цикл
		
		НайденаTotal_Techno = Ложь;
		//НайденаGlAccount = Ложь;
		НайденаSL_RCA = Ложь;
		
		Для ТекНомерСтолбца = 1 По 100 Цикл
			
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "Total_Techno" Тогда
				НайденаTotal_Techno = Истина;
			КонецЕсли;
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "SL_RCA" Тогда
				НайденаDOC_ID = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденаTotal_Techno И НайденаSL_RCA Тогда
			НомерСтрокиЗаголовка = ТекНомерСтроки;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерСтрокиЗаголовка > 1 Тогда
		
		СтрокиДляУдаления = Лист.Rows("1:" + Строка(НомерСтрокиЗаголовка - 1));
		СтрокиДляУдаления.Delete();
		//Книга.SaveAs(ПутьКФайлу);
		Книга.Save();
		
	КонецЕсли;
	
	ЭкземплярExcel.Quit();
	ЭкземплярExcel = Неопределено;
	
КонецПроцедуры

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.HFMSourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьДанныеВТаблицу(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HFMSourceData.Segment КАК Segment,
		|	HFMSourceData.Location КАК Location,
		|	HFMSourceData.Amount КАК Amount,
		|	HFMSourceData.Account
		|ПОМЕСТИТЬ ВТ_HFMSourceData
		|ИЗ
		|	РегистрСведений.HFMSourceData КАК HFMSourceData
		|ГДЕ
		|	HFMSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И HFMSourceData.Amount <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""Segment not found"" КАК Описание,
		|	ВТ_HFMSourceData.Segment КАК Идентификатор
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|		ПО ВТ_HFMSourceData.Segment = HFM_Technology.Код
		|			И (НЕ HFM_Technology.ПометкаУдаления)
		|ГДЕ
		|	HFM_Technology.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""Location not found"",
		|	ВТ_HFMSourceData.Location
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|		ПО ВТ_HFMSourceData.Location = HFM_Locations.Код
		|			И (НЕ HFM_Locations.ПометкаУдаления)
		|ГДЕ
		|	HFM_Locations.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""_Account not found"",
		|	ВТ_HFMSourceData.Location
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.HFM_GL_Accounts КАК HFM_GL_Accounts
		|		ПО ВТ_HFMSourceData.Account = HFM_GL_Accounts.Код
		|ГДЕ
		|	HFM_GL_Accounts.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_HFMSourceData.Location КАК Location,
		|	HFM_Locations.Ссылка КАК СсылкаLocations,
		|	ВТ_HFMSourceData.Segment КАК Segment,
		|	HFM_Technology.Ссылка КАК СсылкаSegment,
		|	СУММА(ВТ_HFMSourceData.Amount) КАК Amount,
		|	ВТ_HFMSourceData.Account,
		|	HFM_GL_Accounts.Ссылка КАК СсылкаAccount
		|ПОМЕСТИТЬ ВТ_ОстаткиHFM
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|		ПО ВТ_HFMSourceData.Location = HFM_Locations.Код
		|			И (НЕ HFM_Locations.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|		ПО ВТ_HFMSourceData.Segment = HFM_Technology.Код
		|			И (НЕ HFM_Technology.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.HFM_GL_Accounts КАК HFM_GL_Accounts
		|		ПО ВТ_HFMSourceData.Account = HFM_GL_Accounts.Код
		|ГДЕ
		|	НЕ HFM_Locations.Ссылка ЕСТЬ NULL
		|	И НЕ HFM_Technology.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_HFMSourceData.Location,
		|	HFM_Locations.Ссылка,
		|	ВТ_HFMSourceData.Segment,
		|	HFM_Technology.Ссылка,
		|	ВТ_HFMSourceData.Account,
		|	HFM_GL_Accounts.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BilledARОстатки.Account.БазовыйЭлемент КАК AccountБазовыйЭлементРодитель,
		|	BilledARОстатки.AU.Сегмент.БазовыйЭлемент КАК SubSubSegmentБазовыйЭлементРодительРодитель,
		|	BilledARОстатки.AU.ПодразделениеОрганизации.БазовыйЭлемент КАК LocationБазовыйЭлемент,
		|	BilledARОстатки.AmountОстаток КАК AmountОстаток,
		|	BilledARОстатки.Currency
		|ПОМЕСТИТЬ ВТ_ОстаткиЕРМ
		|ИЗ
		|	РегистрНакопления.BilledAR.Остатки(&ДатаКонец, ) КАК BilledARОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	UnallocatedCashОстатки.Account.БазовыйЭлемент,
		|	UnallocatedCashОстатки.AU.Сегмент.БазовыйЭлемент,
		|	UnallocatedCashОстатки.AU.ПодразделениеОрганизации.БазовыйЭлемент,
		|	UnallocatedCashОстатки.AmountОстаток,
		|	UnallocatedCashОстатки.Currency
		|ИЗ
		|	РегистрНакопления.UnallocatedCash.Остатки(&ДатаКонец, ) КАК UnallocatedCashОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	UnbilledARОстатки.Account.БазовыйЭлемент,
		|	UnbilledARОстатки.AU.Сегмент.БазовыйЭлемент,
		|	UnbilledARОстатки.AU.ПодразделениеОрганизации.БазовыйЭлемент,
		|	-UnbilledARОстатки.AmountОстаток,
		|	UnbilledARОстатки.Currency
		|ИЗ
		|	РегистрНакопления.UnbilledAR.Остатки(&ДатаКонец, ) КАК UnbilledARОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ManualTransactionsОстатки.Account.БазовыйЭлемент,
		|	ManualTransactionsОстатки.AU.Сегмент.БазовыйЭлемент,
		|	ManualTransactionsОстатки.AU.ПодразделениеОрганизации.БазовыйЭлемент,
		|	ManualTransactionsОстатки.AmountОстаток,
		|	ManualTransactionsОстатки.Currency
		|ИЗ
		|	РегистрНакопления.ManualTransactions.Остатки(&ДатаКонец, ) КАК ManualTransactionsОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	UnallocatedMemoОстатки.Account.БазовыйЭлемент,
		|	UnallocatedMemoОстатки.AU.Сегмент.БазовыйЭлемент,
		|	UnallocatedMemoОстатки.AU.ПодразделениеОрганизации.БазовыйЭлемент,
		|	UnallocatedMemoОстатки.AmountОстаток,
		|	UnallocatedMemoОстатки.Currency
		|ИЗ
		|	РегистрНакопления.UnallocatedMemo.Остатки(&ДатаКонец, ) КАК UnallocatedMemoОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиЕРМ.AccountБазовыйЭлементРодитель КАК AccountБазовыйЭлементРодитель,
		|	ВТ_ОстаткиЕРМ.SubSubSegmentБазовыйЭлементРодительРодитель КАК Segment,
		|	ВТ_ОстаткиЕРМ.LocationБазовыйЭлемент КАК Location,
		|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_ОстаткиЕРМ.AmountОстаток, 0) / ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(15, 2))) КАК AmountОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиЕРМ_Группировка
		|ИЗ
		|	ВТ_ОстаткиЕРМ КАК ВТ_ОстаткиЕРМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКурса, ) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО ВТ_ОстаткиЕРМ.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиЕРМ.AccountБазовыйЭлементРодитель,
		|	ВТ_ОстаткиЕРМ.SubSubSegmentБазовыйЭлементРодительРодитель,
		|	ВТ_ОстаткиЕРМ.LocationБазовыйЭлемент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.СсылкаSegment, ВТ_ОстаткиЕРМ_Группировка.Segment) КАК Segment,
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.СсылкаLocations, ВТ_ОстаткиЕРМ_Группировка.Location) КАК Location,
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.Amount, 0) КАК HFM_Amount,
		|	ЕСТЬNULL(ВТ_ОстаткиЕРМ_Группировка.AmountОстаток, 0) КАК ERM_Amount,
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.Amount, 0) - ЕСТЬNULL(ВТ_ОстаткиЕРМ_Группировка.AmountОстаток, 0) КАК Difference,
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.СсылкаAccount, ВТ_ОстаткиЕРМ_Группировка.AccountБазовыйЭлементРодитель) КАК Account
		|ИЗ
		|	ВТ_ОстаткиЕРМ_Группировка КАК ВТ_ОстаткиЕРМ_Группировка
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОстаткиHFM КАК ВТ_ОстаткиHFM
		|		ПО (ВТ_ОстаткиHFM.СсылкаLocations = ВТ_ОстаткиЕРМ_Группировка.Location)
		|			И (ВТ_ОстаткиHFM.СсылкаSegment = ВТ_ОстаткиЕРМ_Группировка.Segment)
		|			И (ВТ_ОстаткиHFM.СсылкаAccount = ВТ_ОстаткиЕРМ_Группировка.AccountБазовыйЭлементРодитель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ_HFMSourceData.Amount) КАК Amount
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ДатаКонец", Новый Граница(КонецМесяца(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКурса", (КонецМесяца(СтруктураПараметров.Дата)+1));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	
	ТаблицаРасхождений = МассивРезультатов[5].Выгрузить();

	СуммаHFM = МассивРезультатов[6].Выбрать();
	
	НачатьТранзакцию();
	
	//Если СуммаHFM.Количество() = 1 Тогда
	//	СуммаHFM.Следующий();
	//	Если Макс(СтруктураПараметров.Ссылка.CheckSum - СуммаHFM.Amount,СуммаHFM.Amount - СтруктураПараметров.Ссылка.CheckSum) > 10   Тогда
	//		Сообщение = "Difference!" +Символы.ПС+ "HFM total amount = " + СтруктураПараметров.Ссылка.CheckSum +Символы.ПС+ "Amount on the document = " + СуммаHFM.Amount;
	//		ВызватьИсключение Сообщение;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	//ДанныеДляЗаполнения.Вставить("ТаблицаРасхождений", ТаблицаРасхождений);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
	//Если ТаблицаКоллизий.Количество() = 0 Тогда
	ДокОбъект = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокОбъект.ТаблицаРасхождений.Загрузить(ТаблицаРасхождений);
	ДокОбъект.Записать();
	//КонецЕсли;
	ЗафиксироватьТранзакцию();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецПроцедуры

Процедура СоздатьКорректировки(СтруктураПараметров, АдресХранилища) Экспорт
	
	ТаблицаКорректировок = СтруктураПараметров.Ссылка.ДетализацияПоКлиенту.Выгрузить();
	
	ТаблицаКорректировок.Свернуть("Segment, Location","HFM_Amount, ERM_Amount, Difference");
	
	Док = Документы.КорректировкаРегистров.СоздатьДокумент();
	Док.Дата = КонецМесяца(СтруктураПараметров.Дата);
	Док.Комментарий = "HFM balances correction";
	Док.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры
#КонецЕсли

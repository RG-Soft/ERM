#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	
	ФайлЭксель = СтруктураПараметров.ИсточникДанных.Получить();
	
	Если ФайлЭксель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель.Записать(ПутьКФайлу);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0 Xml;HDR=" + ?(СтруктураПараметров.ИменаКолонокВПервойСтроке, "Yes", "No") + """";
	
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=" + ?(СтруктураПараметров.ИменаКолонокВПервойСтроке, "Yes", "No") + """";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	
	
	sqlString = "select * from [" + СтруктураПараметров.ЛистФайла + "]";
	rs.Open(sqlString);
	
	rs.MoveFirst();
	rs.MoveNext();
	Считывать = Ложь;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанных.Колонки.Добавить("Segment", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Location", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Amount", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0)));
	СтрокаФайла = 1;
	
	Пока rs.EOF() = 0 Цикл
		Если СокрЛП(rs.Fields(0).Value) = "Total_Techno" И СокрЛП(rs.Fields(1).Value) = "SL_RCA" Тогда
			Считывать = Истина;
			ДокОбъект = СтруктураПараметров.Ссылка.ПолучитьОбъект();
			ДокОбъект.CheckSum = Число(СокрЛП(rs.Fields(2).Value));
			ДокОбъект.Записать();
		КонецЕсли;
		Если Считывать Тогда
			НоваяСтрокаТаблицы = ТаблицаДанных.Добавить();
			НоваяСтрокаТаблицы.СтрокаФайла = СтрокаФайла;
			СтрокаФайла = СтрокаФайла + 1;
			НоваяСтрокаТаблицы.Segment = СокрЛП(rs.Fields(0).Value);
			Location = СокрЛП(rs.Fields(1).Value);
			ПозицияТочки = Найти(Location, ".");
			НоваяСтрокаТаблицы.Location =Прав(Location, СтрДлина(Location) - ПозицияТочки);
			НоваяСтрокаТаблицы.Amount = Число(СокрЛП(rs.Fields(2).Value));
		КонецЕсли;
		rs.MoveNext();
		
	КонецЦикла;
	
	rs.Close();
	
	Connection.Close();
		
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	//ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура УдалитьШапкуФайла(ПутьКФайлу, СтруктураПараметров)
	
	ЭкземплярExcel = Новый COMОбъект("Excel.Application");
	Книга = ЭкземплярExcel.Application.Workbooks.Open(ПутьКФайлу);
	
	ИмяЛиста = СтруктураПараметров.ЛистФайла;
	Если Прав(ИмяЛиста, 1) = "$" Тогда
		ИмяЛиста = Лев(ИмяЛиста, СтрДлина(ИмяЛиста) - 1);
	КонецЕсли;
	
	Лист = ЭкземплярExcel.Worksheets(ИмяЛиста);
	
	// в качестве ориентиров будем использовать колонки SOURCE_SYSTEM, GL_ACCOUNT, ID_ORIG
	НомерСтрокиЗаголовка = 1;
	
	Для ТекНомерСтроки = 1 По 100 Цикл
		
		НайденаTotal_Techno = Ложь;
		//НайденаGlAccount = Ложь;
		НайденаSL_RCA = Ложь;
		
		Для ТекНомерСтолбца = 1 По 100 Цикл
			
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "Total_Techno" Тогда
				НайденаTotal_Techno = Истина;
			КонецЕсли;
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "SL_RCA" Тогда
				НайденаDOC_ID = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденаTotal_Techno И НайденаSL_RCA Тогда
			НомерСтрокиЗаголовка = ТекНомерСтроки;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерСтрокиЗаголовка > 1 Тогда
		
		СтрокиДляУдаления = Лист.Rows("1:" + Строка(НомерСтрокиЗаголовка - 1));
		СтрокиДляУдаления.Delete();
		//Книга.SaveAs(ПутьКФайлу);
		Книга.Save();
		
	КонецЕсли;
	
	ЭкземплярExcel.Quit();
	ЭкземплярExcel = Неопределено;
	
КонецПроцедуры

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.HFMSourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьДанныеВТаблицу(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ТекстОшибки = "";
	
	   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	HFMSourceData.Segment КАК Segment,
		|	HFMSourceData.Location КАК Location,
		|	HFMSourceData.Amount КАК Amount
		|ПОМЕСТИТЬ ВТ_HFMSourceData
		|ИЗ
		|	РегистрСведений.HFMSourceData КАК HFMSourceData
		|ГДЕ
		|	HFMSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И HFMSourceData.Segment <> ""Total_Techno""
		|	И HFMSourceData.Location <> ""SL_RCA""
		|	И HFMSourceData.Amount <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""Segment not found"" КАК Описание,
		|	ВТ_HFMSourceData.Segment КАК Идентификатор
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|		ПО ВТ_HFMSourceData.Segment = HFM_Technology.Код
		|ГДЕ
		|	HFM_Technology.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""Location not found"",
		|	ВТ_HFMSourceData.Location
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|		ПО ВТ_HFMSourceData.Location = HFM_Locations.Код
		|ГДЕ
		|	HFM_Locations.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_HFMSourceData.Location КАК Location,
		|	HFM_Locations.Ссылка КАК СсылкаLocations,
		|	ВТ_HFMSourceData.Segment КАК Segment,
		|	HFM_Technology.Ссылка КАК СсылкаSegment,
		|	СУММА(ВТ_HFMSourceData.Amount) КАК Amount
		|ПОМЕСТИТЬ ВТ_ОстаткиHFM
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|		ПО ВТ_HFMSourceData.Location = HFM_Locations.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|		ПО ВТ_HFMSourceData.Segment = HFM_Technology.Код
		|ГДЕ
		|	НЕ HFM_Locations.Ссылка ЕСТЬ NULL
		|	И НЕ HFM_Technology.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_HFMSourceData.Location,
		|	HFM_Locations.Ссылка,
		|	ВТ_HFMSourceData.Segment,
		|	HFM_Technology.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BilledARОстатки.Account.БазовыйЭлемент.Родитель КАК AccountБазовыйЭлементРодитель,
		|	BilledARОстатки.SubSubSegment.БазовыйЭлемент.Родитель.Родитель КАК SubSubSegmentБазовыйЭлементРодительРодитель,
		|	BilledARОстатки.Location.БазовыйЭлемент КАК LocationБазовыйЭлемент,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(BilledARОстатки.AmountОстаток, 0) / ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(15, 2)) КАК AmountОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиЕРМ
		|ИЗ
		|	РегистрНакопления.BilledAR.Остатки(&ДатаКонец, ) КАК BilledARОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКонец, ) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО BilledARОстатки.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	BilledARОстатки.Account.БазовыйЭлемент.Родитель.Код = ""1201""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	UnallocatedCashОстатки.Account.БазовыйЭлемент.Родитель,
		|	UnallocatedCashОстатки.SubSubSegment.БазовыйЭлемент.Родитель.Родитель,
		|	UnallocatedCashОстатки.Location.БазовыйЭлемент,
		|	-(ВЫРАЗИТЬ(ЕСТЬNULL(UnallocatedCashОстатки.AmountОстаток, 0) / ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(15, 2)))
		|ИЗ
		|	РегистрНакопления.UnallocatedCash.Остатки(&ДатаКонец, ) КАК UnallocatedCashОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКонец, ) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО UnallocatedCashОстатки.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	UnallocatedCashОстатки.Account.БазовыйЭлемент.Родитель.Код = ""1201""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	UnbilledARОстатки.Account.БазовыйЭлемент.Родитель,
		|	UnbilledARОстатки.SubSubSegment.БазовыйЭлемент.Родитель.Родитель,
		|	UnbilledARОстатки.Location.БазовыйЭлемент,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(UnbilledARОстатки.AmountОстаток, 0) / ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(15, 2))
		|ИЗ
		|	РегистрНакопления.UnbilledAR.Остатки(&ДатаКонец, ) КАК UnbilledARОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКонец, ) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО UnbilledARОстатки.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	UnbilledARОстатки.Account.БазовыйЭлемент.Родитель.Код = ""1201""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ManualTransactionsОстатки.Account.БазовыйЭлемент.Родитель,
		|	ManualTransactionsОстатки.SubSubSegment.БазовыйЭлемент.Родитель.Родитель,
		|	ManualTransactionsОстатки.Location.БазовыйЭлемент,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ManualTransactionsОстатки.AmountОстаток, 0) / ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(15, 2))
		|ИЗ
		|	РегистрНакопления.ManualTransactions.Остатки(&ДатаКонец, ) КАК ManualTransactionsОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКонец, ) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО ManualTransactionsОстатки.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	ManualTransactionsОстатки.Account.БазовыйЭлемент.Родитель.Код = ""1201""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	UnallocatedMemoОстатки.Account.БазовыйЭлемент.Родитель,
		|	UnallocatedMemoОстатки.SubSubSegment.БазовыйЭлемент.Родитель.Родитель,
		|	UnallocatedMemoОстатки.Location.БазовыйЭлемент,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(UnallocatedMemoОстатки.AmountОстаток, 0) / ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(ВнутренниеКурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(15, 2))
		|ИЗ
		|	РегистрНакопления.UnallocatedMemo.Остатки(&ДатаКонец, ) КАК UnallocatedMemoОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнутренниеКурсыВалют.СрезПоследних(&ДатаКонец, ) КАК ВнутренниеКурсыВалютСрезПоследних
		|		ПО UnallocatedMemoОстатки.Currency = ВнутренниеКурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	UnallocatedMemoОстатки.Account.БазовыйЭлемент.Родитель.Код = ""1201""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиЕРМ.AccountБазовыйЭлементРодитель КАК AccountБазовыйЭлементРодитель,
		|	ВТ_ОстаткиЕРМ.SubSubSegmentБазовыйЭлементРодительРодитель КАК Segment,
		|	ВТ_ОстаткиЕРМ.LocationБазовыйЭлемент КАК Location,
		|	СУММА(ВТ_ОстаткиЕРМ.AmountОстаток) КАК AmountОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиЕРМ_Группировка
		|ИЗ
		|	ВТ_ОстаткиЕРМ КАК ВТ_ОстаткиЕРМ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиЕРМ.AccountБазовыйЭлементРодитель,
		|	ВТ_ОстаткиЕРМ.SubSubSegmentБазовыйЭлементРодительРодитель,
		|	ВТ_ОстаткиЕРМ.LocationБазовыйЭлемент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.СсылкаSegment, ВТ_ОстаткиЕРМ_Группировка.Segment) КАК Segment,
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.СсылкаLocations, ВТ_ОстаткиЕРМ_Группировка.Location) КАК Location,
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.Amount, 0) КАК HFM_Amount,
		|	ЕСТЬNULL(ВТ_ОстаткиЕРМ_Группировка.AmountОстаток, 0) КАК ERM_Amount,
		|	ЕСТЬNULL(ВТ_ОстаткиHFM.Amount, 0) - ЕСТЬNULL(ВТ_ОстаткиЕРМ_Группировка.AmountОстаток, 0) КАК Difference
		|ИЗ
		|	ВТ_ОстаткиЕРМ_Группировка КАК ВТ_ОстаткиЕРМ_Группировка
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОстаткиHFM КАК ВТ_ОстаткиHFM
		|		ПО (ВТ_ОстаткиHFM.СсылкаLocations = ВТ_ОстаткиЕРМ_Группировка.Location)
		|			И (ВТ_ОстаткиHFM.СсылкаSegment = ВТ_ОстаткиЕРМ_Группировка.Segment)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ_HFMSourceData.Amount) КАК Amount
		|ИЗ
		|	ВТ_HFMSourceData КАК ВТ_HFMSourceData";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ДатаКонец", СтруктураПараметров.Дата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	
	ТаблицаРасхождений = МассивРезультатов[5].Выгрузить();

	СуммаHFM = МассивРезультатов[6].Выбрать();
	
	НачатьТранзакцию();
	
	Если СуммаHFM.Количество() = 1 Тогда
		СуммаHFM.Следующий();
		Если СтруктураПараметров.Ссылка.CheckSum <> СуммаHFM.Amount Тогда
			Сообщение = "Difference!" +Символы.ПС+ "HFM total amount = " + СтруктураПараметров.Ссылка.CheckSum +Символы.ПС+ "Amount on the document = " + СуммаHFM.Amount;
			ВызватьИсключение Сообщение;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
	//Если ТаблицаКоллизий.Количество() = 0 Тогда
	ДокОбъект = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокОбъект.ТаблицаРасхождений.Загрузить(ТаблицаРасхождений);
	ДокОбъект.Записать();
	//КонецЕсли;
	ЗафиксироватьТранзакцию();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецПроцедуры

#КонецЕсли

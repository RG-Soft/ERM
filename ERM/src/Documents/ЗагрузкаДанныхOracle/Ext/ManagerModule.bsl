#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	ТекстОшибки = "";
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	ФайлЭксель = СтруктураПараметров.ИсточникДанных.Получить();
	ФайлЭксель.Записать(ПутьКФайлу);
	
	rgsЗагрузкаИзExcel.ВыгрузитьЭксельВТаблицуДанныхПоИменамКолонок(ПутьКФайлу, ТаблицаДанных, ДанныеДляЗаполнения, АдресХранилища, СтруктураПараметров);
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	НЗ = РегистрыСведений.OracleSourceData.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 14.07.2016 19:30:40 - установка статуса документа
	ДокументЗагрузки = Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.LoadedSourseData;
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 19:30:45 - установка статуса документа
	
КонецПроцедуры

Процедура ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	OracleSourceData.SOURCE_SYSTEM,
		|	OracleSourceData.OU,
		|	OracleSourceData.GL_SOURCE,
		|	OracleSourceData.GL_DATE,
		|	OracleSourceData.CURRENCY_CODE,
		|	OracleSourceData.EXCHANGE_RATE,
		|	OracleSourceData.GL_ACCOUNT,
		|	OracleSourceData.CUSTOMER_ID,
		|	OracleSourceData.CUSTOMER_NUMBER,
		|	OracleSourceData.CUSTOMER_NAME,
		|	OracleSourceData.CONTRACT_NAME,
		|	OracleSourceData.ENTERED,
		|	OracleSourceData.ACCOUNTED,
		|	OracleSourceData.DOC_TYPE,
		|	OracleSourceData.DESCRIPTION,
		|	OracleSourceData.DOC_NUMBER,
		|	OracleSourceData.DOC_NUMBER_2,
		|	OracleSourceData.TRANS_TYPE,
		|	OracleSourceData.INV_DATE,
		|	OracleSourceData.LINE_TYPE,
		|	OracleSourceData.SALESPERSON,
		|	OracleSourceData.DUE_DATE,
		|	OracleSourceData.TAX_RATE,
		|	OracleSourceData.ORIGINAL_TRX_NUMBER,
		|	OracleSourceData.PO_NUMBER,
		|	OracleSourceData.SO_NUM,
		|	OracleSourceData.SO_DATE,
		|	OracleSourceData.SHIP_DATE_ACTUAL,
		|	OracleSourceData.ITEM_NO,
		|	OracleSourceData.ITEM_DESC,
		|	OracleSourceData.PRICE_UNIT,
		|	OracleSourceData.SHIPPED_QUANTITY,
		|	OracleSourceData.RECEIPT_AMOUNT,
		|	OracleSourceData.CREATION_DATE,
		|	OracleSourceData.CREATED_BY,
		|	OracleSourceData.BILL_SITE_NAME,
		|	OracleSourceData.BILL_SITE_ID,
		|	OracleSourceData.SHIP_SITE_NAME,
		|	OracleSourceData.SHIP_SITE_ID,
		|	OracleSourceData.DOC_ID,
		|	OracleSourceData.LINE_ID,
		|	OracleSourceData.DOC_TRANS_ID,
		|	OracleSourceData.ID_ORIG,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 17, 4) + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 22, 3) КАК Account,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 10, 6) КАК Location
		|ПОМЕСТИТЬ ВТ_OracleSourceData
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|ГДЕ
		|	OracleSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	ВТ_OracleSourceData.CURRENCY_CODE КАК Идентификатор
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_OracleSourceData.CURRENCY_CODE = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И НЕ ВТ_OracleSourceData.CURRENCY_CODE = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Oracle.ПустаяСсылка),
		|	ВТ_OracleSourceData.Account
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО (ВТ_OracleSourceData.Account = Oracle.Код)
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ВТ_OracleSourceData.OU
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И ВТ_OracleSourceData.OU = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ВТ_OracleSourceData.OU <> 0
		|	И Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	ВТ_OracleSourceData.SubSubSegment
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ВТ_OracleSourceData.SubSubSegment = Сегменты.Код)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_OracleSourceData.Location
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ВТ_OracleSourceData.Location = ПодразделенияОрганизаций.Код)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	Сегменты.Код,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО Сегменты.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (ПОДСТРОКА(ВТ_OracleSourceData.GL_ACCOUNT, 6, 3) = Сегменты.Код)
		|			И (НЕ Сегменты.ПометкаУдаления)
		|ГДЕ
		|	Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО ПодразделенияОрганизаций.MgmtCountryCode = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (ВТ_OracleSourceData.Location = ПодразделенияОрганизаций.Код)
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Oracle.Ссылка,
		|	Oracle.Код
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО (ВТ_OracleSourceData.Account = Oracle.Код)
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО OracleSourceData.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	OracleSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = СтруктураПараметров.ТипВнешнейСистемы;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		Иначе
			
			ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		Если НЕ ВыборкаЛокаций.БазовыйЭлемент.Пустая() Тогда
			
			ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
			ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.БазовыйЭлемент;
			ТекОбъект.Записать();
			
		Иначе
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = СтруктураПараметров.ТипВнешнейСистемы;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = СтруктураПараметров.ТипВнешнейСистемы;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[5].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = СтруктураПараметров.ТипВнешнейСистемы;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	OracleSourceData.SOURCE_SYSTEM,
		|	OracleSourceData.OU,
		|	OracleSourceData.GL_SOURCE,
		|	OracleSourceData.GL_DATE,
		|	OracleSourceData.CURRENCY_CODE,
		|	OracleSourceData.EXCHANGE_RATE,
		|	OracleSourceData.GL_ACCOUNT,
		|	OracleSourceData.CUSTOMER_ID,
		|	OracleSourceData.CUSTOMER_NUMBER,
		|	OracleSourceData.CUSTOMER_NAME,
		|	OracleSourceData.CONTRACT_NAME,
		|	OracleSourceData.ENTERED,
		|	OracleSourceData.ACCOUNTED,
		|	OracleSourceData.DOC_TYPE,
		|	OracleSourceData.DESCRIPTION,
		|	OracleSourceData.DOC_NUMBER,
		|	OracleSourceData.DOC_NUMBER_2,
		|	OracleSourceData.TRANS_TYPE,
		|	OracleSourceData.INV_DATE,
		|	OracleSourceData.LINE_TYPE,
		|	OracleSourceData.SALESPERSON,
		|	OracleSourceData.DUE_DATE,
		|	OracleSourceData.TAX_RATE,
		|	OracleSourceData.ORIGINAL_TRX_NUMBER,
		|	OracleSourceData.PO_NUMBER,
		|	OracleSourceData.SO_NUM,
		|	OracleSourceData.SO_DATE,
		|	OracleSourceData.SHIP_DATE_ACTUAL,
		|	OracleSourceData.ITEM_NO,
		|	OracleSourceData.ITEM_DESC,
		|	OracleSourceData.PRICE_UNIT,
		|	OracleSourceData.SHIPPED_QUANTITY,
		|	OracleSourceData.RECEIPT_AMOUNT,
		|	OracleSourceData.CREATION_DATE,
		|	OracleSourceData.CREATED_BY,
		|	OracleSourceData.BILL_SITE_NAME,
		|	OracleSourceData.BILL_SITE_ID,
		|	OracleSourceData.SHIP_SITE_NAME,
		|	OracleSourceData.SHIP_SITE_ID,
		|	OracleSourceData.DOC_ID,
		|	OracleSourceData.LINE_ID,
		|	OracleSourceData.DOC_TRANS_ID,
		|	OracleSourceData.ID_ORIG,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 17, 4) + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 22, 3) КАК Account,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 10, 6) КАК Location
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|ГДЕ
		|	OracleSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CUSTOMER_NUMBER
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CURRENCY_CODE
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SalesOrder.Номер,
		|	SalesOrder.Ссылка
		|ИЗ
		|	Документ.SalesOrder КАК SalesOrder
		|ГДЕ
		|	SalesOrder.Source = &ТипВнешнейСистемы
		|	И НЕ SalesOrder.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Source,
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Client,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиИнвойсов.ArInvoice,
		|	КлючиИнвойсов.Invoice
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.DOC_NUMBER_2
		|			И (ВТ_ДанныеФайла.DOC_NUMBER_2 <> """")
		|			И (КлючиИнвойсов.Source = &ТипВнешнейСистемы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КлючиИнвойсов.ArInvoice,
		|	КлючиИнвойсов.Invoice
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.DOC_NUMBER
		|			И (ВТ_ДанныеФайла.DOC_NUMBER_2 = """")
		|			И (КлючиИнвойсов.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CashBatch.PaymentNumber,
		|	CashBatch.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО CashBatch.PaymentNumber = ВТ_ДанныеФайла.DOC_NUMBER
		|			И (НЕ CashBatch.ПометкаУдаления)
		|			И (CashBatch.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиBatchAllocation.Source,
		|	КлючиBatchAllocation.Company,
		|	КлючиBatchAllocation.Client,
		|	КлючиBatchAllocation.Location,
		|	КлючиBatchAllocation.SubSubSegment,
		|	КлючиBatchAllocation.Account,
		|	КлючиBatchAllocation.Currency,
		|	КлючиBatchAllocation.BatchAllocation
		|ИЗ
		|	РегистрСведений.КлючиBatchAllocation КАК КлючиBatchAllocation
		|ГДЕ
		|	КлючиBatchAllocation.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.GL_DATE КАК GlDate,
		|	ВТ_ДанныеФайла.GL_SOURCE КАК GlSourceType,
		|	Организации.Ссылка КАК Company,
		|	Oracle.Ссылка КАК Account,
		|	ПодразделенияОрганизаций.Ссылка КАК Location,
		|	Сегменты.Ссылка КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_ДанныеФайла.EXCHANGE_RATE КАК ExchangeRate,
		|	ВТ_ДанныеФайла.GL_ACCOUNT КАК GL_Account,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_ДанныеФайла.CONTRACT_NAME КАК Contract,
		|	ВТ_ДанныеФайла.ENTERED КАК Amount,
		|	ВТ_ДанныеФайла.ACCOUNTED КАК BaseAmount,
		|	ВТ_ДанныеФайла.DOC_TYPE КАК DocType,
		|	ВТ_ДанныеФайла.DESCRIPTION КАК Description,
		|	ВТ_ДанныеФайла.TRANS_TYPE КАК TransType,
		|	ВТ_ДанныеФайла.SO_NUM КАК SONum,
		|	ВТ_ДанныеФайла.SO_DATE КАК SODate,
		|	ВТ_ДанныеФайла.SHIP_DATE_ACTUAL КАК ShipDateActual,
		|	ВТ_ДанныеФайла.CREATION_DATE КАК CreationDate,
		|	ВТ_ДанныеФайла.CREATED_BY КАК CreatedBy,
		|	ВТ_ДанныеФайла.DOC_ID КАК DocID,
		|	ВТ_ДанныеФайла.LINE_ID КАК LineID,
		|	ВТ_ДанныеФайла.ID_ORIG КАК ID_ORIG,
		|	ЕСТЬNULL(ТранзакцияOracle.Ссылка, ЗНАЧЕНИЕ(Документ.ТранзакцияOracle.ПустаяСсылка)) КАК Транзакция,
		|	ВТ_ДанныеФайла.CUSTOMER_NUMBER КАК CustomerNumber,
		|	ВТ_ДанныеФайла.DOC_TRANS_ID КАК DocTransID,
		|	ВТ_ДанныеФайла.DOC_NUMBER КАК DocNumber,
		|	ВТ_ДанныеФайла.DOC_NUMBER_2 КАК DocNumber2,
		|	ВТ_ДанныеФайла.INV_DATE КАК InvDate,
		|	ВТ_ДанныеФайла.ORIGINAL_TRX_NUMBER КАК OriginalTrxNumber,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""A""
		|			ТОГДА 0
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""R""
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПорядокAccruals,
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""INV_REC""
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Priority
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_ДанныеФайла.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_ДанныеФайла.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО ВТ_ДанныеФайла.SubSubSegment = Сегменты.Код
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.CURRENCY_CODE = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.CUSTOMER_NUMBER = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияOracle КАК ТранзакцияOracle
		|		ПО ВТ_ДанныеФайла.ID_ORIG = ТранзакцияOracle.Номер
		|			И (НЕ ТранзакцияOracle.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Priority,
		|	GlDate,
		|	ПорядокAccruals,
		|	ID_ORIG";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	
	ВыборкаКэшSalesOrders = РезультатЗапроса[3].Выбрать();
	КэшSalesOrders = Новый ТаблицаЗначений;
	КэшSalesOrders.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	КэшSalesOrders.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.SalesOrder"));
	КэшSalesOrders.Индексы.Добавить("Номер");
	
	Пока ВыборкаКэшSalesOrders.Следующий() Цикл
		СтрокаКэша = КэшSalesOrders.Добавить();
		СтрокаКэша.Номер = СокрЛП(ВыборкаКэшSalesOrders.Номер);
		СтрокаКэша.Ссылка = ВыборкаКэшSalesOrders.Ссылка;
	КонецЦикла;
	
	КэшРучныхКоррерктировок = РезультатЗапроса[4].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	КэшИнвойсов = РезультатЗапроса[5].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice");
	
	КэшCashBatch = РезультатЗапроса[6].Выгрузить();
	КэшCashBatch.Индексы.Добавить("PaymentNumber");
	
	КэшBatchAllocation = РезультатЗапроса[7].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	ТаблицаДаты = РезультатЗапроса[8].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[9].Выбрать();
	
	НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Транзакция) Тогда
			Продолжить;
			//ТранзакцияOracleОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
		Иначе
			ТранзакцияOracleОбъект = Документы.ТранзакцияOracle.СоздатьДокумент();
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.GlDate < ДатаНачалаЗагрузки Тогда
			
			ТекОшибка = "Can't load data earlier than the start date for " + ВыборкаДетальныеЗаписи.ID_ORIG;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьТранзакцию(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, СтруктураПараметров.ТипВнешнейСистемы, Отказ, ТекстСообщенияОбОшибках);
		
		ТранзакцияOracleОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках);
		
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.ДокументЗагрузки = СтруктураПараметров.Ссылка;
		ЗаписьНабора.ПроводкаDSS = ТранзакцияOracleОбъект.Ссылка;
		ЗаписьНабора.ОшибкаПриПоискеСвязанныхОбъектов = НайденаОшибкаПриПоискеСвязанныхОбъектов;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	// { RGS TAlmazova 14.07.2016 18:55:05 - добавление статуса
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 18:55:12 - добавление статуса
	
	НЗ.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьТранзакцию(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, Source, Отказ, ТекстСообщенияОбОшибках)
	
	ЗаполнитьЗначенияСвойств(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
	
	ТранзакцияOracleОбъект.Номер = ДанныеДляЗаполнения.ID_ORIG; 
	ТранзакцияOracleОбъект.Дата = ДанныеДляЗаполнения.GlDate;
	ТранзакцияOracleОбъект.Source = Source;
	
	ТранзакцияOracleОбъект.GlSourceType = ПолучитьGlSourceType(ДанныеДляЗаполнения);
	
	ПреобразованиеСокрЛП(ТранзакцияOracleОбъект);
	
	Если НЕ ЗначениеЗаполнено(ТранзакцияOracleОбъект.Client) Тогда
		Если ТранзакцияOracleОбъект.DocType = "JV" 
			ИЛИ ТранзакцияOracleОбъект.DocType = "CASH" И ТранзакцияOracleОбъект.TransType = "TRADE_UNID" Тогда
			ТранзакцияOracleОбъект.Client = Справочники.Контрагенты.GLNoName;
		Иначе
			//ВызватьИсключение "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to find client " + ДанныеДляЗаполнения.CustomerNumber,,,, Отказ);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьGlSourceType(ДанныеДляЗаполнения)
	
	Если ДанныеДляЗаполнения.GlSourceType = "SO Accrual" Тогда
		Возврат Перечисления.OracleGlSourceType.SOAccrual;
	ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "SAM Accrual" Тогда
		Возврат Перечисления.OracleGlSourceType.SAMAccrual;
	ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "Revaluation" Тогда
		Возврат Перечисления.OracleGlSourceType.Revaluation;
	ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "JV" Тогда
		Возврат Перечисления.OracleGlSourceType.JV;
	ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "Receivables" Тогда
		Возврат Перечисления.OracleGlSourceType.Receivables;
	КонецЕсли;
	
	Возврат Перечисления.OracleGlSourceType.ПустаяСсылка();
	
КонецФункции

Процедура ПреобразованиеСокрЛП(ТранзакцияOracleОбъект)
	
	ТранзакцияOracleОбъект.Contract = СокрЛП(ТранзакцияOracleОбъект.Contract);
	ТранзакцияOracleОбъект.DocType = СокрЛП(ТранзакцияOracleОбъект.DocType);
	ТранзакцияOracleОбъект.TransType = СокрЛП(ТранзакцияOracleОбъект.TransType);
	ТранзакцияOracleОбъект.SONum = СокрЛП(ТранзакцияOracleОбъект.SONum);
	ТранзакцияOracleОбъект.CreatedBy = СокрЛП(ТранзакцияOracleОбъект.CreatedBy);
	
КонецПроцедуры

Функция СформироватьСвязанныеОбъекты(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	Если ТранзакцияOracleОбъект.DocType = "JV" Тогда
		
		СтруктураПоискаРучнойКорректировки.Source = ТранзакцияOracleОбъект.Source;
		СтруктураПоискаРучнойКорректировки.Company = ТранзакцияOracleОбъект.Company;
		СтруктураПоискаРучнойКорректировки.Client = ТранзакцияOracleОбъект.Client;
		СтруктураПоискаРучнойКорректировки.Location = ТранзакцияOracleОбъект.Location;
		СтруктураПоискаРучнойКорректировки.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
		СтруктураПоискаРучнойКорректировки.Account = ТранзакцияOracleОбъект.Account;
		СтруктураПоискаРучнойКорректировки.Currency = ТранзакцияOracleОбъект.Currency;
		
		СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
		Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
			ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект);
			НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
			НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
			НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
			НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
			НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
			НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
			НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
			НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
			НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
		КонецЕсли;
		
	ИначеЕсли ТранзакцияOracleОбъект.DocType = "Accrual" Тогда
		
		СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.SONum, "Номер");
		
		Если СтрокаSalesOrder = Неопределено Тогда

			Если ТранзакцияOracleОбъект.TransType = "A" Тогда
				
				ТекSalesOrder = СоздатьSalesOrder(ТранзакцияOracleОбъект);
				НоваяСтрокаКэша = КэшSalesOrders.Добавить();
				НоваяСтрокаКэша.Номер = ДанныеДляЗаполнения.SONum;
				НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
				
			Иначе
				
				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Sales Order for transaction " + ТранзакцияOracleОбъект.Номер;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, Документы.SalesOrder.ПустаяСсылка());
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекSalesOrder = СтрокаSalesOrder.Ссылка;
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
		
		КонецЕсли;
		
	ИначеЕсли ТранзакцияOracleОбъект.DocType = "DEP" ИЛИ ТранзакцияOracleОбъект.DocType = "GUAR"
		ИЛИ ТранзакцияOracleОбъект.DocType = "INV" ИЛИ ТранзакцияOracleОбъект.DocType = "PMT"
		ИЛИ ТранзакцияOracleОбъект.DocType = "CB" Тогда
		
		//СтрокаИнвойса = КэшИнвойсов.Найти(?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2), "ArInvoice");
		//
		//Если СтрокаИнвойса = Неопределено Тогда

		//	ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект);
		//	НоваяСтрокаКэша = КэшИнвойсов.Добавить();
		//	НоваяСтрокаКэша.ArInvoice = ?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2);
		//	НоваяСтрокаКэша.Invoice = ТекИнвойс;
		//	
		//Иначе
		//	
		//	ТекИнвойс = СтрокаИнвойса.Invoice;
		//	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
		//
		//КонецЕсли;
		// TODO RGS AGorlenko 21.07.2016: переделать поиск
		ТекИнвойс = ПолучитьИнвойс(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source);
		
		Если Не ЗначениеЗаполнено(ТекИнвойс) Тогда
			ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект);
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
		КонецЕсли;
		
		// если указан номер SO, надо прописать связку
		Если НЕ ПустаяСтрока(ТранзакцияOracleОбъект.SONum) Тогда
			
			СтрокаSalesOrder = КэшSalesOrders.Найти(ТранзакцияOracleОбъект.SONum, "Номер");
			
			// { RGS AGorlenko 28.07.2016 2:00:46 - 
			//Если СтрокаSalesOrder = Неопределено Тогда
			//	
			//	НайденаОшибка = Истина;
			//	
			//Иначе
			//	
			//	ТекSalesOrder = СтрокаSalesOrder.Ссылка;
			//	ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
			//	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
			//
			//КонецЕсли;
			Если СтрокаSalesOrder <> Неопределено Тогда
				
				ТекSalesOrder = СтрокаSalesOrder.Ссылка;
				ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
			
			КонецЕсли;
			// } RGS AGorlenko 28.07.2016 2:00:48 - 
			
		КонецЕсли;
		
	ИначеЕсли ТранзакцияOracleОбъект.DocType = "DM" ИЛИ ТранзакцияOracleОбъект.DocType = "CM" Тогда
		
		Если ТранзакцияOracleОбъект.TransType = "CM_REC" ИЛИ ТранзакцияOracleОбъект.TransType = "DM_REC" Тогда
			ТекМемо = Документы.Memo.НайтиПоНомеру(ТранзакцияOracleОбъект.DocNumber);
			Если Не ЗначениеЗаполнено(ТекМемо) Тогда
				ТекМемо = СоздатьМемо(ТранзакцияOracleОбъект);
			Иначе
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			КонецЕсли;
		Иначе
			ТекМемо = Документы.Memo.НайтиПоНомеру(ТранзакцияOracleОбъект.OriginalTrxNumber);
			Если ЗначениеЗаполнено(ТекМемо) Тогда
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			Иначе
				//НайденаОшибка = Истина;
				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Memo for transaction " + ТранзакцияOracleОбъект.Номер;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, Документы.Memo.ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
			ТекИнвойс = ПолучитьИнвойс(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source);
			Если ЗначениеЗаполнено(ТекИнвойс) Тогда
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			Иначе
				//НайденаОшибка = Истина;
				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Invoice for transaction " + ТранзакцияOracleОбъект.Номер;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТранзакцияOracleОбъект.DocType = "CASH" Тогда
		
		//СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.DocNumber, "PaymentNumber");
		//
		//Если СтрокаCashBatch = Неопределено Тогда

		//	ТекCashBatch = СоздатьCashBatch(ТранзакцияOracleОбъект);
		//	НоваяСтрокаКэша = КэшCashBatch.Добавить();
		//	НоваяСтрокаКэша.PaymentNumber = ДанныеДляЗаполнения.DocNumber;
		//	НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
		//	
		//Иначе
		//	
		//	ТекCashBatch = СтрокаCashBatch.Ссылка;
		//	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
		//
		//КонецЕсли;
		// TODO RGS AGorlenko 21.07.2016: переделать поиск
		ТекCashBatch = ПолучитьCashBatch(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source, ТранзакцияOracleОбъект.TransType = "TRADE_ACC");
		
		Если Не ЗначениеЗаполнено(ТекCashBatch) Тогда
			ТекCashBatch = СоздатьCashBatch(ТранзакцияOracleОбъект, ТранзакцияOracleОбъект.TransType = "TRADE_ACC");
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
		КонецЕсли;
		
		Если ТранзакцияOracleОбъект.TransType = "CCURR_REC" ИЛИ ТранзакцияOracleОбъект.TransType = "TRADE_REC" Тогда
			
			// Batch allocation
			СтруктураПоискаBatch.Source = ТранзакцияOracleОбъект.Source;
			СтруктураПоискаBatch.Company = ТранзакцияOracleОбъект.Company;
			СтруктураПоискаBatch.Client = ТранзакцияOracleОбъект.Client;
			СтруктураПоискаBatch.Location = ТранзакцияOracleОбъект.Location;
			СтруктураПоискаBatch.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
			СтруктураПоискаBatch.Account = ТранзакцияOracleОбъект.Account;
			СтруктураПоискаBatch.Currency = ТранзакцияOracleОбъект.Currency;
			
			СтрокиBatchAllocation = КэшBatchAllocation.НайтиСтроки(СтруктураПоискаBatch);
			Если СтрокиBatchAllocation.Количество() = 0 Тогда
				ТекBatchAllocation = СоздатьBatchAllocation(ТранзакцияOracleОбъект);
				НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
				НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
				НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
				НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
				НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
				НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
				НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
				НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
				НоваяСтрокаКэша.BatchAllocation = ТекBatchAllocation;
			Иначе
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, СтрокиBatchAllocation[0].BatchAllocation);
			КонецЕсли;
			
			//ДокументРасчетов = ПолучитьДокументРасчетов(ТранзакцияOracleОбъект.DocNumber2);
			ДокументРасчетов = ПолучитьИнвойс(ТранзакцияOracleОбъект.LineID, ТранзакцияOracleОбъект.Source);
			Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.Invoice") Тогда
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокументРасчетов);
			Иначе
				//НайденаОшибка = Истина;
				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Invoice for transaction " + ТранзакцияOracleОбъект.Номер;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
КонецФункции

Процедура ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект)
	
	ТранзакцияOracleОбъект1 = ТранзакцияOracleОбъект.Ссылка.ПолучитьОбъект();
	ТранзакцияOracleОбъект1.Amount = 0;
	ТранзакцияOracleОбъект1.BaseAmount = 0;
	ТранзакцияOracleОбъект1.ОбменДанными.Загрузка = Истина;
	ТранзакцияOracleОбъект1.Записать();
	
КонецПроцедуры

Функция ПолучитьИнвойс(DocID, Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.DocID = &DocID
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.Source = &Source";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Функция ПолучитьCashBatch(DocID, Source, Prepayment)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CashBatch.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|ГДЕ
		|	CashBatch.DocID = &DocID
		|	И НЕ CashBatch.ПометкаУдаления
		|	И CashBatch.Source = &Source
		|	И CashBatch.Prepayment = &Prepayment";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	Запрос.УстановитьПараметр("Prepayment", Prepayment);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Процедура ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, ТипОбъекта, СвязанныйОбъект)
	
	НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	НЗ.Отбор.ПроводкаDSS.Установить(ТранзакцияOracleОбъект.Ссылка);
	НЗ.Отбор.ТипСвязанногоОбъекта.Установить(ТипОбъекта);
	НоваяЗапись = НЗ.Добавить();
	НоваяЗапись.ПроводкаDSS = ТранзакцияOracleОбъект.Ссылка;
	НоваяЗапись.ТипСвязанногоОбъекта = ТипОбъекта;
	НоваяЗапись.СвязанныйОбъект = СвязанныйОбъект;
	НЗ.Записать(Истина);
	
КонецПроцедуры

Функция СоздатьSalesOrder(ТранзакцияOracleОбъект)
	
	ДокОбъект = Документы.SalesOrder.СоздатьДокумент();
	ДокОбъект.Номер = ТранзакцияOracleОбъект.SONum;
	ДокОбъект.Дата = ТранзакцияOracleОбъект.SODate;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = ТекущаяДата();
	РучнаяКорректировкаОбъект.Source = ТранзакцияOracleОбъект.Source;
	РучнаяКорректировкаОбъект.Company = ТранзакцияOracleОбъект.Company;
	РучнаяКорректировкаОбъект.Client = ТранзакцияOracleОбъект.Client;
	РучнаяКорректировкаОбъект.Location = ТранзакцияOracleОбъект.Location;
	РучнаяКорректировкаОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	РучнаяКорректировкаОбъект.Account = ТранзакцияOracleОбъект.Account;
	РучнаяКорректировкаОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	РучнаяКорректировкаОбъект.Записать();
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, РучнаяКорректировкаОбъект.Ссылка);
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

Функция СоздатьИнвойс(ТранзакцияOracleОбъект)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Номер = Формат(ТранзакцияOracleОбъект.DocID, "ЧГ=0");
	// { RGS TAlmazova 10.08.2016 12:22:48 - запись только DocNumber
	//ДокОбъект.DocNumber = ?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2);
	ДокОбъект.DocNumber = ТранзакцияOracleОбъект.DocNumber;
	// } RGS TAlmazova 10.08.2016 12:23:03 - запись только DocNumber
	ДокОбъект.Дата = ТранзакцияOracleОбъект.InvDate;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияOracleОбъект.DocID;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ОбновитьSalesOrder(SalesOrder, Invoice)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(SalesOrder, "Invoice") = Invoice Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = SalesOrder.ПолучитьОбъект();
	ДокОбъект.Invoice = Invoice;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Функция СоздатьCashBatch(ТранзакцияOracleОбъект, Prepayment = Ложь)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	ДокОбъект.PaymentNumber = ТранзакцияOracleОбъект.DocNumber;
	ДокОбъект.Дата = ТранзакцияOracleОбъект.InvDate;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияOracleОбъект.DocID;
	ДокОбъект.Prepayment = Prepayment;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьBatchAllocation(ТранзакцияOracleОбъект)
	
	ДокОбъект = Документы.BatchAllocation.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьДокументРасчетов(НомерТранзакции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСвязанныеДокументы.СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранзакцияOracle КАК ТранзакцияOracle
		|		ПО DSSСвязанныеДокументы.ПроводкаDSS = ТранзакцияOracle.Ссылка
		|			И (ТранзакцияOracle.DocNumber = &DocNumber)
		|			И (НЕ ТранзакцияOracle.ПометкаУдаления)
		|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice))";
	
	Запрос.УстановитьПараметр("DocNumber", НомерТранзакции);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.СвязанныйОбъект;
	
КонецФункции

Функция СоздатьМемо(ТранзакцияOracleОбъект)
	
	ДокОбъект = Документы.Memo.СоздатьДокумент();
	ДокОбъект.Номер = ТранзакцияOracleОбъект.DocNumber;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Дата = ТранзакцияOracleОбъект.InvDate;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ DSSСформированныеПриЗагрузке.ИгнорироватьОбработку
		|	И НЕ DSSСформированныеПриЗагрузке.ОшибкаПриПоискеСвязанныхОбъектов";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТекстОшибок = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекДок = ВыборкаДетальныеЗаписи.ПроводкаDSS.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибок) Тогда
		ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибок);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

#КонецЕсли
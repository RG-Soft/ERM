#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗагрузитьДанныеИзФайла(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
	ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
	ТекстОшибки = "";
	
	//разные алгоритмы считывания файлов для MI и Smith  так как разные форматы данных (xslb и txt)
	Если СтруктураПараметров.ИмяРегистра = "OracleSourceData" Тогда
	//Если Истина Тогда
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsb");
		ФайлЭксель = СтруктураПараметров.ИсточникДанных.Получить();
		ФайлЭксель.Записать(ПутьКФайлу);
		
		УдалитьШапкуФайла(ПутьКФайлу, СтруктураПараметров);
		
		rgsЗагрузкаИзExcel.ВыгрузитьЭксельВТаблицуДанныхПоИменамКолонок(ПутьКФайлу, ТаблицаДанных, ДанныеДляЗаполнения, АдресХранилища, СтруктураПараметров);
		
	Иначе
		ФайлДанных = СтруктураПараметров.ИсточникДанных.Получить();
		
		ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
		СоздатьКаталог(ИмяКаталога);
		ПутьКФайлу = ИмяКаталога + "\DSS.txt";
		ФайлДанных.Записать(ПутьКФайлу);
		
		ПутьСхемы = ИмяКаталога+"\schema.ini";
		ФайлСхемы = Новый ТекстовыйДокумент;
		//ФайлСхемы.ДобавитьСтроку("["+ "DSS.txt" +"]" + Символы.ПС + "DecimalSymbol=." + Символы.ПС + "Format=Delimited(|)" + Символы.ПС + "Col9=business_line Text");
		ФайлСхемы.УстановитьТекст(Документы.ЗагрузкаДанныхOracle.ПолучитьМакет("SmithSchema").ПолучитьТекст());

		ФайлСхемы.Записать(ПутьСхемы, КодировкаТекста.OEM);
		
		Connection = Новый COMОбъект("ADODB.Connection");
		
		Попытка
			СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;MAXSCANROWS=0;""";
			Connection.Open(СтрокаПодключения);
		Исключение
			Попытка
				СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяКаталога + ";Extended Properties=""text;HDR=NO;IMEX=1;MAXSCANROWS=0;""";
				Connection.Open(СтрокаПодключения);
			Исключение
				ВызватьИсключение "Can't open connection! " + ОписаниеОшибки();
			КонецПопытки;		
		КонецПопытки;
		
		rs = Новый COMObject("ADODB.RecordSet");
		
		Стр_SQL = "Select * FROM DSS.txt";
		rs.Open(Стр_SQL, Connection);
		
		//СтруктураКолонок = СтруктураПараметров.СтруктураКолонок;
		СоответствиеКолонок = Новый Соответствие;
		Для каждого ЭлементСтруктурыКолонок Из СтруктураКолонок Цикл
			СоответствиеКолонок.Вставить(ЭлементСтруктурыКолонок.ИмяПоля, ЭлементСтруктурыКолонок.ИмяКолонки);
		КонецЦикла;
		
		//ТаблицаДанных = ИнициализироватьТаблицуДанных(СтруктураКолонок);
		
		rs.MoveFirst();
		
		ТекНомерСтроки = 2;
		ТипСтрока = Тип("Строка");
		ТипЧисло = Тип("Число");
		МетаданныеРесурсов = Метаданные.РегистрыСведений[СтруктураПараметров.ИмяРегистра].Ресурсы;
		
		Пока rs.EOF() = 0 Цикл
			
			СтрокаДанных = ТаблицаДанных.Добавить();
			
			СтрокаДанных.СтрокаФайла = ТекНомерСтроки;
		
			Для каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
				
				Попытка
					ТекЗначение = rs.Fields(ЭлементСоответствия.Ключ).Value;
					Если МетаданныеРесурсов[ЭлементСоответствия.Ключ].Тип.СодержитТип(ТипСтрока)
						И НЕ МетаданныеРесурсов[ЭлементСоответствия.Ключ].Тип.СодержитТип(ТипЧисло) 
						И ТипЗнч(ТекЗначение) = Тип("Число") Тогда
						ТекЗначение = Формат(ТекЗначение, "ЧДЦ=0; ЧГ=0");
					ИначеЕсли ТипЗнч(ТекЗначение) = Тип("Строка") Тогда
						ТекЗначение = СокрЛП(ТекЗначение);
					КонецЕсли;
					СтрокаДанных[ЭлементСоответствия.Ключ] = ТекЗначение;
					//ТекЗначение = rs.Fields(ЭлементСоответствия.Значение).Value;
					//Если ЭлементСоответствия.Значение = "ArInvoice" и rs.Fields("System").Value <> "GL" И ТекЗначение = Null Тогда
					//	ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", "The column ""ArInvoice"" is not filled. Check the downloaded data.");
					//	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
					//	Возврат;
					//КонецЕсли;
				Исключение
					ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ОписаниеОшибки());
					ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
					Возврат;
				КонецПопытки;
				
				//Если ТипЗнч(ТекЗначение) = ТипЗнч("Строка") Тогда
				//	СтрокаДанных[ЭлементСоответствия.Ключ] = СокрЛП(ТекЗначение);
				//ИначеЕсли ЭлементСоответствия.Значение = "hfm_account" или ЭлементСоответствия.Значение = "major" ИЛИ ЭлементСоответствия.Значение = "hfm_account"
				//	ИЛИ ЭлементСоответствия.Значение = "hfm_account" ИЛИ ЭлементСоответствия.Значение = "hfm_account" Тогда
				//	СтрокаДанных[ЭлементСоответствия.Ключ] = Строка(СтрЗаменить(ТекЗначение," ",""));
				//КонецЕсли;
				
			КонецЦикла;
			
			rs.MoveNext();
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		КонецЦикла;
		
		rs.Close();
		Connection.Close();
		
		УдалитьФайлы(ИмяКаталога);
	КонецЕсли;
	
	ЗагрузитьИЗаписатьДвижения(СтруктураПараметров.Ссылка, СтруктураПараметров.Дата, ТаблицаДанных, СтруктураПараметров.ИмяРегистра);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура УдалитьШапкуФайла(ПутьКФайлу, СтруктураПараметров)
	
	ЭкземплярExcel = Новый COMОбъект("Excel.Application");
	Книга = ЭкземплярExcel.Application.Workbooks.Open(ПутьКФайлу);
	
	ИмяЛиста = СтруктураПараметров.ЛистФайла;
	Если Прав(ИмяЛиста, 1) = "$" Тогда
		ИмяЛиста = Лев(ИмяЛиста, СтрДлина(ИмяЛиста) - 1);
	КонецЕсли;
	
	Лист = ЭкземплярExcel.Worksheets(ИмяЛиста);
	
	// в качестве ориентиров будем использовать колонки SOURCE_SYSTEM, GL_ACCOUNT, ID_ORIG
	НомерСтрокиЗаголовка = 1;
	
	Для ТекНомерСтроки = 1 По 100 Цикл
		
		НайденаSourceSystem = Ложь;
		НайденаGlAccount = Ложь;
		НайденаIdOrig = Ложь;
		
		Для ТекНомерСтолбца = 1 По 100 Цикл
			
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "SOURCE_SYSTEM" Тогда
				НайденаSourceSystem = Истина;
			КонецЕсли;
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "GL_ACCOUNT" Тогда
				НайденаGlAccount = Истина;
			КонецЕсли;
			Если Лист.Cells(ТекНомерСтроки, ТекНомерСтолбца).Value = "ID_ORIG" Тогда
				НайденаIdOrig = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденаSourceSystem И НайденаGlAccount И НайденаIdOrig Тогда
			НомерСтрокиЗаголовка = ТекНомерСтроки;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерСтрокиЗаголовка > 1 Тогда
		
		СтрокиДляУдаления = Лист.Rows("1:" + Строка(НомерСтрокиЗаголовка - 1));
		СтрокиДляУдаления.Delete();
		//Книга.SaveAs(ПутьКФайлу);
		Книга.Save();
		
	КонецЕсли;
	
	ЭкземплярExcel.Quit();
	ЭкземплярExcel = Неопределено;
	
КонецПроцедуры

Функция ПолучитьСтруктуруКолонокТаблицыДанных(Source = Неопределено) Экспорт
	
	Если Source = Неопределено Тогда
		Source = Перечисления.ТипыСоответствий.OracleMI;
	КонецЕсли;
	
	СтруктураКолонок = Новый ТаблицаЗначений;
	СтруктураКолонок.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	СтруктураКолонок.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	
	Если Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		ПолучитьСтруктуруКолонокТаблицыДанныхMI(СтруктураКолонок);
	Иначе
		ПолучитьСтруктуруКолонокТаблицыДанныхSmith(СтруктураКолонок);
	КонецЕсли;
	
	Возврат СтруктураКолонок;
	
КонецФункции

Функция ПолучитьСтруктуруКолонокТаблицыДанныхMI(СтруктураКолонок)
	
	// SOURCE_SYSTEM
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SOURCE_SYSTEM";
	СтрокаТЗ.ИмяКолонки = "SOURCE_SYSTEM";
	СтрокаТЗ.Обязательная = Истина;
	//СтрокаТЗ.НомерКолонки = 1;
	
	// OU
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "OU";
	СтрокаТЗ.ИмяКолонки = "OU";
	СтрокаТЗ.Обязательная = Истина;
	
	// Journal
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GL_SOURCE";
	СтрокаТЗ.ИмяКолонки = "GL_SOURCE";
	СтрокаТЗ.Обязательная = Истина;
	
	// GL_DATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GL_DATE";
	СтрокаТЗ.ИмяКолонки = "GL_DATE";
	СтрокаТЗ.Обязательная = Истина;
	
	// CURRENCY_CODE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CURRENCY_CODE";
	СтрокаТЗ.ИмяКолонки = "CURRENCY_CODE";
	СтрокаТЗ.Обязательная = Истина;
	
	// EXCHANGE_RATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "EXCHANGE_RATE";
	СтрокаТЗ.ИмяКолонки = "EXCHANGE_RATE";
	СтрокаТЗ.Обязательная = Истина;
	
	// GL_ACCOUNT
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "GL_ACCOUNT";
	СтрокаТЗ.ИмяКолонки = "GL_ACCOUNT";
	СтрокаТЗ.Обязательная = Истина;
	
	// CUSTOMER_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CUSTOMER_ID";
	СтрокаТЗ.ИмяКолонки = "CUSTOMER_ID";
	СтрокаТЗ.Обязательная = Истина;
	
	// CUSTOMER_NUMBER
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CUSTOMER_NUMBER";
	СтрокаТЗ.ИмяКолонки = "CUSTOMER_NUMBER";
	СтрокаТЗ.Обязательная = Истина;
	
	// CUSTOMER_NAME
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CUSTOMER_NAME";
	СтрокаТЗ.ИмяКолонки = "CUSTOMER_NAME";
	СтрокаТЗ.Обязательная = Истина;
	
	// CONTRACT_NAME
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CONTRACT_NAME";
	СтрокаТЗ.ИмяКолонки = "CONTRACT_NAME";
	СтрокаТЗ.Обязательная = Истина;
	
	// ENTERED
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ENTERED";
	СтрокаТЗ.ИмяКолонки = "ENTERED";
	СтрокаТЗ.Обязательная = Истина;
	
	// ACCOUNTED
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ACCOUNTED";
	СтрокаТЗ.ИмяКолонки = "ACCOUNTED";
	СтрокаТЗ.Обязательная = Истина;
	
	// DOC_TYPE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_TYPE";
	СтрокаТЗ.ИмяКолонки = "DOC_TYPE";
	СтрокаТЗ.Обязательная = Истина;
	
	// DESCRIPTION
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DESCRIPTION";
	СтрокаТЗ.ИмяКолонки = "DESCRIPTION";
	СтрокаТЗ.Обязательная = Истина;
	
	// DOC_NUMBER
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_NUMBER";
	СтрокаТЗ.ИмяКолонки = "DOC_NUMBER";
	СтрокаТЗ.Обязательная = Истина;
	
	// DOC_NUMBER_2
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_NUMBER_2";
	СтрокаТЗ.ИмяКолонки = "DOC_NUMBER_2";
	СтрокаТЗ.Обязательная = Истина;
	
	// TRANS_TYPE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TRANS_TYPE";
	СтрокаТЗ.ИмяКолонки = "TRANS_TYPE";
	СтрокаТЗ.Обязательная = Истина;
	
	// INV_DATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INV_DATE";
	СтрокаТЗ.ИмяКолонки = "INV_DATE";
	СтрокаТЗ.Обязательная = Истина;
	
	// LINE_TYPE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LINE_TYPE";
	СтрокаТЗ.ИмяКолонки = "LINE_TYPE";
	СтрокаТЗ.Обязательная = Истина;
	
	// SALESPERSON
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SALESPERSON";
	СтрокаТЗ.ИмяКолонки = "SALESPERSON";
	СтрокаТЗ.Обязательная = Истина;
	
	// DUE_DATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DUE_DATE";
	СтрокаТЗ.ИмяКолонки = "DUE_DATE";
	СтрокаТЗ.Обязательная = Истина;
	
	// TAX_RATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "TAX_RATE";
	СтрокаТЗ.ИмяКолонки = "TAX_RATE";
	СтрокаТЗ.Обязательная = Истина;
	
	// ORIGINAL_TRX_NUMBER
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ORIGINAL_TRX_NUMBER";
	СтрокаТЗ.ИмяКолонки = "ORIGINAL_TRX_NUMBER";
	СтрокаТЗ.Обязательная = Истина;
	
	// PO_NUMBER
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PO_NUMBER";
	СтрокаТЗ.ИмяКолонки = "PO_NUMBER";
	СтрокаТЗ.Обязательная = Истина;
	
	// SO_NUM
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SO_NUM";
	СтрокаТЗ.ИмяКолонки = "SO_NUM";
	СтрокаТЗ.Обязательная = Истина;
	
	// SO_DATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SO_DATE";
	СтрокаТЗ.ИмяКолонки = "SO_DATE";
	СтрокаТЗ.Обязательная = Истина;
	
	// SHIP_DATE_ACTUAL
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SHIP_DATE_ACTUAL";
	СтрокаТЗ.ИмяКолонки = "SHIP_DATE_ACTUAL";
	СтрокаТЗ.Обязательная = Истина;
	
	// ITEM_NO
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ITEM_NO";
	СтрокаТЗ.ИмяКолонки = "ITEM_NO";
	
	// ITEM_DESC
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ITEM_DESC";
	СтрокаТЗ.ИмяКолонки = "ITEM_DESC";
	
	// PRICE_UNIT
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "PRICE_UNIT";
	СтрокаТЗ.ИмяКолонки = "PRICE_UNIT";
	СтрокаТЗ.Обязательная = Истина;
	
	// SHIPPED_QUANTITY
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SHIPPED_QUANTITY";
	СтрокаТЗ.ИмяКолонки = "SHIPPED_QUANTITY";
	СтрокаТЗ.Обязательная = Истина;
	
	// RECEIPT_AMOUNT
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "RECEIPT_AMOUNT";
	СтрокаТЗ.ИмяКолонки = "RECEIPT_AMOUNT";
	СтрокаТЗ.Обязательная = Истина;
	
	// CREATION_DATE
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CREATION_DATE";
	СтрокаТЗ.ИмяКолонки = "CREATION_DATE";
	СтрокаТЗ.Обязательная = Истина;
	
	// CREATED_BY
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CREATED_BY";
	СтрокаТЗ.ИмяКолонки = "CREATED_BY";
	СтрокаТЗ.Обязательная = Истина;
	
	// CREATED_BY_NAME
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "CREATED_BY_NAME";
	СтрокаТЗ.ИмяКолонки = "CREATED_BY_NAME";
	СтрокаТЗ.Обязательная = Истина;
	
	// BILL_SITE_NAME
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BILL_SITE_NAME";
	СтрокаТЗ.ИмяКолонки = "BILL_SITE_NAME";
	СтрокаТЗ.Обязательная = Истина;
	
	// BILL_SITE_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "BILL_SITE_ID";
	СтрокаТЗ.ИмяКолонки = "BILL_SITE_ID";
	СтрокаТЗ.Обязательная = Истина;
	
	// SHIP_SITE_NAME
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SHIP_SITE_NAME";
	СтрокаТЗ.ИмяКолонки = "SHIP_SITE_NAME";
	СтрокаТЗ.Обязательная = Истина;
	
	// SHIP_SITE_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "SHIP_SITE_ID";
	СтрокаТЗ.ИмяКолонки = "SHIP_SITE_ID";
	СтрокаТЗ.Обязательная = Истина;
	
	// DOC_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_ID";
	СтрокаТЗ.ИмяКолонки = "DOC_ID";
	СтрокаТЗ.Обязательная = Истина;
	
	// LINE_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "LINE_ID";
	СтрокаТЗ.ИмяКолонки = "LINE_ID";
	СтрокаТЗ.Обязательная = Истина;
	
	// DOC_TRANS_ID
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "DOC_TRANS_ID";
	СтрокаТЗ.ИмяКолонки = "DOC_TRANS_ID";
	СтрокаТЗ.Обязательная = Истина;
	
	// ID_ORIG
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "ID_ORIG";
	СтрокаТЗ.ИмяКолонки = "ID_ORIG";
	СтрокаТЗ.Обязательная = Истина;
	
	// HFM_ACCOUNT
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "HFM_ACCOUNT";
	СтрокаТЗ.ИмяКолонки = "HFM Account";
	СтрокаТЗ.Обязательная = Истина;
	
	// INVOICE_NUMBER_SAM
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INVOICE_NUMBER_SAM";
	СтрокаТЗ.ИмяКолонки = "Invoice Number (SAM)";
	СтрокаТЗ.Обязательная = Истина;
	
	// INVOICE_AMOUNT
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "INVOICE_AMOUNT";
	СтрокаТЗ.ИмяКолонки = "Invoice Amount";
	СтрокаТЗ.Обязательная = Истина;
	
КонецФункции

Функция ПолучитьСтруктуруКолонокТаблицыДанныхSmith(СтруктураКолонок)
	
	// psob_id
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "psob_id";
	СтрокаТЗ.ИмяКолонки = "psob_id";
	СтрокаТЗ.Обязательная = Истина;
	
	// source
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "source";
	СтрокаТЗ.ИмяКолонки = "source";
	СтрокаТЗ.Обязательная = Истина;
	
	// category
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "category";
	СтрокаТЗ.ИмяКолонки = "category";
	СтрокаТЗ.Обязательная = Истина;
	
	// batch_name
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "batch_name";
	СтрокаТЗ.ИмяКолонки = "batch_name";
	СтрокаТЗ.Обязательная = Истина;
	
	// je_name
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "je_name";
	СтрокаТЗ.ИмяКолонки = "je_name";
	СтрокаТЗ.Обязательная = Истина;
	
	// je_line_num
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "je_line_num";
	СтрокаТЗ.ИмяКолонки = "je_line_num";
	СтрокаТЗ.Обязательная = Истина;
	
	// company_code
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "company_code";
	СтрокаТЗ.ИмяКолонки = "company_code";
	СтрокаТЗ.Обязательная = Истина;
	
	// company_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "company_desc";
	СтрокаТЗ.ИмяКолонки = "company_desc";
	СтрокаТЗ.Обязательная = Истина;
	
	// business_line
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "business_line";
	СтрокаТЗ.ИмяКолонки = "business_line";
	СтрокаТЗ.Обязательная = Истина;
	
	// business_line_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "business_line_desc";
	СтрокаТЗ.ИмяКолонки = "business_line_desc";
	СтрокаТЗ.Обязательная = Истина;
	
	// cost_center
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "cost_center";
	СтрокаТЗ.ИмяКолонки = "cost_center";
	СтрокаТЗ.Обязательная = Истина;
	
	// cost_center_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "cost_center_desc";
	СтрокаТЗ.ИмяКолонки = "cost_center_desc";
	СтрокаТЗ.Обязательная = Истина;
	
	// major
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "major";
	СтрокаТЗ.ИмяКолонки = "major";
	СтрокаТЗ.Обязательная = Истина;
	
	// major_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "major_desc";
	СтрокаТЗ.ИмяКолонки = "major_desc";
	СтрокаТЗ.Обязательная = Истина;
	
	// minor
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "minor";
	СтрокаТЗ.ИмяКолонки = "minor";
	СтрокаТЗ.Обязательная = Истина;
	
	// minor_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "minor_desc";
	СтрокаТЗ.ИмяКолонки = "minor_desc";
	СтрокаТЗ.Обязательная = Истина;
	
	// intercompany
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "intercompany";
	СтрокаТЗ.ИмяКолонки = "intercompany";
	СтрокаТЗ.Обязательная = Истина;
	
	// intercompany_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "intercompany_desc";
	СтрокаТЗ.ИмяКолонки = "intercompany_desc";
	СтрокаТЗ.Обязательная = Истина;
	
	// local
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "local";
	СтрокаТЗ.ИмяКолонки = "local";
	СтрокаТЗ.Обязательная = Истина;
	
	// local_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "local_desc";
	СтрокаТЗ.ИмяКолонки = "local_desc";
	СтрокаТЗ.Обязательная = Истина;
	
	// hfm_account
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "hfm_account";
	СтрокаТЗ.ИмяКолонки = "hfm_account";
	СтрокаТЗ.Обязательная = Истина;
	
	// hfm_account_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "hfm_account_desc";
	СтрокаТЗ.ИмяКолонки = "hfm_account_desc";
	СтрокаТЗ.Обязательная = Истина;
	
	// gl_date
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "gl_date";
	СтрокаТЗ.ИмяКолонки = "gl_date";
	СтрокаТЗ.Обязательная = Истина;
	
	// currency
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "entered_currency";
	СтрокаТЗ.ИмяКолонки = "entered_currency";
	СтрокаТЗ.Обязательная = Истина;
	
	// exch_rate
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "exch_rate";
	СтрокаТЗ.ИмяКолонки = "exch_rate";
	СтрокаТЗ.Обязательная = Истина;
	
	// cust_no
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "cust_no";
	СтрокаТЗ.ИмяКолонки = "cust_no";
	СтрокаТЗ.Обязательная = Истина;
	
	// customer_name
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "customer_name";
	СтрокаТЗ.ИмяКолонки = "customer_name";
	СтрокаТЗ.Обязательная = Истина;
	
	// entered_amt
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "entered_amt";
	СтрокаТЗ.ИмяКолонки = "entered_amt";
	СтрокаТЗ.Обязательная = Истина;
	
	// rsob_amt
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "rsob_amt";
	СтрокаТЗ.ИмяКолонки = "rsob_amt";
	СтрокаТЗ.Обязательная = Истина;
	
	// sub_ledger_source
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "sub_ledger_source";
	СтрокаТЗ.ИмяКолонки = "sub_ledger_source";
	СтрокаТЗ.Обязательная = Истина;
	
	// master_source_document_number
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "master_source_document_number";
	СтрокаТЗ.ИмяКолонки = "master_source_document_number";
	СтрокаТЗ.Обязательная = Истина;
	
	// account_type
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "account_type";
	СтрокаТЗ.ИмяКолонки = "account_type";
	СтрокаТЗ.Обязательная = Истина;
	
	
	// line_desc
	СтрокаТЗ = СтруктураКолонок.Добавить();
	СтрокаТЗ.ИмяПоля = "line_desc";
	СтрокаТЗ.ИмяКолонки = "line_desc";
	СтрокаТЗ.Обязательная = Истина;

	
КонецФункции

Функция ИнициализироватьТаблицуДанных(СтруктураКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого ТекСтрокаСтруктурыКолонок Из СтруктураКолонок Цикл
		ТаблицаДанных.Колонки.Добавить(ТекСтрокаСтруктурыКолонок.ИмяПоля);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("СтрокаФайла", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьИЗаписатьДвижения(Ссылка, ДатаДокумента, ТаблицаДанных, ИмяРегистра)
	
	ТаблицаДанных.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанных.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	
	Если ИмяРегистра = "OracleSmithSourceData" Тогда
		Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			Если СтрДлина(СтрокаТаблицы.business_line) < 3 Тогда
				СтрокаТаблицы.business_line = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаТаблицы.business_line, 3, "0", "Слева");
			КонецЕсли;
			Если СтрДлина(СтрокаТаблицы.minor) < 3 Тогда
				СтрокаТаблицы.minor = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаТаблицы.minor, 3, "0", "Слева");
			КонецЕсли;
			Если СтрДлина(СтрокаТаблицы.intercompany) < 4 Тогда
				СтрокаТаблицы.intercompany = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаТаблицы.minor, 4, "0", "Слева");
			КонецЕсли;
			Если СтрДлина(СтрокаТаблицы.local) < 6 Тогда
				СтрокаТаблицы.local = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаТаблицы.minor, 6, "0", "Слева");
			КонецЕсли;
			Если СтрДлина(СтрокаТаблицы.cost_center) < 6 Тогда
				СтрокаТаблицы.cost_center = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаТаблицы.cost_center, 6, "0", "Слева");
			КонецЕсли;
			Если СтрокаТаблицы.company_code = "E100" Тогда
				СтрокаТаблицы.company_code = "100";
			ИначеЕсли СтрНайти(СтрокаТаблицы.company_code, "E") <> 0 Тогда
				СтрокаТаблицы.company_code = "0";
			КонецЕсли;
			СтрокаТаблицы.company_code = Число(СтрокаТаблицы.company_code);
		КонецЦикла;
	КонецЕсли;
	
	НЗ = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанных);
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 14.07.2016 19:30:40 - установка статуса документа
	ДокументЗагрузки = Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.LoadedSourseData;
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 19:30:45 - установка статуса документа
	
КонецПроцедуры

Процедура ВыполнитьПроверкуНастроекСинхронизации(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	
	Если СтруктураПараметров.ТипВнешнейСистемы = Перечисления.ТипыСоответствий.OracleMI Тогда
		СоздатьНедостающиеСчетаMI(СтруктураПараметров.Ссылка);
		Запрос.Текст = ПолучитьТекстЗапросаДляПроверкиНастроекСинхронизацииMI();
	Иначе
		СоздатьНедостающиеСчетаSmith(СтруктураПараметров.Ссылка);
		Запрос.Текст = ПолучитьТекстЗапросаДляПроверкиНастроекСинхронизацииSmith();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаКоллизий = МассивРезультатов[1].Выгрузить();
	
	ВыборкаСегментов = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаСегментов.Следующий() Цикл
		
		// { RGS TAlmazova 26.02.2018 11:49:06 - базовые элементы заполняются отдельным регламентом
		//Если ВыборкаСегментов.БазовыйЭлемент.Пустая() Тогда
		// } RGS TAlmazova 26.02.2018 11:49:07 - базовые элементы заполняются отдельным регламентом
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = СтруктураПараметров.ТипВнешнейСистемы;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Segment;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаСегментов.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаСегментов.Код;
			
		// { RGS TAlmazova 26.02.2018 11:49:27 - базовые элементы заполняются отдельным регламентом
		//Иначе
		//	
		//	ТекОбъект = ВыборкаСегментов.Ссылка.ПолучитьОбъект();
		//	ТекОбъект.БазовыйЭлемент = ВыборкаСегментов.БазовыйЭлемент;
		//	ТекОбъект.Записать();
		//	
		//КонецЕсли;
		// } RGS TAlmazova 26.02.2018 11:49:29 - базовые элементы заполняются отдельным регламентом
		
	КонецЦикла;
	
	// локации
	ВыборкаЛокаций = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаЛокаций.Следующий() Цикл
		
		// { RGS TAlmazova 26.02.2018 11:49:52 - базовые элементы заполняются отдельным регламентом
		//Если НЕ ВыборкаЛокаций.БазовыйЭлемент.Пустая() Тогда
		//	
		//	ТекОбъект = ВыборкаЛокаций.Ссылка.ПолучитьОбъект();
		//	ТекОбъект.БазовыйЭлемент = ВыборкаЛокаций.БазовыйЭлемент;
		//	ТекОбъект.Записать();
		//	
		//Иначе
		// } RGS TAlmazova 26.02.2018 11:49:53 - базовые элементы заполняются отдельным регламентом
			
			СтрокаКоллизии = ТаблицаКоллизий.Добавить();
			СтрокаКоллизии.КоллизияОтработана = Ложь;
			СтрокаКоллизии.Описание = "Not specified base element";
			СтрокаКоллизии.ТипСоответствия = СтруктураПараметров.ТипВнешнейСистемы;
			СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Location;
			СтрокаКоллизии.ОбъектПриемника = ВыборкаЛокаций.Ссылка;
			СтрокаКоллизии.Идентификатор = ВыборкаЛокаций.Код;
			
		// { RGS TAlmazova 26.02.2018 11:50:59 - базовые элементы заполняются отдельным регламентом
		//КонецЕсли;
		// } RGS TAlmazova 26.02.2018 11:51:00 - базовые элементы заполняются отдельным регламентом
		
	КонецЦикла;
	
	// счета
	ВыборкаСчетов = МассивРезультатов[4].Выбрать();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = СтруктураПараметров.ТипВнешнейСистемы;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Account;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаСчетов.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаСчетов.Код;
		
	КонецЦикла;
	
	// организации
	ВыборкаКомпаний = МассивРезультатов[5].Выбрать();
	
	Пока ВыборкаКомпаний.Следующий() Цикл
		
		СтрокаКоллизии = ТаблицаКоллизий.Добавить();
		СтрокаКоллизии.КоллизияОтработана = Ложь;
		СтрокаКоллизии.Описание = "Not specified base element";
		СтрокаКоллизии.ТипСоответствия = СтруктураПараметров.ТипВнешнейСистемы;
		СтрокаКоллизии.ТипОбъектаВнешнейСистемы = Перечисления.ТипыОбъектовВнешнихСистем.Company;
		СтрокаКоллизии.ОбъектПриемника = ВыборкаКомпаний.Ссылка;
		СтрокаКоллизии.Идентификатор = ВыборкаКомпаний.Код;
		
	КонецЦикла;
	
	Если ТаблицаКоллизий.Количество() = 0 Тогда
		ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
		ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CheckedConflicts;
		ДокументЗагрузки.Записать();
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаКоллизий", ТаблицаКоллизий);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура СоздатьНедостающиеСчетаMI(ДокументЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 17, 4) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 22, 3) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 26, 4) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 6, 3) КАК Account,
		|	OracleSourceData.HFM_ACCOUNT
		|ПОМЕСТИТЬ ВТ_СчетаИзФайла
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|ГДЕ
		|	OracleSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Account
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СчетаИзФайла.Account КАК КодСчета,
		|	ЕСТЬNULL(Oracle.Ссылка, ЗНАЧЕНИЕ(ПланСчетов.Oracle.ПустаяСсылка)) КАК Счет,
		|	ЕСТЬNULL(HFM_GL_Accounts.Ссылка, ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)) КАК СчетHFM
		|ИЗ
		|	ВТ_СчетаИзФайла КАК ВТ_СчетаИзФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_СчетаИзФайла.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.HFM_GL_Accounts КАК HFM_GL_Accounts
		|		ПО ВТ_СчетаИзФайла.HFM_ACCOUNT = HFM_GL_Accounts.Код
		|			И (НЕ HFM_GL_Accounts.ПометкаУдаления)
		|ГДЕ
		|	(Oracle.Ссылка ЕСТЬ NULL
		|			ИЛИ Oracle.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка))";
		
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументЗагрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Счет) Тогда
			
			НовыйСчет = ПланыСчетов.Oracle.СоздатьСчет();
			НовыйСчет.Код = Выборка.КодСчета;
			НовыйСчет.Наименование = Выборка.КодСчета;
			НовыйСчет.БазовыйЭлемент = Выборка.СчетHFM;
			НовыйСчет.Записать();
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СчетHFM) Тогда
			
			СчетОбъект = Выборка.Счет.ПолучитьОбъект();
			СчетОбъект.БазовыйЭлемент = Выборка.СчетHFM;
			СчетОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНедостающиеСчетаSmith(ДокументЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	OracleSmithSourceData.major + ""."" + OracleSmithSourceData.minor + ""."" + OracleSmithSourceData.intercompany + ""."" + OracleSmithSourceData.business_line КАК Account,
		|	OracleSmithSourceData.hfm_account
		|ПОМЕСТИТЬ ВТ_СчетаИзФайла
		|ИЗ
		|	РегистрСведений.OracleSmithSourceData КАК OracleSmithSourceData
		|ГДЕ
		|	OracleSmithSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Account
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СчетаИзФайла.Account КАК КодСчета,
		|	ЕСТЬNULL(Oracle.Ссылка, ЗНАЧЕНИЕ(ПланСчетов.Oracle.ПустаяСсылка)) КАК Счет,
		|	ЕСТЬNULL(HFM_GL_Accounts.Ссылка, ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)) КАК СчетHFM
		|ИЗ
		|	ВТ_СчетаИзФайла КАК ВТ_СчетаИзФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_СчетаИзФайла.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.HFM_GL_Accounts КАК HFM_GL_Accounts
		|		ПО ВТ_СчетаИзФайла.hfm_account = HFM_GL_Accounts.Код
		|			И (НЕ HFM_GL_Accounts.ПометкаУдаления)
		|ГДЕ
		|	(Oracle.Ссылка ЕСТЬ NULL
		|			ИЛИ Oracle.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка))";
		
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументЗагрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Счет) Тогда
			
			НовыйСчет = ПланыСчетов.Oracle.СоздатьСчет();
			НовыйСчет.Код = Выборка.КодСчета;
			НовыйСчет.Наименование = Выборка.КодСчета;
			НовыйСчет.БазовыйЭлемент = Выборка.СчетHFM;
			НовыйСчет.Записать();
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СчетHFM) Тогда
			
			СчетОбъект = Выборка.Счет.ПолучитьОбъект();
			СчетОбъект.БазовыйЭлемент = Выборка.СчетHFM;
			СчетОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДляПроверкиНастроекСинхронизацииMI()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	OracleSourceData.SOURCE_SYSTEM,
		|	OracleSourceData.OU,
		|	OracleSourceData.GL_SOURCE,
		|	OracleSourceData.GL_DATE,
		|	OracleSourceData.CURRENCY_CODE,
		|	OracleSourceData.EXCHANGE_RATE,
		|	OracleSourceData.GL_ACCOUNT,
		|	OracleSourceData.CUSTOMER_ID,
		|	OracleSourceData.CUSTOMER_NUMBER,
		|	OracleSourceData.CUSTOMER_NAME,
		|	OracleSourceData.CONTRACT_NAME,
		|	OracleSourceData.ENTERED,
		|	OracleSourceData.ACCOUNTED,
		|	OracleSourceData.DOC_TYPE,
		|	OracleSourceData.DESCRIPTION,
		|	OracleSourceData.DOC_NUMBER,
		|	OracleSourceData.DOC_NUMBER_2,
		|	OracleSourceData.TRANS_TYPE,
		|	OracleSourceData.INV_DATE,
		|	OracleSourceData.LINE_TYPE,
		|	OracleSourceData.SALESPERSON,
		|	OracleSourceData.DUE_DATE,
		|	OracleSourceData.TAX_RATE,
		|	OracleSourceData.ORIGINAL_TRX_NUMBER,
		|	OracleSourceData.PO_NUMBER,
		|	OracleSourceData.SO_NUM,
		|	OracleSourceData.SO_DATE,
		|	OracleSourceData.SHIP_DATE_ACTUAL,
		|	OracleSourceData.ITEM_NO,
		|	OracleSourceData.ITEM_DESC,
		|	OracleSourceData.PRICE_UNIT,
		|	OracleSourceData.SHIPPED_QUANTITY,
		|	OracleSourceData.RECEIPT_AMOUNT,
		|	OracleSourceData.CREATION_DATE,
		|	OracleSourceData.CREATED_BY,
		|	OracleSourceData.CREATED_BY_NAME,
		|	OracleSourceData.BILL_SITE_NAME,
		|	OracleSourceData.BILL_SITE_ID,
		|	OracleSourceData.SHIP_SITE_NAME,
		|	OracleSourceData.SHIP_SITE_ID,
		|	OracleSourceData.DOC_ID,
		|	OracleSourceData.LINE_ID,
		|	OracleSourceData.DOC_TRANS_ID,
		|	OracleSourceData.ID_ORIG,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 17, 4) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 22, 3) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 26, 4) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 6, 3) КАК Account,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 10, 6) КАК Location
		|ПОМЕСТИТЬ ВТ_OracleSourceData
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|ГДЕ
		|	OracleSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	ВТ_OracleSourceData.CURRENCY_CODE КАК Идентификатор
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_OracleSourceData.CURRENCY_CODE = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL 
		|	И НЕ ВТ_OracleSourceData.CURRENCY_CODE = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Oracle.ПустаяСсылка),
		|	ВТ_OracleSourceData.Account
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО (ВТ_OracleSourceData.Account = Oracle.Код)
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ВТ_OracleSourceData.OU
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И ВТ_OracleSourceData.OU = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ВТ_OracleSourceData.OU <> 0
		|	И Организации.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	ВТ_OracleSourceData.SubSubSegment
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И (ВТ_OracleSourceData.SubSubSegment = Сегменты.Код)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_OracleSourceData.Location
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ВТ_OracleSourceData.Location = ПодразделенияОрганизаций.Код)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	Сегменты.Код,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО Сегменты.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО (ПОДСТРОКА(ВТ_OracleSourceData.GL_ACCOUNT, 6, 3) = Сегменты.Код)
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО ПодразделенияОрганизаций.MgmtCountryCode = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО (ВТ_OracleSourceData.Location = ПодразделенияОрганизаций.Код)
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Oracle.Ссылка,
		|	Oracle.Код
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО (ВТ_OracleSourceData.Account = Oracle.Код)
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО OracleSourceData.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	OracleSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляПроверкиНастроекСинхронизацииSmith()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	OracleSmithSourceData.psob_id,
		|	OracleSmithSourceData.source,
		|	OracleSmithSourceData.category,
		|	OracleSmithSourceData.batch_name,
		|	OracleSmithSourceData.je_name,
		|	OracleSmithSourceData.je_line_num,
		|	OracleSmithSourceData.company_code КАК OU,
		|	OracleSmithSourceData.business_line КАК SubSubSegment,
		|	OracleSmithSourceData.cost_center КАК Location,
		|	OracleSmithSourceData.entered_currency КАК currency,
		|	OracleSmithSourceData.cust_no,
		|	OracleSmithSourceData.major + ""."" + OracleSmithSourceData.minor + ""."" + OracleSmithSourceData.intercompany + ""."" + OracleSmithSourceData.business_line КАК account
		|ПОМЕСТИТЬ ВТ_OracleSourceData
		|ИЗ
		|	РегистрСведений.OracleSmithSourceData КАК OracleSmithSourceData
		|ГДЕ
		|	OracleSmithSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И (OracleSmithSourceData.hfm_account ПОДОБНО ""120%""
		|			ИЛИ OracleSmithSourceData.major ПОДОБНО ""4%"")
		// { RGS TAlmazova 14.12.2017 12:40:27 - удаляем условие по Psob_id
		//|	И (OracleSmithSourceData.psob_id = 966
		//|			ИЛИ OracleSmithSourceData.psob_id = 2026
		//|			ИЛИ OracleSmithSourceData.psob_id = 2046)
		|	И OracleSmithSourceData.psob_id <> """"
		// } RGS TAlmazova 14.12.2017 12:40:45 - удаляем условие по Psob_id
		|	И OracleSmithSourceData.source <> """"
		|	И OracleSmithSourceData.category <> """"
		|	И OracleSmithSourceData.batch_name <> """"
		|	И OracleSmithSourceData.je_name <> """"
		|	И OracleSmithSourceData.company_code <> 0
		|	И OracleSmithSourceData.business_line <> """"
		|	И OracleSmithSourceData.cost_center <> """"
		|	И OracleSmithSourceData.major <> """"
		|	И (OracleSmithSourceData.source <> ""Receivables""
		|				И OracleSmithSourceData.source <> ""SO Accrual""
		|				И OracleSmithSourceData.source <> ""SAM Accrual""
		|			ИЛИ OracleSmithSourceData.cust_no <> """")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК КоллизияОтработана,
		|	""Specify the 1C object"" КАК Описание,
		|	&ТипВнешнейСистемы КАК ТипСоответствия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency) КАК ТипОбъектаВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ОбъектПриемника,
		|	ВТ_OracleSourceData.currency КАК Идентификатор
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|				&Период,
		|				ТипСоответствия = &ТипВнешнейСистемы
		|					И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)) КАК НастройкаСинхронизацииCurrency
		|		ПО ВТ_OracleSourceData.currency = НастройкаСинхронизацииCurrency.Идентификатор
		|ГДЕ
		|	НастройкаСинхронизацииCurrency.ОбъектПриемника ЕСТЬ NULL
		|	И НЕ ВТ_OracleSourceData.currency = """"""""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Account"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Account),
		|	ЗНАЧЕНИЕ(ПланСчетов.Oracle.ПустаяСсылка),
		|	ВТ_OracleSourceData.account
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_OracleSourceData.account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Company"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Company),
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ВТ_OracleSourceData.OU
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (НЕ Организации.ПометкаУдаления)
		|			И ВТ_OracleSourceData.OU = Организации.Код
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ВТ_OracleSourceData.OU <> 0
		|	И Организации.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Sub-Sub-Segment"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Segment),
		|	ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка),
		|	ВТ_OracleSourceData.SubSubSegment
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО (НЕ Сегменты.ПометкаУдаления)
		|			И ВТ_OracleSourceData.SubSubSegment = Сегменты.Код
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ,
		|	""Failed to find Location"",
		|	&ТипВнешнейСистемы,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Location),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ВТ_OracleSourceData.Location
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И ВТ_OracleSourceData.Location = ПодразделенияОрганизаций.Код
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сегменты.Ссылка,
		|	Сегменты.Код,
		|	ЕСТЬNULL(HFM_Technology.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Technology КАК HFM_Technology
		|			ПО Сегменты.Код = HFM_Technology.Код
		|				И (НЕ HFM_Technology.ПометкаУдаления)
		|		ПО ВТ_OracleSourceData.SubSubSegment = Сегменты.Код
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	Сегменты.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Technology.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ЕСТЬNULL(HFM_Locations.Ссылка, ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)) КАК БазовыйЭлемент
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.HFM_Locations КАК HFM_Locations
		|			ПО ПодразделенияОрганизаций.MgmtCountryCode = HFM_Locations.Код
		|				И (НЕ HFM_Locations.ПометкаУдаления)
		|		ПО ВТ_OracleSourceData.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	ПодразделенияОрганизаций.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Locations.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Oracle.Ссылка,
		|	Oracle.Код
		|ИЗ
		|	ВТ_OracleSourceData КАК ВТ_OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_OracleSourceData.account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|ГДЕ
		|	Oracle.БазовыйЭлемент = ЗНАЧЕНИЕ(ПланСчетов.HFM_GL_Accounts.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	Организации.Код
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО OracleSourceData.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|ГДЕ
		|	OracleSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И Организации.БазовыйЭлемент = ЗНАЧЕНИЕ(Справочник.HFM_Companies.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьПроводкиDSS(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если СтруктураПараметров.ТипВнешнейСистемы = Перечисления.ТипыСоответствий.OracleMI Тогда
		СформироватьПроводкиDSSMI(СтруктураПараметров, АдресХранилища);
	Иначе
		СформироватьПроводкиDSSSmith(СтруктураПараметров, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиDSSMI(СтруктураПараметров, АдресХранилища)
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	OracleSourceData.SOURCE_SYSTEM,
		|	OracleSourceData.OU,
		|	OracleSourceData.GL_SOURCE,
		|	OracleSourceData.GL_DATE,
		|	OracleSourceData.CURRENCY_CODE,
		|	OracleSourceData.EXCHANGE_RATE,
		|	OracleSourceData.GL_ACCOUNT,
		|	OracleSourceData.CUSTOMER_ID,
		|	OracleSourceData.CUSTOMER_NUMBER,
		|	OracleSourceData.CUSTOMER_NAME,
		|	OracleSourceData.CONTRACT_NAME,
		|	OracleSourceData.ENTERED,
		|	OracleSourceData.ACCOUNTED,
		|	OracleSourceData.DOC_TYPE,
		|	OracleSourceData.DESCRIPTION,
		|	OracleSourceData.DOC_NUMBER,
		|	OracleSourceData.DOC_NUMBER_2,
		|	OracleSourceData.TRANS_TYPE,
		|	OracleSourceData.INV_DATE,
		|	OracleSourceData.LINE_TYPE,
		|	OracleSourceData.SALESPERSON,
		|	OracleSourceData.DUE_DATE,
		|	OracleSourceData.TAX_RATE,
		|	OracleSourceData.ORIGINAL_TRX_NUMBER,
		|	OracleSourceData.PO_NUMBER,
		|	OracleSourceData.SO_NUM,
		|	OracleSourceData.SO_DATE,
		|	OracleSourceData.SHIP_DATE_ACTUAL,
		|	OracleSourceData.ITEM_NO,
		|	OracleSourceData.ITEM_DESC,
		|	OracleSourceData.PRICE_UNIT,
		|	OracleSourceData.SHIPPED_QUANTITY,
		|	OracleSourceData.RECEIPT_AMOUNT,
		|	OracleSourceData.CREATION_DATE,
		|	OracleSourceData.CREATED_BY,
		|	OracleSourceData.BILL_SITE_NAME,
		|	OracleSourceData.BILL_SITE_ID,
		|	OracleSourceData.SHIP_SITE_NAME,
		|	OracleSourceData.SHIP_SITE_ID,
		|	OracleSourceData.DOC_ID,
		|	OracleSourceData.LINE_ID,
		|	OracleSourceData.DOC_TRANS_ID,
		|	OracleSourceData.ID_ORIG,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 17, 4) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 22, 3) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 26, 4) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 6, 3) КАК Account,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 6, 3) КАК SubSubSegment,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 10, 6) КАК Location,
		|	ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 10, 6) + ""."" + ПОДСТРОКА(OracleSourceData.GL_ACCOUNT, 6, 3) КАК AU,
		|	OracleSourceData.CREATED_BY_NAME,
		|	OracleSourceData.INVOICE_NUMBER_SAM,
		|	OracleSourceData.INVOICE_AMOUNT
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.OracleSourceData КАК OracleSourceData
		|ГДЕ
		|	OracleSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CUSTOMER_NUMBER
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CURRENCY_CODE
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиSalesOrders.ArInvoice КАК Номер,
		|	КлючиSalesOrders.Company,
		|	КлючиSalesOrders.SalesOrder КАК Ссылка
		|ИЗ
		|	РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrders
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиSalesOrders.ArInvoice = ВТ_ДанныеФайла.SO_NUM
		|			И (КлючиSalesOrders.Source = &ТипВнешнейСистемы)
		|			И КлючиSalesOrders.Company.Код = ВТ_ДанныеФайла.OU
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиSalesOrders.ArInvoice,
		|	КлючиSalesOrders.Company,
		|	КлючиSalesOrders.SalesOrder
		|ИЗ
		|	РегистрСведений.КлючиSalesOrders КАК КлючиSalesOrders
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО (КлючиSalesOrders.ArInvoice = ""SAM-"" + ВТ_ДанныеФайла.INVOICE_NUMBER_SAM)
		|			И (КлючиSalesOrders.Source = &ТипВнешнейСистемы)
		|			И КлючиSalesOrders.Company.Код = ВТ_ДанныеФайла.OU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Source,
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Client,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиИнвойсов.ArInvoice,
		|	КлючиИнвойсов.Invoice
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.DOC_NUMBER_2
		|			И (ВТ_ДанныеФайла.DOC_NUMBER_2 <> """")
		|			И (КлючиИнвойсов.Source = &ТипВнешнейСистемы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КлючиИнвойсов.ArInvoice,
		|	КлючиИнвойсов.Invoice
		|ИЗ
		|	РегистрСведений.КлючиИнвойсов КАК КлючиИнвойсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО КлючиИнвойсов.ArInvoice = ВТ_ДанныеФайла.DOC_NUMBER
		|			И (ВТ_ДанныеФайла.DOC_NUMBER_2 = """")
		|			И (КлючиИнвойсов.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CashBatch.PaymentNumber,
		|	CashBatch.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО CashBatch.PaymentNumber = ВТ_ДанныеФайла.DOC_NUMBER
		|			И (НЕ CashBatch.ПометкаУдаления)
		|			И (CashBatch.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиBatchAllocation.Source,
		|	КлючиBatchAllocation.Company,
		|	КлючиBatchAllocation.Client,
		|	КлючиBatchAllocation.Location,
		|	КлючиBatchAllocation.SubSubSegment,
		|	КлючиBatchAllocation.Account,
		|	КлючиBatchAllocation.Currency,
		|	КлючиBatchAllocation.BatchAllocation
		|ИЗ
		|	РегистрСведений.КлючиBatchAllocation КАК КлючиBatchAllocation
		|ГДЕ
		|	КлючиBatchAllocation.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.GL_DATE КАК GlDate,
		|	ВТ_ДанныеФайла.GL_SOURCE КАК GlSourceType,
		|	Организации.Ссылка КАК Company,
		|	Oracle.Ссылка КАК Account,
		|	ПодразделенияОрганизаций.Ссылка КАК Location,
		|	Сегменты.Ссылка КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_ДанныеФайла.EXCHANGE_RATE КАК ExchangeRate,
		|	ВТ_ДанныеФайла.GL_ACCOUNT КАК GL_Account,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_ДанныеФайла.CONTRACT_NAME КАК Contract,
		|	ВТ_ДанныеФайла.ENTERED КАК Amount,
		|	ВТ_ДанныеФайла.ACCOUNTED КАК BaseAmount,
		|	ВТ_ДанныеФайла.DOC_TYPE КАК DocType,
		|	ВТ_ДанныеФайла.DESCRIPTION КАК Description,
		|	ВТ_ДанныеФайла.TRANS_TYPE КАК TransType,
		|	ВТ_ДанныеФайла.SO_NUM КАК SONum,
		|	ВТ_ДанныеФайла.SO_DATE КАК SODate,
		|	ВТ_ДанныеФайла.SHIP_DATE_ACTUAL КАК ShipDateActual,
		|	ВТ_ДанныеФайла.CREATION_DATE КАК CreationDate,
		|	ВТ_ДанныеФайла.CREATED_BY КАК CreatedBy,
		|	ВТ_ДанныеФайла.DOC_ID КАК DocID,
		|	ВТ_ДанныеФайла.LINE_ID КАК LineID,
		|	ВТ_ДанныеФайла.ID_ORIG КАК ID_ORIG,
		|	ЕСТЬNULL(ТранзакцияOracle.Ссылка, ЗНАЧЕНИЕ(Документ.ТранзакцияOracle.ПустаяСсылка)) КАК Транзакция,
		|	ВТ_ДанныеФайла.CUSTOMER_NUMBER КАК CustomerNumber,
		|	ВТ_ДанныеФайла.DOC_TRANS_ID КАК DocTransID,
		|	ВТ_ДанныеФайла.DOC_NUMBER КАК DocNumber,
		|	ВТ_ДанныеФайла.DOC_NUMBER_2 КАК DocNumber2,
		|	ВТ_ДанныеФайла.INV_DATE КАК InvDate,
		|	ВТ_ДанныеФайла.ORIGINAL_TRX_NUMBER КАК OriginalTrxNumber,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""A""
		|			ТОГДА 0
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""R""
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПорядокAccruals,
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""INV_REC""
		|			ТОГДА 0
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""CM_REC""
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Priority,
		|	ЕСТЬNULL(КостЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)) КАК AU,
		|	ВТ_ДанныеФайла.AU КАК КодAU,
		|	ВТ_ДанныеФайла.CREATED_BY_NAME КАК CreatedByName,
		|	ВТ_ДанныеФайла.INVOICE_NUMBER_SAM КАК InvoiceNumberSAM,
		|	ВТ_ДанныеФайла.INVOICE_AMOUNT КАК InvoiceAmount,
		|	КорректировкаТранзакции.Ссылка КАК КорректировкаТранзакции
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_ДанныеФайла.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_ДанныеФайла.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО ВТ_ДанныеФайла.SubSubSegment = Сегменты.Код
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.CURRENCY_CODE = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.CUSTOMER_NUMBER = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранзакцияOracle КАК ТранзакцияOracle
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаТранзакции КАК КорректировкаТранзакции
		|			ПО ТранзакцияOracle.Ссылка = КорректировкаТранзакции.ДокументОснование
		|				И (НЕ КорректировкаТранзакции.ПометкаУдаления)
		|		ПО (&Префикс + ВТ_ДанныеФайла.ID_ORIG = ТранзакцияOracle.Номер)
		|			И (НЕ ТранзакцияOracle.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|			И (КостЦентры.Source = &ТипВнешнейСистемы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Priority,
		|	GlDate,
		|	ПорядокAccruals,
		|	ID_ORIG";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	Запрос.УстановитьПараметр("Префикс", ?(СтруктураПараметров.ТипВнешнейСистемы = Перечисления.ТипыСоответствий.OracleMI, "MI-", "SM-"));
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	
	КэшSalesOrders = РезультатЗапроса[3].Выгрузить();
	КэшSalesOrders.Индексы.Добавить("Номер");
	
	КэшРучныхКоррерктировок = РезультатЗапроса[4].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	//КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Location, SubSubSegment, Account, Currency");
	
	КэшИнвойсов = РезультатЗапроса[5].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("ArInvoice");
	
	КэшCashBatch = РезультатЗапроса[6].Выгрузить();
	КэшCashBatch.Индексы.Добавить("PaymentNumber");
	
	КэшBatchAllocation = РезультатЗапроса[7].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	КэшAU = Новый Соответствие;
	
	ТаблицаДаты = РезультатЗапроса[8].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	// { RGS TAlmazova 06.07.2017 14:36:48 - проверка контрольных сумм
	//ТаблицаДанных = РезультатЗапроса[9].Выгрузить();
	//Отбор = Новый Структура;
	//Отбор.Вставить("Транзакция", Документы.ТранзакцияOracle.ПустаяСсылка());
	//ТаблицаДанныхКонтрольныеСуммы = ТаблицаДанных.Скопировать(Отбор,"Location, Account, Currency, Amount, BaseAmount");
	//
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = ТаблицаДанных.Количество();
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = ТаблицаДанныхКонтрольныеСуммы.Количество();
	//ДокументЗагрузки.Записать();
	//
	//ТаблицаДанныхКонтрольныеСуммы.Свернуть("Location, Account, Currency", "Amount, BaseAmount");
	//ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	// } RGS TAlmazova 06.07.2017 14:36:54 - проверка контрольных сумм
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[9].Выбрать();
	
	НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	ТаблицаДанныхКонтрольныеСуммы = Новый ТаблицаЗначений;
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("AU");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Account");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Currency");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Amount");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("BaseAmount");
	КоличествоТранзакцийВФайле = 0;
	СчетчикСозданныхТранзакций = 0;
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.OracleMI);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле + 1;
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Транзакция) Тогда
			//TODO временно перезаполняем
			// { RGS TAlmazova 30.09.2016 14:30:56 - перезаполнение по новым заведенным клиентам
			// { RGS TAlmazova 10.11.2016 0:13:12 - дозаполнить Fiscal№ в существующей, если не заполнен
				//Продолжить;
			// } RGS TAlmazova 10.11.2016 0:13:39 - дозаполнить Fiscal№ в существующей, если не заполнен
			//Если (ВыборкаДетальныеЗаписи.Транзакция.Client  = Справочники.Контрагенты.Unreconciled и ВыборкаДетальныеЗаписи.Client <> Справочники.Контрагенты.Unreconciled) ИЛИ
			//	НЕ (ВыборкаДетальныеЗаписи.GlSourceType = "Receivables")
			//Тогда
				ТранзакцияOracleОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КорректировкаТранзакции) Тогда
					ПроверитьАктуальностьКорректировки_MI(ВыборкаДетальныеЗаписи, СтруктураПараметров.Ссылка);
				КонецЕсли;
			//Иначе
			//Продолжить;
			//КонецЕсли;
			// } RGS TAlmazova 30.09.2016 14:31:21 - перезаполнение по новым заведенным клиентам
			//ТранзакцияOracleОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
		Иначе
			ТранзакцияOracleОбъект = Документы.ТранзакцияOracle.СоздатьДокумент();
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.GlDate < ДатаНачалаЗагрузки Тогда
			
			ТекОшибка = "Can't load data earlier than the start date for " + ВыборкаДетальныеЗаписи.ID_ORIG;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		КлиентОтсутствует = Ложь;
		
		ЗаполнитьТранзакцию(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, СтруктураПараметров.ТипВнешнейСистемы, Отказ, ТекстСообщенияОбОшибках, КлиентОтсутствует, КэшAU);
		
		ТранзакцияOracleОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если КлиентОтсутствует  и ВыборкаДетальныеЗаписи.GlSourceType <> "Revaluation" Тогда
			
			НЗ_Проблемы = РегистрыСведений.ПроблемыПриЗагрузке.СоздатьНаборЗаписей();
			НЗ_Проблемы.Отбор.Транзакция.Установить(ТранзакцияOracleОбъект.Ссылка);
			НЗ_Проблемы.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
			НЗ_Проблемы.Отбор.ОписаниеПроблемы.Установить("Missing client code");
			НоваяЗапись = НЗ_Проблемы.Добавить();
			НоваяЗапись.Транзакция = ТранзакцияOracleОбъект.Ссылка;
			НоваяЗапись.ДокументЗагрузки = СтруктураПараметров.Ссылка;
			НоваяЗапись.ОписаниеПроблемы = "Missing client code";
			НЗ_Проблемы.Записать(Истина);
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата = ТекущаяДата;
			Задача.Наименование = "Fill the client in the transaction " + ТранзакцияOracleОбъект.Ссылка;
			Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.OracleMI;
			Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
			//Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
			Задача.Автор = Пользователи.ТекущийПользователь();
			Задача.Предмет = ТранзакцияOracleОбъект.Ссылка;
			Задача.Записать();
			
		КонецЕсли;
		
		ТранзакцияОбнулена = Ложь;
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъекты(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, ТранзакцияОбнулена, Отказ, ТекстСообщенияОбОшибках);
		
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.ДокументЗагрузки = СтруктураПараметров.Ссылка;
		ЗаписьНабора.ПроводкаDSS = ТранзакцияOracleОбъект.Ссылка;
		ЗаписьНабора.ОшибкаПриПоискеСвязанныхОбъектов = НайденаОшибкаПриПоискеСвязанныхОбъектов;
		
		СчетчикСозданныхТранзакций = СчетчикСозданныхТранзакций + 1;
		НоваяСтрокаКонтрольныхСумм = ТаблицаДанныхКонтрольныеСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтрольныхСумм, ТранзакцияOracleОбъект);
		Если ТранзакцияОбнулена Тогда
			НоваяСтрокаКонтрольныхСумм.Amount = 0;
			НоваяСтрокаКонтрольныхСумм.BaseAmount = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	// { RGS TAlmazova 14.07.2016 18:55:05 - добавление статуса
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	// { RGS AGorlenko 19.07.2017 18:13:35 - было ниже, перенесли сюда
	ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	ДокументЗагрузки.КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций;
	// } RGS AGorlenko 19.07.2017 18:13:49 - было ниже, перенесли сюда
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 18:55:12 - добавление статуса
	
	НЗ.Записать(Истина);
	
	// { RGS TAlmazova 14.07.2016 18:55:05 - добавление статуса
	// { RGS AGorlenko 19.07.2017 18:13:17 - перенесено выше
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	//ДокументЗагрузки.Записать();
	// } RGS AGorlenko 19.07.2017 18:13:21 - перенесено выше
	
	ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount, BaseAmount");
	ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU КАК ПроводкаDSSAU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account КАК ПроводкаDSSAccount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.BaseAmount) КАК ПроводкаDSSBaseAmount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.Amount) КАК ПроводкаDSSAmount,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency КАК ПроводкаDSSCurrency
		|ПОМЕСТИТЬ ДанныеТранзакции
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПроводкаDSSAU,
		|	ПроводкаDSSAccount,
		|	ПроводкаDSSCurrency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы КАК AU,
		|	КонтрольныеСуммыПриЗагрузке.Account КАК Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency КАК Currency,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.Amount) КАК Amount,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.BaseAmount) КАК BaseAmount
		|ПОМЕСТИТЬ КонтрольныеСуммыПриЗагрузке
		|ИЗ
		|	РегистрСведений.КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|ГДЕ
		|	КонтрольныеСуммыПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы,
		|	КонтрольныеСуммыПриЗагрузке.Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	AU,
		|	Account,
		|	Currency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.AU, ДанныеТранзакции.ПроводкаDSSAU) КАК AU,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Account, ДанныеТранзакции.ПроводкаDSSAccount) КАК Account,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0) КАК Поле1,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0) КАК Поле2,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Currency, ДанныеТранзакции.ПроводкаDSSCurrency) КАК Currency
		|ИЗ
		|	КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеТранзакции КАК ДанныеТранзакции
		|		ПО КонтрольныеСуммыПриЗагрузке.Account = ДанныеТранзакции.ПроводкаDSSAccount
		|			И КонтрольныеСуммыПриЗагрузке.Currency = ДанныеТранзакции.ПроводкаDSSCurrency
		|			И КонтрольныеСуммыПриЗагрузке.AU = ДанныеТранзакции.ПроводкаDSSAU
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0)
		|			ИЛИ ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSBaseAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.BaseAmount, 0))";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекОшибка = СтрШаблон("Checksums do not match for AU = %1, Account = %2, Currency = %3.", ВыборкаДетальныеЗаписи.AU, ВыборкаДетальныеЗаписи.Account, ВыборкаДетальныеЗаписи.Currency);
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Отказ = Истина;
		ВызватьИсключение ТекОшибка;
	КонецЕсли;

	// } RGS TAlmazova 03.07.2017 18:09:39 - проверка контрольных сумм
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура СформироватьПроводкиDSSSmith(СтруктураПараметров, АдресХранилища)
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	OracleSmithSourceData.psob_id КАК psob_id,
		|	OracleSmithSourceData.source КАК GL_SOURCE,
		|	OracleSmithSourceData.category КАК DOC_TYPE,
		|	OracleSmithSourceData.account_type КАК TRANS_TYPE,
		|	OracleSmithSourceData.sub_ledger_source + ""."" + OracleSmithSourceData.cust_no + ""."" + OracleSmithSourceData.company_code_str КАК DOC_ID,
		|	OracleSmithSourceData.batch_name,
		|	OracleSmithSourceData.je_name,
		|	OracleSmithSourceData.je_line_num,
		|	OracleSmithSourceData.company_code КАК OU,
		|	OracleSmithSourceData.business_line КАК SubSubSegment,
		|	OracleSmithSourceData.cost_center КАК Location,
		|	OracleSmithSourceData.major + ""."" + OracleSmithSourceData.minor + ""."" + OracleSmithSourceData.intercompany + ""."" + OracleSmithSourceData.business_line КАК Account,
		|	OracleSmithSourceData.intercompany,
		|	OracleSmithSourceData.local,
		|	OracleSmithSourceData.gl_date КАК GL_DATE,
		|	OracleSmithSourceData.entered_currency КАК CURRENCY_CODE,
		|	OracleSmithSourceData.exch_rate КАК EXCHANGE_RATE,
		|	OracleSmithSourceData.cust_no КАК CUSTOMER_NUMBER,
		|	OracleSmithSourceData.line_desc КАК CUSTOMER_NUMBER_JV,
		|	OracleSmithSourceData.customer_name,
		|	OracleSmithSourceData.entered_amt КАК ENTERED,
		|	OracleSmithSourceData.rsob_amt КАК AMOUNT_USD,
		|	OracleSmithSourceData.sub_ledger_source КАК DOC_NUMBER,
		|	OracleSmithSourceData.master_source_document_number КАК master_source_document_number,
		|	OracleSmithSourceData.master_source_document_number + ""."" + OracleSmithSourceData.cust_no + ""."" + OracleSmithSourceData.company_code_str КАК LINE_ID,
		|	OracleSmithSourceData.GL_ACCOUNT,
		|	OracleSmithSourceData.СтрокаФайла,
		|	OracleSmithSourceData.source,
		|	OracleSmithSourceData.category,
		|	OracleSmithSourceData.cost_center + ""."" + OracleSmithSourceData.business_line КАК AU
		|ПОМЕСТИТЬ ВТ_ДанныеФайла
		|ИЗ
		|	РегистрСведений.OracleSmithSourceData КАК OracleSmithSourceData
		|ГДЕ
		|	OracleSmithSourceData.ДокументЗагрузки = &ДокументЗагрузки
		|	И (OracleSmithSourceData.hfm_account ПОДОБНО ""120%"" ИЛИ OracleSmithSourceData.major ПОДОБНО ""4%"")
		// { RGS TAlmazova 14.12.2017 12:40:27 - удаляем условие по Psob_id
		//|	И (OracleSmithSourceData.psob_id = 966
		//|			ИЛИ OracleSmithSourceData.psob_id = 2026
		//|			ИЛИ OracleSmithSourceData.psob_id = 2046)
		|	И OracleSmithSourceData.psob_id <> """"
		// } RGS TAlmazova 14.12.2017 12:40:45 - удаляем условие по Psob_id
		|	И OracleSmithSourceData.source <> """"
		|	И OracleSmithSourceData.category <> """"
		|	И OracleSmithSourceData.batch_name <> """"
		|	И OracleSmithSourceData.je_name <> """"
		|	И OracleSmithSourceData.company_code <> 0
		|	И OracleSmithSourceData.business_line <> """"
		|	И OracleSmithSourceData.cost_center <> """"
		|	И OracleSmithSourceData.major <> """"
		|	И (OracleSmithSourceData.source <> ""Receivables""
		|				И OracleSmithSourceData.source <> ""SO Accrual""
		|				И OracleSmithSourceData.source <> ""SAM Accrual""
		|			ИЛИ OracleSmithSourceData.cust_no <> """")
		|	И OracleSmithSourceData.je_line_num <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеКлиентовCustomerNumber
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CUSTOMER_NUMBER
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
		|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
		|ПОМЕСТИТЬ ВТ_СоответствиеCurrency
		|ИЗ
		|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
		|			&Период,
		|			ТипСоответствия = &ТипВнешнейСистемы
		|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Currency)
		|				И Идентификатор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_ДанныеФайла.CURRENCY_CODE
		|					ИЗ
		|						ВТ_ДанныеФайла КАК ВТ_ДанныеФайла)) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SalesOrder.DocID,
		|	SalesOrder.Ссылка КАК SalesOrder
		|ИЗ
		|	Документ.SalesOrder КАК SalesOrder
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО SalesOrder.DocID = ВТ_ДанныеФайла.DOC_ID
		|			И (SalesOrder.Source = &ТипВнешнейСистемы)
		|			И (НЕ SalesOrder.ПометкаУдаления)
		|ГДЕ
		|	SalesOrder.Source = &ТипВнешнейСистемы
		|	И НЕ SalesOrder.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиРучныхКорректировок.Source,
		|	КлючиРучныхКорректировок.Company,
		|	КлючиРучныхКорректировок.Client,
		|	КлючиРучныхКорректировок.Location,
		|	КлючиРучныхКорректировок.SubSubSegment,
		|	КлючиРучныхКорректировок.Account,
		|	КлючиРучныхКорректировок.Currency,
		|	КлючиРучныхКорректировок.РучнаяКорректировка
		|ИЗ
		|	РегистрСведений.КлючиРучныхКорректировок КАК КлючиРучныхКорректировок
		|ГДЕ
		|	КлючиРучныхКорректировок.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Invoice.DocID,
		|	Invoice.Ссылка КАК Invoice
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Invoice.DocID = ВТ_ДанныеФайла.DOC_ID
		|			И (Invoice.Source = &ТипВнешнейСистемы)
		|			И (НЕ Invoice.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Invoice.DocID,
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Invoice.DocID = ВТ_ДанныеФайла.LINE_ID
		|			И (Invoice.Source = &ТипВнешнейСистемы)
		|			И (НЕ Invoice.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Memo.DocID,
		|	Memo.Ссылка КАК Мемо
		|ИЗ
		|	Документ.Memo КАК Memo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Memo.DocID = ВТ_ДанныеФайла.DOC_ID
		|			И (Memo.Source = &ТипВнешнейСистемы)
		|			И (НЕ Memo.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Memo.DocID,
		|	Memo.Ссылка КАК Мемо
		|ИЗ
		|	Документ.Memo КАК Memo
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО Memo.DocID = ВТ_ДанныеФайла.LINE_ID
		|			И (Memo.Source = &ТипВнешнейСистемы)
		|			И (НЕ Memo.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CashBatch.DocID,
		|	CashBatch.Ссылка КАК CashBatch
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ПО CashBatch.DocID = ВТ_ДанныеФайла.DOC_ID
		|			И (НЕ CashBatch.ПометкаУдаления)
		|			И (CashBatch.Source = &ТипВнешнейСистемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиBatchAllocation.Source,
		|	КлючиBatchAllocation.Company,
		|	КлючиBatchAllocation.Client,
		|	КлючиBatchAllocation.Location,
		|	КлючиBatchAllocation.SubSubSegment,
		|	КлючиBatchAllocation.Account,
		|	КлючиBatchAllocation.Currency,
		|	КлючиBatchAllocation.BatchAllocation
		|ИЗ
		|	РегистрСведений.КлючиBatchAllocation КАК КлючиBatchAllocation
		|ГДЕ
		|	КлючиBatchAllocation.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DataLoadingStages.GeoMarket,
		|	DataLoadingStages.StartLoading КАК ДатаНачалаЗагрузки,
		|	DataLoadingStages.ReconciledBalances КАК ДатаВыверенныхОстатков
		|ИЗ
		|	РегистрСведений.DataLoadingStages КАК DataLoadingStages
		|ГДЕ
		|	DataLoadingStages.Source = &ТипВнешнейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеФайла.GL_DATE КАК GlDate,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.GL_SOURCE = ""FMS""
		|			ТОГДА ""SO Accrual""
		|		ИНАЧЕ ВТ_ДанныеФайла.GL_SOURCE
		|	КОНЕЦ КАК GlSourceType,
		|	Организации.Ссылка КАК Company,
		|	Oracle.Ссылка КАК Account,
		|	ПодразделенияОрганизаций.Ссылка КАК Location,
		|	Сегменты.Ссылка КАК SubSubSegment,
		|	ВТ_СоответствиеCurrency.ОбъектПриемника КАК Currency,
		|	ВТ_ДанныеФайла.EXCHANGE_RATE КАК ExchangeRate,
		|	ВТ_ДанныеФайла.GL_ACCOUNT КАК GL_Account,
		|	ВТ_СоответствиеКлиентовCustomerNumber.ОбъектПриемника КАК Client,
		|	ВТ_ДанныеФайла.ENTERED КАК Amount,
		|	ВТ_ДанныеФайла.AMOUNT_USD КАК BaseAmount,
		|	ВТ_ДанныеФайла.DOC_TYPE КАК DocType,
		|	ВТ_ДанныеФайла.TRANS_TYPE КАК TransType,
		|	ВТ_ДанныеФайла.DOC_ID КАК DocID,
		|	ВТ_ДанныеФайла.LINE_ID КАК LineID,
		|	ВТ_ДанныеФайла.CUSTOMER_NUMBER КАК CustomerNumber,
		|	ВТ_ДанныеФайла.CUSTOMER_NUMBER_JV КАК CUSTOMER_NUMBER_JV,
		|	ВТ_ДанныеФайла.DOC_NUMBER КАК DocNumber,
		|	ВТ_ДанныеФайла.master_source_document_number КАК master_source_document_number,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""A""
		|			ТОГДА 0
		|		КОГДА ВТ_ДанныеФайла.TRANS_TYPE = ""R""
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПорядокAccruals,
		|	ПодразделенияОрганизаций.БазовыйЭлемент.GeoMarket.Родитель КАК GeoMarketHFM,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""Sales Invoices""
		|			ТОГДА 0
		|		КОГДА ВТ_ДанныеФайла.DOC_TYPE = ""Credit Memos""
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Priority,
		|	ВТ_ДанныеФайла.psob_id,
		|	ВТ_ДанныеФайла.batch_name,
		|	ВТ_ДанныеФайла.je_name,
		|	ВТ_ДанныеФайла.je_line_num,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеФайла.source = ""FMS""
		|			ТОГДА ""SO Accrual""
		|		ИНАЧЕ ВТ_ДанныеФайла.source
		|	КОНЕЦ КАК source,
		|	ВТ_ДанныеФайла.category,
		|	КостЦентры.Ссылка КАК AU,
		|	ВТ_ДанныеФайла.AU КАК КодAU
		|ИЗ
		|	ВТ_ДанныеФайла КАК ВТ_ДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_ДанныеФайла.OU = Организации.Код
		|			И (НЕ Организации.ПометкаУдаления)
		|			И (Организации.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Oracle КАК Oracle
		|		ПО ВТ_ДанныеФайла.Account = Oracle.Код
		|			И (НЕ Oracle.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_ДанныеФайла.Location = ПодразделенияОрганизаций.Код
		|			И (НЕ ПодразделенияОрганизаций.ПометкаУдаления)
		|			И (ПодразделенияОрганизаций.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сегменты КАК Сегменты
		|		ПО ВТ_ДанныеФайла.SubSubSegment = Сегменты.Код
		|			И (НЕ Сегменты.ПометкаУдаления)
		|			И (Сегменты.Source = &ТипВнешнейСистемы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеCurrency КАК ВТ_СоответствиеCurrency
		|		ПО ВТ_ДанныеФайла.CURRENCY_CODE = ВТ_СоответствиеCurrency.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеКлиентовCustomerNumber КАК ВТ_СоответствиеКлиентовCustomerNumber
		|		ПО ВТ_ДанныеФайла.CUSTOMER_NUMBER = ВТ_СоответствиеКлиентовCustomerNumber.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КостЦентры КАК КостЦентры
		|		ПО ВТ_ДанныеФайла.AU = КостЦентры.Код
		|			И (НЕ КостЦентры.ПометкаУдаления)
		|			И (КостЦентры.Source = &ТипВнешнейСистемы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Priority,
		|	GlDate,
		|	ПорядокAccruals,
		|	ВТ_ДанныеФайла.СтрокаФайла";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("ТипВнешнейСистемы", СтруктураПараметров.ТипВнешнейСистемы);
	Запрос.УстановитьПараметр("Префикс", ?(СтруктураПараметров.ТипВнешнейСистемы = Перечисления.ТипыСоответствий.OracleMI, "MI-", "SM-"));
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	
	ВыборкаКэшSalesOrders = РезультатЗапроса[3].Выбрать();
	КэшSalesOrders = Новый ТаблицаЗначений;
	КэшSalesOrders.Колонки.Добавить("DocID", Новый ОписаниеТипов("Строка"));
	КэшSalesOrders.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.SalesOrder"));
	КэшSalesOrders.Индексы.Добавить("DocID");
	
	Пока ВыборкаКэшSalesOrders.Следующий() Цикл
		СтрокаКэша = КэшSalesOrders.Добавить();
		СтрокаКэша.DocID = СокрЛП(ВыборкаКэшSalesOrders.DocID);
		СтрокаКэша.Ссылка = ВыборкаКэшSalesOrders.SalesOrder;
	КонецЦикла;
	
	КэшРучныхКоррерктировок = РезультатЗапроса[4].Выгрузить();
	КэшРучныхКоррерктировок.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	КэшИнвойсов = РезультатЗапроса[5].Выгрузить();
	КэшИнвойсов.Индексы.Добавить("DocID");
	
	КэшМемо = РезультатЗапроса[6].Выгрузить();
	КэшМемо.Индексы.Добавить("DocID");
	
	КэшCashBatch = РезультатЗапроса[7].Выгрузить();
	КэшCashBatch.Индексы.Добавить("DocID");
	
	КэшBatchAllocation = РезультатЗапроса[8].Выгрузить();
	КэшBatchAllocation.Индексы.Добавить("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	КэшAU = Новый Соответствие;
	
	ТаблицаДаты = РезультатЗапроса[9].Выгрузить();
	ТаблицаДаты.Индексы.Добавить("GeoMarket");
	
	// { RGS TAlmazova 06.07.2017 14:36:48 - проверка контрольных сумм
	//ТаблицаДанных = РезультатЗапроса[10].Выгрузить();
	////Отбор = Новый Структура;
	////Отбор.Вставить("Транзакция", Документы.ТранзакцияOracle.ПустаяСсылка());
	//ТаблицаДанныхКонтрольныеСуммы = ТаблицаДанных.Скопировать(,"Location, Account, Currency, Amount");
	//
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = ТаблицаДанных.Количество();
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = ТаблицаДанныхКонтрольныеСуммы.Количество();
	//ДокументЗагрузки.Записать();
	//
	//ТаблицаДанныхКонтрольныеСуммы.Свернуть("Location, Account, Currency", "Amount");
	//ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	// } RGS TAlmazova 06.07.2017 14:36:54 - проверка контрольных сумм
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[10].Выбрать();
	
	НЗ = РегистрыСведений.DSSСформированныеПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
	
	НЗ_КлючиТранзакцийOracleSmith = РегистрыСведений.КлючиТранзакцийOracleSmith.СоздатьНаборЗаписей();
	ТЗ_ИспользованныеКлючи = НЗ_КлючиТранзакцийOracleSmith.ВыгрузитьКолонки("psob_id, source, category, batch_name, je_name, je_line_num");
	ТЗ_ИспользованныеКлючи.Индексы.Добавить("psob_id, source, category, batch_name, je_name, je_line_num");
	СтруктураПоискаТранзакций = Новый Структура("psob_id, source, category, batch_name, je_name, je_line_num");
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	ТекстСообщенияОбОшибках = "";
	
	ТаблицаДанныхКонтрольныеСуммы = Новый ТаблицаЗначений;
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("AU");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Account");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Currency");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("Amount");
	КоличествоТранзакцийВФайле = 0;
	СчетчикСозданныхТранзакций = 0;
	
	// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
	МенеджерФильтраНезагружаемыхДанных = РегистрыСведений.ФильтрНезагружаемыхДанных;
	ФильтрНезагружаемыхДанных = МенеджерФильтраНезагружаемыхДанных.ПолучитьТаблицуФильтра(Перечисления.ТипыСоответствий.OracleSmith);
	КоличествоПропущенныхПоФильтруТранзакций = 0;
	// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
	
	// { RGS TAlmazova 27.07.2017 14:48:41 - добавление таблицы значений с транзакциями, которые уже существуют
	ТаблицаСуществующихТранзакций = Новый ТаблицаЗначений;
	ТаблицаСуществующихТранзакций.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ТранзакцияOracle"));
	ТаблицаСуществующихТранзакций.Колонки.Добавить("AU", Новый ОписаниеТипов("СправочникСсылка.КостЦентры"));
	ТаблицаСуществующихТранзакций.Колонки.Добавить("Account", Новый ОписаниеТипов("ПланСчетовСсылка.Oracle"));
	ТаблицаСуществующихТранзакций.Колонки.Добавить("Currency", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСуществующихТранзакций.Колонки.Добавить("BaseAmount", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуществующихТранзакций.Колонки.Добавить("Amount", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуществующихТранзакций.Колонки.Добавить("Client", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаСуществующихТранзакций.Колонки.Добавить("Company", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСуществующихТранзакций.Колонки.Добавить("LegalEntity", Новый ОписаниеТипов("СправочникСсылка.LegalEntiites"));
	// } RGS TAlmazova 27.07.2017 14:49:13 - добавление таблицы значений с транзакциями, которые уже существуют
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле + 1;
		
		// { RGS AGorlenko 19.07.2017 16:40:30 - добавление фильтра незагружаемых данных
		Если МенеджерФильтраНезагружаемыхДанных.ЭтоНезагружаемыеДанные(ФильтрНезагружаемыхДанных, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Account) Тогда
			КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций + 1;
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 19.07.2017 16:40:47 - добавление фильтра незагружаемых данных
		
		ЭтоНоваяТранзакция = Ложь;
		
		Даты = ТаблицаДаты.Найти(ВыборкаДетальныеЗаписи.GeoMarketHFM, "GeoMarket");
		Если Даты = Неопределено Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		ИначеЕсли Даты.ДатаНачалаЗагрузки = '00010101000000' Или Даты.ДатаВыверенныхОстатков = '00010101000000' Тогда
			ТекОшибка = "Data loading stages missing for " + ВыборкаДетальныеЗаписи.GeoMarketHFM;
			//Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
			//	ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			//КонецЕсли;
			Отказ = Истина;
			ВызватьИсключение ТекОшибка;
		Иначе
			ДатаНачалаЗагрузки = Даты.ДатаНачалаЗагрузки;
			ДатаВыверенныхОстатков = Даты.ДатаВыверенныхОстатков;
		КонецЕсли;
		
		// { RGS AGorlenko 26.12.2016 15:29:38 - для смитов затираем данные
		//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Транзакция) Тогда
		//	//TODO временно перезаполняем
		//	// { RGS TAlmazova 30.09.2016 14:30:56 - перезаполнение по новым заведенным клиентам
		//	// { RGS TAlmazova 10.11.2016 0:13:12 - дозаполнить Fiscal№ в существующей, если не заполнен
		//	//	Продолжить;
		//	// } RGS TAlmazova 10.11.2016 0:13:39 - дозаполнить Fiscal№ в существующей, если не заполнен
		//	//Если (ВыборкаДетальныеЗаписи.Транзакция.Client  = Справочники.Контрагенты.Unreconciled и ВыборкаДетальныеЗаписи.Client <> Справочники.Контрагенты.Unreconciled) ИЛИ
		//	//	НЕ (ВыборкаДетальныеЗаписи.GlSourceType = "Receivables")
		//	//Тогда
		//		ТранзакцияOracleОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
		//	//Иначе
		//	//	Продолжить;
		//	//КонецЕсли;
		//	// } RGS TAlmazova 30.09.2016 14:31:21 - перезаполнение по новым заведенным клиентам
		//	//ТранзакцияOracleОбъект = ВыборкаДетальныеЗаписи.Транзакция.ПолучитьОбъект();
		//Иначе
		//	ТранзакцияOracleОбъект = Документы.ТранзакцияOracle.СоздатьДокумент();
		//	ЭтоНоваяТранзакция = Истина;
		//КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоискаТранзакций, ВыборкаДетальныеЗаписи);
		Если ТЗ_ИспользованныеКлючи.НайтиСтроки(СтруктураПоискаТранзакций).Количество() = 0 Тогда
			
			МассивТранзакций = ПолучитьМассивТранзакцийOracleSmith(СтруктураПоискаТранзакций);
			
			Если МассивТранзакций.Количество() = 0 Тогда
				
				ТранзакцияOracleОбъект = Документы.ТранзакцияOracle.СоздатьДокумент();
				ЭтоНоваяТранзакция = Истина;
				
			ИначеЕсли МассивТранзакций.Количество() > 1 Тогда
				
				Для каждого ТекТранзакция Из МассивТранзакций Цикл
					ТекТранзакцияОбъект = ТекТранзакция.ПолучитьОбъект();
					ТекТранзакцияОбъект.УстановитьПометкуУдаления(Истина);
				КонецЦикла;
				
				ТранзакцияOracleОбъект = Документы.ТранзакцияOracle.СоздатьДокумент();
				ЭтоНоваяТранзакция = Истина;
				
			Иначе
				
				ТранзакцияOracleОбъект = МассивТранзакций[0].ПолучитьОбъект();
				НоваяСтрокаТаблицы = ТаблицаСуществующихТранзакций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ТранзакцияOracleОбъект);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТЗ_ИспользованныеКлючи.Добавить(), СтруктураПоискаТранзакций);
			
		Иначе
			
			ТранзакцияOracleОбъект = Документы.ТранзакцияOracle.СоздатьДокумент();
			ЭтоНоваяТранзакция = Истина;
			
		КонецЕсли;
		// } RGS AGorlenko 26.12.2016 15:29:52 - для смитов затираем данные
		
		Если ВыборкаДетальныеЗаписи.GlDate < ДатаНачалаЗагрузки Тогда
			
			ТекОшибка = "Can't load data earlier than the start date for " + ВыборкаДетальныеЗаписи.ID_ORIG;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		КлиентОтсутствует = Ложь;
		
		ЗаполнитьТранзакцию(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, СтруктураПараметров.ТипВнешнейСистемы, Отказ, ТекстСообщенияОбОшибках, КлиентОтсутствует, КэшAU);
		
		ТранзакцияOracleОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если ЭтоНоваяТранзакция Тогда
			
			ЗаписьКлючейТранзакции = НЗ_КлючиТранзакцийOracleSmith.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьКлючейТранзакции, ВыборкаДетальныеЗаписи);
			ЗаписьКлючейТранзакции.source = ВыборкаДетальныеЗаписи.GlSourceType;
			ЗаписьКлючейТранзакции.category = ВыборкаДетальныеЗаписи.DocType;
			ЗаписьКлючейТранзакции.Транзакция = ТранзакцияOracleОбъект.Ссылка;
			
			Если КлиентОтсутствует и ТранзакцияOracleОбъект.DocType <> "Revaluation" Тогда
				
				НЗ_Проблемы = РегистрыСведений.ПроблемыПриЗагрузке.СоздатьНаборЗаписей();
				НЗ_Проблемы.Отбор.Транзакция.Установить(ТранзакцияOracleОбъект.Ссылка);
				НЗ_Проблемы.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
				НЗ_Проблемы.Отбор.ОписаниеПроблемы.Установить("Missing client code");
				НоваяЗапись = НЗ_Проблемы.Добавить();
				НоваяЗапись.Транзакция = ТранзакцияOracleОбъект.Ссылка;
				НоваяЗапись.ДокументЗагрузки = СтруктураПараметров.Ссылка;
				НоваяЗапись.ОписаниеПроблемы = "Missing client code";
				НЗ_Проблемы.Записать(Истина);
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				Задача.Дата = ТекущаяДата;
				Задача.Наименование = "Fill the client in the transaction " + ТранзакцияOracleОбъект.Ссылка;
				Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.OracleSmith;
				Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
				//Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
				Задача.Автор = Пользователи.ТекущийПользователь();
				Задача.Предмет = ТранзакцияOracleОбъект.Ссылка;
				Задача.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТранзакцияОбнулена = Ложь;
		НайденаОшибкаПриПоискеСвязанныхОбъектов = СформироватьСвязанныеОбъектыSmith(ТранзакцияOracleОбъект, ВыборкаДетальныеЗаписи, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшМемо, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, ТранзакцияОбнулена, Отказ, ТекстСообщенияОбОшибках);
		
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.ДокументЗагрузки = СтруктураПараметров.Ссылка;
		ЗаписьНабора.ПроводкаDSS = ТранзакцияOracleОбъект.Ссылка;
		//ЗаписьНабора.ОшибкаПриПоискеСвязанныхОбъектов = НайденаОшибкаПриПоискеСвязанныхОбъектов;
		
		СчетчикСозданныхТранзакций = СчетчикСозданныхТранзакций + 1;
		НоваяСтрокаКонтрольныхСумм = ТаблицаДанныхКонтрольныеСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтрольныхСумм, ТранзакцияOracleОбъект);
		Если ТранзакцияОбнулена Тогда
			НоваяСтрокаКонтрольныхСумм.Amount = 0;
			НоваяСтрокаКонтрольныхСумм.BaseAmount = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстСообщенияОбОшибках;
	КонецЕсли;
	
	// { RGS TAlmazova 14.07.2016 18:55:05 - добавление статуса
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.CreatedTransactions;
	// { RGS AGorlenko 19.07.2017 18:22:42 - было ниже, перенесено сюда
	ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	ДокументЗагрузки.КоличествоПропущенныхПоФильтруТранзакций = КоличествоПропущенныхПоФильтруТранзакций;
	// } RGS AGorlenko 19.07.2017 18:22:52 - было ниже, перенесено сюда
	ДокументЗагрузки.Записать();
	// } RGS TAlmazova 14.07.2016 18:55:12 - добавление статуса
	
	НЗ.Записать(Истина);
	
	НЗ_КлючиТранзакцийOracleSmith.Записать(Ложь);
	
	// { RGS TAlmazova 03.07.2017 18:09:38 - проверка контрольных сумм
	
	// { RGS AGorlenko 19.07.2017 18:22:21 - перенесено выше
	//ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	//ДокументЗагрузки.КоличествоТранзакцийВФайле = КоличествоТранзакцийВФайле;
	//ДокументЗагрузки.КоличествоНовыхТранзакцийВФайле = СчетчикСозданныхТранзакций;
	//ДокументЗагрузки.Записать();
	// } RGS AGorlenko 19.07.2017 18:22:26 - перенесено выше
	
	ТаблицаДанныхКонтрольныеСуммы.Свернуть("AU, Account, Currency", "Amount");
	ЗаполнитьКонтрольныеСуммы(СтруктураПараметров.Ссылка, ТаблицаДанныхКонтрольныеСуммы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU КАК ПроводкаDSSAU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account КАК ПроводкаDSSAccount,
		|	СУММА(DSSСформированныеПриЗагрузке.ПроводкаDSS.Amount) КАК ПроводкаDSSAmount,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency КАК ПроводкаDSSCurrency
		|ПОМЕСТИТЬ ДанныеТранзакции
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.AU,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Account,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПроводкаDSSAU,
		|	ПроводкаDSSAccount,
		|	ПроводкаDSSCurrency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы КАК AU,
		|	КонтрольныеСуммыПриЗагрузке.Account КАК Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency КАК Currency,
		|	СУММА(КонтрольныеСуммыПриЗагрузке.Amount) КАК Amount
		|ПОМЕСТИТЬ КонтрольныеСуммыПриЗагрузке
		|ИЗ
		|	РегистрСведений.КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|ГДЕ
		|	КонтрольныеСуммыПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтрольныеСуммыПриЗагрузке.ИдентификаторСистемы,
		|	КонтрольныеСуммыПриЗагрузке.Account,
		|	КонтрольныеСуммыПриЗагрузке.Currency
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	AU,
		|	Account,
		|	Currency
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.AU, ДанныеТранзакции.ПроводкаDSSAU) КАК AU,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Account, ДанныеТранзакции.ПроводкаDSSAccount) КАК Account,
		|	ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) - ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0) КАК Поле1,
		|	ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Currency, ДанныеТранзакции.ПроводкаDSSCurrency) КАК Currency
		|ИЗ
		|	КонтрольныеСуммыПриЗагрузке КАК КонтрольныеСуммыПриЗагрузке
		|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеТранзакции КАК ДанныеТранзакции
		|		ПО КонтрольныеСуммыПриЗагрузке.Account = ДанныеТранзакции.ПроводкаDSSAccount
		|			И КонтрольныеСуммыПриЗагрузке.Currency = ДанныеТранзакции.ПроводкаDSSCurrency
		|			И КонтрольныеСуммыПриЗагрузке.AU = ДанныеТранзакции.ПроводкаDSSAU
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеТранзакции.ПроводкаDSSAmount, 0) <> ЕСТЬNULL(КонтрольныеСуммыПриЗагрузке.Amount, 0))";
		
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекОшибка = СтрШаблон("Checksums do not match for AU = %1, Account = %2, Currency = %3.", ВыборкаДетальныеЗаписи.AU, ВыборкаДетальныеЗаписи.Account, ВыборкаДетальныеЗаписи.Currency);
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Отказ = Истина;
		ВызватьИсключение ТекОшибка;
	КонецЕсли;
	// } RGS TAlmazova 03.07.2017 18:09:39 - проверка контрольных сумм
	
	// { RGS TAlmazova 27.07.2017 14:17:40 - Пометка на удаление корректировок, если данные в транзакции поменялись
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСуществующихТранзакций.Ссылка КАК Ссылка,
		|	ТаблицаСуществующихТранзакций.Company,
		|	ТаблицаСуществующихТранзакций.Account,
		|	ТаблицаСуществующихТранзакций.Currency,
		|	ТаблицаСуществующихТранзакций.Client,
		|	ТаблицаСуществующихТранзакций.Amount,
		|	ТаблицаСуществующихТранзакций.BaseAmount,
		|	ТаблицаСуществующихТранзакций.AU,
		|	ТаблицаСуществующихТранзакций.LegalEntity
		|ПОМЕСТИТЬ ВТ_ДанныеТранзакцийДоЗагрузки
		|ИЗ
		|	&ТаблицаСуществующихТранзакций КАК ТаблицаСуществующихТранзакций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеТранзакцийДоЗагрузки.Ссылка КАК СсылкаТранзакция,
		|	КорректировкаТранзакции.Ссылка КАК СсылкаКорректировка,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.Client КАК ТранзакцияПослеЗагрузкиClient,
		|	ВТ_ДанныеТранзакцийДоЗагрузки.Client КАК ТранзакцияДоЗагрузкиClient,
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS.DocType КАК ТранзакцияDocType
		|ИЗ
		|	ВТ_ДанныеТранзакцийДоЗагрузки КАК ВТ_ДанныеТранзакцийДоЗагрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|		ПО ВТ_ДанныеТранзакцийДоЗагрузки.Ссылка = DSSСформированныеПриЗагрузке.ПроводкаDSS.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаТранзакции КАК КорректировкаТранзакции
		|		ПО ВТ_ДанныеТранзакцийДоЗагрузки.Ссылка = КорректировкаТранзакции.ДокументОснование
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|	И (DSSСформированныеПриЗагрузке.ПроводкаDSS.Client = ЗНАЧЕНИЕ(Справочник.Контрагенты.GLNoName)
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Client = ЗНАЧЕНИЕ(Справочник.Контрагенты.GLNoName)
		|			ИЛИ НЕ КорректировкаТранзакции.Ссылка ЕСТЬ NULL
		|				И НЕ КорректировкаТранзакции.ПометкаУдаления)
		|	И (ВТ_ДанныеТранзакцийДоЗагрузки.Company <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Company
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Account <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Account
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Currency <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Currency
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Client <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Client
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.Amount <> DSSСформированныеПриЗагрузке.ПроводкаDSS.Amount
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.BaseAmount <> DSSСформированныеПриЗагрузке.ПроводкаDSS.BaseAmount
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.AU <> DSSСформированныеПриЗагрузке.ПроводкаDSS.AU
		|			ИЛИ ВТ_ДанныеТранзакцийДоЗагрузки.LegalEntity <> DSSСформированныеПриЗагрузке.ПроводкаDSS.LegalEntity)";
	Запрос.УстановитьПараметр("ТаблицаСуществующихТранзакций", ТаблицаСуществующихТранзакций);
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СсылкаКорректировка) Тогда
			
			КорректировкаОбъект = ВыборкаДетальныеЗаписи.СсылкаКорректировка.ПолучитьОбъект();
			КорректировкаОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.ТранзакцияПослеЗагрузкиClient = Справочники.Контрагенты.GLNoName И ВыборкаДетальныеЗаписи.ТранзакцияDocType <> "Revaluation" Тогда
			
			НЗ_Проблемы = РегистрыСведений.ПроблемыПриЗагрузке.СоздатьНаборЗаписей();
			НЗ_Проблемы.Отбор.Транзакция.Установить(ВыборкаДетальныеЗаписи.СсылкаТранзакция);
			НЗ_Проблемы.Отбор.ДокументЗагрузки.Установить(СтруктураПараметров.Ссылка);
			НЗ_Проблемы.Отбор.ОписаниеПроблемы.Установить("Missing client code");
			НоваяЗапись = НЗ_Проблемы.Добавить();
			НоваяЗапись.Транзакция = ВыборкаДетальныеЗаписи.СсылкаТранзакция;
			НоваяЗапись.ДокументЗагрузки = СтруктураПараметров.Ссылка;
			НоваяЗапись.ОписаниеПроблемы = "Missing client code";
			НЗ_Проблемы.Записать(Истина);
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата = ТекущаяДата;
			Задача.Наименование = "Fill the client in the transaction " + ВыборкаДетальныеЗаписи.СсылкаТранзакция;
			Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.OracleSmith;
			Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
			//Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
			Задача.Автор = Пользователи.ТекущийПользователь();
			Задача.Предмет = ВыборкаДетальныеЗаписи.СсылкаТранзакция;
			Задача.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
		
	// } RGS TAlmazova 27.07.2017 14:17:42 - Пометка на удаление корректировок, если данные в транзакции поменялись
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПолучитьМассивТранзакцийOracleSmith(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючиТранзакцийOracleSmith.Транзакция
		|ИЗ
		|	РегистрСведений.КлючиТранзакцийOracleSmith КАК КлючиТранзакцийOracleSmith
		|ГДЕ
		|	КлючиТранзакцийOracleSmith.psob_id = &psob_id
		|	И КлючиТранзакцийOracleSmith.source = &source
		|	И КлючиТранзакцийOracleSmith.category = &category
		|	И КлючиТранзакцийOracleSmith.batch_name = &batch_name
		|	И КлючиТранзакцийOracleSmith.je_name = &je_name
		|	И КлючиТранзакцийOracleSmith.je_line_num = &je_line_num
		|	И НЕ КлючиТранзакцийOracleSmith.Транзакция.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("batch_name", СтруктураПараметров.batch_name);
	Запрос.УстановитьПараметр("category", СтруктураПараметров.category);
	Запрос.УстановитьПараметр("je_line_num", СтруктураПараметров.je_line_num);
	Запрос.УстановитьПараметр("je_name", СтруктураПараметров.je_name);
	Запрос.УстановитьПараметр("psob_id", СтруктураПараметров.psob_id);
	Запрос.УстановитьПараметр("source", СтруктураПараметров.source);
	
	МассивТранзакций = Новый Массив();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивТранзакций;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МассивТранзакций.Добавить(ВыборкаДетальныеЗаписи.Транзакция);
		
	КонецЦикла;
	
	Возврат МассивТранзакций;
	
КонецФункции

Процедура ЗаполнитьТранзакцию(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, Source, Отказ, ТекстСообщенияОбОшибках, КлиентОтсутствует, КэшAU)
	
	ЗаполнитьЗначенияСвойств(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
	
	Если Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		ТранзакцияOracleОбъект.Номер = "MI-" + ДанныеДляЗаполнения.ID_ORIG;
	ИначеЕсли ТранзакцияOracleОбъект.ЭтоНовый() Тогда
		ТранзакцияOracleОбъект.УстановитьНовыйНомер("SM-");
	КонецЕсли;
	ТранзакцияOracleОбъект.Дата = ДанныеДляЗаполнения.GlDate;
	ТранзакцияOracleОбъект.Source = Source;
	
	ТранзакцияOracleОбъект.GlSourceType = ПолучитьGlSourceType(ДанныеДляЗаполнения);
	
	ПреобразованиеСокрЛП(ТранзакцияOracleОбъект);
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаполнения.AU) Тогда
		
		Если КэшAU[ДанныеДляЗаполнения.КодAU] = Неопределено Тогда
			
			НовыйКостЦентр = Справочники.КостЦентры.СоздатьЭлемент();
			НовыйКостЦентр.Source = Source;
			НовыйКостЦентр.Код = ДанныеДляЗаполнения.КодAU;
			НовыйКостЦентр.Наименование = ДанныеДляЗаполнения.КодAU;
			НовыйКостЦентр.Сегмент = ДанныеДляЗаполнения.SubSubSegment;
			НовыйКостЦентр.ПодразделениеОрганизации = ДанныеДляЗаполнения.Location;
			НовыйКостЦентр.ОбменДанными.Загрузка = Истина;
			НовыйКостЦентр.Записать();
			
			КэшAU.Вставить(ДанныеДляЗаполнения.КодAU, НовыйКостЦентр.Ссылка);
			
		КонецЕсли;
		
		AU = КэшAU[ДанныеДляЗаполнения.КодAU];
		
	Иначе
		
		AU = ДанныеДляЗаполнения.AU;
		
	КонецЕсли;
	
	ТранзакцияOracleОбъект.AU = AU;
	
	// { RGS TAlmazova 14.07.2017 13:52:00 - Если клиент не определился по cost_no, для JV проверять line_desc
	Если НЕ ЗначениеЗаполнено(ТранзакцияOracleОбъект.Client) И ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.JV И Source = Перечисления.ТипыСоответствий.OracleSmith Тогда
		Индекс = Найти(ДанныеДляЗаполнения.CUSTOMER_NUMBER_JV, "-");
		Если Индекс <> 0 Тогда
			 НомерКлиента = Лев(ДанныеДляЗаполнения.CUSTOMER_NUMBER_JV,Индекс - 1);
			
			ЗапросКлиенты = Новый Запрос;
			ЗапросКлиенты.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.Идентификатор КАК Идентификатор,
				|	НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних.ОбъектПриемника
				|ИЗ
				|	РегистрСведений.НастройкаСинхронизацииОбъектовСВнешнимиСистемами.СрезПоследних(
				|			&Период,
				|			ТипСоответствия = &ТипВнешнейСистемы
				|				И ТипОбъектаВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовВнешнихСистем.Client)
				|				И Идентификатор = &НомерКлиента) КАК НастройкаСинхронизацииОбъектовСВнешнимиСистемамиСрезПоследних";
			
			ЗапросКлиенты.УстановитьПараметр("НомерКлиента", НомерКлиента);
			ЗапросКлиенты.УстановитьПараметр("Период", ТекущаяДата());
			ЗапросКлиенты.УстановитьПараметр("ТипВнешнейСистемы", Source);
			
			РезультатЗапросаКлиенты = ЗапросКлиенты.Выполнить();
			
			ВыборкаКлиенты = РезультатЗапросаКлиенты.Выбрать();
			
			Пока ВыборкаКлиенты.Следующий() Цикл
				ТранзакцияOracleОбъект.Client = ВыборкаКлиенты.ОбъектПриемника;
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;
	// } RGS TAlmazova 14.07.2017 13:52:45 - Если клиент не определился по cost_no, для JV проверять line_desc
	
	Если НЕ ЗначениеЗаполнено(ТранзакцияOracleОбъект.Client) Тогда
		// { RGS TAlmazova 03.10.2016 14:44:33 - поиск по OracleGlSourceType
		//Если ТранзакцияOracleОбъект.DocType = "JV" 
		Если ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.JV  
		// } RGS TAlmazova 03.10.2016 14:44:47 - поиск по OracleGlSourceType
			ИЛИ ТранзакцияOracleОбъект.DocType = "CASH" И ТранзакцияOracleОбъект.TransType = "TRADE_UNID" Тогда
			ТранзакцияOracleОбъект.Client = Справочники.Контрагенты.GLNoName;
			КлиентОтсутствует = Истина;
		ИначеЕсли ДанныеДляЗаполнения.CustomerNumber = "" Тогда
			ТранзакцияOracleОбъект.Client = Справочники.Контрагенты.Undefined;
		Иначе
			//ВызватьИсключение "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			ТекОшибка = "Failed to find client " + ДанныеДляЗаполнения.CustomerNumber;
			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
			КонецЕсли;
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to find client " + ДанныеДляЗаполнения.CustomerNumber,,,, Отказ);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьGlSourceType(ДанныеДляЗаполнения)
	
	Если ДанныеДляЗаполнения.GlSourceType = "SO Accrual" ИЛИ ДанныеДляЗаполнения.GlSourceType = "Sales Accrual" Тогда
		Возврат Перечисления.OracleGlSourceType.SOAccrual;
	ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "SAM Accrual" ИЛИ ДанныеДляЗаполнения.GlSourceType = "SAM Sales Accrual" Тогда
		Возврат Перечисления.OracleGlSourceType.SAMAccrual;
	ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "Receivables" Тогда
		Возврат Перечисления.OracleGlSourceType.Receivables;
	// { RGS TAlmazova 07.10.2016 13:11:22 - если неизвестный тип, то JV
	//ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "Revaluation" Тогда
	//	Возврат Перечисления.OracleGlSourceType.Revaluation;
	//ИначеЕсли ДанныеДляЗаполнения.GlSourceType = "JV" Тогда
	//	Возврат Перечисления.OracleGlSourceType.JV;
	КонецЕсли;
	//
	//Возврат Перечисления.OracleGlSourceType.ПустаяСсылка();
	Возврат Перечисления.OracleGlSourceType.JV;
	// } RGS TAlmazova 07.10.2016 13:11:53 - если неизвестный тип, то JV
	
КонецФункции

Процедура ПреобразованиеСокрЛП(ТранзакцияOracleОбъект)
	
	ТранзакцияOracleОбъект.Contract = СокрЛП(ТранзакцияOracleОбъект.Contract);
	ТранзакцияOracleОбъект.DocType = СокрЛП(ТранзакцияOracleОбъект.DocType);
	ТранзакцияOracleОбъект.TransType = СокрЛП(ТранзакцияOracleОбъект.TransType);
	ТранзакцияOracleОбъект.SONum = СокрЛП(ТранзакцияOracleОбъект.SONum);
	ТранзакцияOracleОбъект.CreatedBy = СокрЛП(ТранзакцияOracleОбъект.CreatedBy);
	ТранзакцияOracleОбъект.CreatedByName = СокрЛП(ТранзакцияOracleОбъект.CreatedByName);
	
КонецПроцедуры

Функция СформироватьСвязанныеОбъекты(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, ТранзакцияОбнулена, Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияOracleОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	//СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Location, SubSubSegment, Account, Currency");
	СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	СтруктураПоискаSO = Новый Структура("Номер, Company");
	
	// { RGS TAlmazova 03.10.2016 14:58:14 - изменение порядка условий
	//Если ТранзакцияOracleОбъект.DocType = "JV" Тогда
	//	
	//	СтруктураПоискаРучнойКорректировки.Source = ТранзакцияOracleОбъект.Source;
	//	СтруктураПоискаРучнойКорректировки.Company = ТранзакцияOracleОбъект.Company;
	//	//СтруктураПоискаРучнойКорректировки.Client = ТранзакцияOracleОбъект.Client;
	//	СтруктураПоискаРучнойКорректировки.Location = ТранзакцияOracleОбъект.Location;
	//	СтруктураПоискаРучнойКорректировки.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	//	СтруктураПоискаРучнойКорректировки.Account = ТранзакцияOracleОбъект.Account;
	//	СтруктураПоискаРучнойКорректировки.Currency = ТранзакцияOracleОбъект.Currency;
	//	
	//	СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
	//	Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
	//		ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект);
	//		НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
	//		НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
	//		НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
	//		//НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
	//		НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
	//		НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	//		НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
	//		НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
	//		НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
	//	Иначе
	//		ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
	//	КонецЕсли;
	//	
	//ИначеЕсли ТранзакцияOracleОбъект.DocType = "Accrual" Тогда
	Если ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.SAMAccrual ИЛИ ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.SOAccrual Тогда
		
		SOОснование = Неопределено;
		
		Если ПустаяСтрока(ДанныеДляЗаполнения.InvoiceNumberSAM) Тогда
			СтруктураПоискаSO.Номер = ДанныеДляЗаполнения.SONum;
		Иначе
			
			Если НЕ ПустаяСтрока(ДанныеДляЗаполнения.SONum) Тогда
				
				СтруктураПоискаSO.Номер = ДанныеДляЗаполнения.SONum;
				СтруктураПоискаSO.Company = ДанныеДляЗаполнения.Company;
				СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSO);
				
				Если СтрокиSalesOrder.Количество() = 0 Тогда
					
					SOОснование = СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
					НоваяСтрокаКэша = КэшSalesOrders.Добавить();
					НоваяСтрокаКэша.Номер = ДанныеДляЗаполнения.SONum;
					НоваяСтрокаКэша.Company = ДанныеДляЗаполнения.Company;
					НоваяСтрокаКэша.Ссылка = SOОснование;
					
				Иначе
					
					SOОснование = СтрокиSalesOrder[0].Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураПоискаSO.Номер = "SAM-" + ДанныеДляЗаполнения.InvoiceNumberSAM;
			
		КонецЕсли;
		СтруктураПоискаSO.Company = ДанныеДляЗаполнения.Company;
		СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSO);
		
		Если СтрокиSalesOrder.Количество() = 0 Тогда

			Если ТранзакцияOracleОбъект.TransType = "A" Тогда
				
				ТекSalesOrder = СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, SOОснование);
				НоваяСтрокаКэша = КэшSalesOrders.Добавить();
				НоваяСтрокаКэша.Номер = СтруктураПоискаSO.Номер;
				НоваяСтрокаКэша.Company = ДанныеДляЗаполнения.Company;
				НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
				
			Иначе
				
				Если НЕ ЭтоПроводкаПоСчетуВыручки И ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Sales Order for transaction " + ТранзакцияOracleОбъект.Номер;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					Если Не ЭтоПроводкаПоСчетуВыручки Тогда
						ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
						ТранзакцияОбнулена = Истина;
						ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, Документы.SalesOrder.ПустаяСсылка());
					Иначе
						ТекSalesOrder = СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, SOОснование);
						НоваяСтрокаКэша = КэшSalesOrders.Добавить();
						НоваяСтрокаКэша.Номер = СтруктураПоискаSO.Номер;
						НоваяСтрокаКэша.Company = ДанныеДляЗаполнения.Company;
						НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекSalesOrder = СтрокиSalesOrder[0].Ссылка;
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
			Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда 
				ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder, ТранзакцияOracleОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.Receivables Тогда
		Если ТранзакцияOracleОбъект.DocType = "DEP" ИЛИ ТранзакцияOracleОбъект.DocType = "GUAR"
			ИЛИ ТранзакцияOracleОбъект.DocType = "INV" ИЛИ ТранзакцияOracleОбъект.DocType = "PMT"
			ИЛИ ТранзакцияOracleОбъект.DocType = "CB" Тогда
		
			//СтрокаИнвойса = КэшИнвойсов.Найти(?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2), "ArInvoice");
			//
			//Если СтрокаИнвойса = Неопределено Тогда

			//	ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект);
			//	НоваяСтрокаКэша = КэшИнвойсов.Добавить();
			//	НоваяСтрокаКэша.ArInvoice = ?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2);
			//	НоваяСтрокаКэша.Invoice = ТекИнвойс;
			//	
			//Иначе
			//	
			//	ТекИнвойс = СтрокаИнвойса.Invoice;
			//	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			//
			//КонецЕсли;
			// TODO RGS AGorlenko 21.07.2016: переделать поиск
			// { RGS TAlmazova 01.12.2016 17:24:47 - возврат алгоритма поиска инвойса при создании
			ТекИнвойс = ПолучитьИнвойсПриСоздании(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source);
			//ТекИнвойс = ПолучитьИнвойс(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
			// } RGS TAlmazova 01.12.2016 17:25:05 - возврат алгоритма поиска инвойса при создании
			
			Если Не ЗначениеЗаполнено(ТекИнвойс) Тогда
				ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
			Иначе
				//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
				//	ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				//КонецЕсли;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			КонецЕсли;
			
			// если указан номер SO, надо прописать связку
			Если НЕ ПустаяСтрока(ДанныеДляЗаполнения.InvoiceNumberSAM) ИЛИ НЕ ПустаяСтрока(ТранзакцияOracleОбъект.SONum) Тогда
				
				СтруктураПоискаSO.Номер = ?(НЕ ПустаяСтрока(ДанныеДляЗаполнения.InvoiceNumberSAM), "SAM-" + ДанныеДляЗаполнения.InvoiceNumberSAM, ТранзакцияOracleОбъект.SONum);
				СтруктураПоискаSO.Company = ТранзакцияOracleОбъект.Company;
				СтрокиSalesOrder = КэшSalesOrders.НайтиСтроки(СтруктураПоискаSO);
				
				// { RGS AGorlenko 28.07.2016 2:00:46 - 
				//Если СтрокаSalesOrder = Неопределено Тогда
				//	
				//	НайденаОшибка = Истина;
				//	
				//Иначе
				//	
				//	ТекSalesOrder = СтрокаSalesOrder.Ссылка;
				//	ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
				//	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
				//
				//КонецЕсли;
				Если СтрокиSalesOrder.Количество() > 0 Тогда
					
					ТекSalesOrder = СтрокиSalesOrder[0].Ссылка;
					ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
					Если НЕ ЭтоПроводкаПоСчетуВыручки ТОгда
						ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder, ТранзакцияOracleОбъект);
					КонецЕсли;
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
				
				КонецЕсли;
				// } RGS AGorlenko 28.07.2016 2:00:48 - 
				
			КонецЕсли;
			
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "DM" ИЛИ ТранзакцияOracleОбъект.DocType = "CM" Тогда
			
			Если ТранзакцияOracleОбъект.TransType = "CM_REC" ИЛИ ТранзакцияOracleОбъект.TransType = "DM_REC" Тогда
				//ТекМемо = Документы.Memo.НайтиПоНомеру(ТранзакцияOracleОбъект.DocNumber);
				ТекМемо = ПолучитьMemo(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
				Если Не ЗначениеЗаполнено(ТекМемо) Тогда
					ТекМемо = СоздатьМемо(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				Иначе
					Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
						ДозаполнитьМемоИзПроводки(ТекМемо, ТранзакцияOracleОбъект);
					КонецЕсли;
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
				КонецЕсли;
			Иначе
				// { RGS TAlmazova 13.10.2016 12:18:46 - 
				
				//Если ТранзакцияOracleОбъект.Amount > 0 Тогда
				//	ТекМемо = Документы.Memo.НайтиПоНомеру(ТранзакцияOracleОбъект.OriginalTrxNumber);
				//	Если ЗначениеЗаполнено(ТекМемо) Тогда
				//		ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
				//	Иначе
				//		//НайденаОшибка = Истина;
				//		Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
				//			ТекОшибка = "Failed to find Memo for transaction " + ТранзакцияOracleОбъект.Номер;
				//			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				//				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
				//			КонецЕсли;
				//			Отказ = Истина;
				//		Иначе
				//			ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
				//			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, Документы.Memo.ПустаяСсылка());
				//		КонецЕсли;
				//	КонецЕсли;
				//Иначе
				//	ТекИнвойс = ПолучитьИнвойс(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source);
				//	Если ЗначениеЗаполнено(ТекИнвойс) Тогда
				//		ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				//	Иначе
				//		//НайденаОшибка = Истина;
				//		Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
				//			ТекОшибка = "Failed to find Invoice for transaction " + ТранзакцияOracleОбъект.Номер;
				//			Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
				//				ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
				//			КонецЕсли;
				//			Отказ = Истина;
				//		Иначе
				//			ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
				//			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЕсли;
				// { RGS TAlmazova 01.12.2016 17:24:47 - возврат алгоритма поиска инвойса при создании
				ТекИнвойс = ПолучитьИнвойсПриСоздании(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source);
				//ТекИнвойс = ПолучитьИнвойс(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
				// } RGS TAlmazova 01.12.2016 17:25:05 - возврат алгоритма поиска инвойса при создании
				Если ЗначениеЗаполнено(ТекИнвойс) Тогда
					//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
					//	ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
					//КонецЕсли;
					ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				Иначе
					// { RGS TAlmazova 13.10.2016 16:40:09 - 
					//ТекМемо = Документы.Memo.НайтиПоНомеру(ТранзакцияOracleОбъект.OriginalTrxNumber);
					ТекМемо = ПолучитьMemo(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
					// } RGS TAlmazova 13.10.2016 16:40:10 - 
					Если ЗначениеЗаполнено(ТекМемо) Тогда
						Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
							ДозаполнитьМемоИзПроводки(ТекМемо, ТранзакцияOracleОбъект);
						КонецЕсли;
						ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
					Иначе
						//НайденаОшибка = Истина;
						Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
							ТекОшибка = "Failed to find Memo or Invoice for transaction " + ТранзакцияOracleОбъект.Номер;
							Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
								ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
							КонецЕсли;
							Отказ = Истина;
						Иначе
							Если Не ЭтоПроводкаПоСчетуВыручки Тогда
								ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
								ТранзакцияОбнулена = Истина;
								ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, Документы.Memo.ПустаяСсылка());
							Иначе
								ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				// } RGS TAlmazova 13.10.2016 12:18:55 - 
				
			КонецЕсли;
			
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "CASH" Тогда
			
			//СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.DocNumber, "PaymentNumber");
			//
			//Если СтрокаCashBatch = Неопределено Тогда

			//	ТекCashBatch = СоздатьCashBatch(ТранзакцияOracleОбъект);
			//	НоваяСтрокаКэша = КэшCashBatch.Добавить();
			//	НоваяСтрокаКэша.PaymentNumber = ДанныеДляЗаполнения.DocNumber;
			//	НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
			//	
			//Иначе
			//	
			//	ТекCashBatch = СтрокаCashBatch.Ссылка;
			//	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			//
			//КонецЕсли;
			// TODO RGS AGorlenko 21.07.2016: переделать поиск
			ТекCashBatch = ПолучитьCashBatch(ТранзакцияOracleОбъект.DocID, ТранзакцияOracleОбъект.Source, ТранзакцияOracleОбъект.TransType = "TRADE_ACC");
			
			Если Не ЗначениеЗаполнено(ТекCashBatch) Тогда
				ТекCashBatch = СоздатьCashBatch(ТранзакцияOracleОбъект, ТранзакцияOracleОбъект.TransType = "TRADE_ACC", ДанныеДляЗаполнения);
			Иначе
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			КонецЕсли;
			
			Если ТранзакцияOracleОбъект.TransType = "CCURR_REC" ИЛИ ТранзакцияOracleОбъект.TransType = "TRADE_REC" Тогда
				
				// Batch allocation
				СтруктураПоискаBatch.Source = ТранзакцияOracleОбъект.Source;
				СтруктураПоискаBatch.Company = ТранзакцияOracleОбъект.Company;
				СтруктураПоискаBatch.Client = ТранзакцияOracleОбъект.Client;
				СтруктураПоискаBatch.Location = ТранзакцияOracleОбъект.Location;
				СтруктураПоискаBatch.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
				СтруктураПоискаBatch.Account = ТранзакцияOracleОбъект.Account;
				СтруктураПоискаBatch.Currency = ТранзакцияOracleОбъект.Currency;
				
				СтрокиBatchAllocation = КэшBatchAllocation.НайтиСтроки(СтруктураПоискаBatch);
				Если СтрокиBatchAllocation.Количество() = 0 Тогда
					ТекBatchAllocation = СоздатьBatchAllocation(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
					НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
					НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
					НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
					НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
					НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
					НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
					НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
					НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
					НоваяСтрокаКэша.BatchAllocation = ТекBatchAllocation;
				Иначе
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, СтрокиBatchAllocation[0].BatchAllocation);
				КонецЕсли;
				
				//ДокументРасчетов = ПолучитьДокументРасчетов(ТранзакцияOracleОбъект.DocNumber2);
				//ДокументРасчетов = ПолучитьИнвойс(ТранзакцияOracleОбъект.LineID, ТранзакцияOracleОбъект.Source);
				ДокументРасчетов = ПолучитьИнвойс(ТранзакцияOracleОбъект.LineID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
				Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.Invoice") Тогда
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокументРасчетов);
				Иначе
					ДокументРасчетов = ПолучитьMemo(ТранзакцияOracleОбъект.LineID, ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.Source);
					Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.Memo") Тогда
						ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ДокументРасчетов);
					Иначе
						//НайденаОшибка = Истина;
						Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
							ТекОшибка = "Failed to find Invoice for transaction " + ТранзакцияOracleОбъект.Номер;
							Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
								ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
							КонецЕсли;
							Отказ = Истина;
						Иначе
							Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
								ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
								ТранзакцияОбнулена = Истина;
								ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
							Иначе
								ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураПоискаРучнойКорректировки.Source = ТранзакцияOracleОбъект.Source;
		СтруктураПоискаРучнойКорректировки.Company = ТранзакцияOracleОбъект.Company;
		СтруктураПоискаРучнойКорректировки.Client = ТранзакцияOracleОбъект.Client;
		СтруктураПоискаРучнойКорректировки.Location = ТранзакцияOracleОбъект.Location;
		СтруктураПоискаРучнойКорректировки.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
		СтруктураПоискаРучнойКорректировки.Account = ТранзакцияOracleОбъект.Account;
		СтруктураПоискаРучнойКорректировки.Currency = ТранзакцияOracleОбъект.Currency;
		
		СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
		Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
			ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект);
			НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
			НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
			НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
			НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
			НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
			НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
			НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
			НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
			НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
		КонецЕсли;
	// } RGS TAlmazova 03.10.2016 14:58:21 - изменение порядка условий
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
КонецФункции

Функция СформироватьСвязанныеОбъектыSmith(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, КэшSalesOrders, КэшРучныхКоррерктировок, КэшИнвойсов, КэшМемо, КэшCashBatch, КэшBatchAllocation, ДатаНачалаЗагрузки, ДатаВыверенныхОстатков, ТранзакцияОбнулена,  Отказ, ТекстСообщенияОбОшибках)
	
	НайденаОшибка = Ложь;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияOracleОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	
	СтруктураПоискаРучнойКорректировки = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	СтруктураПоискаBatch = Новый Структура("Source, Company, Client, Location, SubSubSegment, Account, Currency");
	
	Если ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.SAMAccrual ИЛИ ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.SOAccrual Тогда
	
		СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
		
		Если СтрокаSalesOrder = Неопределено Тогда

			Если ТранзакцияOracleОбъект.TransType = "A" Тогда
				
				ТекSalesOrder = СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшSalesOrders.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
				НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
				
			Иначе
				
				Если НЕ ЭтоПроводкаПоСчетуВыручки И ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Sales Order for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
						+ ", source = " + ДанныеДляЗаполнения.GlSourceType
						+ ", category = " + ДанныеДляЗаполнения.DocType
						+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
						+ ", je_name = " + ДанныеДляЗаполнения.je_name
						+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num
						+ ", master_source_document_number = " + ДанныеДляЗаполнения.master_source_document_number;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					Если Не ЭтоПроводкаПоСчетуВыручки Тогда
						ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
						ТранзакцияОбнулена = Истина;
						ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, Документы.SalesOrder.ПустаяСсылка());
					Иначе
						ТекSalesOrder = СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
						НоваяСтрокаКэша = КэшSalesOrders.Добавить();
						НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
						НоваяСтрокаКэша.Ссылка = ТекSalesOrder;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекSalesOrder = СтрокаSalesOrder.Ссылка;
			Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
				ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder, ТранзакцияOracleОбъект);
			КонецЕсли;
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
		
		КонецЕсли;
		
	ИначеЕсли ТранзакцияOracleОбъект.GlSourceType = Перечисления.OracleGlSourceType.Receivables Тогда
		
		Если ТранзакцияOracleОбъект.DocType = "Sales Invoices" Тогда
		
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшИнвойсов.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
				НоваяСтрокаКэша.Invoice = ТекИнвойс;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Invoice;
				//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
				//	ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				//КонецЕсли;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			
			КонецЕсли;
			
			//Если есть СО, то нужно прописать связку
			СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаSalesOrder <> Неопределено Тогда
				
				ТекSalesOrder = СтрокаSalesOrder.Ссылка;
				ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
				Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
					ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder, ТранзакцияOracleОбъект);
				КонецЕсли;
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
			
			КонецЕсли;
			
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "Adjustment" Тогда
		// } RGS TAlmazova 19.12.2017 11:45:22 - новый тип транзакций
		
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				ТекОшибка = "Failed to find Invoice for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
					+ ", source = " + ДанныеДляЗаполнения.GlSourceType
					+ ", category = " + ДанныеДляЗаполнения.DocType
					+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
					+ ", je_name = " + ДанныеДляЗаполнения.je_name
					+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num
					+ ", master_source_document_number = " + ДанныеДляЗаполнения.master_source_document_number;
				Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
					ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
				КонецЕсли;
				
				Отказ = Истина;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Invoice;
				//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
				//	ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				//КонецЕсли;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
			
				//Если есть СО, то нужно прописать связку
				СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
				
				Если СтрокаSalesOrder <> Неопределено Тогда
					
					ТекSalesOrder = СтрокаSalesOrder.Ссылка;
					ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
					Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
						ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder, ТранзакцияOracleОбъект);
					КонецЕсли;
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
				
				КонецЕсли;
			КонецЕсли;
									
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "Credit Memos" Тогда
			
			СтрокаМемо = КэшМемо.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаМемо = Неопределено Тогда

				ТекМемо = СоздатьМемо(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшМемо.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
				НоваяСтрокаКэша.Мемо = ТекМемо;
				
			Иначе
				
				ТекМемо = СтрокаМемо.Мемо;
				Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
					ДозаполнитьМемоИзПроводки(ТекМемо, ТранзакцияOracleОбъект);
				КонецЕсли;
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			
			КонецЕсли;
				
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "Credit Memo Applications" Тогда
			
			СтрокаМемо = КэшМемо.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаМемо = Неопределено Тогда

				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Memo for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
						+ ", source = " + ДанныеДляЗаполнения.GlSourceType
						+ ", category = " + ДанныеДляЗаполнения.DocType
						+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
						+ ", je_name = " + ДанныеДляЗаполнения.je_name
						+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num
						+ ", master_source_document_number = " + ДанныеДляЗаполнения.master_source_document_number;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
						ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
						ТранзакцияОбнулена = Истина;
						ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, Документы.Memo.ПустаяСсылка());
					Иначе 
						ТекМемо = СоздатьМемо(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
						НоваяСтрокаКэша = КэшМемо.Добавить();
						НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
						НоваяСтрокаКэша.Мемо = ТекМемо;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ТекМемо = СтрокаМемо.Мемо;
				Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
					ДозаполнитьМемоИзПроводки(ТекМемо, ТранзакцияOracleОбъект);
				КонецЕсли;
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
			
			КонецЕсли;
			
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.LineID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда

				Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
					ТекОшибка = "Failed to find Invoice for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
						+ ", source = " + ДанныеДляЗаполнения.GlSourceType
						+ ", category = " + ДанныеДляЗаполнения.DocType
						+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
						+ ", je_name = " + ДанныеДляЗаполнения.je_name
						+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num
						+ ", master_source_document_number = " + ДанныеДляЗаполнения.master_source_document_number;
					Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
						ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
					КонецЕсли;
					Отказ = Истина;
				Иначе
					Если Не ЭтоПроводкаПоСчетуВыручки Тогда
						ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
						ТранзакцияОбнулена = Истина;
						ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, Документы.Memo.ПустаяСсылка());
					Иначе
						ТекМемо = СоздатьМемо(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
						НоваяСтрокаКэша = КэшМемо.Добавить();
						НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
						НоваяСтрокаКэша.Мемо = ТекМемо;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Invoice;
				//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
				//	ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				//КонецЕсли;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				
				//Если есть СО, то нужно прописать связку
				СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
				
				Если СтрокаSalesOrder <> Неопределено Тогда
					
					ТекSalesOrder = СтрокаSalesOrder.Ссылка;
					ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
					Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
						ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder, ТранзакцияOracleОбъект);
					КонецЕсли;
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
				
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ТранзакцияOracleОбъект.DocType = "Trade Receipts" ИЛИ ТранзакцияOracleОбъект.DocType = "Cross Currency" Тогда
			
			СтрокаCashBatch = КэшCashBatch.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаCashBatch = Неопределено Тогда

				ТекCashBatch = СоздатьCashBatch(ТранзакцияOracleОбъект, Ложь, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшCashBatch.Добавить();
				НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
				НоваяСтрокаКэша.CashBatch = ТекCashBatch;
				
			Иначе
				
				ТекCashBatch = СтрокаCashBatch.CashBatch;
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ТекCashBatch);
			
			КонецЕсли;
			
			// Batch allocation
			СтруктураПоискаBatch.Source = ТранзакцияOracleОбъект.Source;
			СтруктураПоискаBatch.Company = ТранзакцияOracleОбъект.Company;
			СтруктураПоискаBatch.Client = ТранзакцияOracleОбъект.Client;
			СтруктураПоискаBatch.Location = ТранзакцияOracleОбъект.Location;
			СтруктураПоискаBatch.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
			СтруктураПоискаBatch.Account = ТранзакцияOracleОбъект.Account;
			СтруктураПоискаBatch.Currency = ТранзакцияOracleОбъект.Currency;
			
			СтрокиBatchAllocation = КэшBatchAllocation.НайтиСтроки(СтруктураПоискаBatch);
			Если СтрокиBatchAllocation.Количество() = 0 Тогда
				ТекBatchAllocation = СоздатьBatchAllocation(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				НоваяСтрокаКэша = КэшBatchAllocation.Добавить();
				НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
				НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
				НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
				НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
				НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
				НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
				НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
				НоваяСтрокаКэша.BatchAllocation = ТекBatchAllocation;
			Иначе
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, СтрокиBatchAllocation[0].BatchAllocation);
			КонецЕсли;
			
			СтрокаИнвойса = КэшИнвойсов.Найти(ДанныеДляЗаполнения.LineID, "DocID");
			
			Если СтрокаИнвойса = Неопределено Тогда
				
				// { RGS TAlmazova 28.02.2018 19:31:31 - возможна оплата по мемо
				СтрокаМемо = КэшМемо.Найти(ДанныеДляЗаполнения.LineID, "DocID");
				Если СтрокаМемо <> Неопределено Тогда
					ТекМемо = СтрокаМемо.Мемо;
					ДозаполнитьМемоИзПроводки(ТекМемо, ТранзакцияOracleОбъект);
					ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ТекМемо);
				Иначе
				// } RGS TAlmazova 28.02.2018 19:31:51 - возможна оплата по мемо
				
					Если ТранзакцияOracleОбъект.Дата >= ДатаВыверенныхОстатков Тогда
						ТекОшибка = "Failed to Invoice for transaction psob_id = " + ДанныеДляЗаполнения.psob_id
							+ ", source = " + ДанныеДляЗаполнения.GlSourceType
							+ ", category = " + ДанныеДляЗаполнения.DocType
							+ ", batch_name = " + ДанныеДляЗаполнения.batch_name
							+ ", je_name = " + ДанныеДляЗаполнения.je_name
							+ ", je_line_num = " + ДанныеДляЗаполнения.je_line_num
							+ ", master_source_document_number = " + ДанныеДляЗаполнения.master_source_document_number;
						Если СтрНайти(ТекстСообщенияОбОшибках, ТекОшибка) = 0 Тогда
							ТекстСообщенияОбОшибках = ТекстСообщенияОбОшибках + ТекОшибка + Символы.ПС;
						КонецЕсли;
						Отказ = Истина;
					Иначе
						Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
							ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект);
							ТранзакцияОбнулена = Истина;
							ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, Документы.Invoice.ПустаяСсылка());
						Иначе
							ТекИнвойс = СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
							НоваяСтрокаКэша = КэшИнвойсов.Добавить();
							НоваяСтрокаКэша.DocID = ДанныеДляЗаполнения.DocID;
							НоваяСтрокаКэша.Invoice = ТекИнвойс;
						КонецЕсли;
					КонецЕсли;
					
				// { RGS TAlmazova 28.02.2018 19:31:31 - возможна оплата по мемо
				КонецЕсли;
				// } RGS TAlmazova 28.02.2018 19:31:51 - возможна оплата по мемо
				
			Иначе
				
				ТекИнвойс = СтрокаИнвойса.Invoice;
				//Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
				//	ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения);
				//КонецЕсли;
				ДозаполнитьИнвойсИзПроводки(ТекИнвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки);
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ТекИнвойс);
				
			КонецЕсли;
			
			//Если есть СО, то нужно прописать связку
			СтрокаSalesOrder = КэшSalesOrders.Найти(ДанныеДляЗаполнения.DocID, "DocID");
			
			Если СтрокаSalesOrder <> Неопределено Тогда
				
				ТекSalesOrder = СтрокаSalesOrder.Ссылка;
				ОбновитьSalesOrder(ТекSalesOrder, ТекИнвойс);
				Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
					ДозаполнитьSalesOrderИзПроводки(ТекSalesOrder, ТранзакцияOracleОбъект);
				КонецЕсли;
				ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ТекSalesOrder);
			
			КонецЕсли;
		
			
		КонецЕсли;
		
	Иначе
		
		СтруктураПоискаРучнойКорректировки.Source = ТранзакцияOracleОбъект.Source;
		СтруктураПоискаРучнойКорректировки.Company = ТранзакцияOracleОбъект.Company;
		СтруктураПоискаРучнойКорректировки.Client = ТранзакцияOracleОбъект.Client;
		СтруктураПоискаРучнойКорректировки.Location = ТранзакцияOracleОбъект.Location;
		СтруктураПоискаРучнойКорректировки.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
		СтруктураПоискаРучнойКорректировки.Account = ТранзакцияOracleОбъект.Account;
		СтруктураПоискаРучнойКорректировки.Currency = ТранзакцияOracleОбъект.Currency;
		
		СтрокиРучнойКорректировки = КэшРучныхКоррерктировок.НайтиСтроки(СтруктураПоискаРучнойКорректировки);
		Если СтрокиРучнойКорректировки.Количество() = 0 Тогда
			ТекРучнаяКорректировка = СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект);
			НоваяСтрокаКэша = КэшРучныхКоррерктировок.Добавить();
			НоваяСтрокаКэша.Source = ТранзакцияOracleОбъект.Source;
			НоваяСтрокаКэша.Company = ТранзакцияOracleОбъект.Company;
			НоваяСтрокаКэша.Client = ТранзакцияOracleОбъект.Client;
			НоваяСтрокаКэша.Location = ТранзакцияOracleОбъект.Location;
			НоваяСтрокаКэша.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
			НоваяСтрокаКэша.Account = ТранзакцияOracleОбъект.Account;
			НоваяСтрокаКэша.Currency = ТранзакцияOracleОбъект.Currency;
			НоваяСтрокаКэша.РучнаяКорректировка = ТекРучнаяКорректировка;
		Иначе
			ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, СтрокиРучнойКорректировки[0].РучнаяКорректировка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденаОшибка;
	
КонецФункции

Процедура ОбнулитьСуммыПроводки(ТранзакцияOracleОбъект)
	
	//ТранзакцияOracleОбъект1 = ТранзакцияOracleОбъект.Ссылка.ПолучитьОбъект();
	ТранзакцияOracleОбъект.Amount = 0;
	ТранзакцияOracleОбъект.BaseAmount = 0;
	ТранзакцияOracleОбъект.ОбменДанными.Загрузка = Истина;
	ТранзакцияOracleОбъект.Записать();
	
КонецПроцедуры

Функция ПолучитьИнвойс(DocID, DocNumber, Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.DocID = &DocID
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.DocNumber = &DocNumber
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.Source = &Source";
	
	Запрос.УстановитьПараметр("DocNumber", DocNumber);
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	
	//РезультатЗапроса = Запрос.Выполнить();
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если МассивРезультатов[0].Пустой() Тогда
		Если МассивРезультатов[1].Пустой() Тогда
			Возврат Неопределено;
		Иначе
			ВыборкаДетальныеЗаписи = МассивРезультатов[1].Выбрать();
		КонецЕсли;
	Иначе
		ВыборкаДетальныеЗаписи = МассивРезультатов[0].Выбрать();
	КонецЕсли;
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
	
КонецФункции

Функция ПолучитьMemo(DocID, DocNumber, Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Memo.Ссылка
		|ИЗ
		|	Документ.Memo КАК Memo
		|ГДЕ
		|	Memo.DocID = &DocID
		|	И НЕ Memo.ПометкаУдаления
		|	И Memo.Source = &Source
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Memo.Ссылка
		|ИЗ
		|	Документ.Memo КАК Memo
		|ГДЕ
		|	Memo.Номер = &DocNumber
		|	И НЕ Memo.ПометкаУдаления
		|	И Memo.Source = &Source";
	
	Запрос.УстановитьПараметр("DocNumber", DocNumber);
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если МассивРезультатов[0].Пустой() Тогда
		Если МассивРезультатов[1].Пустой() Тогда
			Возврат Неопределено;
		Иначе
			ВыборкаДетальныеЗаписи = МассивРезультатов[1].Выбрать();
		КонецЕсли;
	Иначе
		ВыборкаДетальныеЗаписи = МассивРезультатов[0].Выбрать();
	КонецЕсли;
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Функция ПолучитьCashBatch(DocID, Source, Prepayment)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CashBatch.Ссылка
		|ИЗ
		|	Документ.CashBatch КАК CashBatch
		|ГДЕ
		|	CashBatch.DocID = &DocID
		|	И НЕ CashBatch.ПометкаУдаления
		|	И CashBatch.Source = &Source
		|	И CashBatch.Prepayment = &Prepayment";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	Запрос.УстановитьПараметр("Prepayment", Prepayment);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Процедура ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, ТипОбъекта, СвязанныйОбъект)
	
	НЗ = РегистрыСведений.DSSСвязанныеДокументы.СоздатьНаборЗаписей();
	НЗ.Отбор.ПроводкаDSS.Установить(ТранзакцияOracleОбъект.Ссылка);
	НЗ.Отбор.ТипСвязанногоОбъекта.Установить(ТипОбъекта);
	НоваяЗапись = НЗ.Добавить();
	НоваяЗапись.ПроводкаDSS = ТранзакцияOracleОбъект.Ссылка;
	НоваяЗапись.ТипСвязанногоОбъекта = ТипОбъекта;
	НоваяЗапись.СвязанныйОбъект = СвязанныйОбъект;
	НЗ.Записать(Истина);
	
КонецПроцедуры

Функция СоздатьSalesOrder(ТранзакцияOracleОбъект, ДанныеДляЗаполнения, Основание = Неопределено)
	
	ДокОбъект = Документы.SalesOrder.СоздатьДокумент();
	Если ТранзакцияOracleОбъект.Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		ДокОбъект.Номер = ?(ПустаяСтрока(ДанныеДляЗаполнения.InvoiceNumberSAM), ТранзакцияOracleОбъект.SONum, ДанныеДляЗаполнения.InvoiceNumberSAM);
		ДокОбъект.ArInvoice = ?(ПустаяСтрока(ДанныеДляЗаполнения.InvoiceNumberSAM), ТранзакцияOracleОбъект.SONum, "SAM-" + ДанныеДляЗаполнения.InvoiceNumberSAM);
		ДокОбъект.Дата = ТранзакцияOracleОбъект.SODate;
	Иначе
		ДокОбъект.Номер = ТранзакцияOracleОбъект.DocNumber;
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.DocID = ДанныеДляЗаполнения.DocID;
	КонецЕсли;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияOracleОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
		ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	КонецЕсли;
	ДокОбъект.AU = ТранзакцияOracleОбъект.AU;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	Если НЕ ТранзакцияOracleОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.Основание = Основание;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	 
	// { RGS TAlmazova 17.02.2017 17:43:35 - добавление статуса Unbilled для новых СО
	//Если ТранзакцияOracleОбъект.Source = Перечисления.ТипыСоответствий.OracleSmith Тогда
		
		ДатаДокумента = ТекущаяДата();
		AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
		
		НЗ = РегистрыСведений.SalesOrdersComments.СоздатьНаборЗаписей();
		НЗ.Очистить();
		
		НачатьТранзакцию();
		
		Проблема = Документы.SalesOrderProblem.СоздатьДокумент();
		Проблема.Дата = ДатаДокумента;
		Проблема.SalesOrder = ДокОбъект.Ссылка;
		Проблема.User = AutoUser;
		Проблема.Billed = Перечисления.SalesOrderBilledStatus.Unbilled;
		Проблема.Записать();
		
		НЗ.Очистить();
		НЗ.Отбор.SalesOrder.Установить(ДокОбъект.Ссылка);
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.Период = ДатаДокумента;
		ЗаписьНабора.SalesOrder = ДокОбъект.Ссылка;
		ЗаписьНабора.Problem = Проблема.Ссылка;
		
		НЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	//КонецЕсли;
	// } RGS TAlmazova 17.02.2017 17:43:51 - добавление статуса Unbilled для новых СО
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.SalesOrder, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьРучнуюКорректировку(ТранзакцияOracleОбъект)
	
	РучнаяКорректировкаОбъект = Документы.РучнаяКорректировка.СоздатьДокумент();
	РучнаяКорректировкаОбъект.Дата = ТекущаяДата();
	РучнаяКорректировкаОбъект.Source = ТранзакцияOracleОбъект.Source;
	РучнаяКорректировкаОбъект.Company = ТранзакцияOracleОбъект.Company;
	РучнаяКорректировкаОбъект.Client = ТранзакцияOracleОбъект.Client;
	РучнаяКорректировкаОбъект.AU = ТранзакцияOracleОбъект.AU;
	РучнаяКорректировкаОбъект.Location = ТранзакцияOracleОбъект.Location;
	РучнаяКорректировкаОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	РучнаяКорректировкаОбъект.Account = ТранзакцияOracleОбъект.Account;
	РучнаяКорректировкаОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	Если НЕ ТранзакцияOracleОбъект.Client.Предопределенный Тогда
		РучнаяКорректировкаОбъект.ClientID = ТранзакцияOracleОбъект.CustomerNumber;
	КонецЕсли;
	РучнаяКорректировкаОбъект.Записать();
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.РучнаяКорректировка, РучнаяКорректировкаОбъект.Ссылка);
	
	Возврат РучнаяКорректировкаОбъект.Ссылка;
	
КонецФункции

Функция СоздатьИнвойс(ТранзакцияOracleОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.Invoice.СоздатьДокумент();
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Номер = Формат(ТранзакцияOracleОбъект.DocID, "ЧГ=0");
	// { RGS TAlmazova 10.08.2016 12:22:48 - запись только DocNumber
	//ДокОбъект.DocNumber = ?(ПустаяСтрока(ТранзакцияOracleОбъект.DocNumber2), ТранзакцияOracleОбъект.DocNumber, ТранзакцияOracleОбъект.DocNumber2);
	ДокОбъект.DocNumber = ТранзакцияOracleОбъект.DocNumber;
	// } RGS TAlmazova 10.08.2016 12:23:03 - запись только DocNumber
	Если ТранзакцияOracleОбъект.Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		ДокОбъект.Дата = ТранзакцияOracleОбъект.InvDate;
		ДокОбъект.Amount = ДанныеДляЗаполнения.InvoiceAmount
	Иначе
		ДокОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.AU = ТранзакцияOracleОбъект.AU;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияOracleОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
		ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	КонецЕсли;
	
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияOracleОбъект.DocID;
	Если НЕ ТранзакцияOracleОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьИнвойсИзПроводки(Инвойс, ТранзакцияOracleОбъект, ДанныеДляЗаполнения,ЭтоПроводкаПоСчетуВыручки)
	
	РеквизитыИнвойса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инвойс, "Source,Company,DocID,Дата,Client,AU,Location,SubSubSegment,Account,Currency,OriginalAnalytics,ClientID,DocNumber");
	
	Если ЭтоПроводкаПоСчетуВыручки И (НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Client) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Currency)) Тогда 
		ИнвойсОбъект = Инвойс.ПолучитьОбъект();
		ИнвойсОбъект.Currency = ДанныеДляЗаполнения.Currency;
		Если НЕ РеквизитыИнвойса.Client.Предопределенный Тогда
			ИнвойсОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
		КонецЕсли;
		ИнвойсОбъект.ОбменДанными.Загрузка = Истина;
		ИнвойсОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		// { RGS TAlmazova 20.12.2016 1:30:26 - дозаполнение компании в регистре FiscalPayments
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) Тогда
			НаборЗаписей = РегистрыСведений.FiscalPayments.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Invoice.Установить(Инвойс);
			НаборЗаписей.Прочитать();
			Для Каждого Запись из НаборЗаписей Цикл
				Если Запись.Company = Справочники.Организации.ПустаяСсылка() Тогда
					Запись.Company = ТранзакцияOracleОбъект.Company;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		// } RGS TAlmazova 20.12.2016 1:30:27 - дозаполнение компании в регистре FiscalPayments
		
		Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Source) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Company) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocID) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Дата) ИЛИ 
			НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Client) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Location) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.SubSubSegment) ИЛИ 
			НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Account) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Currency) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.OriginalAnalytics)
			ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocNumber) ИЛИ РеквизитыИнвойса.DocNumber = "#undefined#" 
			ИЛИ НЕ ЗначениеЗаполнено(РеквизитыИнвойса.AU) Тогда
			ИнвойсОбъект = Инвойс.ПолучитьОбъект();
			Для каждого Реквизит из РеквизитыИнвойса Цикл
				Если Реквизит.Ключ <> "OriginalAnalytics" И Реквизит.Ключ <> "Дата" И Реквизит.Ключ <> "ClientID" И Реквизит.Ключ <> "DocNumber" Тогда
					Если НЕ ЗначениеЗаполнено(Реквизит.Значение) Тогда
						ИнвойсОбъект[Реквизит.Ключ] = ТранзакцияOracleОбъект[Реквизит.Ключ];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.OriginalAnalytics) Тогда
				ИнвойсОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.Дата) Тогда
				ИнвойсОбъект.Дата = ТранзакцияOracleОбъект.InvDate;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.ClientID) И НЕ РеквизитыИнвойса.Client.Предопределенный Тогда
				ИнвойсОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РеквизитыИнвойса.DocNumber) ИЛИ РеквизитыИнвойса.DocNumber = "#undefined#" Тогда
				ИнвойсОбъект.DocNumber = ДанныеДляЗаполнения.DocNumber;
			КонецЕсли;
			ИнвойсОбъект.ОбменДанными.Загрузка = Истина;
			ИнвойсОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьSalesOrder(SalesOrder, Invoice)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(SalesOrder, "Invoice") = Invoice Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = SalesOrder.ПолучитьОбъект();
	ДокОбъект.Invoice = Invoice;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура ДозаполнитьSalesOrderИзПроводки(SalesOrder, ТранзакцияOracleОбъект)
	
	РеквизитыSalesOrder = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(SalesOrder, "Account,Amount");
	Если НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Account) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Amount) Тогда
		SalesOrderОбъект = SalesOrder.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Account) Тогда
			SalesOrderОбъект.Account = ТранзакцияOracleОбъект.Account;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыSalesOrder.Amount) Тогда
			SalesOrderОбъект.Amount = ТранзакцияOracleОбъект.Amount;
		КонецЕсли;
		SalesOrderОбъект.ОбменДанными.Загрузка = Истина;
		SalesOrderОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьCashBatch(ТранзакцияOracleОбъект, Prepayment = Ложь, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.CashBatch.СоздатьДокумент();
	ДокОбъект.PaymentNumber = ТранзакцияOracleОбъект.DocNumber;
	Если ТранзакцияOracleОбъект.Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		ДокОбъект.Дата = ТранзакцияOracleОбъект.InvDate;
	Иначе
		ДокОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.AU = ТранзакцияOracleОбъект.AU;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияOracleОбъект.DocID;
	ДокОбъект.Prepayment = Prepayment;
	Если НЕ ТранзакцияOracleОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.OriginalAnalytics = ТранзакцияOracleОбъект.GL_Account;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.CashBatch, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьBatchAllocation(ТранзакцияOracleОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.BatchAllocation.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.AU = ТранзакцияOracleОбъект.AU;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	Если НЕ ТранзакцияOracleОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.BatchAllocation, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьДокументРасчетов(НомерТранзакции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСвязанныеДокументы.СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранзакцияOracle КАК ТранзакцияOracle
		|		ПО DSSСвязанныеДокументы.ПроводкаDSS = ТранзакцияOracle.Ссылка
		|			И (ТранзакцияOracle.DocNumber = &DocNumber)
		|			И (НЕ ТранзакцияOracle.ПометкаУдаления)
		|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСПроводкойDSS.Invoice))";
	
	Запрос.УстановитьПараметр("DocNumber", НомерТранзакции);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.СвязанныйОбъект;
	
КонецФункции

Функция СоздатьМемо(ТранзакцияOracleОбъект, ДанныеДляЗаполнения)
	
	ДокОбъект = Документы.Memo.СоздатьДокумент();
	ДокОбъект.Номер = ТранзакцияOracleОбъект.DocNumber;
	ДокОбъект.Source = ТранзакцияOracleОбъект.Source;
	Если ТранзакцияOracleОбъект.Source = Перечисления.ТипыСоответствий.OracleMI Тогда
		ДокОбъект.Дата = ТранзакцияOracleОбъект.InvDate;
	Иначе
		ДокОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	ДокОбъект.Client = ТранзакцияOracleОбъект.Client;
	ДокОбъект.Company = ТранзакцияOracleОбъект.Company;
	ДокОбъект.AU = ТранзакцияOracleОбъект.AU;
	ДокОбъект.Location = ТранзакцияOracleОбъект.Location;
	ДокОбъект.SubSubSegment = ТранзакцияOracleОбъект.SubSubSegment;
	ЭтоПроводкаПоСчетуВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранзакцияOracleОбъект.Account, "БазовыйЭлемент").ПринадлежитЭлементу(rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	Если НЕ ЭтоПроводкаПоСчетуВыручки Тогда
		ДокОбъект.Account = ТранзакцияOracleОбъект.Account;
	КонецЕсли;
	ДокОбъект.Currency = ТранзакцияOracleОбъект.Currency;
	ДокОбъект.DocID = ТранзакцияOracleОбъект.DocID;
	Если НЕ ТранзакцияOracleОбъект.Client.Предопределенный Тогда
		ДокОбъект.ClientID = ДанныеДляЗаполнения.CustomerNumber;
	КонецЕсли;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДобавитьСвязанныйОбъект(ТранзакцияOracleОбъект, Перечисления.ТипыОбъектовСвязанныхСПроводкойDSS.Memo, ДокОбъект.Ссылка);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ДозаполнитьМемоИзПроводки(Мемо, ТранзакцияOracleОбъект)
	
	РеквизитыМемо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мемо, "Account,Amount");
	Если НЕ ЗначениеЗаполнено(РеквизитыМемо.Account) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыМемо.Amount) Тогда
		МемоОбъект = Мемо.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(РеквизитыМемо.Account) Тогда
			МемоОбъект.Account = ТранзакцияOracleОбъект.Account;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыМемо.Amount) Тогда
			МемоОбъект.Amount = ТранзакцияOracleОбъект.Amount;
		КонецЕсли;
		МемоОбъект.ОбменДанными.Загрузка = Истина;
		МемоОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиЗагруженныеДокументы(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DSSСформированныеПриЗагрузке.ПроводкаDSS
		|ИЗ
		|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
		|ГДЕ
		|	DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки
		|	И НЕ DSSСформированныеПриЗагрузке.ИгнорироватьОбработку
		|	И НЕ DSSСформированныеПриЗагрузке.ОшибкаПриПоискеСвязанныхОбъектов";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", СтруктураПараметров.Ссылка);
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТекстОшибок = "";
	
	НачатьТранзакцию();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекДок = ВыборкаДетальныеЗаписи.ПроводкаDSS.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки() + Символы.ПС;
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибок;
		КонецПопытки;
		
	КонецЦикла;
	
	//Если Не ПустаяСтрока(ТекстОшибок) Тогда
	//	ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения", ТекстОшибок);
	//Иначе
	// { RGS TAlmazova 25.01.2017 13:23:34 - обновление статуса для MI теперь в загрузке деталей
	Если СтруктураПараметров.ТипВнешнейСистемы = Перечисления.ТипыСоответствий.OracleSmith Тогда
		ОбновитьСтатусыSalesOrder(СтруктураПараметров.Ссылка);
	КонецЕсли;
	// } RGS TAlmazova 25.01.2017 13:24:18 - обновление статуса для MI теперь в загрузке деталей
	
	// { RGS AGorlenko 28.07.2017 0:56:40 - обновление статусов оплаты инвойсов
	УстановитьСтатусыОплаты(СтруктураПараметров.Ссылка);
	// } RGS AGorlenko 28.07.2017 0:56:41 - обновление статусов оплаты инвойсов
	ОтметитьВыполнениеЗадачи(СтруктураПараметров.Ссылка);
	
	ДокументЗагрузки = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	ДокументЗагрузки.СтатусЗагрузки = Перечисления.СтатусыЗагрузки.PostedTransactions;
	ДокументЗагрузки.Записать();
	
	//КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновитьСтатусыSalesOrder(ДокументЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект КАК СвязанныйОбъект
	|ПОМЕСТИТЬ ВТ_Invoices
	|ИЗ
	|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
	|		ПО (DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки)
	|			И DSSСформированныеПриЗагрузке.ПроводкаDSS = DSSСвязанныеДокументы.ПроводкаDSS
	|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСпроводкойDSS.Invoice))
	|ГДЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект <> ЗНАЧЕНИЕ(Документ.Invoice.ПустаяСсылка)
	|	И НЕ DSSСформированныеПриЗагрузке.ПроводкаDSS.Account.БазовыйЭлемент В ИЕРАРХИИ (&СчетВыручкиВерхнегоУровня)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвязанныйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	BilledARОбороты.Invoice КАК Invoice
	|ПОМЕСТИТЬ ВТ_ИнвойсыСОборотами
	|ИЗ
	|	РегистрНакопления.BilledAR.Обороты(
	|			,
	|			,
	|			,
	|			Invoice В
	|				(ВЫБРАТЬ
	|					ВТ.СвязанныйОбъект
	|				ИЗ
	|					ВТ_Invoices КАК ВТ)) КАК BilledARОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Invoice
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	SalesOrder.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_SO
	|ИЗ
	|	Документ.SalesOrder КАК SalesOrder
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнвойсыСОборотами КАК ВТ_ИнвойсыСОборотами
	|		ПО SalesOrder.Invoice = ВТ_ИнвойсыСОборотами.Invoice
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_SO.Ссылка КАК Ссылка,
	|	SalesOrdersCommentsСрезПоследних.Problem,
	|	SalesOrdersCommentsСрезПоследних.Problem.Reason КАК Reason,
	|	SalesOrdersCommentsСрезПоследних.Problem.ExpectedDateForInvoice КАК ExpectedDateForInvoice,
	|	SalesOrdersCommentsСрезПоследних.Problem.EscalateTo КАК EscalateTo,
	|	ВЫРАЗИТЬ(SalesOrdersCommentsСрезПоследних.Problem.Details КАК СТРОКА(1024)) КАК Details,
	|	ВЫРАЗИТЬ(SalesOrdersCommentsСрезПоследних.Problem.ActionItem КАК СТРОКА(1024)) КАК ActionItem,
	|	SalesOrdersCommentsСрезПоследних.Период
	|ИЗ
	|	ВТ_SO КАК ВТ_SO
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.UnbilledAR.Остатки(
	|				,
	|				SalesOrder В
	|					(ВЫБРАТЬ
	|						ВТ_SO.Ссылка
	|					ИЗ
	|						ВТ_SO КАК ВТ_SO)) КАК UnbilledARОстатки
	|		ПО ВТ_SO.Ссылка = UnbilledARОстатки.SalesOrder
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SalesOrdersComments.СрезПоследних КАК SalesOrdersCommentsСрезПоследних
	|		ПО ВТ_SO.Ссылка = SalesOrdersCommentsСрезПоследних.SalesOrder
	|ГДЕ
	|	ЕСТЬNULL(UnbilledARОстатки.AmountОстаток, 0) = 0
	|	И (SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.Unbilled)
	|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem.Billed = ЗНАЧЕНИЕ(Перечисление.SalesOrderBilledStatus.ПустаяСсылка)
	|			ИЛИ SalesOrdersCommentsСрезПоследних.Problem ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументЗагрузки);
	Запрос.УстановитьПараметр("СчетВыручкиВерхнегоУровня", rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяДата = ТекущаяДата();
	НачалоМесТекДата = НачалоМесяца(ТекущаяДата);
	
	AutoUser = Справочники.Пользователи.НайтиПоНаименованию("AutoUser");
	
	НЗ = РегистрыСведений.SalesOrdersComments.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(ТекущаяДата);
	
	Пока Выборка.Следующий() Цикл
		
		НЗ.Очистить();
		
		НачатьТранзакцию();
		Проблема = Документы.SalesOrderProblem.СоздатьДокумент();
		Проблема.Дата = ТекущаяДата;
		Проблема.SalesOrder = Выборка.Ссылка;
		Проблема.User = AutoUser;
		Проблема.Billed = Перечисления.SalesOrderBilledStatus.Billed;
		Если ЗначениеЗаполнено(Выборка.Problem) И Выборка.Период >= НачалоМесТекДата Тогда
			 Проблема.Reason = Выборка.Reason;
			 Проблема.ExpectedDateForInvoice = Выборка.ExpectedDateForInvoice;
			 Проблема.Details = Выборка.Details;
			 Проблема.ActionItem = Выборка.ActionItem;
			 Если ЗначениеЗаполнено(Выборка.EscalateTo) Тогда
				Проблема.EscalateTo = Выборка.EscalateTo;
				МассивОтветственных = Документы.SalesOrder.ПолучитьОтветственныхПоSO(Выборка.Ссылка, Выборка.EscalateTo);
				Если МассивОтветственных.Количество() = 0 Тогда
					СообщениеОбОшибке = "For the selected Sales Order is not filled Responsible";
					Прервать;
				КонецЕсли;
				Проблема.Responsibles.Очистить();
				Для каждого ТекОтветственный Из МассивОтветственных Цикл
					НоваяСтрока = Проблема.Responsibles.Добавить();
					НоваяСтрока.Responsible = ТекОтветственный;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Проблема.Записать();
		
		НЗ.Очистить();
		НЗ.Отбор.SalesOrder.Установить(Выборка.Ссылка);
		ЗаписьНабора = НЗ.Добавить();
		ЗаписьНабора.Период = ТекущаяДата;
		ЗаписьНабора.SalesOrder = Выборка.Ссылка;
		ЗаписьНабора.Problem = Проблема.Ссылка;
		
		НЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьВыполнениеЗадачи(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Предмет", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		 ВыборкаДетальныеЗаписи.Следующий();
		 ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		 ЗадачаОбъект.Выполнена = Истина;
		 ЗадачаОбъект.Записать();
	КонецЕсли;;
	
КонецПроцедуры

Процедура УстановитьСтатусыОплаты(ДокументЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект КАК СвязанныйОбъект
	|ИЗ
	|	РегистрСведений.DSSСформированныеПриЗагрузке КАК DSSСформированныеПриЗагрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DSSСвязанныеДокументы КАК DSSСвязанныеДокументы
	|		ПО (DSSСформированныеПриЗагрузке.ДокументЗагрузки = &ДокументЗагрузки)
	|			И DSSСформированныеПриЗагрузке.ПроводкаDSS = DSSСвязанныеДокументы.ПроводкаDSS
	|			И (DSSСвязанныеДокументы.ТипСвязанногоОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСвязанныхСпроводкойDSS.Invoice))
	|ГДЕ
	|	DSSСвязанныеДокументы.СвязанныйОбъект <> ЗНАЧЕНИЕ(Документ.Invoice.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументЗагрузки", ДокументЗагрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Комментарий = "DSS loading: " + ПолучитьНавигационнуюСсылку(ДокументЗагрузки);
	
	Пока Выборка.Следующий() Цикл
		
		Документы.Invoice.ОбновитьСтатусОплатыДокумента(Выборка.СвязанныйОбъект, Комментарий);
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS TAlmazova 01.12.2016 17:24:47 - возврат алгоритма поиска инвойса при создании
Функция ПолучитьИнвойсПриСоздании(DocID, Source)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Invoice.Ссылка
		|ИЗ
		|	Документ.Invoice КАК Invoice
		|ГДЕ
		|	Invoice.DocID = &DocID
		|	И НЕ Invoice.ПометкаУдаления
		|	И Invoice.Source = &Source";
	
	Запрос.УстановитьПараметр("DocID", DocID);
	Запрос.УстановитьПараметр("Source", Source);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Процедура ПроверитьАктуальностьКорректировки_MI(ДанныеЗагрузки, ДокументОснование)
	
	РеквизитыТранзакции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗагрузки.Транзакция, "Company, AU, Account, Currency, Client");
	Если ДанныеЗагрузки.Company <> РеквизитыТранзакции.Company
		ИЛИ ДанныеЗагрузки.Account <> РеквизитыТранзакции.Account
		ИЛИ ДанныеЗагрузки.Currency <> РеквизитыТранзакции.Currency
		ИЛИ ДанныеЗагрузки.Client <> РеквизитыТранзакции.Client
		ИЛИ ДанныеЗагрузки.AU <> РеквизитыТранзакции.AU Тогда
			
			КорректировкаОбъект = ДанныеЗагрузки.КорректировкаТранзакции.ПолучитьОбъект();
			КорректировкаОбъект.УстановитьПометкуУдаления(Истина);
			
			Если ДанныеЗагрузки.Client = Справочники.Контрагенты.GLNoName Тогда
				
				НЗ_Проблемы = РегистрыСведений.ПроблемыПриЗагрузке.СоздатьНаборЗаписей();
				НЗ_Проблемы.Отбор.Транзакция.Установить(ДанныеЗагрузки.Транзакция);
				НЗ_Проблемы.Отбор.ДокументЗагрузки.Установить(ДокументОснование);
				НЗ_Проблемы.Отбор.ОписаниеПроблемы.Установить("Missing client code");
				НоваяЗапись = НЗ_Проблемы.Добавить();
				НоваяЗапись.Транзакция = ДанныеЗагрузки.Транзакция;
				НоваяЗапись.ДокументЗагрузки = ДокументОснование;
				НоваяЗапись.ОписаниеПроблемы = "Missing client code";
				НЗ_Проблемы.Записать(Истина);
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				Задача.Дата = ТекущаяДата();
				Задача.Наименование = "Fill the client in the transaction " + ДанныеЗагрузки.Транзакция;
				Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.OracleMI;
				Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
				//Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
				Задача.Автор = Пользователи.ТекущийПользователь();
				Задача.Предмет = ДанныеЗагрузки.Транзакция;
				Задача.Записать();
				
			КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ЗаполнитьКонтрольныеСуммы(Ссылка, ТаблицаДанныхКонтрольныеСуммы)
	
	ТаблицаДанныхКонтрольныеСуммы.Колонки.Добавить("ДокументЗагрузки");
	ТаблицаДанныхКонтрольныеСуммы.ЗаполнитьЗначения(Ссылка, "ДокументЗагрузки");
	ТаблицаДанныхКонтрольныеСуммы.Колонки.AU.Имя = "ИдентификаторСистемы";
	
	
	НЗ = РегистрыСведений.КонтрольныеСуммыПриЗагрузке.СоздатьНаборЗаписей();
	НЗ.Отбор.ДокументЗагрузки.Установить(Ссылка);
	НЗ.Загрузить(ТаблицаДанныхКонтрольныеСуммы);
	НЗ.Записать(Истина);
	
	
КонецПроцедуры
#КонецЕсли
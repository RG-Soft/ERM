#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтоНовый() Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение И System = "GL" Тогда
	//	
	//	ПараметрыПроведения = Документы.ПроводкаDSS.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	//	
	//	РучнаяКорректировка = ПараметрыПроведения.СвязанныеДокументы.РучнаяКорректировка;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ManualTransactionsОстатки.AmountОстаток КАК AmountОстаток
	//		|ИЗ
	//		|	РегистрНакопления.ManualTransactions.Остатки(
	//		|			&ДатаТранзакции,
	//		|			РучнаяКорректировка = &РучнаяКорректировка
	//		|				И Account = &AccountLawson
	//		|				И AU = &AU
	//		|				И Company = &Company
	//		|				И Currency = &Currency
	//		|				И Location = &Location
	//		|				И Source = ЗНАЧЕНИЕ(Перечисление.ТипыСоответствий.Lawson)
	//		|				И SubSubSegment = &SubSubSegment) КАК ManualTransactionsОстатки";
	//	
	//	Запрос.УстановитьПараметр("РучнаяКорректировка", РучнаяКорректировка);
	//	Запрос.УстановитьПараметр("AccountLawson", AccountLawson);
	//	Запрос.УстановитьПараметр("AU", AU);
	//	Запрос.УстановитьПараметр("Company", Company);
	//	Запрос.УстановитьПараметр("Currency", Currency);
	//	Запрос.УстановитьПараметр("Location", Location);
	//	Запрос.УстановитьПараметр("SubSubSegment", SubSubSegment);
	//	Запрос.УстановитьПараметр("ДатаТранзакции", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	СуммаЗадолженности = 0;
	//	Если НЕ РезультатЗапроса.Пустой() Тогда
	//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//		ВыборкаДетальныеЗаписи.Следующий();
	//		СуммаЗадолженности = ВыборкаДетальныеЗаписи.AmountОстаток;
	//	КонецЕсли;
	//	//Если СуммаЗадолженности <= 0 И СуммаЗадолженности + TranAmount > 0 И РучнаяКорректировка.Дата <> DateLawson Тогда
	//	//	ДокОбъект = РучнаяКорректировка.ПолучитьОбъект();
	//	//	ДокОбъект.Дата = DateLawson;
	//	//	ДокОбъект.ОбменДанными.Загрузка = Истина;
	//	//	ДокОбъект.Записать();
	//	//КонецЕсли;
	//	
	//	
	//КонецЕсли;
	
	// { RGS TAlmazova 25.07.2017 12:29:01 - пометка удаление на подчиненные документы корректировки
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаТранзакции.Ссылка
		|ИЗ
		|	Документ.КорректировкаТранзакции КАК КорректировкаТранзакции
		|ГДЕ
		|	КорректировкаТранзакции.ДокументОснование = &ДокументОснование
		|	И НЕ КорректировкаТранзакции.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ПометкаУдаления ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КорректировкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			КорректировкаОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	// } RGS TAlmazova 25.07.2017 12:29:11 - пометка удаление на подчиненные документы корректировки
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПараметрыПроведения = Документы.ПроводкаDSS.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	ВалютаUSD = Константы.rgsВалютаUSD.Получить();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	//{ RGS AArsentev 16.02.2017 12:14:25
	Инвойс = ПараметрыПроведения.СвязанныеДокументы.Invoice;
	Если ЗначениеЗаполнено(Инвойс) Тогда
		ЗаполнитьРС_ПериодыАктивностиДоговров(Инвойс, Отказ);
	КонецЕсли;
	//} RGS AArsentev 16.02.2017 12:14:25
	
	СчетВыручкиHFM = rgsНастройкаКонфигурации.ЗначениеНастройки("СчетВыручкиВерхнегоУровня");
	
	//{ RGS TAlmazova 21.05.2018 12:14:25
	СуммыДляПроводки = Документы.ПроводкаDSS.ПолучитьСуммыДляПроводки(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, СчетВыручкиHFM, ВалютаUSD, Отказ);	
	//} RGS TAlmazova 21.05.2018 12:14:25
	
	Если Реквизиты.HFMAccount.ПринадлежитЭлементу(СчетВыручкиHFM) Тогда
		
		ВыполнитьДвижениеRevenue(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, -СуммыДляПроводки.BaseAmount, Отказ);
		
	Иначе
	
		Если Реквизиты.System = "BL" Тогда
			
			Если Реквизиты.SourceCode = "DM" ИЛИ Реквизиты.SourceCode = "CM" Тогда
				
				// Инвойс, возникает AR billed
				//// если была отдельная транзакция по sales order, то надо погасить unbilled
				//Если БылоНачислениеUnbilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы) Тогда
				//	ВыполнитьСписаниеUnbilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, ?(Реквизиты.SourceCode = "DM", Реквизиты.TranAmount, -Реквизиты.TranAmount), Отказ);
				//КонецЕсли;
				// { RGS AGorlenko 26.07.2016 13:39:56 - CM с минусом - так и должно быть. Поэтому просто берем сумму из проводки.
				//ВыполнитьНачислениеBilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, 
				//	Движения, ?(Реквизиты.SourceCode = "DM", Реквизиты.TranAmount, -Реквизиты.TranAmount), 
				//	?(Реквизиты.SourceCode = "DM", Реквизиты.BaseAmount, -Реквизиты.BaseAmount), Отказ);
				ВыполнитьНачислениеBilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, 
					Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
				// } RGS AGorlenko 26.07.2016 13:40:50 - CM с минусом - так и должно быть. Поэтому просто берем сумму из проводки.
				
				Если Реквизиты.SourceCode = "DM" И Реквизиты.Account = ПланыСчетов.Lawson.TradeReceivables
					И ЗначениеЗаполнено(ПараметрыПроведения.СвязанныеДокументы.Invoice) 
					И СуммыДляПроводки.Amount > 0 Тогда
					ВыполнитьДвижениеInvoicedDebts(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, 
						Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
				КонецЕсли;
				
			ИначеЕсли Реквизиты.SourceCode = "JE" Тогда
				
				// начисление по SalesOrder
				// { RGS TAlmazova 27.07.2016 14:31:27 - замена на признак
				//Если Реквизиты.TranAmount >= 0 Тогда
				Если Реквизиты.JeTypeLawson = "N" Тогда
					ВыполнитьНачислениеUnbilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
				ИначеЕсли Реквизиты.JeTypeLawson = "A" Тогда
					ВыполнитьСписаниеUnbilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, -СуммыДляПроводки.BaseAmount, Отказ);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Unexpected combination of JeType!",,,,Отказ);
				КонецЕсли;
				// } RGS TAlmazova 27.07.2016 14:31:38 - замена на признак
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Unexpected combination of System and SourceCode!",,,,Отказ);
				
			КонецЕсли;
			
		ИначеЕсли Реквизиты.System = "AR" Тогда
			
			Если Реквизиты.SourceCode = "RL" ИЛИ Реквизиты.SourceCode = "RY" ИЛИ Реквизиты.SourceCode = "ES" Тогда
				
				// разнесение платежей. Закрытие unallocated cash и billed AR
				//Если Реквизиты.AccountLawson = ПланыСчетов.Lawson.TradeReceivables Тогда // 120101
				// { RGS TAlmazova 26.07.2019 10:07:54 - добавление 120999
				//Если Реквизиты.Account = ПланыСчетов.Lawson.TradeReceivables Тогда // 120101
				Если Реквизиты.Account = ПланыСчетов.Lawson.TradeReceivables ИЛИ Реквизиты.Account = ПланыСчетов.Lawson.OtherTradeReceivableBilled Тогда // 120101 и 120999
				// } RGS TAlmazova 26.07.2019 10:08:01 - добавление 120999
					ДокументРасчетов = ?(ЗначениеЗаполнено(ПараметрыПроведения.СвязанныеДокументы.Invoice), ПараметрыПроведения.СвязанныеДокументы.Invoice, ПараметрыПроведения.СвязанныеДокументы.Memo);
					// { RGS TAlmazova 11.08.2016 16:41:21 - может не найти инвойс
					//ВалютаИнвойса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРасчетов, "Currency");
					Если НЕ ЗначениеЗаполнено(ДокументРасчетов) И Реквизиты.BaseAmount = 0 Тогда
						ДокументРасчетов = Документы.Invoice.ПустаяСсылка();
						ВалютаИнвойса = Реквизиты.Currency;
					Иначе
						ВалютаИнвойса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРасчетов, "Currency");
					КонецЕсли;
					// } RGS TAlmazova 11.08.2016 16:41:27 - может не найти инвойс
					//ВалютаРазнесенияПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПроведения.СвязанныеДокументы.BatchAllocation, "Currency");
					ВалютаРазнесенияПлатежа = Реквизиты.Currency;
					// { RGS TAlmazova 01.08.2017 17:59:47 - изменение алгоритма при различных валютах транзакции и инвойса
					//Если ВалютаИнвойса = ВалютаРазнесенияПлатежа Тогда
					//	ВыполнитьСписаниеBilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -Реквизиты.TranAmount, -Реквизиты.BaseAmount, Истина, Отказ);
					//	// { RGS TAlmazova 22.08.2016 9:41:38 - отражение в регистре Payments
					//	ВыполнитьДвижениеPayments(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -Реквизиты.TranAmount, Истина, Ложь, Отказ);
					//	// } RGS TAlmazova 22.08.2016 9:41:52 - отражение в регистре Payments
					//ИначеЕсли ВалютаИнвойса = ВалютаUSD И ВалютаРазнесенияПлатежа <> ВалютаUSD Тогда
					//	ВыполнитьСписаниеBilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -Реквизиты.BaseAmount, -Реквизиты.BaseAmount, Ложь, Отказ);
					//	// { RGS TAlmazova 22.08.2016 9:41:38 - отражение в регистре Payments
					//	ВыполнитьДвижениеPayments(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -Реквизиты.BaseAmount, Ложь, Ложь, Отказ);
					//	// } RGS TAlmazova 22.08.2016 9:41:52 - отражение в регистре Payments
					//Иначе
					//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Unexpected combination of of currencies!",,,,Отказ);
					//КонецЕсли;
					Если ВалютаИнвойса = ВалютаUSD И ВалютаРазнесенияПлатежа <> ВалютаUSD Тогда
						ВыполнитьСписаниеBilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, -СуммыДляПроводки.BaseAmount, Ложь, Отказ);
						// { RGS TAlmazova 22.08.2016 9:41:38 - отражение в регистре Payments
						ВыполнитьДвижениеPayments(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, Ложь, Ложь, Отказ);
						// } RGS TAlmazova 22.08.2016 9:41:52 - отражение в регистре Payments
					Иначе
						ВыполнитьСписаниеBilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, -СуммыДляПроводки.BaseAmount, Истина, Отказ);
						// { RGS TAlmazova 22.08.2016 9:41:38 - отражение в регистре Payments
						ВыполнитьДвижениеPayments(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, Истина, Ложь, Отказ);
						// } RGS TAlmazova 22.08.2016 9:41:52 - отражение в регистре Payments
						//Если ВалютаИнвойса <> ВалютаРазнесенияПлатежа Тогда
							// { RGS TAlmazova 30.06.2019 23:15:11 - S-E-0001270
							//Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
							//Задача.Дата = ТекущаяДата();
							//Задача.Наименование = "Invoice currency - " + ВалютаИнвойса + ". Transaction currency - " + ВалютаРазнесенияПлатежа + ". Necessary adjustments to the exchange rate differences.";
							//Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.Lawson;
							//Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаЗагрузкуПроводок;
							////Задача.СрокИсполнения = ТекущаяДата + 24*60*60;
							//Задача.Автор = Пользователи.ТекущийПользователь();
							//Задача.Предмет = Ссылка;
							//Задача.Записать();
							
							//ПЕРЕНОС В МОДУЛЬ МЕНЕДЖЕРА ЗАГРУЗКИ LAWSON
							
							//Запрос = Новый Запрос;
							//Запрос.Текст = 
							//	"ВЫБРАТЬ
							//	|	КорректировкаТранзакции.Ссылка КАК Ссылка
							//	|ИЗ
							//	|	Документ.КорректировкаТранзакции КАК КорректировкаТранзакции
							//	|ГДЕ
							//	|	КорректировкаТранзакции.ДокументОснование = &ДокументОснование
							//	|	И КорректировкаТранзакции.Проведен";
							//
							//Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
							//
							//РезультатЗапроса = Запрос.Выполнить();
							//
							//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							//
							//Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
							//	СоздатьКоррекировкуТранзакцииПоИзменениюВалюты(Реквизиты, ПараметрыПроведения.СвязанныеДокументы);
							//КонецЕсли;
							// } RGS TAlmazova 30.06.2019 23:15:12 - S-E-0001270
						//КонецЕсли;
						
						//ПЕРЕНОС В МОДУЛЬ МЕНЕДЖЕРА ЗАГРУЗКИ LAWSON
					КонецЕсли;
					// } RGS TAlmazova 01.08.2017 18:00:17 - изменение алгоритма при различных валютах транзакции и инвойса
				//ИначеЕсли Реквизиты.AccountLawson = ПланыСчетов.Lawson.ReceivedNotApplied ИЛИ Реквизиты.AccountLawson = ПланыСчетов.Lawson.AdvancesFromCustomers Тогда // 120102 или 209000
				ИначеЕсли Реквизиты.Account = ПланыСчетов.Lawson.ReceivedNotApplied ИЛИ Реквизиты.Account = ПланыСчетов.Lawson.AdvancesFromCustomers Тогда // 120102 или 209000
					Если Реквизиты.SourceCode = "RY" Тогда // разворот вешаем на последнюю оплату
						ВыполнитьСписаниеUnallocatedCashРазворот(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
					Иначе
						ВыполнитьСписаниеUnallocatedCash(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
					КонецЕсли;
					// { RGS TAlmazova 22.08.2016 9:41:38 - отражение в регистре Payments
					ВыполнитьДвижениеPayments(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, Истина, Истина, Отказ);
					// } RGS TAlmazova 22.08.2016 9:41:52 - отражение в регистре Payments
				КонецЕсли;
				
			ИначеЕсли Реквизиты.SourceCode = "RP" ИЛИ Реквизиты.SourceCode = "RQ" ИЛИ Реквизиты.SourceCode = "RX" Тогда
				
				// { RGS TAlmazova 04.06.2018 17:00:33 - добавление счета 120202
				////Если Реквизиты.AccountLawson = ПланыСчетов.Lawson.ReceivedNotApplied  ИЛИ Реквизиты.AccountLawson = ПланыСчетов.Lawson.AdvancesFromCustomers Тогда //120102 или 209000
				//Если Реквизиты.Account = ПланыСчетов.Lawson.ReceivedNotApplied  ИЛИ Реквизиты.Account = ПланыСчетов.Lawson.AdvancesFromCustomers Тогда //120102 или 209000
				Если Реквизиты.Account = ПланыСчетов.Lawson.ReceivedNotApplied  ИЛИ Реквизиты.Account = ПланыСчетов.Lawson.AdvancesFromCustomers ИЛИ Реквизиты.Account = ПланыСчетов.Lawson.UnidentifiedCashReceipts Тогда //120102 или 209000 или 120202
				// } RGS TAlmazova 04.06.2018 17:00:43 - добавление счета 120202
					// поступление денег от клииента. Приход в Unallocated cash. Или корректировка платежа. Корректировка unallocated cash в привязке к CashBatch
					ВыполнитьНачислениеUnallocatedCash(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, -СуммыДляПроводки.BaseAmount, Отказ);
					// { RGS TAlmazova 22.08.2016 9:41:38 - отражение в регистре Payments
					ВыполнитьДвижениеPayments(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, -СуммыДляПроводки.Amount, Истина, Истина, Отказ);
					// } RGS TAlmazova 22.08.2016 9:41:52 - отражение в регистре Payments
				Иначе
					ВыполнитьНачислениеBilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
				КонецЕсли;
				
			ИначеЕсли Реквизиты.SourceCode = "RU" Тогда
				
				// вопрос, что делать с переоценкой
				
			ИначеЕсли Реквизиты.SourceCode = "RM" Тогда
				
				// Мемо (корректировка долга)
				ВыполнитьНачислениеUnallocatedMemo(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, 
					Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
				
			ИначеЕсли Реквизиты.SourceCode = "RI" Тогда
				
				// Мемо (корректировка долга)
				ВыполнитьНачислениеBilledAR(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, 
					Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Unexpected combination of System and SourceCode!",,,,Отказ);
				
			КонецЕсли;
			
		//ИначеЕсли Реквизиты.System = "GL" Тогда 
		ИначеЕсли Реквизиты.System = "GL" ИЛИ Реквизиты.System = "CB" И Реквизиты.SourceCode = "CL" Тогда 
			
			//Если Реквизиты.SourceCode = "JE" Тогда
				
				ВыполнитьДвиженияПоРучнымКорректировкам(Реквизиты, ПараметрыПроведения.СвязанныеДокументы, Движения, СуммыДляПроводки.Amount, СуммыДляПроводки.BaseAmount, Отказ);
				
			//ИначеЕсли Реквизиты.SourceCode <> "GR" Тогда // GR - переоценка остатков по счету, ее игнорируем, на другие ругаемся
			//	
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Unexpected combination of System and SourceCode!",,,,Отказ);
			//	
			//КонецЕсли;
		Иначе
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Unexpected combination of System and SourceCode!",,,,Отказ);
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата = ТекущаяДата();
			Задача.Наименование = "Unexpected combination of System: " + Реквизиты.System + " and SourceCode: " + Реквизиты.SourceCode + " in DSS transaction " + Номер;
			Задача.ОсновнойОбъектАдресации = Перечисления.ТипыСоответствий.Lawson;
			Задача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйLawson;
			Задача.СрокИсполнения = ТекущаяДата() + 24*60*60;
			Задача.Автор = Пользователи.ТекущийПользователь();
			Задача.Предмет = Ссылка;
			Задача.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьНачислениеUnbilledAR(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.UnbilledAR.Добавить();
	
	НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
	НовоеДвижение.Период = Реквизиты.AccountingPeriod;
	НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
	НовоеДвижение.Company = Реквизиты.Company;
	НовоеДвижение.Location = Реквизиты.Location;
	//НовоеДвижение.SubGeoMarket = Реквизиты.SubGeoMarket;
	//НовоеДвижение.Segment = Реквизиты.Segment;
	//НовоеДвижение.SubSegment = Реквизиты.SubSegment;
	НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
	//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
	НовоеДвижение.Client = Реквизиты.Client;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
		НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
	КонецЕсли;
	НовоеДвижение.SalesOrder = СвязанныеДокументы.SalesOrder;
	//НовоеДвижение.Account = Реквизиты.AccountLawson;
	НовоеДвижение.Account = Реквизиты.Account;
	НовоеДвижение.AU = Реквизиты.AU;
	НовоеДвижение.Currency = Реквизиты.Currency;
	
	НовоеДвижение.Amount = Сумма;
	НовоеДвижение.BaseAmount = СуммаUSD;
	
	Движения.UnbilledAR.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьСписаниеUnbilledAR(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.UnbilledAR.Добавить();
	
	НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
	НовоеДвижение.Период = Реквизиты.AccountingPeriod;
	НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
	НовоеДвижение.Company = Реквизиты.Company;
	НовоеДвижение.Location = Реквизиты.Location;
	//НовоеДвижение.SubGeoMarket = Реквизиты.SubGeoMarket;
	//НовоеДвижение.Segment = Реквизиты.Segment;
	//НовоеДвижение.SubSegment = Реквизиты.SubSegment;
	НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
	//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
	НовоеДвижение.Client = Реквизиты.Client;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
		НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
	КонецЕсли;
	НовоеДвижение.SalesOrder = СвязанныеДокументы.SalesOrder;
	//НовоеДвижение.Account = Реквизиты.AccountLawson;
	НовоеДвижение.Account = Реквизиты.Account;
	НовоеДвижение.AU = Реквизиты.AU;
	НовоеДвижение.Currency = Реквизиты.Currency;
	
	НовоеДвижение.Amount = Сумма;
	НовоеДвижение.BaseAmount = СуммаUSD;
	
	Движения.UnbilledAR.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьНачислениеBilledAR(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.BilledAR.Добавить();
	
	НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
	//НовоеДвижение.Период = Реквизиты.DateLawson;
	НовоеДвижение.Период = Реквизиты.AccountingPeriod;
	НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
	НовоеДвижение.Company = Реквизиты.Company;
	НовоеДвижение.Location = Реквизиты.Location;
	//НовоеДвижение.GeoMarket = Реквизиты.GeoMarket;
	//НовоеДвижение.SubGeoMarket = Реквизиты.SubGeoMarket;
	//НовоеДвижение.Segment = Реквизиты.Segment;
	//НовоеДвижение.SubSegment = Реквизиты.SubSegment;
	НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
	//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
	НовоеДвижение.Client = Реквизиты.Client;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
		НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
	КонецЕсли;
	НовоеДвижение.Invoice = ?(ЗначениеЗаполнено(СвязанныеДокументы.Invoice), СвязанныеДокументы.Invoice, СвязанныеДокументы.Memo);
	//НовоеДвижение.Account = Реквизиты.AccountLawson;
	НовоеДвижение.Account = Реквизиты.Account;
	НовоеДвижение.AU = Реквизиты.AU;
	НовоеДвижение.Currency = Реквизиты.Currency;
	
	НовоеДвижение.Amount = Сумма;
	НовоеДвижение.BaseAmount = СуммаUSD;
	
	Движения.BilledAR.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьСписаниеBilledAR(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, ИспользоватьВалютуТранзакции, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.BilledAR.Добавить();
	
	НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
	//НовоеДвижение.Период = Реквизиты.DateLawson;
	НовоеДвижение.Период = Реквизиты.AccountingPeriod;
	НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
	НовоеДвижение.Company = Реквизиты.Company;
	НовоеДвижение.Location = Реквизиты.Location;
	НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
	//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
	НовоеДвижение.Client = Реквизиты.Client;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
		НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
	КонецЕсли;
	НовоеДвижение.Invoice = ?(ЗначениеЗаполнено(СвязанныеДокументы.Invoice), СвязанныеДокументы.Invoice, СвязанныеДокументы.Memo);
	//НовоеДвижение.Account = Реквизиты.AccountLawson;
	НовоеДвижение.Account = Реквизиты.Account;
	НовоеДвижение.AU = Реквизиты.AU;
	Если ИспользоватьВалютуТранзакции Тогда
		НовоеДвижение.Currency = Реквизиты.Currency;
	Иначе
		НовоеДвижение.Currency = Константы.rgsВалютаUSD.Получить();
	КонецЕсли;
	
	НовоеДвижение.Amount = Сумма;
	НовоеДвижение.BaseAmount = СуммаUSD;
	
	Движения.BilledAR.Записывать = Истина;
	
КонецПроцедуры

Функция БылоНачислениеUnbilledAR(Реквизиты, СвязанныеДокументы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	UnbilledARОстатки.AmountОстаток
		|ИЗ
		|	РегистрНакопления.UnbilledAR.Остатки(
		|			,
		|			Client = &Client
		|				И Company = &Company
		|				И GeoMarket = &GeoMarket
		|				И SubGeoMarket = &SubGeoMarket
		|				И Segment = &Segment
		|				И SalesOrder = &SalesOrder) КАК UnbilledARОстатки";
	
	Запрос.УстановитьПараметр("Client", Реквизиты.Client);
	Запрос.УстановитьПараметр("Company", Реквизиты.Company);
	Запрос.УстановитьПараметр("GeoMarket", Реквизиты.GeoMarket);
	Запрос.УстановитьПараметр("SalesOrder", СвязанныеДокументы.SalesOrder);
	Запрос.УстановитьПараметр("Segment", Реквизиты.Segment);
	Запрос.УстановитьПараметр("SubGeoMarket", Реквизиты.SubGeoMarket);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ВыполнитьНачислениеUnallocatedCash(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	UnallocatedCashОстатки.CashBatch,
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.BaseAmountОстаток
	|ИЗ
	|	РегистрНакопления.UnallocatedCash.Остатки(
	//|			&Период
	|			,
	|			Account = &Account
	|				И AU = &AU
	|				И Client = &Client
	|				И Company = &Company
	|				И Location = &Location
	|				И Source = &Source
	|				И SubSubSegment = &SubSubSegment
	|				И Currency = &Currency
	|				И CashBatch = ЗНАЧЕНИЕ(Документ.CashBatch.ПустаяСсылка)) КАК UnallocatedCashОстатки
	|ГДЕ
	|	UnallocatedCashОстатки.AmountОстаток < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	UnallocatedCashОстатки.CashBatch.МоментВремени";
	
	//Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	//Запрос.УстановитьПараметр("Account", Реквизиты.AccountLawson);
	Запрос.УстановитьПараметр("Account", Реквизиты.Account);
	Запрос.УстановитьПараметр("AU", Реквизиты.AU);
	//Запрос.УстановитьПараметр("Client", Реквизиты.КонтрагентLawson);
	Запрос.УстановитьПараметр("Client", Реквизиты.Client);
	Запрос.УстановитьПараметр("Company", Реквизиты.Company);
	Запрос.УстановитьПараметр("Location", Реквизиты.Location);
	Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.Lawson);
	Запрос.УстановитьПараметр("SubSubSegment", Реквизиты.SubSubSegment);
	Запрос.УстановитьПараметр("Currency", Реквизиты.Currency);
	
	Результат = Запрос.Выполнить();
	
	Корректировка = 0;
	КорректировкаUSD = 0;
	
	//Если Не Результат.Пустой() И Сумма > 0  Тогда
	Если Ложь Тогда
		
		ОсталосьПрихода = Сумма;
		ОсталосьПриходаUSD = СуммаUSD;
		
		ВыборкаОстатков = Результат.Выбрать();
		
		Пока ВыборкаОстатков.Следующий() И ОсталосьПрихода > 0 Цикл
			
			НовоеДвижение = Движения.UnallocatedCash.Добавить();
			
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			//НовоеДвижение.Период = Реквизиты.DateLawson;
			НовоеДвижение.Период = Реквизиты.AccountingPeriod;
			НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
			НовоеДвижение.Company = Реквизиты.Company;
			НовоеДвижение.Location = Реквизиты.Location;
			НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
			//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
			НовоеДвижение.Client = Реквизиты.Client;
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
				НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
			КонецЕсли;
			НовоеДвижение.CashBatch = ВыборкаОстатков.CashBatch;
			//НовоеДвижение.Account = Реквизиты.AccountLawson;
			НовоеДвижение.Account = Реквизиты.Account;
			НовоеДвижение.AU = Реквизиты.AU;
			НовоеДвижение.Currency = Реквизиты.Currency;
			
			НовоеДвижение.Amount = ?(-ВыборкаОстатков.AmountОстаток < ОсталосьПрихода, -ВыборкаОстатков.AmountОстаток, ОсталосьПрихода);
			НовоеДвижение.BaseAmount = ?(-ВыборкаОстатков.BaseAmountОстаток < ОсталосьПриходаUSD, -ВыборкаОстатков.BaseAmountОстаток, ОсталосьПриходаUSD);;
			
			ОсталосьПрихода = ОсталосьПрихода - НовоеДвижение.Amount;
			ОсталосьПриходаUSD = ОсталосьПриходаUSD - НовоеДвижение.BaseAmount;
			
		КонецЦикла;
		
		Если ОсталосьПрихода > 0 Тогда
			
			НовоеДвижение = Движения.UnallocatedCash.Добавить();
			
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			//НовоеДвижение.Период = Реквизиты.DateLawson;
			НовоеДвижение.Период = Реквизиты.AccountingPeriod;
			НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
			НовоеДвижение.Company = Реквизиты.Company;
			НовоеДвижение.Location = Реквизиты.Location;
			НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
			//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
			НовоеДвижение.Client = Реквизиты.Client;
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
				НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
			КонецЕсли;
			НовоеДвижение.CashBatch = СвязанныеДокументы.CashBatch;
			//НовоеДвижение.Account = Реквизиты.AccountLawson;
			НовоеДвижение.Account = Реквизиты.Account;
			НовоеДвижение.AU = Реквизиты.AU;
			НовоеДвижение.Currency = Реквизиты.Currency;
			
			НовоеДвижение.Amount = ОсталосьПрихода;
			НовоеДвижение.BaseAmount = ОсталосьПриходаUSD;
			
		КонецЕсли;
		
	Иначе
		
		НовоеДвижение = Движения.UnallocatedCash.Добавить();
		
		НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
		//НовоеДвижение.Период = Реквизиты.DateLawson;
		НовоеДвижение.Период = Реквизиты.AccountingPeriod;
		НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
		НовоеДвижение.Company = Реквизиты.Company;
		НовоеДвижение.Location = Реквизиты.Location;
		НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
		//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
		НовоеДвижение.Client = Реквизиты.Client;
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
			НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
		КонецЕсли;
		НовоеДвижение.CashBatch = СвязанныеДокументы.CashBatch;
		//НовоеДвижение.Account = Реквизиты.AccountLawson;
		НовоеДвижение.Account = Реквизиты.Account;
		НовоеДвижение.AU = Реквизиты.AU;
		НовоеДвижение.Currency = Реквизиты.Currency;
		
		НовоеДвижение.Amount = Сумма;
		НовоеДвижение.BaseAmount = СуммаUSD;
		
	КонецЕсли;
	
	
	Движения.UnallocatedCash.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьСписаниеUnallocatedCash(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	UnallocatedCashОстатки.CashBatch,
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.BaseAmountОстаток
	|ИЗ
	|	РегистрНакопления.UnallocatedCash.Остатки(
	//|			&Период
	|			,
	|			Account = &Account
	|				И AU = &AU
	|				И Client = &Client
	|				И Company = &Company
	|				И Location = &Location
	|				И Source = &Source
	|				И SubSubSegment = &SubSubSegment
	|				И Currency = &Currency) КАК UnallocatedCashОстатки
	|ГДЕ
	|	UnallocatedCashОстатки.AmountОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	UnallocatedCashОстатки.CashBatch.МоментВремени";
	
	//Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	//Запрос.УстановитьПараметр("Account", Реквизиты.AccountLawson);
	Запрос.УстановитьПараметр("Account", Реквизиты.Account);
	Запрос.УстановитьПараметр("AU", Реквизиты.AU);
	//Запрос.УстановитьПараметр("Client", Реквизиты.КонтрагентLawson);
	Запрос.УстановитьПараметр("Client", Реквизиты.Client);
	Запрос.УстановитьПараметр("Company", Реквизиты.Company);
	Запрос.УстановитьПараметр("Location", Реквизиты.Location);
	Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.Lawson);
	Запрос.УстановитьПараметр("SubSubSegment", Реквизиты.SubSubSegment);
	Запрос.УстановитьПараметр("Currency", Реквизиты.Currency);
	
	ВыборкаОстатков = Запрос.Выполнить().Выбрать();
	
	ОсталосьСписать = Сумма;
	ОсталосьСписатьUSD = СуммаUSD;
	
	ТаблицаCashBatchAllocation = Движения.CashBatchAllocation.ВыгрузитьКолонки();
	
	Пока ВыборкаОстатков.Следующий() И (ОсталосьСписать <> 0 ИЛИ ОсталосьСписатьUSD <> 0) Цикл
		
		НовоеДвижение = Движения.UnallocatedCash.Добавить();
	
		НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//НовоеДвижение.Период = Реквизиты.DateLawson;
		НовоеДвижение.Период = Реквизиты.AccountingPeriod;
		НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
		НовоеДвижение.Company = Реквизиты.Company;
		НовоеДвижение.Location = Реквизиты.Location;
		НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
		//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
		НовоеДвижение.Client = Реквизиты.Client;
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
			НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
		КонецЕсли;
		НовоеДвижение.CashBatch = ВыборкаОстатков.CashBatch;
		//НовоеДвижение.Account = Реквизиты.AccountLawson;
		НовоеДвижение.Account = Реквизиты.Account;
		НовоеДвижение.AU = Реквизиты.AU;
		НовоеДвижение.Currency = Реквизиты.Currency;
		
		Если ВыборкаОстатков.AmountОстаток < 0 Тогда
			НовоеДвижение.Amount = ОсталосьСписать;
		Иначе
			НовоеДвижение.Amount = ?(ОсталосьСписать <= ВыборкаОстатков.AmountОстаток, ОсталосьСписать, ВыборкаОстатков.AmountОстаток);
		КонецЕсли;
		Если ВыборкаОстатков.BaseAmountОстаток < 0 Тогда
			НовоеДвижение.BaseAmount = ОсталосьСписатьUSD;
		Иначе
			НовоеДвижение.BaseAmount = ?(ОсталосьСписатьUSD <= ВыборкаОстатков.BaseAmountОстаток, ОсталосьСписатьUSD, ВыборкаОстатков.BaseAmountОстаток);
		КонецЕсли;
		
		ОсталосьСписать = ОсталосьСписать - НовоеДвижение.Amount;
		ОсталосьСписатьUSD = ОсталосьСписатьUSD - НовоеДвижение.BaseAmount;
		
		ДвижениеCashBatchAllocation = ТаблицаCashBatchAllocation.Добавить();
		ДвижениеCashBatchAllocation.Transaction = Ссылка;
		ДвижениеCashBatchAllocation.BatchAllocation = СвязанныеДокументы.BatchAllocation;
		ДвижениеCashBatchAllocation.CashBatch = НовоеДвижение.CashBatch;
		ДвижениеCashBatchAllocation.Amount = НовоеДвижение.Amount;
		
	КонецЦикла;
	
	Если ОсталосьСписать <> 0 ИЛИ ОсталосьСписатьUSD <> 0 Тогда
		
		НовоеДвижение = Движения.UnallocatedCash.Добавить();
	
		НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//НовоеДвижение.Период = Реквизиты.DateLawson;
		НовоеДвижение.Период = Реквизиты.AccountingPeriod;
		НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
		НовоеДвижение.Company = Реквизиты.Company;
		НовоеДвижение.Location = Реквизиты.Location;
		НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
		//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
		НовоеДвижение.Client = Реквизиты.Client;
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
			НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
		КонецЕсли;
		НовоеДвижение.CashBatch = Документы.CashBatch.ПустаяСсылка();
		//НовоеДвижение.Account = Реквизиты.AccountLawson;
		НовоеДвижение.Account = Реквизиты.Account;
		НовоеДвижение.AU = Реквизиты.AU;
		НовоеДвижение.Currency = Реквизиты.Currency;
		
		НовоеДвижение.Amount = ОсталосьСписать;
		НовоеДвижение.BaseAmount = ОсталосьСписатьUSD;
		
		ДвижениеCashBatchAllocation = ТаблицаCashBatchAllocation.Добавить();
		ДвижениеCashBatchAllocation.Transaction = Ссылка;
		ДвижениеCashBatchAllocation.BatchAllocation = СвязанныеДокументы.BatchAllocation;
		ДвижениеCashBatchAllocation.CashBatch = НовоеДвижение.CashBatch;
		ДвижениеCashBatchAllocation.Amount = НовоеДвижение.Amount;
		
	КонецЕсли;
	
	ТаблицаCashBatchAllocation.Свернуть("BatchAllocation, CashBatch, Transaction", "Amount");
	Движения.CashBatchAllocation.Загрузить(ТаблицаCashBatchAllocation);
	
	Движения.UnallocatedCash.Записывать = Истина;
	Движения.CashBatchAllocation.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьСписаниеUnallocatedCashРазворот(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	UnallocatedCashОстатки.AmountОстаток,
	|	UnallocatedCashОстатки.BaseAmountОстаток
	|ИЗ
	|	РегистрНакопления.UnallocatedCash.Остатки(
	|			,
	|			Account = &Account
	|				И AU = &AU
	|				И Client = &Client
	|				И Company = &Company
	|				И Location = &Location
	|				И Source = &Source
	|				И SubSubSegment = &SubSubSegment
	|				И Currency = &Currency
	|				И CashBatch = ЗНАЧЕНИЕ(Документ.CashBatch.ПустаяСсылка)) КАК UnallocatedCashОстатки
	|ГДЕ
	|	UnallocatedCashОстатки.AmountОстаток < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	CashBatchAllocation.CashBatch
	|ИЗ
	|	РегистрСведений.CashBatchAllocation КАК CashBatchAllocation
	|ГДЕ
	|	CashBatchAllocation.BatchAllocation = &BatchAllocation
	|	И CashBatchAllocation.CashBatch <> ЗНАЧЕНИЕ(Документ.CashBatch.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CashBatchAllocation.CashBatch.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("BatchAllocation", СвязанныеДокументы.BatchAllocation);
	//Запрос.УстановитьПараметр("Account", Реквизиты.AccountLawson);
	Запрос.УстановитьПараметр("Account", Реквизиты.Account);
	Запрос.УстановитьПараметр("AU", Реквизиты.AU);
	//Запрос.УстановитьПараметр("Client", Реквизиты.КонтрагентLawson);
	Запрос.УстановитьПараметр("Client", Реквизиты.Client);
	Запрос.УстановитьПараметр("Company", Реквизиты.Company);
	Запрос.УстановитьПараметр("Location", Реквизиты.Location);
	Запрос.УстановитьПараметр("Source", Перечисления.ТипыСоответствий.Lawson);
	Запрос.УстановитьПараметр("SubSubSegment", Реквизиты.SubSubSegment);
	Запрос.УстановитьПараметр("Currency", Реквизиты.Currency);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоПустомуДокументу = МассивРезультатов[0];
	
	СуммаОтнестиНаПоследнийБэтч = Сумма;
	СуммаВалОтнестиНаПоследнийБэтч = СуммаUSD;
	
	Если НЕ РезультатПоПустомуДокументу.Пустой() Тогда
		
		Выборка = РезультатПоПустомуДокументу.Выбрать();
		Выборка.Следующий();
		
		СуммаОтнестиНаПустойДокумент = Мин(-Выборка.AmountОстаток, -Сумма);
		СуммаВалОтнестиНаПустойДокумент = Мин(-Выборка.BaseAmountОстаток, -СуммаUSD);
		
		НовоеДвижение = Движения.UnallocatedCash.Добавить();
		
		НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
		НовоеДвижение.Период = Реквизиты.AccountingPeriod;
		НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
		НовоеДвижение.Company = Реквизиты.Company;
		НовоеДвижение.Location = Реквизиты.Location;
		НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
		//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
		НовоеДвижение.Client = Реквизиты.Client;
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
			НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
		КонецЕсли;
		НовоеДвижение.CashBatch = документы.CashBatch.ПустаяСсылка();
		//НовоеДвижение.Account = Реквизиты.AccountLawson;
		НовоеДвижение.Account = Реквизиты.Account;
		НовоеДвижение.AU = Реквизиты.AU;
		НовоеДвижение.Currency = Реквизиты.Currency;
	
		НовоеДвижение.Amount = СуммаОтнестиНаПустойДокумент;
		НовоеДвижение.BaseAmount = СуммаВалОтнестиНаПустойДокумент;
		
		СуммаОтнестиНаПоследнийБэтч = Сумма + СуммаОтнестиНаПустойДокумент;
		СуммаВалОтнестиНаПоследнийБэтч = СуммаUSD + СуммаВалОтнестиНаПустойДокумент;
		
	КонецЕсли;
	
	Если СуммаОтнестиНаПоследнийБэтч <> 0 ИЛИ СуммаВалОтнестиНаПоследнийБэтч <> 0 Тогда
		
		Результат = МассивРезультатов[1];
		
		Если Результат.Пустой() Тогда
			CashBatch = Документы.CashBatch.ПустаяСсылка();
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			CashBatch = Выборка.CashBatch;
		КонецЕсли;
		
		НовоеДвижение = Движения.UnallocatedCash.Добавить();

		НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//НовоеДвижение.Период = Реквизиты.DateLawson;
		НовоеДвижение.Период = Реквизиты.AccountingPeriod;
		НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
		НовоеДвижение.Company = Реквизиты.Company;
		НовоеДвижение.Location = Реквизиты.Location;
		НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
		//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
		НовоеДвижение.Client = Реквизиты.Client;
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
			НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
		КонецЕсли;
		НовоеДвижение.CashBatch = CashBatch;
		//НовоеДвижение.Account = Реквизиты.AccountLawson;
		НовоеДвижение.Account = Реквизиты.Account;
		НовоеДвижение.AU = Реквизиты.AU;
		НовоеДвижение.Currency = Реквизиты.Currency;
		
		НовоеДвижение.Amount = СуммаОтнестиНаПоследнийБэтч;
		НовоеДвижение.BaseAmount = СуммаВалОтнестиНаПоследнийБэтч;
		
	КонецЕсли;
	
	Движения.UnallocatedCash.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРучнымКорректировкам(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.ManualTransactions.Добавить();
	
	НовоеДвижение.ВидДвижения = ?(Сумма > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
	
	НовоеДвижение.Период = Реквизиты.AccountingPeriod;
	НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
	НовоеДвижение.Company = Реквизиты.Company;
	НовоеДвижение.Location = Реквизиты.Location;
	//НовоеДвижение.GeoMarket = Реквизиты.GeoMarket;
	//НовоеДвижение.SubGeoMarket = Реквизиты.SubGeoMarket;
	//НовоеДвижение.Segment = Реквизиты.Segment;
	//НовоеДвижение.SubSegment = Реквизиты.SubSegment;
	НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
	//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
	НовоеДвижение.Client = Реквизиты.Client;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
		НовоеДвижение.ClientID = Реквизиты.Reference;
	КонецЕсли;
	НовоеДвижение.РучнаяКорректировка = СвязанныеДокументы.РучнаяКорректировка;
	//НовоеДвижение.Account = Реквизиты.AccountLawson;
	НовоеДвижение.Account = Реквизиты.Account;
	НовоеДвижение.AU = Реквизиты.AU;
	НовоеДвижение.Currency = Реквизиты.Currency;
	
	НовоеДвижение.Amount = ?(Сумма >= 0, Сумма, -Сумма);
	НовоеДвижение.BaseAmount = ?(Сумма >= 0, СуммаUSD, -СуммаUSD);
	
	Движения.ManualTransactions.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьНачислениеUnallocatedMemo(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.UnallocatedMemo.Добавить();
	
	НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
	НовоеДвижение.Период = Реквизиты.AccountingPeriod;
	НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
	НовоеДвижение.Company = Реквизиты.Company;
	НовоеДвижение.Location = Реквизиты.Location;
	//НовоеДвижение.SubGeoMarket = Реквизиты.SubGeoMarket;
	//НовоеДвижение.Segment = Реквизиты.Segment;
	//НовоеДвижение.SubSegment = Реквизиты.SubSegment;
	НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
	//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
	НовоеДвижение.Client = Реквизиты.Client;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
		НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
	КонецЕсли;
	НовоеДвижение.Memo = СвязанныеДокументы.Memo;
	//НовоеДвижение.Account = Реквизиты.AccountLawson;
	НовоеДвижение.Account = Реквизиты.Account;
	НовоеДвижение.AU = Реквизиты.AU;
	НовоеДвижение.Currency = Реквизиты.Currency;
	
	НовоеДвижение.Amount = Сумма;
	НовоеДвижение.BaseAmount = СуммаUSD;
	
	Движения.UnallocatedMemo.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьДвижениеPayments(Реквизиты, СвязанныеДокументы, Движения, Сумма, ИспользоватьВалютуТранзакции, ЗаписыватьТолькоБэч, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Сумма <> 0 Тогда
		Если ЗначениеЗаполнено(СвязанныеДокументы.CashBatch) Тогда
			НовоеДвижение = Движения.Payments.Добавить();
			НовоеДвижение.Период = Реквизиты.AccountingPeriod;
			НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
			НовоеДвижение.Company = Реквизиты.Company;
			НовоеДвижение.AU = Реквизиты.AU;
			НовоеДвижение.Location = Реквизиты.Location;
			НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
			НовоеДвижение.Client = Реквизиты.Client;
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
				НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
			КонецЕсли;
			НовоеДвижение.Account = Реквизиты.Account;
			Если ЗаписыватьТолькоБэч Тогда
				НовоеДвижение.Invoice = Документы.Invoice.ПустаяСсылка();
				НовоеДвижение.CashBatch = СвязанныеДокументы.CashBatch;
			Иначе
				НовоеДвижение.Invoice = ?(ЗначениеЗаполнено(СвязанныеДокументы.Invoice), СвязанныеДокументы.Invoice, СвязанныеДокументы.Memo);
				НовоеДвижение.CashBatch = СвязанныеДокументы.CashBatch;
			КонецЕсли;
			Если ИспользоватьВалютуТранзакции Тогда
				НовоеДвижение.Currency = Реквизиты.Currency;
			Иначе
				НовоеДвижение.Currency = Константы.rgsВалютаUSD.Получить();
			КонецЕсли;
			НовоеДвижение.Amount = Сумма;
		Иначе
			ДвиженияUnallocatedCash = Движения.UnallocatedCash.Выгрузить();
			Если ДвиженияUnallocatedCash.Количество() > 0 Тогда
				Для каждого Движение Из ДвиженияUnallocatedCash Цикл
					НовоеДвижение = Движения.Payments.Добавить();
					НовоеДвижение.Период = Реквизиты.AccountingPeriod;
					НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
					НовоеДвижение.Company = Реквизиты.Company;
					НовоеДвижение.AU = Реквизиты.AU;
					НовоеДвижение.Location = Реквизиты.Location;
					НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
					НовоеДвижение.Client = Реквизиты.Client;
					Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
						НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
					КонецЕсли;
					НовоеДвижение.Account = Реквизиты.Account;
					Если ЗаписыватьТолькоБэч Тогда
						НовоеДвижение.Invoice = Документы.Invoice.ПустаяСсылка();
						НовоеДвижение.CashBatch = Движение.CashBatch;
					Иначе
						НовоеДвижение.Invoice = ?(ЗначениеЗаполнено(СвязанныеДокументы.Invoice), СвязанныеДокументы.Invoice, СвязанныеДокументы.Memo);
						НовоеДвижение.CashBatch = Движение.CashBatch;
					КонецЕсли;
					НовоеДвижение.Currency = Движение.Currency;
					НовоеДвижение.Amount = Движение.Amount * ?(Движение.ВидДвижения = ВидДвиженияНакопления.Приход, 1, -1);
				КонецЦикла;
			Иначе
				НовоеДвижение = Движения.Payments.Добавить();
				НовоеДвижение.Период = Реквизиты.AccountingPeriod;
				НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
				НовоеДвижение.Company = Реквизиты.Company;
				НовоеДвижение.AU = Реквизиты.AU;
				НовоеДвижение.Location = Реквизиты.Location;
				НовоеДвижение.SubSubSegment = Реквизиты.SubSubSegment;
				НовоеДвижение.Client = Реквизиты.Client;
				Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
					НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
				КонецЕсли;
				НовоеДвижение.Account = Реквизиты.Account;
				НовоеДвижение.Invoice = ?(ЗначениеЗаполнено(СвязанныеДокументы.Invoice), СвязанныеДокументы.Invoice, СвязанныеДокументы.Memo);
				Если ЗначениеЗаполнено(СвязанныеДокументы.CashBatch) Тогда
					НовоеДвижение.CashBatch = СвязанныеДокументы.CashBatch;
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	CashBatchAllocation.CashBatch
						|ИЗ
						|	РегистрСведений.CashBatchAllocation КАК CashBatchAllocation
						|ГДЕ
						|	CashBatchAllocation.BatchAllocation = &BatchAllocation
						|	И CashBatchAllocation.CashBatch <> ЗНАЧЕНИЕ(Документ.CashBatch.ПустаяСсылка)
						|
						|УПОРЯДОЧИТЬ ПО
						|	CashBatchAllocation.CashBatch.МоментВремени УБЫВ";
					
					Запрос.УстановитьПараметр("BatchAllocation", СвязанныеДокументы.BatchAllocation);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Если РезультатЗапроса.Пустой() Тогда
						НовоеДвижение.CashBatch = Документы.CashBatch.ПустаяСсылка();
					Иначе
						Выборка = РезультатЗапроса.Выбрать();
						Выборка.Следующий();
						НовоеДвижение.CashBatch = Выборка.CashBatch;
					КонецЕсли;
				КонецЕсли;
				Если ИспользоватьВалютуТранзакции Тогда
					НовоеДвижение.Currency = Реквизиты.Currency;
				Иначе
					НовоеДвижение.Currency = Константы.rgsВалютаUSD.Получить();
				КонецЕсли;
				
				НовоеДвижение.Amount = Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Движения.Payments.Записывать = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьДвижениеRevenue(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.Revenue.Добавить();
	
	НовоеДвижение.Период = Реквизиты.AccountingPeriod;
	НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
	НовоеДвижение.Company = Реквизиты.Company;
	//НовоеДвижение.Client = Реквизиты.КонтрагентLawson;
	НовоеДвижение.Client = Реквизиты.Client;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
		НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
	КонецЕсли;
	
	Если Реквизиты.System = "GL" Тогда
		НовоеДвижение.Document = СвязанныеДокументы.РучнаяКорректировка;
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
			НовоеДвижение.ClientID = Реквизиты.Reference;
		КонецЕсли;
	ИначеЕсли Реквизиты.System = "BL" И Реквизиты.SourceCode = "JE" Тогда
		НовоеДвижение.Document = СвязанныеДокументы.SalesOrder;
	ИначеЕсли (Реквизиты.System = "BL" И (Реквизиты.SourceCode = "DM" ИЛИ Реквизиты.SourceCode = "CM"))
		ИЛИ (Реквизиты.System = "AR" И (Реквизиты.SourceCode = "RM" ИЛИ Реквизиты.SourceCode = "RQ")) Тогда
		НовоеДвижение.Document = ?(ЗначениеЗаполнено(СвязанныеДокументы.Invoice), СвязанныеДокументы.Invoice, СвязанныеДокументы.Memo);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Filed to determine revenue document!", , , , Отказ);
	КонецЕсли;
	
	//НовоеДвижение.Account = Реквизиты.AccountLawson;
	НовоеДвижение.Account = Реквизиты.Account;
	НовоеДвижение.AU = Реквизиты.AU;
	НовоеДвижение.Currency = Реквизиты.Currency;
	НовоеДвижение.LegalEntity = Реквизиты.LegalEntity;
	
	НовоеДвижение.Amount = Сумма;
	НовоеДвижение.BaseAmount = СуммаUSD;
	
	Движения.Revenue.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьДвижениеInvoicedDebts(Реквизиты, СвязанныеДокументы, Движения, Сумма, СуммаUSD, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.InvoicedDebts.Добавить();
	
	НовоеДвижение.Период = Реквизиты.AccountingPeriod;
	НовоеДвижение.Source = Перечисления.ТипыСоответствий.Lawson;
	НовоеДвижение.Company = Реквизиты.Company;
	НовоеДвижение.Client = Реквизиты.Client;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Client, "Предопределенный") Тогда
		НовоеДвижение.ClientID = Реквизиты.CustomerNumber;
	КонецЕсли;
	
	НовоеДвижение.Invoice = СвязанныеДокументы.Invoice;
	
	НовоеДвижение.Account = Реквизиты.Account;
	НовоеДвижение.AU = Реквизиты.AU;
	НовоеДвижение.Currency = Реквизиты.Currency;
	НовоеДвижение.LegalEntity = Реквизиты.LegalEntity;
	
	НовоеДвижение.Amount = Сумма;
	НовоеДвижение.BaseAmount = СуммаUSD;
	
	Движения.InvoicedDebts.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРС_ПериодыАктивностиДоговров(Инвойс,Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НовоеДвижение = Движения.ПериодыАктивностиДоговоров.Добавить();
	НовоеДвижение.Инвойс = Инвойс;
	НовоеДвижение.Период = Дата;
	НовоеДвижение.Транзакция = Ссылка;
	Движения.ПериодыАктивностиДоговоров.Записывать = Истина;
	
КонецПроцедуры

Процедура СоздатьКоррекировкуТранзакцииПоИзменениюВалюты(Реквизиты, СвязанныеДокументы)
	
	ДокументРасчетов = ?(ЗначениеЗаполнено(СвязанныеДокументы.Invoice), СвязанныеДокументы.Invoice, СвязанныеДокументы.Memo);
	РеквизитыДокументаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетов, "Currency, Дата");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеКурсыВалют.Курс КАК Курс
		|ИЗ
		|	РегистрСведений.ВнутренниеКурсыВалют КАК ВнутренниеКурсыВалют
		|ГДЕ
		|	ВнутренниеКурсыВалют.Период = &Период
		|	И ВнутренниеКурсыВалют.Валюта = &Валюта";
	
	Запрос.УстановитьПараметр("Валюта", РеквизитыДокументаРасчетов.Currency);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(РеквизитыДокументаРасчетов.Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		КорректировкаТразакции = Документы.КорректировкаТранзакции.СоздатьДокумент();
		КорректировкаТразакции.Дата = ТекущаяДата();
		КорректировкаТразакции.ДокументОснование = Ссылка;
		ЗаполнитьЗначенияСвойств(КорректировкаТразакции, Реквизиты, "Company,Account,AU,Location,SubSubSegment,LegalEntity");
		КорректировкаТразакции.Currency = РеквизитыДокументаРасчетов.Currency;
		СтрокаТабЧасти = КорректировкаТразакции.ДетализацияПоКлиенту.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабЧасти,Реквизиты);
	
		СтрокаТабЧасти.Amount = Реквизиты.BaseAmount * ВыборкаДетальныеЗаписи.Курс;
		//СтрокаТабЧасти.BaseAmount = РеквизитыТранзакции.BaseAmount;
		//СтрокаТабЧасти.Client = Реквизиты.Client;
		КорректировкаТразакции.Комментарий = "The document was created automatically in the process of DSS loading.";
		КорректировкаТразакции.Ответственный = Пользователи.ТекущийПользователь();
		КорректировкаТразакции.Записать(РежимЗаписиДокумента.Запись);
		
		ТекДок = КорректировкаТразакции.Ссылка.ПолучитьОбъект();
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать """ + ТекДок + """! ");
			Возврат;
		КонецПопытки;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не указан курс для " + РеквизитыДокументаРасчетов.Currency + 
			" на дату " + РеквизитыДокументаРасчетов.Дата + "! ");

	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
